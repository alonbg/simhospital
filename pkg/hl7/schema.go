// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains the schemas for HL7 messages, segments and values.
// It has been auto-generated from the HL7v2 schemas.

package hl7

import "reflect"

//  AD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type AD struct {
	StreetAddress              *ST `hl7:"false,Street Address" json:"street_address,omitempty"`
	OtherDesignation           *ST `hl7:"false,Other Designation" json:"other_designation,omitempty"`
	City                       *ST `hl7:"false,City" json:"city,omitempty"`
	StateOrProvince            *ST `hl7:"false,State Or Province" json:"state_or_province,omitempty"`
	ZipOrPostalCode            *ST `hl7:"false,Zip Or Postal Code" json:"zip_or_postal_code,omitempty"`
	Country                    *ID `hl7:"false,Country" json:"country,omitempty"`
	AddressType                *ID `hl7:"false,Address Type" json:"address_type,omitempty"`
	OtherGeographicDesignation *ST `hl7:"false,Other Geographic Designation" json:"other_geographic_designation,omitempty"`
}

//  AUI represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type AUI struct {
	AuthorizationNumber *ST `hl7:"false,Authorization Number" json:"authorization_number,omitempty"`
	Date                *DT `hl7:"false,Date" json:"date,omitempty"`
	Source              *ST `hl7:"false,Source" json:"source,omitempty"`
}

//  CCD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CCD struct {
	InvocationEvent *ID `hl7:"false,Invocation Event" json:"invocation_event,omitempty"`
	DateTime        *TS `hl7:"false,Date/Time" json:"date_time,omitempty"`
}

//  CCP represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CCP struct {
	ChannelCalibrationSensitivityCorrectionFactor *NM `hl7:"false,Channel Calibration Sensitivity Correction Factor" json:"channel_calibration_sensitivity_correction_factor,omitempty"`
	ChannelCalibrationBaseline                    *NM `hl7:"false,Channel Calibration Baseline" json:"channel_calibration_baseline,omitempty"`
	ChannelCalibrationTimeSkew                    *NM `hl7:"false,Channel Calibration Time Skew" json:"channel_calibration_time_skew,omitempty"`
}

//  CD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CD struct {
	ChannelIdentifier            *WVI `hl7:"false,Channel Identifier" json:"channel_identifier,omitempty"`
	WaveformSource               *WVS `hl7:"false,Waveform Source" json:"waveform_source,omitempty"`
	ChannelSensitivityUnits      *CSU `hl7:"false,Channel Sensitivity/Units" json:"channel_sensitivity_units,omitempty"`
	ChannelCalibrationParameters *CCP `hl7:"false,Channel Calibration Parameters" json:"channel_calibration_parameters,omitempty"`
	ChannelSamplingFrequency     *NM  `hl7:"false,Channel Sampling Frequency" json:"channel_sampling_frequency,omitempty"`
	MinimumMaximumDataValues     *NR  `hl7:"false,Minimum/Maximum Data Values" json:"minimum_maximum_data_values,omitempty"`
}

//  CE represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CE struct {
	Identifier                  *ST `hl7:"false,Identifier" json:"identifier,omitempty"`
	Text                        *ST `hl7:"false,Text" json:"text,omitempty"`
	NameOfCodingSystem          *ID `hl7:"false,Name Of Coding System" json:"name_of_coding_system,omitempty"`
	AlternateIdentifier         *ST `hl7:"false,Alternate Identifier" json:"alternate_identifier,omitempty"`
	AlternateText               *ST `hl7:"false,Alternate Text" json:"alternate_text,omitempty"`
	NameOfAlternateCodingSystem *ID `hl7:"false,Name Of Alternate Coding System" json:"name_of_alternate_coding_system,omitempty"`
}

//  CF represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CF struct {
	Identifier                  *ST `hl7:"false,Identifier" json:"identifier,omitempty"`
	FormattedText               *FT `hl7:"false,Formatted Text" json:"formatted_text,omitempty"`
	NameOfCodingSystem          *ID `hl7:"false,Name Of Coding System" json:"name_of_coding_system,omitempty"`
	AlternateIdentifier         *ST `hl7:"false,Alternate Identifier" json:"alternate_identifier,omitempty"`
	AlternateFormattedText      *FT `hl7:"false,Alternate Formatted Text" json:"alternate_formatted_text,omitempty"`
	NameOfAlternateCodingSystem *ID `hl7:"false,Name Of Alternate Coding System" json:"name_of_alternate_coding_system,omitempty"`
}

//  CK represents the corresponding HL7 datatype.
//  Definition from HL7 2.4
type CK struct {
	IDNumber                                   *NM `hl7:"false,ID Number" json:"id_number,omitempty"`
	CheckDigit                                 *NM `hl7:"false,Check Digit" json:"check_digit,omitempty"`
	CodeIdentifyingTheCheckDigitSchemeEmployed *ID `hl7:"false,Code Identifying The Check Digit Scheme Employed" json:"code_identifying_the_check_digit_scheme_employed,omitempty"`
	AssigningAuthority                         *HD `hl7:"false,Assigning Authority" json:"assigning_authority,omitempty"`
}

//  CK_ACCOUNT_NO represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CK_ACCOUNT_NO struct {
	AccountNumber    *NM `hl7:"false,Account Number" json:"account_number,omitempty"`
	CheckDigit       *NM `hl7:"false,Check Digit" json:"check_digit,omitempty"`
	CheckDigitScheme *ID `hl7:"false,Check Digit Scheme" json:"check_digit_scheme,omitempty"`
	FacilityID       *ID `hl7:"false,Facility ID" json:"facility_id,omitempty"`
}

//  CK_PAT_ID represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CK_PAT_ID struct {
	PatientID        *ST `hl7:"false,Patient ID" json:"patient_id,omitempty"`
	CheckDigit       *NM `hl7:"false,Check Digit" json:"check_digit,omitempty"`
	CheckDigitScheme *ID `hl7:"false,Check Digit Scheme" json:"check_digit_scheme,omitempty"`
	FacilityID       *ID `hl7:"false,Facility ID" json:"facility_id,omitempty"`
}

//  CM_ABS_RANGE represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_ABS_RANGE struct {
	Range            *CM `hl7:"false,Range" json:"range,omitempty"`
	NumericChange    *NM `hl7:"false,Numeric Change" json:"numeric_change,omitempty"`
	PercentPerChange *NM `hl7:"false,Percent Per Change" json:"percent_per_change,omitempty"`
	Days             *NM `hl7:"false,Days" json:"days,omitempty"`
}

//  CM_AUI represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_AUI struct {
	AuthorizationNumber *ST `hl7:"false,Authorization Number" json:"authorization_number,omitempty"`
	Date                *TS `hl7:"false,Date" json:"date,omitempty"`
	Source              *ST `hl7:"false,Source" json:"source,omitempty"`
}

//  CM_BATCH_TOTAL represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_BATCH_TOTAL struct {
	BatchTotal1 *NM `hl7:"false,Batch Total 1" json:"batch_total_1,omitempty"`
	BatchTotal2 *NM `hl7:"false,Batch Total 2" json:"batch_total_2,omitempty"`
}

//  CM_CCD represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_CCD struct {
	WhenToChargeCode *ID `hl7:"false,When To Charge Code" json:"when_to_charge_code,omitempty"`
	DateTime         *TS `hl7:"false,Date/Time" json:"date_time,omitempty"`
}

//  CM_DDI represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_DDI struct {
	DelayDays    *NM `hl7:"false,Delay Days" json:"delay_days,omitempty"`
	Amount       *NM `hl7:"false,Amount" json:"amount,omitempty"`
	NumberOfDays *NM `hl7:"false,Number Of Days" json:"number_of_days,omitempty"`
}

//  CM_DIN represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_DIN struct {
	Date            *TS `hl7:"false,Date" json:"date,omitempty"`
	InstitutionName *CE `hl7:"false,Institution Name" json:"institution_name,omitempty"`
}

//  CM_DLD represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_DLD struct {
	DischargeLocation *ID `hl7:"false,Discharge Location" json:"discharge_location,omitempty"`
	EffectiveDate     *TS `hl7:"false,Effective Date" json:"effective_date,omitempty"`
}

//  CM_DLT represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_DLT struct {
	Range            *CM `hl7:"false,Range" json:"range,omitempty"`
	NumericThreshold *NM `hl7:"false,Numeric Threshold" json:"numeric_threshold,omitempty"`
	Change           *ST `hl7:"false,Change" json:"change,omitempty"`
	LengthOfTimeDays *NM `hl7:"false,Length Of Time-Days" json:"length_of_time_days,omitempty"`
}

//  CM_DTN represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_DTN struct {
	DayType      *IS `hl7:"false,Day Type" json:"day_type,omitempty"`
	NumberOfDays *NM `hl7:"false,Number Of Days" json:"number_of_days,omitempty"`
}

//  CM_EIP represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_EIP struct {
	ParentSPlacerOrderNumber *EI `hl7:"false,Parent´s Placer Order Number" json:"parent_s_placer_order_number,omitempty"`
	ParentSFillerOrderNumber *EI `hl7:"false,Parent´s Filler Order Number" json:"parent_s_filler_order_number,omitempty"`
}

//  CM_ELD represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_ELD struct {
	SegmentID            *ST `hl7:"false,Segment ID" json:"segment_id,omitempty"`
	Sequence             *NM `hl7:"false,Sequence" json:"sequence,omitempty"`
	FieldPosition        *NM `hl7:"false,Field Position" json:"field_position,omitempty"`
	CodeIdentifyingError *CE `hl7:"false,Code Identifying Error" json:"code_identifying_error,omitempty"`
}

//  CM_FILLER represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_FILLER struct {
	UniqueFillerId      *ID `hl7:"false,Unique Filler Id" json:"unique_filler_id,omitempty"`
	FillerApplicationID *ID `hl7:"false,Filler Application ID" json:"filler_application_id,omitempty"`
}

//  CM_FINANCE represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_FINANCE struct {
	FinancialClassID *ID `hl7:"false,Financial Class ID" json:"financial_class_id,omitempty"`
	EffectiveDate    *TS `hl7:"false,Effective Date" json:"effective_date,omitempty"`
}

//  CM_GROUP_ID represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_GROUP_ID struct {
	UniqueGroupId       *ID `hl7:"false,Unique Group Id" json:"unique_group_id,omitempty"`
	PlacerApplicationId *ID `hl7:"false,Placer Application Id" json:"placer_application_id,omitempty"`
}

//  CM_INTERNAL_LOCATION represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_INTERNAL_LOCATION struct {
	NurseUnitStation *ID `hl7:"false,Nurse Unit (Station)" json:"nurse_unit_station,omitempty"`
	Room             *ID `hl7:"false,Room" json:"room,omitempty"`
	Bed              *ID `hl7:"false,Bed" json:"bed,omitempty"`
	FacilityID       *ID `hl7:"false,Facility ID" json:"facility_id,omitempty"`
	BedStatus        *ID `hl7:"false,Bed Status" json:"bed_status,omitempty"`
	Etage            *ID `hl7:"false,Etage" json:"etage,omitempty"`
	Klinik           *ID `hl7:"false,Klinik" json:"klinik,omitempty"`
	Zentrum          *ID `hl7:"false,Zentrum" json:"zentrum,omitempty"`
}

//  CM_JOB_CODE represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_JOB_CODE struct {
	JobCode                *ID `hl7:"false,Job Code" json:"job_code,omitempty"`
	EmployeeClassification *ID `hl7:"false,Employee Classification" json:"employee_classification,omitempty"`
}

//  CM_LA1 represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_LA1 struct {
	PointOfCare                *ST `hl7:"false,Point Of Care" json:"point_of_care,omitempty"`
	Room                       *IS `hl7:"false,Room" json:"room,omitempty"`
	Bed                        *IS `hl7:"false,Bed" json:"bed,omitempty"`
	Facility                   *HD `hl7:"false,Facility" json:"facility,omitempty"`
	LocationStatus             *IS `hl7:"false,Location Status" json:"location_status,omitempty"`
	PersonLocationType         *IS `hl7:"false,Person Location Type" json:"person_location_type,omitempty"`
	Building                   *IS `hl7:"false,Building" json:"building,omitempty"`
	Floor                      *ST `hl7:"false,Floor" json:"floor,omitempty"`
	StreetAddress              *ST `hl7:"false,Street Address" json:"street_address,omitempty"`
	OtherDesignation           *ST `hl7:"false,Other Designation" json:"other_designation,omitempty"`
	City                       *ST `hl7:"false,City" json:"city,omitempty"`
	StateOrProvince            *ST `hl7:"false,State Or Province" json:"state_or_province,omitempty"`
	ZipOrPostalCode            *ST `hl7:"false,Zip Or Postal Code" json:"zip_or_postal_code,omitempty"`
	Country                    *ID `hl7:"false,Country" json:"country,omitempty"`
	AddressType                *ID `hl7:"false,Address Type" json:"address_type,omitempty"`
	OtherGeographicDesignation *ST `hl7:"false,Other Geographic Designation" json:"other_geographic_designation,omitempty"`
}

//  CM_LICENSE_NO represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_LICENSE_NO struct {
	LicenseNumber               *ST `hl7:"false,License Number" json:"license_number,omitempty"`
	IssuingStateProvinceCountry *ST `hl7:"false,Issuing State,Province,Country" json:"issuing_state_province_country,omitempty"`
}

//  CM_MOC represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_MOC struct {
	DollarAmount *MO `hl7:"false,Dollar Amount" json:"dollar_amount,omitempty"`
	ChargeCode   *CE `hl7:"false,Charge Code" json:"charge_code,omitempty"`
}

//  CM_MSG represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_MSG struct {
	MessageType  *ID `hl7:"false,Message Type" json:"message_type,omitempty"`
	TriggerEvent *ID `hl7:"false,Trigger Event" json:"trigger_event,omitempty"`
}

//  CM_NDL represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_NDL struct {
	Name               *CN `hl7:"false,Name" json:"name,omitempty"`
	StartDateTime      *TS `hl7:"false,Start Date/Time" json:"start_date_time,omitempty"`
	EndDateTime        *TS `hl7:"false,End Date/Time" json:"end_date_time,omitempty"`
	PointOfCare        *IS `hl7:"false,Point Of Care" json:"point_of_care,omitempty"`
	Room               *IS `hl7:"false,Room" json:"room,omitempty"`
	Bed                *IS `hl7:"false,Bed" json:"bed,omitempty"`
	Facility           *HD `hl7:"false,Facility" json:"facility,omitempty"`
	LocationStatus     *IS `hl7:"false,Location Status" json:"location_status,omitempty"`
	PersonLocationType *IS `hl7:"false,Person Location Type" json:"person_location_type,omitempty"`
	Building           *IS `hl7:"false,Building" json:"building,omitempty"`
	Floor              *ST `hl7:"false,Floor" json:"floor,omitempty"`
}

//  CM_OCD represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_OCD struct {
	OccurrenceCode *CE `hl7:"false,Occurrence Code" json:"occurrence_code,omitempty"`
	OccurrenceDate *DT `hl7:"false,Occurrence Date" json:"occurrence_date,omitempty"`
}

//  CM_OSP represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_OSP struct {
	OccurrenceSpanCode      *CE `hl7:"false,Occurrence Span Code" json:"occurrence_span_code,omitempty"`
	OccurrenceSpanStartDate *DT `hl7:"false,Occurrence Span Start Date" json:"occurrence_span_start_date,omitempty"`
	OccurrenceSpanStopDate  *DT `hl7:"false,Occurrence Span Stop Date" json:"occurrence_span_stop_date,omitempty"`
}

//  CM_PAT_ID represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_PAT_ID struct {
	PatientID        *ST `hl7:"false,Patient ID" json:"patient_id,omitempty"`
	CheckDigit       *NM `hl7:"false,Check Digit" json:"check_digit,omitempty"`
	CheckDigitScheme *ID `hl7:"false,Check Digit Scheme" json:"check_digit_scheme,omitempty"`
	FacilityID       *ID `hl7:"false,Facility ID" json:"facility_id,omitempty"`
	Type             *ID `hl7:"false,Type" json:"type,omitempty"`
}

//  CM_PAT_ID_0192 represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_PAT_ID_0192 struct {
	PatientID        *ST `hl7:"false,Patient ID" json:"patient_id,omitempty"`
	CheckDigit       *NM `hl7:"false,Check Digit" json:"check_digit,omitempty"`
	CheckDigitScheme *ID `hl7:"false,Check Digit Scheme" json:"check_digit_scheme,omitempty"`
	FacilityID       *ID `hl7:"false,Facility ID" json:"facility_id,omitempty"`
	Type             *ID `hl7:"false,Type" json:"type,omitempty"`
}

//  CM_PCF represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_PCF struct {
	PreCertificationPatientType *IS `hl7:"false,Pre-Certification Patient Type" json:"pre_certification_patient_type,omitempty"`
	PreCertificationRequired    *ID `hl7:"false,Pre-Certification Required" json:"pre_certification_required,omitempty"`
	PreCertificationWindwow     *TS `hl7:"false,Pre-Certification Windwow" json:"pre_certification_windwow,omitempty"`
}

//  CM_PEN represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_PEN struct {
	PenaltyType   *IS `hl7:"false,Penalty Type" json:"penalty_type,omitempty"`
	PenaltyAmount *NM `hl7:"false,Penalty Amount" json:"penalty_amount,omitempty"`
}

//  CM_PI represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_PI struct {
	IDNumber            *ST `hl7:"false,ID Number" json:"id_number,omitempty"`
	TypeOfIDNumber      *IS `hl7:"false,Type Of ID Number" json:"type_of_id_number,omitempty"`
	OtherQualifyingInfo *ST `hl7:"false,Other Qualifying Info" json:"other_qualifying_info,omitempty"`
}

//  CM_PIP represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_PIP struct {
	Privilege      *CE `hl7:"false,Privilege" json:"privilege,omitempty"`
	PrivilegeClass *CE `hl7:"false,Privilege Class" json:"privilege_class,omitempty"`
	ExpirationDate *DT `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
	ActivationDate *DT `hl7:"false,Activation Date" json:"activation_date,omitempty"`
}

//  CM_PLACER represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_PLACER struct {
	UniquePlacerId    *ID `hl7:"false,Unique Placer Id" json:"unique_placer_id,omitempty"`
	PlacerApplication *ID `hl7:"false,Placer Application" json:"placer_application,omitempty"`
}

//  CM_PLN represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_PLN struct {
	IDNumber                 *ST `hl7:"false,ID Number" json:"id_number,omitempty"`
	TypeOfIDNumber           *IS `hl7:"false,Type Of ID Number" json:"type_of_id_number,omitempty"`
	StateOtherQualifyingInfo *ST `hl7:"false,State/Other Qualifying Info" json:"state_other_qualifying_info,omitempty"`
	ExpirationDate           *DT `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
}

//  CM_POSITION represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_POSITION struct {
	Saal  *ST `hl7:"false,Saal" json:"saal,omitempty"`
	Tisch *ST `hl7:"false,Tisch" json:"tisch,omitempty"`
	Stuhl *ST `hl7:"false,Stuhl" json:"stuhl,omitempty"`
}

//  CM_PRACTITIONER represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CM_PRACTITIONER struct {
	ProcedurePractitionerID   *CN `hl7:"false,Procedure Practitioner  ID" json:"procedure_practitioner_id,omitempty"`
	ProcedurePractitionerType *ID `hl7:"false,Procedure Practitioner Type" json:"procedure_practitioner_type,omitempty"`
}

//  CM_PRL represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_PRL struct {
	OBX3ObservationIdentifierOfParentResult *CE `hl7:"false,OBX-3 Observation Identifier Of Parent Result" json:"obx_3_observation_identifier_of_parent_result,omitempty"`
	OBX4SubIDOfParentResult                 *ST `hl7:"false,OBX-4 Sub-ID Of Parent Result" json:"obx_4_sub_id_of_parent_result,omitempty"`
	PartOfOBX5ObservationResultFromParent   *TX `hl7:"false,Part Of OBX-5 Observation Result From Parent" json:"part_of_obx_5_observation_result_from_parent,omitempty"`
}

//  CM_PTA represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_PTA struct {
	PolicyType  *IS `hl7:"false,Policy Type" json:"policy_type,omitempty"`
	AmountClass *IS `hl7:"false,Amount Class" json:"amount_class,omitempty"`
	Amount      *NM `hl7:"false,Amount" json:"amount,omitempty"`
}

//  CM_RANGE represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_RANGE struct {
	LowValue  *CE `hl7:"false,Low Value" json:"low_value,omitempty"`
	HighValue *CE `hl7:"false,High Value" json:"high_value,omitempty"`
}

//  CM_RFR represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_RFR struct {
	ReferenceRange *CM `hl7:"false,Reference Range" json:"reference_range,omitempty"`
	Sex            *IS `hl7:"false,Sex" json:"sex,omitempty"`
	AgeRange       *CM `hl7:"false,Age Range" json:"age_range,omitempty"`
	AgeGestation   *CM `hl7:"false,Age Gestation" json:"age_gestation,omitempty"`
	Species        *TX `hl7:"false,Species" json:"species,omitempty"`
	RaceSubspecies *ST `hl7:"false,Race/Subspecies" json:"race_subspecies,omitempty"`
	Conditions     *TX `hl7:"false,Conditions" json:"conditions,omitempty"`
}

//  CM_RI represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_RI struct {
	RepeatPattern        *IS `hl7:"false,Repeat Pattern" json:"repeat_pattern,omitempty"`
	ExplicitTimeInterval *ST `hl7:"false,Explicit Time Interval" json:"explicit_time_interval,omitempty"`
}

//  CM_RMC represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_RMC struct {
	RoomType       *IS `hl7:"false,Room Type" json:"room_type,omitempty"`
	AmountType     *IS `hl7:"false,Amount Type" json:"amount_type,omitempty"`
	CoverageAmount *NM `hl7:"false,Coverage Amount" json:"coverage_amount,omitempty"`
}

//  CM_SPD represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_SPD struct {
	SpecialtyName       *ST `hl7:"false,Specialty Name" json:"specialty_name,omitempty"`
	GoverningBoard      *ST `hl7:"false,Governing Board" json:"governing_board,omitempty"`
	EligibleOrCertified *ID `hl7:"false,Eligible Or Certified" json:"eligible_or_certified,omitempty"`
	DateOfCertification *DT `hl7:"false,Date Of Certification" json:"date_of_certification,omitempty"`
}

//  CM_SPS represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_SPS struct {
	SpecimenSourceNameOrCode     *CE `hl7:"false,Specimen Source Name Or Code" json:"specimen_source_name_or_code,omitempty"`
	Additives                    *TX `hl7:"false,Additives" json:"additives,omitempty"`
	Freetext                     *TX `hl7:"false,Freetext" json:"freetext,omitempty"`
	BodySite                     *CE `hl7:"false,Body Site" json:"body_site,omitempty"`
	SiteModifier                 *CE `hl7:"false,Site Modifier" json:"site_modifier,omitempty"`
	CollectionModifierMethodCode *CE `hl7:"false,Collection Modifier Method Code" json:"collection_modifier_method_code,omitempty"`
}

//  CM_UVC represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_UVC struct {
	ValueCode   *IS `hl7:"false,Value Code" json:"value_code,omitempty"`
	ValueAmount *NM `hl7:"false,Value Amount" json:"value_amount,omitempty"`
}

//  CM_VR represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_VR struct {
	FirstDataCodeValue *ST `hl7:"false,First Data Code Value" json:"first_data_code_value,omitempty"`
	LastDataCodeCalue  *ST `hl7:"false,Last Data Code Calue" json:"last_data_code_calue,omitempty"`
}

//  CM_WVI represents the corresponding HL7 datatype.
//  Definition from HL7 2.3
type CM_WVI struct {
	ChannelNumber *NM `hl7:"false,Channel Number" json:"channel_number,omitempty"`
	ChannelName   *ST `hl7:"false,Channel Name" json:"channel_name,omitempty"`
}

//  CN represents the corresponding HL7 datatype.
//  Definition from HL7 2.4
type CN struct {
	IDNumber                                    *ST `hl7:"false,ID Number" json:"id_number,omitempty"`
	FamilyName                                  *FN `hl7:"false,Family Name" json:"family_name,omitempty"`
	GivenName                                   *ST `hl7:"false,Given Name" json:"given_name,omitempty"`
	SecondAndFurtherGivenNamesOrInitialsThereof *ST `hl7:"false,Second And Further Given Names Or Initials Thereof" json:"second_and_further_given_names_or_initials_thereof,omitempty"`
	SuffixEGJROrIII                             *ST `hl7:"false,Suffix (E.G., JR Or III)" json:"suffix_egjr_or_iii,omitempty"`
	PrefixEGDR                                  *ST `hl7:"false,Prefix (E.G., DR)" json:"prefix_egdr,omitempty"`
	DegreeEGMD                                  *IS `hl7:"false,Degree (E.G., MD)" json:"degree_egmd,omitempty"`
	SourceTable                                 *IS `hl7:"false,Source Table" json:"source_table,omitempty"`
	AssigningAuthority                          *HD `hl7:"false,Assigning Authority" json:"assigning_authority,omitempty"`
}

//  CNE represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CNE struct {
	Identifier                     *ST `hl7:"false,Identifier" json:"identifier,omitempty"`
	Text                           *ST `hl7:"false,Text" json:"text,omitempty"`
	NameOfCodingSystem             *ID `hl7:"false,Name Of Coding System" json:"name_of_coding_system,omitempty"`
	AlternateIdentifier            *ST `hl7:"false,Alternate Identifier" json:"alternate_identifier,omitempty"`
	AlternateText                  *ST `hl7:"false,Alternate Text" json:"alternate_text,omitempty"`
	NameOfAlternateCodingSystem    *ID `hl7:"false,Name Of Alternate Coding System" json:"name_of_alternate_coding_system,omitempty"`
	CodingSystemVersionID          *ST `hl7:"false,Coding System Version ID" json:"coding_system_version_id,omitempty"`
	AlternateCodingSystemVersionID *ST `hl7:"false,Alternate Coding System Version ID" json:"alternate_coding_system_version_id,omitempty"`
	OriginalText                   *ST `hl7:"false,Original Text" json:"original_text,omitempty"`
}

//  CNN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CNN struct {
	IDNumber                                    *ST `hl7:"false,ID Number" json:"id_number,omitempty"`
	FamilyName                                  *ST `hl7:"false,Family Name" json:"family_name,omitempty"`
	GivenName                                   *ST `hl7:"false,Given Name" json:"given_name,omitempty"`
	SecondAndFurtherGivenNamesOrInitialsThereof *ST `hl7:"false,Second And Further Given Names Or Initials Thereof" json:"second_and_further_given_names_or_initials_thereof,omitempty"`
	SuffixEGJROrIII                             *ST `hl7:"false,Suffix (E.G., JR Or III)" json:"suffix_egjr_or_iii,omitempty"`
	PrefixEGDR                                  *ST `hl7:"false,Prefix (E.G., DR)" json:"prefix_egdr,omitempty"`
	DegreeEGMD                                  *IS `hl7:"false,Degree (E.G., MD" json:"degree_egmd,omitempty"`
	SourceTable                                 *IS `hl7:"false,Source Table" json:"source_table,omitempty"`
	AssigningAuthorityNamespaceID               *IS `hl7:"false,Assigning Authority   - Namespace ID" json:"assigning_authority_namespace_id,omitempty"`
	AssigningAuthorityUniversalID               *ST `hl7:"false,Assigning Authority  - Universal ID" json:"assigning_authority_universal_id,omitempty"`
	AssigningAuthorityUniversalIDType           *ID `hl7:"false,Assigning Authority  - Universal ID Type" json:"assigning_authority_universal_id_type,omitempty"`
}

//  CNS231 represents the corresponding HL7 datatype.
//  Definition from HL7 2.3.1
type CNS231 struct {
	StartingNotificationReferenceNumber *NM `hl7:"false,Starting Notification Reference Number" json:"starting_notification_reference_number,omitempty"`
	EndingNotificationReferenceNumber   *NM `hl7:"false,Ending Notification Reference Number" json:"ending_notification_reference_number,omitempty"`
	StartingNotificationDateTime        *TS `hl7:"false,Starting Notification Date/Time" json:"starting_notification_date_time,omitempty"`
	EndingNotificationDateTime          *TS `hl7:"false,Ending Notification Date/Time" json:"ending_notification_date_time,omitempty"`
	StartingNotificationCode            *CE `hl7:"false,Starting Notification Code" json:"starting_notification_code,omitempty"`
	EndingNotificationCode              *CE `hl7:"false,Ending Notification Code" json:"ending_notification_code,omitempty"`
	DegreeEGMD                          *IS `hl7:"false,Degree (E.G., MD)" json:"degree_egmd,omitempty"`
	SourceTable                         *IS `hl7:"false,Source Table" json:"source_table,omitempty"`
	AssigningAuthorityNamespaceID       *IS `hl7:"false,Assigning Authority Namespace ID" json:"assigning_authority_namespace_id,omitempty"`
	AssigningAuthorityUniversalID       *ST `hl7:"false,Assigning Authority Universal ID" json:"assigning_authority_universal_id,omitempty"`
	AssigningAuthorityUniversalIDType   *ID `hl7:"false,Assigning Authority Universal ID Type" json:"assigning_authority_universal_id_type,omitempty"`
}

//  CN_PERSON represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CN_PERSON struct {
	IDNumber            *ID `hl7:"false,ID Number" json:"id_number,omitempty"`
	FamiliyName         *ST `hl7:"false,Familiy Name" json:"familiy_name,omitempty"`
	GivenName           *ST `hl7:"false,Given Name" json:"given_name,omitempty"`
	MiddleInitialOrName *ST `hl7:"false,Middle Initial Or Name" json:"middle_initial_or_name,omitempty"`
	SuffixEGJROrIII     *ST `hl7:"false,Suffix (E.G. JR Or III)" json:"suffix_egjr_or_iii,omitempty"`
	PrefixEGDR          *ST `hl7:"false,Prefix (E.G. DR)" json:"prefix_egdr,omitempty"`
	DegreeEGMD          *ST `hl7:"false,Degree (E.G. MD)" json:"degree_egmd,omitempty"`
	SourceTableId       *ID `hl7:"false,Source Table Id" json:"source_table_id,omitempty"`
}

//  CN_PHYSICIAN represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CN_PHYSICIAN struct {
	PhysicianID         *ID `hl7:"false,Physician ID" json:"physician_id,omitempty"`
	FamiliyName         *ST `hl7:"false,Familiy Name" json:"familiy_name,omitempty"`
	GivenName           *ST `hl7:"false,Given Name" json:"given_name,omitempty"`
	MiddleInitialOrName *ST `hl7:"false,Middle Initial Or Name" json:"middle_initial_or_name,omitempty"`
	SuffixEGJROrIII     *ST `hl7:"false,Suffix (E.G. JR Or III)" json:"suffix_egjr_or_iii,omitempty"`
	PrefixEGDR          *ST `hl7:"false,Prefix (E.G. DR)" json:"prefix_egdr,omitempty"`
	DegreeEGMD          *ST `hl7:"false,Degree (E.G. MD)" json:"degree_egmd,omitempty"`
	SourceTableId       *ID `hl7:"false,Source Table Id" json:"source_table_id,omitempty"`
	Adresse             *AD `hl7:"false,Adresse" json:"adresse,omitempty"`
	Telefon             *TN `hl7:"false,Telefon" json:"telefon,omitempty"`
	Faxnummer           *TN `hl7:"false,Faxnummer" json:"faxnummer,omitempty"`
	OnlineNummer        *TN `hl7:"false,Online-Nummer" json:"online_nummer,omitempty"`
	EMail               *ST `hl7:"false,E-Mail" json:"e_mail,omitempty"`
}

//  CP represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CP struct {
	Price      *MO `hl7:"false,Price" json:"price,omitempty"`
	PriceType  *ID `hl7:"false,Price Type" json:"price_type,omitempty"`
	FromValue  *NM `hl7:"false,From Value" json:"from_value,omitempty"`
	ToValue    *NM `hl7:"false,To Value" json:"to_value,omitempty"`
	RangeUnits *CE `hl7:"false,Range Units" json:"range_units,omitempty"`
	RangeType  *ID `hl7:"false,Range Type" json:"range_type,omitempty"`
}

//  CQ represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CQ struct {
	Quantity *NM `hl7:"false,Quantity" json:"quantity,omitempty"`
	Units    *CE `hl7:"false,Units" json:"units,omitempty"`
}

//  CQ_QUANTITY represents the corresponding HL7 datatype.
//  Definition from HL7 2.2
type CQ_QUANTITY struct {
	Quantity *ST `hl7:"false,Quantity" json:"quantity,omitempty"`
	Units    *ST `hl7:"false,Units" json:"units,omitempty"`
}

//  CSU represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CSU struct {
	ChannelSensitivity                 *NM `hl7:"false,Channel Sensitivity" json:"channel_sensitivity,omitempty"`
	UnitOfMeasureIdentifier            *ST `hl7:"false,Unit Of Measure Identifier" json:"unit_of_measure_identifier,omitempty"`
	UnitOfMeasureDescription           *ST `hl7:"false,Unit Of Measure Description" json:"unit_of_measure_description,omitempty"`
	UnitOfMeasureCodingSystem          *ID `hl7:"false,Unit Of Measure Coding System" json:"unit_of_measure_coding_system,omitempty"`
	AlternateUnitOfMeasureIdentifier   *ST `hl7:"false,Alternate Unit Of Measure Identifier" json:"alternate_unit_of_measure_identifier,omitempty"`
	AlternateUnitOfMeasureDescription  *ST `hl7:"false,Alternate Unit Of Measure Description" json:"alternate_unit_of_measure_description,omitempty"`
	AlternateUnitOfMeasureCodingSystem *ID `hl7:"false,Alternate Unit Of Measure Coding System" json:"alternate_unit_of_measure_coding_system,omitempty"`
}

//  CWE represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CWE struct {
	Identifier                     *ST `hl7:"false,Identifier" json:"identifier,omitempty"`
	Text                           *ST `hl7:"false,Text" json:"text,omitempty"`
	NameOfCodingSystem             *ID `hl7:"false,Name Of Coding System" json:"name_of_coding_system,omitempty"`
	AlternateIdentifier            *ST `hl7:"false,Alternate Identifier" json:"alternate_identifier,omitempty"`
	AlternateText                  *ST `hl7:"false,Alternate Text" json:"alternate_text,omitempty"`
	NameOfAlternateCodingSystem    *ID `hl7:"false,Name Of Alternate Coding System" json:"name_of_alternate_coding_system,omitempty"`
	CodingSystemVersionID          *ST `hl7:"false,Coding System Version ID" json:"coding_system_version_id,omitempty"`
	AlternateCodingSystemVersionID *ST `hl7:"false,Alternate Coding System Version ID" json:"alternate_coding_system_version_id,omitempty"`
	OriginalText                   *ST `hl7:"false,Original Text" json:"original_text,omitempty"`
}

//  CX represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type CX struct {
	IDNumber                    *ST  `hl7:"false,ID Number" json:"id_number,omitempty"`
	CheckDigit                  *ST  `hl7:"false,Check Digit" json:"check_digit,omitempty"`
	CheckDigitScheme            *ID  `hl7:"false,Check Digit Scheme" json:"check_digit_scheme,omitempty"`
	AssigningAuthority          *HD  `hl7:"false,Assigning Authority" json:"assigning_authority,omitempty"`
	IdentifierTypeCode          *ID  `hl7:"false,Identifier Type Code" json:"identifier_type_code,omitempty"`
	AssigningFacility           *HD  `hl7:"false,Assigning Facility" json:"assigning_facility,omitempty"`
	EffectiveDate               *DT  `hl7:"false,Effective Date" json:"effective_date,omitempty"`
	ExpirationDate              *DT  `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
	AssigningJurisdiction       *CWE `hl7:"false,Assigning Jurisdiction" json:"assigning_jurisdiction,omitempty"`
	AssigningAgencyOrDepartment *CWE `hl7:"false,Assigning Agency Or Department" json:"assigning_agency_or_department,omitempty"`
}

//  DDI represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type DDI struct {
	DelayDays      *NM `hl7:"false,Delay Days" json:"delay_days,omitempty"`
	MonetaryAmount *MO `hl7:"false,Monetary Amount" json:"monetary_amount,omitempty"`
	NumberOfDays   *NM `hl7:"false,Number Of Days" json:"number_of_days,omitempty"`
}

//  DIN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type DIN struct {
	Date            *TS `hl7:"false,Date" json:"date,omitempty"`
	InstitutionName *CE `hl7:"false,Institution Name" json:"institution_name,omitempty"`
}

//  DLD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type DLD struct {
	DischargeLocation *IS `hl7:"false,Discharge Location" json:"discharge_location,omitempty"`
	EffectiveDate     *TS `hl7:"false,Effective Date" json:"effective_date,omitempty"`
}

//  DLN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type DLN struct {
	LicenseNumber               *ST `hl7:"false,License Number" json:"license_number,omitempty"`
	IssuingStateProvinceCountry *IS `hl7:"false,Issuing State, Province, Country" json:"issuing_state_province_country,omitempty"`
	ExpirationDate              *DT `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
}

//  DLT represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type DLT struct {
	NormalRange       *NR `hl7:"false,Normal Range" json:"normal_range,omitempty"`
	NumericThreshold  *NM `hl7:"false,Numeric Threshold" json:"numeric_threshold,omitempty"`
	ChangeComputation *ID `hl7:"false,Change Computation" json:"change_computation,omitempty"`
	DaysRetained      *NM `hl7:"false,Days Retained" json:"days_retained,omitempty"`
}

//  DR represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type DR struct {
	RangeStartDateTime *TS `hl7:"false,Range Start Date/Time" json:"range_start_date_time,omitempty"`
	RangeEndDateTime   *TS `hl7:"false,Range End Date/Time" json:"range_end_date_time,omitempty"`
}

//  DTN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type DTN struct {
	DayType      *IS `hl7:"false,Day Type" json:"day_type,omitempty"`
	NumberOfDays *NM `hl7:"false,Number Of Days" json:"number_of_days,omitempty"`
}

//  ED represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type ED struct {
	SourceApplication *HD `hl7:"false,Source Application" json:"source_application,omitempty"`
	TypeOfData        *ID `hl7:"false,Type Of Data" json:"type_of_data,omitempty"`
	DataSubtype       *ID `hl7:"false,Data Subtype" json:"data_subtype,omitempty"`
	Encoding          *ID `hl7:"false,Encoding" json:"encoding,omitempty"`
	Data              *TX `hl7:"false,Data" json:"data,omitempty"`
}

//  EI represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type EI struct {
	EntityIdentifier *ST `hl7:"false,Entity Identifier" json:"entity_identifier,omitempty"`
	NamespaceID      *IS `hl7:"false,Namespace ID" json:"namespace_id,omitempty"`
	UniversalID      *ST `hl7:"false,Universal ID" json:"universal_id,omitempty"`
	UniversalIDType  *ID `hl7:"false,Universal ID Type" json:"universal_id_type,omitempty"`
}

//  EIP represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type EIP struct {
	PlacerAssignedIdentifier *EI `hl7:"false,Placer Assigned Identifier" json:"placer_assigned_identifier,omitempty"`
	FillerAssignedIdentifier *EI `hl7:"false,Filler Assigned Identifier" json:"filler_assigned_identifier,omitempty"`
}

//  ELD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type ELD struct {
	SegmentID            *ST `hl7:"false,Segment ID" json:"segment_id,omitempty"`
	SegmentSequence      *NM `hl7:"false,Segment Sequence" json:"segment_sequence,omitempty"`
	FieldPosition        *NM `hl7:"false,Field Position" json:"field_position,omitempty"`
	CodeIdentifyingError *CE `hl7:"false,Code Identifying Error" json:"code_identifying_error,omitempty"`
}

//  ERL represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type ERL struct {
	SegmentID          *ST `hl7:"false,Segment ID" json:"segment_id,omitempty"`
	SegmentSequence    *NM `hl7:"false,Segment Sequence" json:"segment_sequence,omitempty"`
	FieldPosition      *NM `hl7:"false,Field Position" json:"field_position,omitempty"`
	FieldRepetition    *NM `hl7:"false,Field Repetition" json:"field_repetition,omitempty"`
	ComponentNumber    *NM `hl7:"false,Component Number" json:"component_number,omitempty"`
	SubComponentNumber *NM `hl7:"false,Sub-Component Number" json:"sub_component_number,omitempty"`
}

//  FC represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type FC struct {
	FinancialClassCode *IS `hl7:"false,Financial Class Code" json:"financial_class_code,omitempty"`
	EffectiveDate      *TS `hl7:"false,Effective Date" json:"effective_date,omitempty"`
}

//  FN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type FN struct {
	Surname                        *ST `hl7:"false,Surname" json:"surname,omitempty"`
	OwnSurnamePrefix               *ST `hl7:"false,Own Surname Prefix" json:"own_surname_prefix,omitempty"`
	OwnSurname                     *ST `hl7:"false,Own Surname" json:"own_surname,omitempty"`
	SurnamePrefixFromPartnerSpouse *ST `hl7:"false,Surname Prefix From Partner/Spouse" json:"surname_prefix_from_partner_spouse,omitempty"`
	SurnameFromPartnerSpouse       *ST `hl7:"false,Surname From Partner/Spouse" json:"surname_from_partner_spouse,omitempty"`
}

//  HD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type HD struct {
	NamespaceID     *IS `hl7:"false,Namespace ID" json:"namespace_id,omitempty"`
	UniversalID     *ST `hl7:"false,Universal ID" json:"universal_id,omitempty"`
	UniversalIDType *ID `hl7:"false,Universal ID Type" json:"universal_id_type,omitempty"`
}

//  ICD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type ICD struct {
	CertificationPatientType      *IS `hl7:"false,Certification Patient Type" json:"certification_patient_type,omitempty"`
	CertificationRequired         *ID `hl7:"false,Certification Required" json:"certification_required,omitempty"`
	DateTimeCertificationRequired *TS `hl7:"false,Date/Time Certification Required" json:"date_time_certification_required,omitempty"`
}

//  JCC represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type JCC struct {
	JobCode            *IS `hl7:"false,Job Code" json:"job_code,omitempty"`
	JobClass           *IS `hl7:"false,Job Class" json:"job_class,omitempty"`
	JobDescriptionText *TX `hl7:"false,Job Description Text" json:"job_description_text,omitempty"`
}

//  LA1 represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type LA1 struct {
	PointOfCare         *IS `hl7:"false,Point Of Care" json:"point_of_care,omitempty"`
	Room                *IS `hl7:"false,Room" json:"room,omitempty"`
	Bed                 *IS `hl7:"false,Bed" json:"bed,omitempty"`
	Facility            *HD `hl7:"false,Facility" json:"facility,omitempty"`
	LocationStatus      *IS `hl7:"false,Location Status" json:"location_status,omitempty"`
	PatientLocationType *IS `hl7:"false,Patient Location Type" json:"patient_location_type,omitempty"`
	Building            *IS `hl7:"false,Building" json:"building,omitempty"`
	Floor               *IS `hl7:"false,Floor" json:"floor,omitempty"`
	Address             *AD `hl7:"false,Address" json:"address,omitempty"`
}

//  LA2 represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type LA2 struct {
	PointOfCare                *IS `hl7:"false,Point Of Care" json:"point_of_care,omitempty"`
	Room                       *IS `hl7:"false,Room" json:"room,omitempty"`
	Bed                        *IS `hl7:"false,Bed" json:"bed,omitempty"`
	Facility                   *HD `hl7:"false,Facility" json:"facility,omitempty"`
	LocationStatus             *IS `hl7:"false,Location Status" json:"location_status,omitempty"`
	PatientLocationType        *IS `hl7:"false,Patient Location Type" json:"patient_location_type,omitempty"`
	Building                   *IS `hl7:"false,Building" json:"building,omitempty"`
	Floor                      *IS `hl7:"false,Floor" json:"floor,omitempty"`
	StreetAddress              *ST `hl7:"false,Street Address" json:"street_address,omitempty"`
	OtherDesignation           *ST `hl7:"false,Other Designation" json:"other_designation,omitempty"`
	City                       *ST `hl7:"false,City" json:"city,omitempty"`
	StateOrProvince            *ST `hl7:"false,State Or Province" json:"state_or_province,omitempty"`
	ZipOrPostalCode            *ST `hl7:"false,Zip Or Postal Code" json:"zip_or_postal_code,omitempty"`
	Country                    *ID `hl7:"false,Country" json:"country,omitempty"`
	AddressType                *ID `hl7:"false,Address Type" json:"address_type,omitempty"`
	OtherGeographicDesignation *ST `hl7:"false,Other Geographic Designation" json:"other_geographic_designation,omitempty"`
}

//  MA represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type MA struct {
	Sample1FromChannel1 *NM `hl7:"false,Sample 1 From Channel 1" json:"sample_1_from_channel_1,omitempty"`
	Sample1FromChannel2 *NM `hl7:"false,Sample 1 From Channel 2" json:"sample_1_from_channel_2,omitempty"`
	Sample1FromChannelN *NM `hl7:"false,Sample 1 From Channel N" json:"sample_1_from_channel_n,omitempty"`
	Sample2FromChannel1 *NM `hl7:"false,Sample 2 From Channel 1" json:"sample_2_from_channel_1,omitempty"`
	Sample2FromChannelN *NM `hl7:"false,Sample 2 From Channel N" json:"sample_2_from_channel_n,omitempty"`
	SampleNFromChannelN *NM `hl7:"false,Sample N From Channel N" json:"sample_n_from_channel_n,omitempty"`
}

//  MO represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type MO struct {
	Quantity     *NM `hl7:"false,Quantity" json:"quantity,omitempty"`
	Denomination *ID `hl7:"false,Denomination" json:"denomination,omitempty"`
}

//  MOC represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type MOC struct {
	MonetaryAmount *MO `hl7:"false,Monetary Amount" json:"monetary_amount,omitempty"`
	ChargeCode     *CE `hl7:"false,Charge Code" json:"charge_code,omitempty"`
}

//  MOP represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type MOP struct {
	MoneyOrPercentageIndicator *ID `hl7:"false,Money Or Percentage Indicator" json:"money_or_percentage_indicator,omitempty"`
	MoneyOrPercentageQuantity  *NM `hl7:"false,Money Or Percentage Quantity" json:"money_or_percentage_quantity,omitempty"`
	CurrencyDenomination       *ID `hl7:"false,Currency Denomination" json:"currency_denomination,omitempty"`
}

//  MSG represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type MSG struct {
	MessageCode      *ID `hl7:"false,Message Code" json:"message_code,omitempty"`
	TriggerEvent     *ID `hl7:"false,Trigger Event" json:"trigger_event,omitempty"`
	MessageStructure *ID `hl7:"false,Message Structure" json:"message_structure,omitempty"`
}

//  NA represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type NA struct {
	Value1 *NM `hl7:"false,Value1" json:"value_1,omitempty"`
	Value2 *NM `hl7:"false,Value2" json:"value_2,omitempty"`
	Value3 *NM `hl7:"false,Value3" json:"value_3,omitempty"`
	Value4 *NM `hl7:"false,Value4" json:"value_4,omitempty"`
}

//  NDL represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type NDL struct {
	Name                *CNN `hl7:"false,Name" json:"name,omitempty"`
	StartDateTime       *TS  `hl7:"false,Start Date/Time" json:"start_date_time,omitempty"`
	EndDateTime         *TS  `hl7:"false,End Date/Time" json:"end_date_time,omitempty"`
	PointOfCare         *IS  `hl7:"false,Point Of Care" json:"point_of_care,omitempty"`
	Room                *IS  `hl7:"false,Room" json:"room,omitempty"`
	Bed                 *IS  `hl7:"false,Bed" json:"bed,omitempty"`
	Facility            *HD  `hl7:"false,Facility" json:"facility,omitempty"`
	LocationStatus      *IS  `hl7:"false,Location Status" json:"location_status,omitempty"`
	PatientLocationType *IS  `hl7:"false,Patient Location Type" json:"patient_location_type,omitempty"`
	Building            *IS  `hl7:"false,Building" json:"building,omitempty"`
	Floor               *IS  `hl7:"false,Floor" json:"floor,omitempty"`
}

//  NR represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type NR struct {
	LowValue  *NM `hl7:"false,Low Value" json:"low_value,omitempty"`
	HighValue *NM `hl7:"false,High Value" json:"high_value,omitempty"`
}

//  OCD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type OCD struct {
	OccurrenceCode *CNE `hl7:"false,Occurrence Code" json:"occurrence_code,omitempty"`
	OccurrenceDate *DT  `hl7:"false,Occurrence Date" json:"occurrence_date,omitempty"`
}

//  OSD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type OSD struct {
	SequenceResultsFlag               *ID `hl7:"false,Sequence/Results Flag" json:"sequence_results_flag,omitempty"`
	PlacerOrderNumberEntityIdentifier *ST `hl7:"false,Placer Order Number: Entity Identifier" json:"placer_order_number_entity_identifier,omitempty"`
	PlacerOrderNumberNamespaceID      *IS `hl7:"false,Placer Order Number: Namespace ID" json:"placer_order_number_namespace_id,omitempty"`
	FillerOrderNumberEntityIdentifier *ST `hl7:"false,Filler Order Number: Entity Identifier" json:"filler_order_number_entity_identifier,omitempty"`
	FillerOrderNumberNamespaceID      *IS `hl7:"false,Filler Order Number: Namespace ID" json:"filler_order_number_namespace_id,omitempty"`
	SequenceConditionValue            *ST `hl7:"false,Sequence Condition Value" json:"sequence_condition_value,omitempty"`
	MaximumNumberOfRepeats            *NM `hl7:"false,Maximum Number Of Repeats" json:"maximum_number_of_repeats,omitempty"`
	PlacerOrderNumberUniversalID      *ST `hl7:"false,Placer Order Number: Universal ID" json:"placer_order_number_universal_id,omitempty"`
	PlacerOrderNumberUniversalIDType  *ID `hl7:"false,Placer Order Number: Universal ID Type" json:"placer_order_number_universal_id_type,omitempty"`
	FillerOrderNumberUniversalID      *ST `hl7:"false,Filler Order Number: Universal ID" json:"filler_order_number_universal_id,omitempty"`
	FillerOrderNumberUniversalIDType  *ID `hl7:"false,Filler Order Number: Universal ID Type" json:"filler_order_number_universal_id_type,omitempty"`
}

//  OSP represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type OSP struct {
	OccurrenceSpanCode      *CNE `hl7:"false,Occurrence Span Code" json:"occurrence_span_code,omitempty"`
	OccurrenceSpanStartDate *DT  `hl7:"false,Occurrence Span Start Date" json:"occurrence_span_start_date,omitempty"`
	OccurrenceSpanStopDate  *DT  `hl7:"false,Occurrence Span Stop Date" json:"occurrence_span_stop_date,omitempty"`
}

//  PCF represents the corresponding HL7 datatype.
//  Definition from HL7 2.4
type PCF struct {
	PreCertificationPatientType *IS `hl7:"false,Pre-Certification Patient Type" json:"pre_certification_patient_type,omitempty"`
	PreCertificationRequired    *ID `hl7:"false,Pre-Certification Required" json:"pre_certification_required,omitempty"`
	PreCertificationWindow      *TS `hl7:"false,Pre-Certification Window" json:"pre_certification_window,omitempty"`
}

//  PI represents the corresponding HL7 datatype.
//  Definition from HL7 2.4
type PI struct {
	IDNumber            *ST `hl7:"false,ID Number" json:"id_number,omitempty"`
	TypeOfIDNumber      *IS `hl7:"false,Type Of ID Number" json:"type_of_id_number,omitempty"`
	OtherQualifyingInfo *ST `hl7:"false,Other Qualifying Info" json:"other_qualifying_info,omitempty"`
}

//  PIP represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type PIP struct {
	Privilege      *CE `hl7:"false,Privilege" json:"privilege,omitempty"`
	PrivilegeClass *CE `hl7:"false,Privilege Class" json:"privilege_class,omitempty"`
	ExpirationDate *DT `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
	ActivationDate *DT `hl7:"false,Activation Date" json:"activation_date,omitempty"`
	Facility       *EI `hl7:"false,Facility" json:"facility,omitempty"`
}

//  PL represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type PL struct {
	PointOfCare                     *IS `hl7:"false,Point Of Care" json:"point_of_care,omitempty"`
	Room                            *IS `hl7:"false,Room" json:"room,omitempty"`
	Bed                             *IS `hl7:"false,Bed" json:"bed,omitempty"`
	Facility                        *HD `hl7:"false,Facility" json:"facility,omitempty"`
	LocationStatus                  *IS `hl7:"false,Location Status" json:"location_status,omitempty"`
	PersonLocationType              *IS `hl7:"false,Person Location Type" json:"person_location_type,omitempty"`
	Building                        *IS `hl7:"false,Building" json:"building,omitempty"`
	Floor                           *IS `hl7:"false,Floor" json:"floor,omitempty"`
	LocationDescription             *ST `hl7:"false,Location Description" json:"location_description,omitempty"`
	ComprehensiveLocationIdentifier *EI `hl7:"false,Comprehensive Location Identifier" json:"comprehensive_location_identifier,omitempty"`
	AssigningAuthorityForLocation   *HD `hl7:"false,Assigning Authority For Location" json:"assigning_authority_for_location,omitempty"`
}

//  PLN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type PLN struct {
	IDNumber                        *ST `hl7:"false,ID Number" json:"id_number,omitempty"`
	TypeOfIDNumber                  *IS `hl7:"false,Type Of ID Number" json:"type_of_id_number,omitempty"`
	StateOtherQualifyingInformation *ST `hl7:"false,State/Other Qualifying Information" json:"state_other_qualifying_information,omitempty"`
	ExpirationDate                  *DT `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
}

//  PN represents the corresponding HL7 datatype.
//  Definition from HL7 2.4
type PN struct {
	FamilyName                                  *FN `hl7:"false,Family Name" json:"family_name,omitempty"`
	GivenName                                   *ST `hl7:"false,Given Name" json:"given_name,omitempty"`
	SecondAndFurtherGivenNamesOrInitialsThereof *ST `hl7:"false,Second And Further Given Names Or Initials Thereof" json:"second_and_further_given_names_or_initials_thereof,omitempty"`
	SuffixEGJROrIII                             *ST `hl7:"false,Suffix (E.G., JR Or III)" json:"suffix_egjr_or_iii,omitempty"`
	PrefixEGDR                                  *ST `hl7:"false,Prefix (E.G., DR)" json:"prefix_egdr,omitempty"`
	DegreeEGMD                                  *IS `hl7:"false,Degree (E.G., MD)" json:"degree_egmd,omitempty"`
}

//  PPN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type PPN struct {
	IDNumber                                    *ST  `hl7:"false,ID Number" json:"id_number,omitempty"`
	FamilyName                                  *FN  `hl7:"false,Family Name" json:"family_name,omitempty"`
	GivenName                                   *ST  `hl7:"false,Given Name" json:"given_name,omitempty"`
	SecondAndFurtherGivenNamesOrInitialsThereof *ST  `hl7:"false,Second And Further Given Names Or Initials Thereof" json:"second_and_further_given_names_or_initials_thereof,omitempty"`
	SuffixEGJROrIII                             *ST  `hl7:"false,Suffix (E.G., JR Or III)" json:"suffix_egjr_or_iii,omitempty"`
	PrefixEGDR                                  *ST  `hl7:"false,Prefix (E.G., DR)" json:"prefix_egdr,omitempty"`
	DegreeEGMD                                  *IS  `hl7:"false,Degree (E.G., MD)" json:"degree_egmd,omitempty"`
	SourceTable                                 *IS  `hl7:"false,Source Table" json:"source_table,omitempty"`
	AssigningAuthority                          *HD  `hl7:"false,Assigning Authority" json:"assigning_authority,omitempty"`
	NameTypeCode                                *ID  `hl7:"false,Name Type Code" json:"name_type_code,omitempty"`
	IdentifierCheckDigit                        *ST  `hl7:"false,Identifier Check Digit" json:"identifier_check_digit,omitempty"`
	CheckDigitScheme                            *ID  `hl7:"false,Check Digit Scheme" json:"check_digit_scheme,omitempty"`
	IdentifierTypeCode                          *ID  `hl7:"false,Identifier Type Code" json:"identifier_type_code,omitempty"`
	AssigningFacility                           *HD  `hl7:"false,Assigning Facility" json:"assigning_facility,omitempty"`
	DateTimeActionPerformed                     *TS  `hl7:"false,Date/Time Action Performed" json:"date_time_action_performed,omitempty"`
	NameRepresentationCode                      *ID  `hl7:"false,Name Representation Code" json:"name_representation_code,omitempty"`
	NameContext                                 *CE  `hl7:"false,Name Context" json:"name_context,omitempty"`
	NameValidityRange                           *DR  `hl7:"false,Name Validity Range" json:"name_validity_range,omitempty"`
	NameAssemblyOrder                           *ID  `hl7:"false,Name Assembly Order" json:"name_assembly_order,omitempty"`
	EffectiveDate                               *TS  `hl7:"false,Effective Date" json:"effective_date,omitempty"`
	ExpirationDate                              *TS  `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
	ProfessionalSuffix                          *ST  `hl7:"false,Professional Suffix" json:"professional_suffix,omitempty"`
	AssigningJurisdiction                       *CWE `hl7:"false,Assigning Jurisdiction" json:"assigning_jurisdiction,omitempty"`
	AssigningAgencyOrDepartment                 *CWE `hl7:"false,Assigning Agency Or Department" json:"assigning_agency_or_department,omitempty"`
}

//  PRL represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type PRL struct {
	ParentObservationIdentifier      *CE `hl7:"false,Parent Observation Identifier" json:"parent_observation_identifier,omitempty"`
	ParentObservationSubIdentifier   *ST `hl7:"false,Parent Observation Sub-Identifier" json:"parent_observation_sub_identifier,omitempty"`
	ParentObservationValueDescriptor *TX `hl7:"false,Parent Observation Value Descriptor" json:"parent_observation_value_descriptor,omitempty"`
}

//  PT represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type PT struct {
	ProcessingID   *ID `hl7:"false,Processing ID" json:"processing_id,omitempty"`
	ProcessingMode *ID `hl7:"false,Processing Mode" json:"processing_mode,omitempty"`
}

//  PTA represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type PTA struct {
	PolicyType                *IS  `hl7:"false,Policy Type" json:"policy_type,omitempty"`
	AmountClass               *IS  `hl7:"false,Amount Class" json:"amount_class,omitempty"`
	MoneyOrPercentageQuantity *NM  `hl7:"false,Money Or Percentage Quantity" json:"money_or_percentage_quantity,omitempty"`
	MoneyOrPercentage         *MOP `hl7:"false,Money Or Percentage" json:"money_or_percentage,omitempty"`
}

//  QIP represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type QIP struct {
	SegmentFieldName *ST `hl7:"false,Segment Field Name" json:"segment_field_name,omitempty"`
	Values           *ST `hl7:"false,Values" json:"values,omitempty"`
}

//  QSC represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type QSC struct {
	SegmentFieldName      *ST `hl7:"false,Segment Field Name" json:"segment_field_name,omitempty"`
	RelationalOperator    *ID `hl7:"false,Relational Operator" json:"relational_operator,omitempty"`
	Value                 *ST `hl7:"false,Value" json:"value,omitempty"`
	RelationalConjunction *ID `hl7:"false,Relational Conjunction" json:"relational_conjunction,omitempty"`
}

//  RCD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type RCD struct {
	SegmentFieldName   *ST `hl7:"false,Segment Field Name" json:"segment_field_name,omitempty"`
	HL7DataType        *ID `hl7:"false,HL7 Data Type" json:"hl_7_data_type,omitempty"`
	MaximumColumnWidth *NM `hl7:"false,Maximum Column Width" json:"maximum_column_width,omitempty"`
}

//  RFR represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type RFR struct {
	NumericRange        *NR `hl7:"false,Numeric Range" json:"numeric_range,omitempty"`
	AdministrativeSex   *IS `hl7:"false,Administrative Sex" json:"administrative_sex,omitempty"`
	AgeRange            *NR `hl7:"false,Age Range" json:"age_range,omitempty"`
	GestationalAgeRange *NR `hl7:"false,Gestational Age Range" json:"gestational_age_range,omitempty"`
	Species             *ST `hl7:"false,Species" json:"species,omitempty"`
	RaceSubspecies      *ST `hl7:"false,Race/Subspecies" json:"race_subspecies,omitempty"`
	Conditions          *TX `hl7:"false,Conditions" json:"conditions,omitempty"`
}

//  RI represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type RI struct {
	RepeatPattern        *IS `hl7:"false,Repeat Pattern" json:"repeat_pattern,omitempty"`
	ExplicitTimeInterval *ST `hl7:"false,Explicit Time Interval" json:"explicit_time_interval,omitempty"`
}

//  RMC represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type RMC struct {
	RoomType          *IS  `hl7:"false,Room Type" json:"room_type,omitempty"`
	AmountType        *IS  `hl7:"false,Amount Type" json:"amount_type,omitempty"`
	CoverageAmount    *NM  `hl7:"false,Coverage Amount" json:"coverage_amount,omitempty"`
	MoneyOrPercentage *MOP `hl7:"false,Money Or Percentage" json:"money_or_percentage,omitempty"`
}

//  RP represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type RP struct {
	Pointer       *ST `hl7:"false,Pointer" json:"pointer,omitempty"`
	ApplicationID *HD `hl7:"false,Application ID" json:"application_id,omitempty"`
	TypeOfData    *ID `hl7:"false,Type Of Data" json:"type_of_data,omitempty"`
	Subtype       *ID `hl7:"false,Subtype" json:"subtype,omitempty"`
}

//  RPT represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type RPT struct {
	RepeatPatternCode          *CWE `hl7:"false,Repeat Pattern Code" json:"repeat_pattern_code,omitempty"`
	CalendarAlignment          *ID  `hl7:"false,Calendar Alignment" json:"calendar_alignment,omitempty"`
	PhaseRangeBeginValue       *NM  `hl7:"false,Phase Range Begin Value" json:"phase_range_begin_value,omitempty"`
	PhaseRangeEndValue         *NM  `hl7:"false,Phase Range End Value" json:"phase_range_end_value,omitempty"`
	PeriodQuantity             *NM  `hl7:"false,Period Quantity" json:"period_quantity,omitempty"`
	PeriodUnits                *IS  `hl7:"false,Period Units" json:"period_units,omitempty"`
	InstitutionSpecifiedTime   *ID  `hl7:"false,Institution Specified Time" json:"institution_specified_time,omitempty"`
	Event                      *ID  `hl7:"false,Event" json:"event,omitempty"`
	EventOffsetQuantity        *NM  `hl7:"false,Event Offset Quantity" json:"event_offset_quantity,omitempty"`
	EventOffsetUnits           *IS  `hl7:"false,Event Offset Units" json:"event_offset_units,omitempty"`
	GeneralTimingSpecification *GTS `hl7:"false,General Timing Specification" json:"general_timing_specification,omitempty"`
}

//  SAD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type SAD struct {
	StreetOrMailingAddress *ST `hl7:"false,Street Or Mailing Address" json:"street_or_mailing_address,omitempty"`
	StreetName             *ST `hl7:"false,Street Name" json:"street_name,omitempty"`
	DwellingNumber         *ST `hl7:"false,Dwelling Number" json:"dwelling_number,omitempty"`
}

//  SCV represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type SCV struct {
	ParameterClass *CWE `hl7:"false,Parameter Class" json:"parameter_class,omitempty"`
	ParameterValue *ST  `hl7:"false,Parameter Value" json:"parameter_value,omitempty"`
}

//  SN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type SN struct {
	Comparator      *ST `hl7:"false,Comparator" json:"comparator,omitempty"`
	Num1            *NM `hl7:"false,Num1" json:"num_1,omitempty"`
	SeparatorSuffix *ST `hl7:"false,Separator/Suffix" json:"separator_suffix,omitempty"`
	Num2            *NM `hl7:"false,Num2" json:"num_2,omitempty"`
}

//  SPD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type SPD struct {
	SpecialtyName       *ST `hl7:"false,Specialty Name" json:"specialty_name,omitempty"`
	GoverningBoard      *ST `hl7:"false,Governing Board" json:"governing_board,omitempty"`
	EligibleOrCertified *ID `hl7:"false,Eligible Or Certified" json:"eligible_or_certified,omitempty"`
	DateOfCertification *DT `hl7:"false,Date Of Certification" json:"date_of_certification,omitempty"`
}

//  SPS represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type SPS struct {
	SpecimenSourceNameOrCode     *CWE `hl7:"false,Specimen Source Name Or Code" json:"specimen_source_name_or_code,omitempty"`
	Additives                    *CWE `hl7:"false,Additives" json:"additives,omitempty"`
	SpecimenCollectionMethod     *TX  `hl7:"false,Specimen Collection Method" json:"specimen_collection_method,omitempty"`
	BodySite                     *CWE `hl7:"false,Body Site" json:"body_site,omitempty"`
	SiteModifier                 *CWE `hl7:"false,Site Modifier" json:"site_modifier,omitempty"`
	CollectionMethodModifierCode *CWE `hl7:"false,Collection Method Modifier Code" json:"collection_method_modifier_code,omitempty"`
	SpecimenRole                 *CWE `hl7:"false,Specimen Role" json:"specimen_role,omitempty"`
}

//  SRT represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type SRT struct {
	SortByField *ST `hl7:"false,Sort-By Field" json:"sort_by_field,omitempty"`
	Sequencing  *ID `hl7:"false,Sequencing" json:"sequencing,omitempty"`
}

//  TQ represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type TQ struct {
	Quantity           *CQ  `hl7:"false,Quantity" json:"quantity,omitempty"`
	Interval           *RI  `hl7:"false,Interval" json:"interval,omitempty"`
	Duration           *ST  `hl7:"false,Duration" json:"duration,omitempty"`
	StartDateTime      *TS  `hl7:"false,Start Date/Time" json:"start_date_time,omitempty"`
	EndDateTime        *TS  `hl7:"false,End Date/Time" json:"end_date_time,omitempty"`
	Priority           *ST  `hl7:"false,Priority" json:"priority,omitempty"`
	Condition          *ST  `hl7:"false,Condition" json:"condition,omitempty"`
	Text               *TX  `hl7:"false,Text" json:"text,omitempty"`
	Conjunction        *ID  `hl7:"false,Conjunction" json:"conjunction,omitempty"`
	OrderSequencing    *OSD `hl7:"false,Order Sequencing" json:"order_sequencing,omitempty"`
	OccurrenceDuration *CE  `hl7:"false,Occurrence Duration" json:"occurrence_duration,omitempty"`
	TotalOccurrences   *NM  `hl7:"false,Total Occurrences" json:"total_occurrences,omitempty"`
}

//  UVC represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type UVC struct {
	ValueCode   *CNE `hl7:"false,Value Code" json:"value_code,omitempty"`
	ValueAmount *MO  `hl7:"false,Value Amount" json:"value_amount,omitempty"`
}

//  VH represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type VH struct {
	StartDayRange  *ID `hl7:"false,Start Day Range" json:"start_day_range,omitempty"`
	EndDayRange    *ID `hl7:"false,End Day Range" json:"end_day_range,omitempty"`
	StartHourRange *TM `hl7:"false,Start Hour Range" json:"start_hour_range,omitempty"`
	EndHourRange   *TM `hl7:"false,End Hour Range" json:"end_hour_range,omitempty"`
}

//  VID represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type VID struct {
	VersionID                *ID `hl7:"false,Version ID" json:"version_id,omitempty"`
	InternationalizationCode *CE `hl7:"false,Internationalization Code" json:"internationalization_code,omitempty"`
	InternationalVersionID   *CE `hl7:"false,International Version ID" json:"international_version_id,omitempty"`
}

//  VR represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type VR struct {
	FirstDataCodeValue *ST `hl7:"false,First Data Code Value" json:"first_data_code_value,omitempty"`
	LastDataCodeValue  *ST `hl7:"false,Last Data Code Value" json:"last_data_code_value,omitempty"`
}

//  WVI represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type WVI struct {
	ChannelNumber *NM `hl7:"false,Channel Number" json:"channel_number,omitempty"`
	ChannelName   *ST `hl7:"false,Channel Name" json:"channel_name,omitempty"`
}

//  WVS represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type WVS struct {
	SourceOneName *ST `hl7:"false,Source One Name" json:"source_one_name,omitempty"`
	SourceTwoName *ST `hl7:"false,Source Two Name" json:"source_two_name,omitempty"`
}

//  XAD represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type XAD struct {
	StreetAddress              *SAD `hl7:"false,Street Address" json:"street_address,omitempty"`
	OtherDesignation           *ST  `hl7:"false,Other Designation" json:"other_designation,omitempty"`
	City                       *ST  `hl7:"false,City" json:"city,omitempty"`
	StateOrProvince            *ST  `hl7:"false,State Or Province" json:"state_or_province,omitempty"`
	ZipOrPostalCode            *ST  `hl7:"false,Zip Or Postal Code" json:"zip_or_postal_code,omitempty"`
	Country                    *ID  `hl7:"false,Country" json:"country,omitempty"`
	AddressType                *ID  `hl7:"false,Address Type" json:"address_type,omitempty"`
	OtherGeographicDesignation *ST  `hl7:"false,Other Geographic Designation" json:"other_geographic_designation,omitempty"`
	CountyParishCode           *IS  `hl7:"false,County/Parish Code" json:"county_parish_code,omitempty"`
	CensusTract                *IS  `hl7:"false,Census Tract" json:"census_tract,omitempty"`
	AddressRepresentationCode  *ID  `hl7:"false,Address Representation Code" json:"address_representation_code,omitempty"`
	AddressValidityRange       *DR  `hl7:"false,Address Validity Range" json:"address_validity_range,omitempty"`
	EffectiveDate              *TS  `hl7:"false,Effective Date" json:"effective_date,omitempty"`
	ExpirationDate             *TS  `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
}

//  XCN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type XCN struct {
	IDNumber                                    *ST  `hl7:"false,ID Number" json:"id_number,omitempty"`
	FamilyName                                  *FN  `hl7:"false,Family Name" json:"family_name,omitempty"`
	GivenName                                   *ST  `hl7:"false,Given Name" json:"given_name,omitempty"`
	SecondAndFurtherGivenNamesOrInitialsThereof *ST  `hl7:"false,Second And Further Given Names Or Initials Thereof" json:"second_and_further_given_names_or_initials_thereof,omitempty"`
	SuffixEGJROrIII                             *ST  `hl7:"false,Suffix (E.G., JR Or III)" json:"suffix_egjr_or_iii,omitempty"`
	PrefixEGDR                                  *ST  `hl7:"false,Prefix (E.G., DR)" json:"prefix_egdr,omitempty"`
	DegreeEGMD                                  *IS  `hl7:"false,Degree (E.G., MD)" json:"degree_egmd,omitempty"`
	SourceTable                                 *IS  `hl7:"false,Source Table" json:"source_table,omitempty"`
	AssigningAuthority                          *HD  `hl7:"false,Assigning Authority" json:"assigning_authority,omitempty"`
	NameTypeCode                                *ID  `hl7:"false,Name Type Code" json:"name_type_code,omitempty"`
	IdentifierCheckDigit                        *ST  `hl7:"false,Identifier Check Digit" json:"identifier_check_digit,omitempty"`
	CheckDigitScheme                            *ID  `hl7:"false,Check Digit Scheme" json:"check_digit_scheme,omitempty"`
	IdentifierTypeCode                          *ID  `hl7:"false,Identifier Type Code" json:"identifier_type_code,omitempty"`
	AssigningFacility                           *HD  `hl7:"false,Assigning Facility" json:"assigning_facility,omitempty"`
	NameRepresentationCode                      *ID  `hl7:"false,Name Representation Code" json:"name_representation_code,omitempty"`
	NameContext                                 *CE  `hl7:"false,Name Context" json:"name_context,omitempty"`
	NameValidityRange                           *DR  `hl7:"false,Name Validity Range" json:"name_validity_range,omitempty"`
	NameAssemblyOrder                           *ID  `hl7:"false,Name Assembly Order" json:"name_assembly_order,omitempty"`
	EffectiveDate                               *TS  `hl7:"false,Effective Date" json:"effective_date,omitempty"`
	ExpirationDate                              *TS  `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
	ProfessionalSuffix                          *ST  `hl7:"false,Professional Suffix" json:"professional_suffix,omitempty"`
	AssigningJurisdiction                       *CWE `hl7:"false,Assigning Jurisdiction" json:"assigning_jurisdiction,omitempty"`
	AssigningAgencyOrDepartment                 *CWE `hl7:"false,Assigning Agency Or Department" json:"assigning_agency_or_department,omitempty"`
}

//  XON represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type XON struct {
	OrganizationName         *ST `hl7:"false,Organization Name" json:"organization_name,omitempty"`
	OrganizationNameTypeCode *IS `hl7:"false,Organization Name Type Code" json:"organization_name_type_code,omitempty"`
	IDNumber                 *NM `hl7:"false,ID Number" json:"id_number,omitempty"`
	CheckDigit               *NM `hl7:"false,Check Digit" json:"check_digit,omitempty"`
	CheckDigitScheme         *ID `hl7:"false,Check Digit Scheme" json:"check_digit_scheme,omitempty"`
	AssigningAuthority       *HD `hl7:"false,Assigning Authority" json:"assigning_authority,omitempty"`
	IdentifierTypeCode       *ID `hl7:"false,Identifier Type Code" json:"identifier_type_code,omitempty"`
	AssigningFacility        *HD `hl7:"false,Assigning Facility" json:"assigning_facility,omitempty"`
	NameRepresentationCode   *ID `hl7:"false,Name Representation Code" json:"name_representation_code,omitempty"`
	OrganizationIdentifier   *ST `hl7:"false,Organization Identifier" json:"organization_identifier,omitempty"`
}

//  XPN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type XPN struct {
	FamilyName                                  *FN `hl7:"false,Family Name" json:"family_name,omitempty"`
	GivenName                                   *ST `hl7:"false,Given Name" json:"given_name,omitempty"`
	SecondAndFurtherGivenNamesOrInitialsThereof *ST `hl7:"false,Second And Further Given Names Or Initials Thereof" json:"second_and_further_given_names_or_initials_thereof,omitempty"`
	SuffixEGJROrIII                             *ST `hl7:"false,Suffix (E.G., JR Or III)" json:"suffix_egjr_or_iii,omitempty"`
	PrefixEGDR                                  *ST `hl7:"false,Prefix (E.G., DR)" json:"prefix_egdr,omitempty"`
	DegreeEGMD                                  *IS `hl7:"false,Degree (E.G., MD)" json:"degree_egmd,omitempty"`
	NameTypeCode                                *ID `hl7:"false,Name Type Code" json:"name_type_code,omitempty"`
	NameRepresentationCode                      *ID `hl7:"false,Name Representation Code" json:"name_representation_code,omitempty"`
	NameContext                                 *CE `hl7:"false,Name Context" json:"name_context,omitempty"`
	NameValidityRange                           *DR `hl7:"false,Name Validity Range" json:"name_validity_range,omitempty"`
	NameAssemblyOrder                           *ID `hl7:"false,Name Assembly Order" json:"name_assembly_order,omitempty"`
	EffectiveDate                               *TS `hl7:"false,Effective Date" json:"effective_date,omitempty"`
	ExpirationDate                              *TS `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`
	ProfessionalSuffix                          *ST `hl7:"false,Professional Suffix" json:"professional_suffix,omitempty"`
}

//  XTN represents the corresponding HL7 datatype.
//  Definition from HL7 2.5.1
type XTN struct {
	Number                         *ST `hl7:"false,Number" json:"number,omitempty"`
	TelecommunicationUseCode       *ID `hl7:"false,Telecommunication Use Code" json:"telecommunication_use_code,omitempty"`
	TelecommunicationEquipmentType *ID `hl7:"false,Telecommunication Equipment Type" json:"telecommunication_equipment_type,omitempty"`
	EmailAddress                   *ST `hl7:"false,Email Address" json:"email_address,omitempty"`
	CountryCode                    *NM `hl7:"false,Country Code" json:"country_code,omitempty"`
	AreaCityCode                   *NM `hl7:"false,Area/City Code" json:"area_city_code,omitempty"`
	LocalNumber                    *NM `hl7:"false,Local Number" json:"local_number,omitempty"`
	Extension                      *NM `hl7:"false,Extension" json:"extension,omitempty"`
	AnyText                        *ST `hl7:"false,Any Text" json:"any_text,omitempty"`
	ExtensionPrefix                *ST `hl7:"false,Extension Prefix" json:"extension_prefix,omitempty"`
	SpeedDialCode                  *ST `hl7:"false,Speed Dial Code" json:"speed_dial_code,omitempty"`
	UnformattedTelephoneNumber     *ST `hl7:"false,Unformatted Telephone Number" json:"unformatted_telephone_number,omitempty"`
}

//  ABS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ABS struct {
	DischargeCareProvider      *XCN `hl7:"false,Discharge Care Provider" json:"discharge_care_provider,omitempty"`             // ABS-1
	TransferMedicalServiceCode *CE  `hl7:"false,Transfer Medical Service Code" json:"transfer_medical_service_code,omitempty"` // ABS-2
	SeverityOfIllnessCode      *CE  `hl7:"false,Severity Of Illness Code" json:"severity_of_illness_code,omitempty"`           // ABS-3
	DateTimeOfAttestation      *TS  `hl7:"false,Date/Time Of Attestation" json:"date_time_of_attestation,omitempty"`           // ABS-4
	AttestedBy                 *XCN `hl7:"false,Attested By" json:"attested_by,omitempty"`                                     // ABS-5
	TriageCode                 *CE  `hl7:"false,Triage Code" json:"triage_code,omitempty"`                                     // ABS-6
	AbstractCompletionDateTime *TS  `hl7:"false,Abstract Completion Date/Time" json:"abstract_completion_date_time,omitempty"` // ABS-7
	AbstractedBy               *XCN `hl7:"false,Abstracted By" json:"abstracted_by,omitempty"`                                 // ABS-8
	CaseCategoryCode           *CE  `hl7:"false,Case Category Code" json:"case_category_code,omitempty"`                       // ABS-9
	CaesarianSectionIndicator  *ID  `hl7:"false,Caesarian Section Indicator" json:"caesarian_section_indicator,omitempty"`     // ABS-10
	GestationCategoryCode      *CE  `hl7:"false,Gestation Category Code" json:"gestation_category_code,omitempty"`             // ABS-11
	GestationPeriodWeeks       *NM  `hl7:"false,Gestation Period - Weeks" json:"gestation_period_weeks,omitempty"`             // ABS-12
	NewbornCode                *CE  `hl7:"false,Newborn Code" json:"newborn_code,omitempty"`                                   // ABS-13
	StillbornIndicator         *ID  `hl7:"false,Stillborn Indicator" json:"stillborn_indicator,omitempty"`                     // ABS-14
}

func (s *ABS) SegmentName() string {
	return "ABS"
}

//  ACC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ACC struct {
	AccidentDateTime            *TS  `hl7:"false,Accident Date/Time" json:"accident_date_time,omitempty"`                         // ACC-1
	AccidentCode                *CE  `hl7:"false,Accident Code" json:"accident_code,omitempty"`                                   // ACC-2
	AccidentLocation            *ST  `hl7:"false,Accident Location" json:"accident_location,omitempty"`                           // ACC-3
	AutoAccidentState           *CE  `hl7:"false,Auto Accident State" json:"auto_accident_state,omitempty"`                       // ACC-4
	AccidentJobRelatedIndicator *ID  `hl7:"false,Accident Job Related Indicator" json:"accident_job_related_indicator,omitempty"` // ACC-5
	AccidentDeathIndicator      *ID  `hl7:"false,Accident Death Indicator" json:"accident_death_indicator,omitempty"`             // ACC-6
	EnteredBy                   *XCN `hl7:"false,Entered By" json:"entered_by,omitempty"`                                         // ACC-7
	AccidentDescription         *ST  `hl7:"false,Accident Description" json:"accident_description,omitempty"`                     // ACC-8
	BroughtInBy                 *ST  `hl7:"false,Brought In By" json:"brought_in_by,omitempty"`                                   // ACC-9
	PoliceNotifiedIndicator     *ID  `hl7:"false,Police Notified Indicator" json:"police_notified_indicator,omitempty"`           // ACC-10
	AccidentAddress             *XAD `hl7:"false,Accident Address" json:"accident_address,omitempty"`                             // ACC-11
}

func (s *ACC) SegmentName() string {
	return "ACC"
}

//  ADD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ADD struct {
	AddendumContinuationPointer *ST `hl7:"false,Addendum Continuation Pointer" json:"addendum_continuation_pointer,omitempty"` // ADD-1
}

func (s *ADD) SegmentName() string {
	return "ADD"
}

//  AFF represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type AFF struct {
	SetIDAFF                                     *SI  `hl7:"true,Set ID - AFF" json:"set_idaff,omitempty"`                                                                             // AFF-1
	ProfessionalOrganization                     *XON `hl7:"true,Professional Organization" json:"professional_organization,omitempty"`                                                // AFF-2
	ProfessionalOrganizationAddress              *XAD `hl7:"false,Professional Organization Address" json:"professional_organization_address,omitempty"`                               // AFF-3
	ProfessionalOrganizationAffiliationDateRange []DR `hl7:"false,Professional Organization Affiliation Date Range" json:"professional_organization_affiliation_date_range,omitempty"` // AFF-4
	ProfessionalAffiliationAdditionalInformation *ST  `hl7:"false,Professional Affiliation Additional Information" json:"professional_affiliation_additional_information,omitempty"`   // AFF-5
}

func (s *AFF) SegmentName() string {
	return "AFF"
}

//  AIG represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type AIG struct {
	SetIDAIG                 *SI  `hl7:"true,Set ID - AIG" json:"set_idaig,omitempty"`                                     // AIG-1
	SegmentActionCode        *ID  `hl7:"false,Segment Action Code" json:"segment_action_code,omitempty"`                   // AIG-2
	ResourceID               *CE  `hl7:"false,Resource ID" json:"resource_id,omitempty"`                                   // AIG-3
	ResourceType             *CE  `hl7:"true,Resource Type" json:"resource_type,omitempty"`                                // AIG-4
	ResourceGroup            []CE `hl7:"false,Resource Group" json:"resource_group,omitempty"`                             // AIG-5
	ResourceQuantity         *NM  `hl7:"false,Resource Quantity" json:"resource_quantity,omitempty"`                       // AIG-6
	ResourceQuantityUnits    *CE  `hl7:"false,Resource Quantity Units" json:"resource_quantity_units,omitempty"`           // AIG-7
	StartDateTime            *TS  `hl7:"false,Start Date/Time" json:"start_date_time,omitempty"`                           // AIG-8
	StartDateTimeOffset      *NM  `hl7:"false,Start Date/Time Offset" json:"start_date_time_offset,omitempty"`             // AIG-9
	StartDateTimeOffsetUnits *CE  `hl7:"false,Start Date/Time Offset Units" json:"start_date_time_offset_units,omitempty"` // AIG-10
	Duration                 *NM  `hl7:"false,Duration" json:"duration,omitempty"`                                         // AIG-11
	DurationUnits            *CE  `hl7:"false,Duration Units" json:"duration_units,omitempty"`                             // AIG-12
	AllowSubstitutionCode    *IS  `hl7:"false,Allow Substitution Code" json:"allow_substitution_code,omitempty"`           // AIG-13
	FillerStatusCode         *CE  `hl7:"false,Filler Status Code" json:"filler_status_code,omitempty"`                     // AIG-14
}

func (s *AIG) SegmentName() string {
	return "AIG"
}

//  AIL represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type AIL struct {
	SetIDAIL                 *SI  `hl7:"true,Set ID - AIL" json:"set_idail,omitempty"`                                     // AIL-1
	SegmentActionCode        *ID  `hl7:"false,Segment Action Code" json:"segment_action_code,omitempty"`                   // AIL-2
	LocationResourceID       []PL `hl7:"false,Location Resource ID" json:"location_resource_id,omitempty"`                 // AIL-3
	LocationTypeAIL          *CE  `hl7:"false,Location Type-AIL" json:"location_type_ail,omitempty"`                       // AIL-4
	LocationGroup            *CE  `hl7:"false,Location Group" json:"location_group,omitempty"`                             // AIL-5
	StartDateTime            *TS  `hl7:"false,Start Date/Time" json:"start_date_time,omitempty"`                           // AIL-6
	StartDateTimeOffset      *NM  `hl7:"false,Start Date/Time Offset" json:"start_date_time_offset,omitempty"`             // AIL-7
	StartDateTimeOffsetUnits *CE  `hl7:"false,Start Date/Time Offset Units" json:"start_date_time_offset_units,omitempty"` // AIL-8
	Duration                 *NM  `hl7:"false,Duration" json:"duration,omitempty"`                                         // AIL-9
	DurationUnits            *CE  `hl7:"false,Duration Units" json:"duration_units,omitempty"`                             // AIL-10
	AllowSubstitutionCode    *IS  `hl7:"false,Allow Substitution Code" json:"allow_substitution_code,omitempty"`           // AIL-11
	FillerStatusCode         *CE  `hl7:"false,Filler Status Code" json:"filler_status_code,omitempty"`                     // AIL-12
}

func (s *AIL) SegmentName() string {
	return "AIL"
}

//  AIP represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type AIP struct {
	SetIDAIP                 *SI   `hl7:"true,Set ID - AIP" json:"set_idaip,omitempty"`                                     // AIP-1
	SegmentActionCode        *ID   `hl7:"false,Segment Action Code" json:"segment_action_code,omitempty"`                   // AIP-2
	PersonnelResourceID      []XCN `hl7:"false,Personnel Resource ID" json:"personnel_resource_id,omitempty"`               // AIP-3
	ResourceType             *CE   `hl7:"false,Resource Type" json:"resource_type,omitempty"`                               // AIP-4
	ResourceGroup            *CE   `hl7:"false,Resource Group" json:"resource_group,omitempty"`                             // AIP-5
	StartDateTime            *TS   `hl7:"false,Start Date/Time" json:"start_date_time,omitempty"`                           // AIP-6
	StartDateTimeOffset      *NM   `hl7:"false,Start Date/Time Offset" json:"start_date_time_offset,omitempty"`             // AIP-7
	StartDateTimeOffsetUnits *CE   `hl7:"false,Start Date/Time Offset Units" json:"start_date_time_offset_units,omitempty"` // AIP-8
	Duration                 *NM   `hl7:"false,Duration" json:"duration,omitempty"`                                         // AIP-9
	DurationUnits            *CE   `hl7:"false,Duration Units" json:"duration_units,omitempty"`                             // AIP-10
	AllowSubstitutionCode    *IS   `hl7:"false,Allow Substitution Code" json:"allow_substitution_code,omitempty"`           // AIP-11
	FillerStatusCode         *CE   `hl7:"false,Filler Status Code" json:"filler_status_code,omitempty"`                     // AIP-12
}

func (s *AIP) SegmentName() string {
	return "AIP"
}

//  AIS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type AIS struct {
	SetIDAIS                             *SI  `hl7:"true,Set ID - AIS" json:"set_idais,omitempty"`                                                           // AIS-1
	SegmentActionCode                    *ID  `hl7:"false,Segment Action Code" json:"segment_action_code,omitempty"`                                         // AIS-2
	UniversalServiceIdentifier           *CE  `hl7:"true,Universal Service Identifier" json:"universal_service_identifier,omitempty"`                        // AIS-3
	StartDateTime                        *TS  `hl7:"false,Start Date/Time" json:"start_date_time,omitempty"`                                                 // AIS-4
	StartDateTimeOffset                  *NM  `hl7:"false,Start Date/Time Offset" json:"start_date_time_offset,omitempty"`                                   // AIS-5
	StartDateTimeOffsetUnits             *CE  `hl7:"false,Start Date/Time Offset Units" json:"start_date_time_offset_units,omitempty"`                       // AIS-6
	Duration                             *NM  `hl7:"false,Duration" json:"duration,omitempty"`                                                               // AIS-7
	DurationUnits                        *CE  `hl7:"false,Duration Units" json:"duration_units,omitempty"`                                                   // AIS-8
	AllowSubstitutionCode                *IS  `hl7:"false,Allow Substitution Code" json:"allow_substitution_code,omitempty"`                                 // AIS-9
	FillerStatusCode                     *CE  `hl7:"false,Filler Status Code" json:"filler_status_code,omitempty"`                                           // AIS-10
	PlacerSupplementalServiceInformation []CE `hl7:"false,Placer Supplemental Service Information" json:"placer_supplemental_service_information,omitempty"` // AIS-11
	FillerSupplementalServiceInformation []CE `hl7:"false,Filler Supplemental Service Information" json:"filler_supplemental_service_information,omitempty"` // AIS-12
}

func (s *AIS) SegmentName() string {
	return "AIS"
}

//  AL1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type AL1 struct {
	SetIDAL1                        *SI  `hl7:"true,Set ID - AL1" json:"set_idal_1,omitempty"`                                               // AL1-1
	AllergenTypeCode                *CE  `hl7:"false,Allergen Type Code" json:"allergen_type_code,omitempty"`                                // AL1-2
	AllergenCodeMnemonicDescription *CE  `hl7:"true,Allergen Code/Mnemonic/Description" json:"allergen_code_mnemonic_description,omitempty"` // AL1-3
	AllergySeverityCode             *CE  `hl7:"false,Allergy Severity Code" json:"allergy_severity_code,omitempty"`                          // AL1-4
	AllergyReactionCode             []ST `hl7:"false,Allergy Reaction Code" json:"allergy_reaction_code,omitempty"`                          // AL1-5
	IdentificationDate              *DT  `hl7:"false,Identification Date" json:"identification_date,omitempty"`                              // AL1-6
}

func (s *AL1) SegmentName() string {
	return "AL1"
}

//  APR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type APR struct {
	TimeSelectionCriteria     []SCV `hl7:"false,Time Selection Criteria" json:"time_selection_criteria,omitempty"`         // APR-1
	ResourceSelectionCriteria []SCV `hl7:"false,Resource Selection Criteria" json:"resource_selection_criteria,omitempty"` // APR-2
	LocationSelectionCriteria []SCV `hl7:"false,Location Selection Criteria" json:"location_selection_criteria,omitempty"` // APR-3
	SlotSpacingCriteria       *NM   `hl7:"false,Slot Spacing Criteria" json:"slot_spacing_criteria,omitempty"`             // APR-4
	FillerOverrideCriteria    []SCV `hl7:"false,Filler Override Criteria" json:"filler_override_criteria,omitempty"`       // APR-5
}

func (s *APR) SegmentName() string {
	return "APR"
}

//  ARQ represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ARQ struct {
	PlacerAppointmentID         *EI   `hl7:"true,Placer Appointment ID" json:"placer_appointment_id,omitempty"`                      // ARQ-1
	FillerAppointmentID         *EI   `hl7:"false,Filler Appointment ID" json:"filler_appointment_id,omitempty"`                     // ARQ-2
	OccurrenceNumber            *NM   `hl7:"false,Occurrence Number" json:"occurrence_number,omitempty"`                             // ARQ-3
	PlacerGroupNumber           *EI   `hl7:"false,Placer Group Number" json:"placer_group_number,omitempty"`                         // ARQ-4
	ScheduleID                  *CE   `hl7:"false,Schedule ID" json:"schedule_id,omitempty"`                                         // ARQ-5
	RequestEventReason          *CE   `hl7:"false,Request Event Reason" json:"request_event_reason,omitempty"`                       // ARQ-6
	AppointmentReason           *CE   `hl7:"false,Appointment Reason" json:"appointment_reason,omitempty"`                           // ARQ-7
	AppointmentType             *CE   `hl7:"false,Appointment Type" json:"appointment_type,omitempty"`                               // ARQ-8
	AppointmentDuration         *NM   `hl7:"false,Appointment Duration" json:"appointment_duration,omitempty"`                       // ARQ-9
	AppointmentDurationUnits    *CE   `hl7:"false,Appointment Duration Units" json:"appointment_duration_units,omitempty"`           // ARQ-10
	RequestedStartDateTimeRange []DR  `hl7:"false,Requested Start Date/Time Range" json:"requested_start_date_time_range,omitempty"` // ARQ-11
	PriorityARQ                 *ST   `hl7:"false,Priority-ARQ" json:"priority_arq,omitempty"`                                       // ARQ-12
	RepeatingInterval           *RI   `hl7:"false,Repeating Interval" json:"repeating_interval,omitempty"`                           // ARQ-13
	RepeatingIntervalDuration   *ST   `hl7:"false,Repeating Interval Duration" json:"repeating_interval_duration,omitempty"`         // ARQ-14
	PlacerContactPerson         []XCN `hl7:"true,Placer Contact Person" json:"placer_contact_person,omitempty"`                      // ARQ-15
	PlacerContactPhoneNumber    []XTN `hl7:"false,Placer Contact Phone Number" json:"placer_contact_phone_number,omitempty"`         // ARQ-16
	PlacerContactAddress        []XAD `hl7:"false,Placer Contact Address" json:"placer_contact_address,omitempty"`                   // ARQ-17
	PlacerContactLocation       *PL   `hl7:"false,Placer Contact Location" json:"placer_contact_location,omitempty"`                 // ARQ-18
	EnteredByPerson             []XCN `hl7:"true,Entered By Person" json:"entered_by_person,omitempty"`                              // ARQ-19
	EnteredByPhoneNumber        []XTN `hl7:"false,Entered By Phone Number" json:"entered_by_phone_number,omitempty"`                 // ARQ-20
	EnteredByLocation           *PL   `hl7:"false,Entered By Location" json:"entered_by_location,omitempty"`                         // ARQ-21
	ParentPlacerAppointmentID   *EI   `hl7:"false,Parent Placer Appointment ID" json:"parent_placer_appointment_id,omitempty"`       // ARQ-22
	ParentFillerAppointmentID   *EI   `hl7:"false,Parent Filler Appointment ID" json:"parent_filler_appointment_id,omitempty"`       // ARQ-23
	PlacerOrderNumber           []EI  `hl7:"false,Placer Order Number" json:"placer_order_number,omitempty"`                         // ARQ-24
	FillerOrderNumber           []EI  `hl7:"false,Filler Order Number" json:"filler_order_number,omitempty"`                         // ARQ-25
}

func (s *ARQ) SegmentName() string {
	return "ARQ"
}

//  AUT represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type AUT struct {
	AuthorizingPayorPlanID       *CE `hl7:"false,Authorizing Payor, Plan ID" json:"authorizing_payor_plan_id,omitempty"`            // AUT-1
	AuthorizingPayorCompanyID    *CE `hl7:"true,Authorizing Payor, Company ID" json:"authorizing_payor_company_id,omitempty"`       // AUT-2
	AuthorizingPayorCompanyName  *ST `hl7:"false,Authorizing Payor, Company Name" json:"authorizing_payor_company_name,omitempty"`  // AUT-3
	AuthorizationEffectiveDate   *TS `hl7:"false,Authorization Effective Date" json:"authorization_effective_date,omitempty"`       // AUT-4
	AuthorizationExpirationDate  *TS `hl7:"false,Authorization Expiration Date" json:"authorization_expiration_date,omitempty"`     // AUT-5
	AuthorizationIdentifier      *EI `hl7:"false,Authorization Identifier" json:"authorization_identifier,omitempty"`               // AUT-6
	ReimbursementLimit           *CP `hl7:"false,Reimbursement Limit" json:"reimbursement_limit,omitempty"`                         // AUT-7
	RequestedNumberOfTreatments  *NM `hl7:"false,Requested Number Of Treatments" json:"requested_number_of_treatments,omitempty"`   // AUT-8
	AuthorizedNumberOfTreatments *NM `hl7:"false,Authorized Number Of Treatments" json:"authorized_number_of_treatments,omitempty"` // AUT-9
	ProcessDate                  *TS `hl7:"false,Process Date" json:"process_date,omitempty"`                                       // AUT-10
}

func (s *AUT) SegmentName() string {
	return "AUT"
}

//  BHS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type BHS struct {
	BatchFieldSeparator       *ST `hl7:"true,Batch Field Separator" json:"batch_field_separator,omitempty"`              // BHS-1
	BatchEncodingCharacters   *ST `hl7:"true,Batch Encoding Characters" json:"batch_encoding_characters,omitempty"`      // BHS-2
	BatchSendingApplication   *HD `hl7:"false,Batch Sending Application" json:"batch_sending_application,omitempty"`     // BHS-3
	BatchSendingFacility      *HD `hl7:"false,Batch Sending Facility" json:"batch_sending_facility,omitempty"`           // BHS-4
	BatchReceivingApplication *HD `hl7:"false,Batch Receiving Application" json:"batch_receiving_application,omitempty"` // BHS-5
	BatchReceivingFacility    *HD `hl7:"false,Batch Receiving Facility" json:"batch_receiving_facility,omitempty"`       // BHS-6
	BatchCreationDateTime     *TS `hl7:"false,Batch Creation Date/Time" json:"batch_creation_date_time,omitempty"`       // BHS-7
	BatchSecurity             *ST `hl7:"false,Batch Security" json:"batch_security,omitempty"`                           // BHS-8
	BatchNameIDType           *ST `hl7:"false,Batch Name/ID/Type" json:"batch_name_id_type,omitempty"`                   // BHS-9
	BatchComment              *ST `hl7:"false,Batch Comment" json:"batch_comment,omitempty"`                             // BHS-10
	BatchControlID            *ST `hl7:"false,Batch Control ID" json:"batch_control_id,omitempty"`                       // BHS-11
	ReferenceBatchControlID   *ST `hl7:"false,Reference Batch Control ID" json:"reference_batch_control_id,omitempty"`   // BHS-12
}

func (s *BHS) SegmentName() string {
	return "BHS"
}

//  BLC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type BLC struct {
	BloodProductCode *CE `hl7:"false,Blood Product Code" json:"blood_product_code,omitempty"` // BLC-1
	BloodAmount      *CQ `hl7:"false,Blood Amount" json:"blood_amount,omitempty"`             // BLC-2
}

func (s *BLC) SegmentName() string {
	return "BLC"
}

//  BLG represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type BLG struct {
	WhenToCharge     *CCD `hl7:"false,When To Charge" json:"when_to_charge,omitempty"`         // BLG-1
	ChargeType       *ID  `hl7:"false,Charge Type" json:"charge_type,omitempty"`               // BLG-2
	AccountID        *CX  `hl7:"false,Account ID" json:"account_id,omitempty"`                 // BLG-3
	ChargeTypeReason *CWE `hl7:"false,Charge Type Reason" json:"charge_type_reason,omitempty"` // BLG-4
}

func (s *BLG) SegmentName() string {
	return "BLG"
}

//  BPO represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type BPO struct {
	SetIDBPO                       *SI   `hl7:"true,Set ID - BPO" json:"set_idbpo,omitempty"`                                                 // BPO-1
	BPUniversalServiceID           *CWE  `hl7:"true,BP Universal Service ID" json:"bp_universal_service_id,omitempty"`                        // BPO-2
	BPProcessingRequirements       []CWE `hl7:"false,BP  Processing Requirements" json:"bp_processing_requirements,omitempty"`                // BPO-3
	BPQuantity                     *NM   `hl7:"true,BP Quantity" json:"bp_quantity,omitempty"`                                                // BPO-4
	BPAmount                       *NM   `hl7:"false,BP Amount" json:"bp_amount,omitempty"`                                                   // BPO-5
	BPUnits                        *CE   `hl7:"false,BP Units" json:"bp_units,omitempty"`                                                     // BPO-6
	BPIntendedUseDateTime          *TS   `hl7:"false,BP Intended Use Date/Time" json:"bp_intended_use_date_time,omitempty"`                   // BPO-7
	BPIntendedDispenseFromLocation *PL   `hl7:"false,BP Intended Dispense From Location" json:"bp_intended_dispense_from_location,omitempty"` // BPO-8
	BPIntendedDispenseFromAddress  *XAD  `hl7:"false,BP Intended Dispense From Address" json:"bp_intended_dispense_from_address,omitempty"`   // BPO-9
	BPRequestedDispenseDateTime    *TS   `hl7:"false,BP Requested Dispense Date/Time" json:"bp_requested_dispense_date_time,omitempty"`       // BPO-10
	BPRequestedDispenseToLocation  *PL   `hl7:"false,BP Requested Dispense To Location" json:"bp_requested_dispense_to_location,omitempty"`   // BPO-11
	BPRequestedDispenseToAddress   *XAD  `hl7:"false,BP Requested Dispense To Address" json:"bp_requested_dispense_to_address,omitempty"`     // BPO-12
	BPIndicationForUse             []CWE `hl7:"false,BP Indication For Use" json:"bp_indication_for_use,omitempty"`                           // BPO-13
	BPInformedConsentIndicator     *ID   `hl7:"false,BP Informed Consent Indicator" json:"bp_informed_consent_indicator,omitempty"`           // BPO-14
}

func (s *BPO) SegmentName() string {
	return "BPO"
}

//  BPX represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type BPX struct {
	SetIDBPX                    *SI   `hl7:"true,Set ID - BPX" json:"set_idbpx,omitempty"`                                           // BPX-1
	BPDispenseStatus            *CWE  `hl7:"true,BP Dispense Status" json:"bp_dispense_status,omitempty"`                            // BPX-2
	BPStatus                    *ID   `hl7:"true,BP Status" json:"bp_status,omitempty"`                                              // BPX-3
	BPDateTimeOfStatus          *TS   `hl7:"true,BP Date/Time Of Status" json:"bp_date_time_of_status,omitempty"`                    // BPX-4
	BCDonationID                *EI   `hl7:"false,BC Donation ID" json:"bc_donation_id,omitempty"`                                   // BPX-5
	BCComponent                 *CNE  `hl7:"false,BC Component" json:"bc_component,omitempty"`                                       // BPX-6
	BCDonationTypeIntendedUse   *CNE  `hl7:"false,BC Donation Type / Intended Use" json:"bc_donation_type_intended_use,omitempty"`   // BPX-7
	CPCommercialProduct         *CWE  `hl7:"false,CP Commercial Product" json:"cp_commercial_product,omitempty"`                     // BPX-8
	CPManufacturer              *XON  `hl7:"false,CP Manufacturer" json:"cp_manufacturer,omitempty"`                                 // BPX-9
	CPLotNumber                 *EI   `hl7:"false,CP Lot Number" json:"cp_lot_number,omitempty"`                                     // BPX-10
	BPBloodGroup                *CNE  `hl7:"false,BP Blood Group" json:"bp_blood_group,omitempty"`                                   // BPX-11
	BCSpecialTesting            []CNE `hl7:"false,BC Special Testing" json:"bc_special_testing,omitempty"`                           // BPX-12
	BPExpirationDateTime        *TS   `hl7:"false,BP Expiration Date/Time" json:"bp_expiration_date_time,omitempty"`                 // BPX-13
	BPQuantity                  *NM   `hl7:"true,BP Quantity" json:"bp_quantity,omitempty"`                                          // BPX-14
	BPAmount                    *NM   `hl7:"false,BP Amount" json:"bp_amount,omitempty"`                                             // BPX-15
	BPUnits                     *CE   `hl7:"false,BP Units" json:"bp_units,omitempty"`                                               // BPX-16
	BPUniqueID                  *EI   `hl7:"false,BP Unique ID" json:"bp_unique_id,omitempty"`                                       // BPX-17
	BPActualDispensedToLocation *PL   `hl7:"false,BP Actual Dispensed To Location" json:"bp_actual_dispensed_to_location,omitempty"` // BPX-18
	BPActualDispensedToAddress  *XAD  `hl7:"false,BP Actual Dispensed To Address" json:"bp_actual_dispensed_to_address,omitempty"`   // BPX-19
	BPDispensedToReceiver       *XCN  `hl7:"false,BP Dispensed To Receiver" json:"bp_dispensed_to_receiver,omitempty"`               // BPX-20
	BPDispensingIndividual      *XCN  `hl7:"false,BP Dispensing Individual" json:"bp_dispensing_individual,omitempty"`               // BPX-21
}

func (s *BPX) SegmentName() string {
	return "BPX"
}

//  BTS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type BTS struct {
	BatchMessageCount *ST  `hl7:"false,Batch Message Count" json:"batch_message_count,omitempty"` // BTS-1
	BatchComment      *ST  `hl7:"false,Batch Comment" json:"batch_comment,omitempty"`             // BTS-2
	BatchTotals       []NM `hl7:"false,Batch Totals" json:"batch_totals,omitempty"`               // BTS-3
}

func (s *BTS) SegmentName() string {
	return "BTS"
}

//  BTX represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type BTX struct {
	SetIDBTX                           *SI   `hl7:"true,Set ID - BTX" json:"set_idbtx,omitempty"`                                                             // BTX-1
	BCDonationID                       *EI   `hl7:"false,BC Donation ID" json:"bc_donation_id,omitempty"`                                                     // BTX-2
	BCComponent                        *CNE  `hl7:"false,BC Component" json:"bc_component,omitempty"`                                                         // BTX-3
	BCBloodGroup                       *CNE  `hl7:"false,BC Blood Group" json:"bc_blood_group,omitempty"`                                                     // BTX-4
	CPCommercialProduct                *CWE  `hl7:"false,CP Commercial Product" json:"cp_commercial_product,omitempty"`                                       // BTX-5
	CPManufacturer                     *XON  `hl7:"false,CP Manufacturer" json:"cp_manufacturer,omitempty"`                                                   // BTX-6
	CPLotNumber                        *EI   `hl7:"false,CP Lot Number" json:"cp_lot_number,omitempty"`                                                       // BTX-7
	BPQuantity                         *NM   `hl7:"true,BP Quantity" json:"bp_quantity,omitempty"`                                                            // BTX-8
	BPAmount                           *NM   `hl7:"false,BP Amount" json:"bp_amount,omitempty"`                                                               // BTX-9
	BPUnits                            *CE   `hl7:"false,BP Units" json:"bp_units,omitempty"`                                                                 // BTX-10
	BPTransfusionDispositionStatus     *CWE  `hl7:"true,BP Transfusion/Disposition Status" json:"bp_transfusion_disposition_status,omitempty"`                // BTX-11
	BPMessageStatus                    *ID   `hl7:"true,BP Message Status" json:"bp_message_status,omitempty"`                                                // BTX-12
	BPDateTimeOfStatus                 *TS   `hl7:"true,BP Date/Time Of Status" json:"bp_date_time_of_status,omitempty"`                                      // BTX-13
	BPAdministrator                    *XCN  `hl7:"false,BP Administrator" json:"bp_administrator,omitempty"`                                                 // BTX-14
	BPVerifier                         *XCN  `hl7:"false,BP Verifier" json:"bp_verifier,omitempty"`                                                           // BTX-15
	BPTransfusionStartDateTimeOfStatus *TS   `hl7:"false,BP Transfusion Start Date/Time Of Status" json:"bp_transfusion_start_date_time_of_status,omitempty"` // BTX-16
	BPTransfusionEndDateTimeOfStatus   *TS   `hl7:"false,BP Transfusion End Date/Time Of Status" json:"bp_transfusion_end_date_time_of_status,omitempty"`     // BTX-17
	BPAdverseReactionType              []CWE `hl7:"false,BP Adverse Reaction Type" json:"bp_adverse_reaction_type,omitempty"`                                 // BTX-18
	BPTransfusionInterruptedReason     *CWE  `hl7:"false,BP Transfusion Interrupted Reason" json:"bp_transfusion_interrupted_reason,omitempty"`               // BTX-19
}

func (s *BTX) SegmentName() string {
	return "BTX"
}

//  CDM represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CDM struct {
	PrimaryKeyValueCDM           *CE   `hl7:"true,Primary Key Value - CDM" json:"primary_key_value_cdm,omitempty"`                  // CDM-1
	ChargeCodeAlias              []CE  `hl7:"false,Charge Code Alias" json:"charge_code_alias,omitempty"`                           // CDM-2
	ChargeDescriptionShort       *ST   `hl7:"true,Charge Description Short" json:"charge_description_short,omitempty"`              // CDM-3
	ChargeDescriptionLong        *ST   `hl7:"false,Charge Description Long" json:"charge_description_long,omitempty"`               // CDM-4
	DescriptionOverrideIndicator *IS   `hl7:"false,Description Override Indicator" json:"description_override_indicator,omitempty"` // CDM-5
	ExplodingCharges             []CE  `hl7:"false,Exploding Charges" json:"exploding_charges,omitempty"`                           // CDM-6
	ProcedureCode                []CE  `hl7:"false,Procedure Code" json:"procedure_code,omitempty"`                                 // CDM-7
	ActiveInactiveFlag           *ID   `hl7:"false,Active/Inactive Flag" json:"active_inactive_flag,omitempty"`                     // CDM-8
	InventoryNumber              []CE  `hl7:"false,Inventory Number" json:"inventory_number,omitempty"`                             // CDM-9
	ResourceLoad                 *NM   `hl7:"false,Resource Load" json:"resource_load,omitempty"`                                   // CDM-10
	ContractNumber               []CX  `hl7:"false,Contract Number" json:"contract_number,omitempty"`                               // CDM-11
	ContractOrganization         []XON `hl7:"false,Contract Organization" json:"contract_organization,omitempty"`                   // CDM-12
	RoomFeeIndicator             *ID   `hl7:"false,Room Fee Indicator" json:"room_fee_indicator,omitempty"`                         // CDM-13
}

func (s *CDM) SegmentName() string {
	return "CDM"
}

//  CER represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CER struct {
	SetIDCER                                                 *SI   `hl7:"true,Set ID - CER" json:"set_idcer,omitempty"`                                                                                                           // CER-1
	SerialNumber                                             *ST   `hl7:"false,Serial Number" json:"serial_number,omitempty"`                                                                                                     // CER-2
	Version                                                  *ST   `hl7:"false,Version" json:"version,omitempty"`                                                                                                                 // CER-3
	GrantingAuthority                                        *XON  `hl7:"false,Granting Authority" json:"granting_authority,omitempty"`                                                                                           // CER-4
	IssuingAuthority                                         *XCN  `hl7:"false,Issuing Authority" json:"issuing_authority,omitempty"`                                                                                             // CER-5
	SignatureOfIssuingAuthority                              *ED   `hl7:"false,Signature Of Issuing Authority" json:"signature_of_issuing_authority,omitempty"`                                                                   // CER-6
	GrantingCountry                                          *ID   `hl7:"false,Granting Country" json:"granting_country,omitempty"`                                                                                               // CER-7
	GrantingStateProvince                                    *CWE  `hl7:"false,Granting State/Province" json:"granting_state_province,omitempty"`                                                                                 // CER-8
	GrantingCountyParish                                     *CWE  `hl7:"false,Granting County/Parish" json:"granting_county_parish,omitempty"`                                                                                   // CER-9
	CertificateType                                          *CWE  `hl7:"false,Certificate Type" json:"certificate_type,omitempty"`                                                                                               // CER-10
	CertificateDomain                                        *CWE  `hl7:"false,Certificate Domain" json:"certificate_domain,omitempty"`                                                                                           // CER-11
	SubjectID                                                *ID   `hl7:"false,Subject ID" json:"subject_id,omitempty"`                                                                                                           // CER-12
	SubjectName                                              *ST   `hl7:"true,Subject Name" json:"subject_name,omitempty"`                                                                                                        // CER-13
	SubjectDirectoryAttributeExtensionHealthProfessionalData []CWE `hl7:"false,Subject Directory Attribute Extension (Health Professional Data)" json:"subject_directory_attribute_extension_health_professional_data,omitempty"` // CER-14
	SubjectPublicKeyInfo                                     *CWE  `hl7:"false,Subject Public Key Info" json:"subject_public_key_info,omitempty"`                                                                                 // CER-15
	AuthorityKeyIdentifier                                   *CWE  `hl7:"false,Authority Key Identifier" json:"authority_key_identifier,omitempty"`                                                                               // CER-16
	BasicConstraint                                          *ID   `hl7:"false,Basic Constraint" json:"basic_constraint,omitempty"`                                                                                               // CER-17
	CRLDistributionPoint                                     []CWE `hl7:"false,CRL Distribution Point" json:"crl_distribution_point,omitempty"`                                                                                   // CER-18
	JurisdictionCountry                                      *ID   `hl7:"false,Jurisdiction Country" json:"jurisdiction_country,omitempty"`                                                                                       // CER-19
	JurisdictionStateProvince                                *CWE  `hl7:"false,Jurisdiction State/Province" json:"jurisdiction_state_province,omitempty"`                                                                         // CER-20
	JurisdictionCountyParish                                 *CWE  `hl7:"false,Jurisdiction County/Parish" json:"jurisdiction_county_parish,omitempty"`                                                                           // CER-21
	JurisdictionBreadth                                      []CWE `hl7:"false,Jurisdiction Breadth" json:"jurisdiction_breadth,omitempty"`                                                                                       // CER-22
	GrantingDate                                             *TS   `hl7:"false,Granting Date" json:"granting_date,omitempty"`                                                                                                     // CER-23
	IssuingDate                                              *TS   `hl7:"false,Issuing Date" json:"issuing_date,omitempty"`                                                                                                       // CER-24
	ActivationDate                                           *TS   `hl7:"false,Activation Date" json:"activation_date,omitempty"`                                                                                                 // CER-25
	InactivationDate                                         *TS   `hl7:"false,Inactivation Date" json:"inactivation_date,omitempty"`                                                                                             // CER-26
	ExpirationDate                                           *TS   `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`                                                                                                 // CER-27
	RenewalDate                                              *TS   `hl7:"false,Renewal Date" json:"renewal_date,omitempty"`                                                                                                       // CER-28
	RevocationDate                                           *TS   `hl7:"false,Revocation Date" json:"revocation_date,omitempty"`                                                                                                 // CER-29
	RevocationReasonCode                                     *CE   `hl7:"false,Revocation Reason Code" json:"revocation_reason_code,omitempty"`                                                                                   // CER-30
	CertificateStatus                                        *CWE  `hl7:"false,Certificate Status" json:"certificate_status,omitempty"`                                                                                           // CER-31
}

func (s *CER) SegmentName() string {
	return "CER"
}

//  CM0 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CM0 struct {
	SetIDCM0                *SI   `hl7:"false,Set ID - CM0" json:"set_idcm_0,omitempty"`                               // CM0-1
	SponsorStudyID          *EI   `hl7:"true,Sponsor Study ID" json:"sponsor_study_id,omitempty"`                      // CM0-2
	AlternateStudyID        []EI  `hl7:"false,Alternate Study ID" json:"alternate_study_id,omitempty"`                 // CM0-3
	TitleOfStudy            *ST   `hl7:"true,Title Of Study" json:"title_of_study,omitempty"`                          // CM0-4
	ChairmanOfStudy         []XCN `hl7:"false,Chairman Of Study" json:"chairman_of_study,omitempty"`                   // CM0-5
	LastIRBApprovalDate     *DT   `hl7:"false,Last IRB Approval Date" json:"last_irb_approval_date,omitempty"`         // CM0-6
	TotalAccrualToDate      *NM   `hl7:"false,Total Accrual To Date" json:"total_accrual_to_date,omitempty"`           // CM0-7
	LastAccrualDate         *DT   `hl7:"false,Last Accrual Date" json:"last_accrual_date,omitempty"`                   // CM0-8
	ContactForStudy         []XCN `hl7:"false,Contact For Study" json:"contact_for_study,omitempty"`                   // CM0-9
	ContactSTelephoneNumber *XTN  `hl7:"false,Contact'S Telephone Number" json:"contact_s_telephone_number,omitempty"` // CM0-10
	ContactSAddress         []XAD `hl7:"false,Contact'S Address" json:"contact_s_address,omitempty"`                   // CM0-11
}

func (s *CM0) SegmentName() string {
	return "CM0"
}

//  CM1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CM1 struct {
	SetIDCM1                *SI `hl7:"true,Set ID - CM1" json:"set_idcm_1,omitempty"`                               // CM1-1
	StudyPhaseIdentifier    *CE `hl7:"true,Study Phase Identifier" json:"study_phase_identifier,omitempty"`         // CM1-2
	DescriptionOfStudyPhase *ST `hl7:"true,Description Of Study Phase" json:"description_of_study_phase,omitempty"` // CM1-3
}

func (s *CM1) SegmentName() string {
	return "CM1"
}

//  CM2 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CM2 struct {
	SetIDCM2                     *SI  `hl7:"false,Set ID - CM2" json:"set_idcm_2,omitempty"`                                          // CM2-1
	ScheduledTimePoint           *CE  `hl7:"true,Scheduled Time Point" json:"scheduled_time_point,omitempty"`                         // CM2-2
	DescriptionOfTimePoint       *ST  `hl7:"false,Description Of Time Point" json:"description_of_time_point,omitempty"`              // CM2-3
	EventsScheduledThisTimePoint []CE `hl7:"true,Events Scheduled This Time Point" json:"events_scheduled_this_time_point,omitempty"` // CM2-4
}

func (s *CM2) SegmentName() string {
	return "CM2"
}

//  CNS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CNS struct {
	StartingNotificationReferenceNumber *NM `hl7:"false,Starting Notification Reference Number" json:"starting_notification_reference_number,omitempty"` // CNS-1
	EndingNotificationReferenceNumber   *NM `hl7:"false,Ending Notification Reference Number" json:"ending_notification_reference_number,omitempty"`     // CNS-2
	StartingNotificationDateTime        *TS `hl7:"false,Starting Notification Date/Time" json:"starting_notification_date_time,omitempty"`               // CNS-3
	EndingNotificationDateTime          *TS `hl7:"false,Ending Notification Date/Time" json:"ending_notification_date_time,omitempty"`                   // CNS-4
	StartingNotificationCode            *CE `hl7:"false,Starting Notification Code" json:"starting_notification_code,omitempty"`                         // CNS-5
	EndingNotificationCode              *CE `hl7:"false,Ending Notification Code" json:"ending_notification_code,omitempty"`                             // CNS-6
}

func (s *CNS) SegmentName() string {
	return "CNS"
}

//  CON represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CON struct {
	SetIDCON                               *SI   `hl7:"true,Set ID - CON" json:"set_idcon,omitempty"`                                                               // CON-1
	ConsentType                            *CWE  `hl7:"false,Consent Type" json:"consent_type,omitempty"`                                                           // CON-2
	ConsentFormID                          *ST   `hl7:"false,Consent Form ID" json:"consent_form_id,omitempty"`                                                     // CON-3
	ConsentFormNumber                      *EI   `hl7:"false,Consent Form Number" json:"consent_form_number,omitempty"`                                             // CON-4
	ConsentText                            []FT  `hl7:"false,Consent Text" json:"consent_text,omitempty"`                                                           // CON-5
	SubjectSpecificConsentText             []FT  `hl7:"false,Subject-Specific Consent Text" json:"subject_specific_consent_text,omitempty"`                         // CON-6
	ConsentBackground                      []FT  `hl7:"false,Consent Background" json:"consent_background,omitempty"`                                               // CON-7
	SubjectSpecificConsentBackground       []FT  `hl7:"false,Subject-Specific Consent Background" json:"subject_specific_consent_background,omitempty"`             // CON-8
	ConsenterImposedLimitations            []FT  `hl7:"false,Consenter-Imposed Limitations" json:"consenter_imposed_limitations,omitempty"`                         // CON-9
	ConsentMode                            *CNE  `hl7:"false,Consent Mode" json:"consent_mode,omitempty"`                                                           // CON-10
	ConsentStatus                          *CNE  `hl7:"true,Consent Status" json:"consent_status,omitempty"`                                                        // CON-11
	ConsentDiscussionDateTime              *TS   `hl7:"false,Consent Discussion Date/Time" json:"consent_discussion_date_time,omitempty"`                           // CON-12
	ConsentDecisionDateTime                *TS   `hl7:"false,Consent Decision Date/Time" json:"consent_decision_date_time,omitempty"`                               // CON-13
	ConsentEffectiveDateTime               *TS   `hl7:"false,Consent Effective Date/Time" json:"consent_effective_date_time,omitempty"`                             // CON-14
	ConsentEndDateTime                     *TS   `hl7:"false,Consent End Date/Time" json:"consent_end_date_time,omitempty"`                                         // CON-15
	SubjectCompetenceIndicator             *ID   `hl7:"false,Subject Competence Indicator" json:"subject_competence_indicator,omitempty"`                           // CON-16
	TranslatorAssistanceIndicator          *ID   `hl7:"false,Translator Assistance Indicator" json:"translator_assistance_indicator,omitempty"`                     // CON-17
	LanguageTranslatedTo                   *ID   `hl7:"false,Language Translated To" json:"language_translated_to,omitempty"`                                       // CON-18
	InformationalMaterialSuppliedIndicator *ID   `hl7:"false,Informational Material Supplied Indicator" json:"informational_material_supplied_indicator,omitempty"` // CON-19
	ConsentBypassReason                    *CWE  `hl7:"false,Consent Bypass Reason" json:"consent_bypass_reason,omitempty"`                                         // CON-20
	ConsentDisclosureLevel                 *ID   `hl7:"false,Consent Disclosure Level" json:"consent_disclosure_level,omitempty"`                                   // CON-21
	ConsentNonDisclosureReason             *CWE  `hl7:"false,Consent Non-Disclosure Reason" json:"consent_non_disclosure_reason,omitempty"`                         // CON-22
	NonSubjectConsenterReason              *CWE  `hl7:"false,Non-Subject Consenter Reason" json:"non_subject_consenter_reason,omitempty"`                           // CON-23
	ConsenterID                            []XPN `hl7:"true,Consenter ID" json:"consenter_id,omitempty"`                                                            // CON-24
	RelationshipToSubjectTable             []IS  `hl7:"true,Relationship To Subject Table" json:"relationship_to_subject_table,omitempty"`                          // CON-25
}

func (s *CON) SegmentName() string {
	return "CON"
}

//  CSP represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CSP struct {
	StudyPhaseIdentifier    *CE `hl7:"true,Study Phase Identifier" json:"study_phase_identifier,omitempty"`            // CSP-1
	DateTimeStudyPhaseBegan *TS `hl7:"true,Date/Time Study Phase Began" json:"date_time_study_phase_began,omitempty"`  // CSP-2
	DateTimeStudyPhaseEnded *TS `hl7:"false,Date/Time Study Phase Ended" json:"date_time_study_phase_ended,omitempty"` // CSP-3
	StudyPhaseEvaluability  *CE `hl7:"false,Study Phase Evaluability" json:"study_phase_evaluability,omitempty"`       // CSP-4
}

func (s *CSP) SegmentName() string {
	return "CSP"
}

//  CSR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CSR struct {
	SponsorStudyID                     *EI   `hl7:"true,Sponsor Study ID" json:"sponsor_study_id,omitempty"`                                               // CSR-1
	AlternateStudyID                   *EI   `hl7:"false,Alternate Study ID" json:"alternate_study_id,omitempty"`                                          // CSR-2
	InstitutionRegisteringThePatient   *CE   `hl7:"false,Institution Registering The Patient" json:"institution_registering_the_patient,omitempty"`        // CSR-3
	SponsorPatientID                   *CX   `hl7:"true,Sponsor Patient ID" json:"sponsor_patient_id,omitempty"`                                           // CSR-4
	AlternatePatientIDCSR              *CX   `hl7:"false,Alternate Patient ID - CSR" json:"alternate_patient_idcsr,omitempty"`                             // CSR-5
	DateTimeOfPatientStudyRegistration *TS   `hl7:"true,Date/Time Of Patient Study Registration" json:"date_time_of_patient_study_registration,omitempty"` // CSR-6
	PersonPerformingStudyRegistration  []XCN `hl7:"false,Person Performing Study Registration" json:"person_performing_study_registration,omitempty"`      // CSR-7
	StudyAuthorizingProvider           []XCN `hl7:"true,Study Authorizing Provider" json:"study_authorizing_provider,omitempty"`                           // CSR-8
	DateTimePatientStudyConsentSigned  *TS   `hl7:"false,Date/Time Patient Study Consent Signed" json:"date_time_patient_study_consent_signed,omitempty"`  // CSR-9
	PatientStudyEligibilityStatus      *CE   `hl7:"false,Patient Study Eligibility Status" json:"patient_study_eligibility_status,omitempty"`              // CSR-10
	StudyRandomizationDateTime         []TS  `hl7:"false,Study Randomization Date/Time" json:"study_randomization_date_time,omitempty"`                    // CSR-11
	RandomizedStudyArm                 []CE  `hl7:"false,Randomized Study Arm" json:"randomized_study_arm,omitempty"`                                      // CSR-12
	StratumForStudyRandomization       []CE  `hl7:"false,Stratum For Study Randomization" json:"stratum_for_study_randomization,omitempty"`                // CSR-13
	PatientEvaluabilityStatus          *CE   `hl7:"false,Patient Evaluability Status" json:"patient_evaluability_status,omitempty"`                        // CSR-14
	DateTimeEndedStudy                 *TS   `hl7:"false,Date/Time Ended Study" json:"date_time_ended_study,omitempty"`                                    // CSR-15
	ReasonEndedStudy                   *CE   `hl7:"false,Reason Ended Study" json:"reason_ended_study,omitempty"`                                          // CSR-16
}

func (s *CSR) SegmentName() string {
	return "CSR"
}

//  CSS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CSS struct {
	StudyScheduledTimePoint        *CE  `hl7:"true,Study Scheduled Time Point" json:"study_scheduled_time_point,omitempty"`                  // CSS-1
	StudyScheduledPatientTimePoint *TS  `hl7:"false,Study Scheduled Patient Time Point" json:"study_scheduled_patient_time_point,omitempty"` // CSS-2
	StudyQualityControlCodes       []CE `hl7:"false,Study Quality Control Codes" json:"study_quality_control_codes,omitempty"`               // CSS-3
}

func (s *CSS) SegmentName() string {
	return "CSS"
}

//  CTD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CTD struct {
	ContactRole                     []CE  `hl7:"true,Contact Role" json:"contact_role,omitempty"`                                            // CTD-1
	ContactName                     []XPN `hl7:"false,Contact Name" json:"contact_name,omitempty"`                                           // CTD-2
	ContactAddress                  []XAD `hl7:"false,Contact Address" json:"contact_address,omitempty"`                                     // CTD-3
	ContactLocation                 *PL   `hl7:"false,Contact Location" json:"contact_location,omitempty"`                                   // CTD-4
	ContactCommunicationInformation []XTN `hl7:"false,Contact Communication Information" json:"contact_communication_information,omitempty"` // CTD-5
	PreferredMethodOfContact        *CE   `hl7:"false,Preferred Method Of Contact" json:"preferred_method_of_contact,omitempty"`             // CTD-6
	ContactIdentifiers              []PLN `hl7:"false,Contact Identifiers" json:"contact_identifiers,omitempty"`                             // CTD-7
}

func (s *CTD) SegmentName() string {
	return "CTD"
}

//  CTI represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type CTI struct {
	SponsorStudyID          *EI `hl7:"true,Sponsor Study ID" json:"sponsor_study_id,omitempty"`                      // CTI-1
	StudyPhaseIdentifier    *CE `hl7:"false,Study Phase Identifier" json:"study_phase_identifier,omitempty"`         // CTI-2
	StudyScheduledTimePoint *CE `hl7:"false,Study Scheduled Time Point" json:"study_scheduled_time_point,omitempty"` // CTI-3
}

func (s *CTI) SegmentName() string {
	return "CTI"
}

//  DB1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type DB1 struct {
	SetIDDB1                   *SI  `hl7:"true,Set ID - DB1" json:"set_iddb_1,omitempty"`                                        // DB1-1
	DisabledPersonCode         *IS  `hl7:"false,Disabled Person Code" json:"disabled_person_code,omitempty"`                     // DB1-2
	DisabledPersonIdentifier   []CX `hl7:"false,Disabled Person Identifier" json:"disabled_person_identifier,omitempty"`         // DB1-3
	DisabledIndicator          *ID  `hl7:"false,Disabled Indicator" json:"disabled_indicator,omitempty"`                         // DB1-4
	DisabilityStartDate        *DT  `hl7:"false,Disability Start Date" json:"disability_start_date,omitempty"`                   // DB1-5
	DisabilityEndDate          *DT  `hl7:"false,Disability End Date" json:"disability_end_date,omitempty"`                       // DB1-6
	DisabilityReturnToWorkDate *DT  `hl7:"false,Disability Return To Work Date" json:"disability_return_to_work_date,omitempty"` // DB1-7
	DisabilityUnableToWorkDate *DT  `hl7:"false,Disability Unable To Work Date" json:"disability_unable_to_work_date,omitempty"` // DB1-8
}

func (s *DB1) SegmentName() string {
	return "DB1"
}

//  DG1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type DG1 struct {
	SetIDDG1                *SI   `hl7:"true,Set ID - DG1" json:"set_iddg_1,omitempty"`                              // DG1-1
	DiagnosisCodingMethod   *ID   `hl7:"false,Diagnosis Coding Method" json:"diagnosis_coding_method,omitempty"`     // DG1-2
	DiagnosisCodeDG1        *CE   `hl7:"false,Diagnosis Code - DG1" json:"diagnosis_code_dg_1,omitempty"`            // DG1-3
	DiagnosisDescription    *ST   `hl7:"false,Diagnosis Description" json:"diagnosis_description,omitempty"`         // DG1-4
	DiagnosisDateTime       *TS   `hl7:"false,Diagnosis Date/Time" json:"diagnosis_date_time,omitempty"`             // DG1-5
	DiagnosisType           *IS   `hl7:"true,Diagnosis Type" json:"diagnosis_type,omitempty"`                        // DG1-6
	MajorDiagnosticCategory *CE   `hl7:"false,Major Diagnostic Category" json:"major_diagnostic_category,omitempty"` // DG1-7
	DiagnosticRelatedGroup  *CE   `hl7:"false,Diagnostic Related Group" json:"diagnostic_related_group,omitempty"`   // DG1-8
	DRGApprovalIndicator    *ID   `hl7:"false,DRG Approval Indicator" json:"drg_approval_indicator,omitempty"`       // DG1-9
	DRGGrouperReviewCode    *IS   `hl7:"false,DRG Grouper Review Code" json:"drg_grouper_review_code,omitempty"`     // DG1-10
	OutlierType             *CE   `hl7:"false,Outlier Type" json:"outlier_type,omitempty"`                           // DG1-11
	OutlierDays             *NM   `hl7:"false,Outlier Days" json:"outlier_days,omitempty"`                           // DG1-12
	OutlierCost             *CP   `hl7:"false,Outlier Cost" json:"outlier_cost,omitempty"`                           // DG1-13
	GrouperVersionAndType   *ST   `hl7:"false,Grouper Version And Type" json:"grouper_version_and_type,omitempty"`   // DG1-14
	DiagnosisPriority       *ID   `hl7:"false,Diagnosis Priority" json:"diagnosis_priority,omitempty"`               // DG1-15
	DiagnosingClinician     []XCN `hl7:"false,Diagnosing Clinician" json:"diagnosing_clinician,omitempty"`           // DG1-16
	DiagnosisClassification *IS   `hl7:"false,Diagnosis Classification" json:"diagnosis_classification,omitempty"`   // DG1-17
	ConfidentialIndicator   *ID   `hl7:"false,Confidential Indicator" json:"confidential_indicator,omitempty"`       // DG1-18
	AttestationDateTime     *TS   `hl7:"false,Attestation Date/Time" json:"attestation_date_time,omitempty"`         // DG1-19
	DiagnosisIdentifier     *EI   `hl7:"false,Diagnosis Identifier" json:"diagnosis_identifier,omitempty"`           // DG1-20
	DiagnosisActionCode     *ID   `hl7:"false,Diagnosis Action Code" json:"diagnosis_action_code,omitempty"`         // DG1-21
}

func (s *DG1) SegmentName() string {
	return "DG1"
}

//  DRG represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type DRG struct {
	DiagnosticRelatedGroup *CE `hl7:"false,Diagnostic Related Group" json:"diagnostic_related_group,omitempty"` // DRG-1
	DRGAssignedDateTime    *TS `hl7:"false,DRG Assigned Date/Time" json:"drg_assigned_date_time,omitempty"`     // DRG-2
	DRGApprovalIndicator   *ID `hl7:"false,DRG Approval Indicator" json:"drg_approval_indicator,omitempty"`     // DRG-3
	DRGGrouperReviewCode   *IS `hl7:"false,DRG Grouper Review Code" json:"drg_grouper_review_code,omitempty"`   // DRG-4
	OutlierType            *CE `hl7:"false,Outlier Type" json:"outlier_type,omitempty"`                         // DRG-5
	OutlierDays            *NM `hl7:"false,Outlier Days" json:"outlier_days,omitempty"`                         // DRG-6
	OutlierCost            *CP `hl7:"false,Outlier Cost" json:"outlier_cost,omitempty"`                         // DRG-7
	DRGPayor               *IS `hl7:"false,DRG Payor" json:"drg_payor,omitempty"`                               // DRG-8
	OutlierReimbursement   *CP `hl7:"false,Outlier Reimbursement" json:"outlier_reimbursement,omitempty"`       // DRG-9
	ConfidentialIndicator  *ID `hl7:"false,Confidential Indicator" json:"confidential_indicator,omitempty"`     // DRG-10
	DRGTransferType        *IS `hl7:"false,DRG Transfer Type" json:"drg_transfer_type,omitempty"`               // DRG-11
}

func (s *DRG) SegmentName() string {
	return "DRG"
}

//  DSC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type DSC struct {
	ContinuationPointer *ST `hl7:"false,Continuation Pointer" json:"continuation_pointer,omitempty"` // DSC-1
	ContinuationStyle   *ID `hl7:"false,Continuation Style" json:"continuation_style,omitempty"`     // DSC-2
}

func (s *DSC) SegmentName() string {
	return "DSC"
}

//  DSP represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type DSP struct {
	SetIDDSP          *SI `hl7:"false,Set ID - DSP" json:"set_iddsp,omitempty"`                  // DSP-1
	DisplayLevel      *SI `hl7:"false,Display Level" json:"display_level,omitempty"`             // DSP-2
	DataLine          *TX `hl7:"true,Data Line" json:"data_line,omitempty"`                      // DSP-3
	LogicalBreakPoint *ST `hl7:"false,Logical Break Point" json:"logical_break_point,omitempty"` // DSP-4
	ResultID          *TX `hl7:"false,Result ID" json:"result_id,omitempty"`                     // DSP-5
}

func (s *DSP) SegmentName() string {
	return "DSP"
}

//  ECD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ECD struct {
	ReferenceCommandNumber  *NM  `hl7:"true,Reference Command Number" json:"reference_command_number,omitempty"`    // ECD-1
	RemoteControlCommand    *CE  `hl7:"true,Remote Control Command" json:"remote_control_command,omitempty"`        // ECD-2
	ResponseRequired        *ID  `hl7:"false,Response Required" json:"response_required,omitempty"`                 // ECD-3
	RequestedCompletionTime *TQ  `hl7:"false,Requested Completion Time" json:"requested_completion_time,omitempty"` // ECD-4
	Parameters              []TX `hl7:"false,Parameters" json:"parameters,omitempty"`                               // ECD-5
}

func (s *ECD) SegmentName() string {
	return "ECD"
}

//  ECR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ECR struct {
	CommandResponse           *CE  `hl7:"true,Command Response" json:"command_response,omitempty"`                        // ECR-1
	DateTimeCompleted         *TS  `hl7:"true,Date/Time Completed" json:"date_time_completed,omitempty"`                  // ECR-2
	CommandResponseParameters []TX `hl7:"false,Command Response Parameters" json:"command_response_parameters,omitempty"` // ECR-3
}

func (s *ECR) SegmentName() string {
	return "ECR"
}

//  EDU represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type EDU struct {
	SetIDEDU                                    *SI   `hl7:"true,Set ID - EDU" json:"set_idedu,omitempty"`                                                                             // EDU-1
	AcademicDegree                              *IS   `hl7:"false,Academic Degree" json:"academic_degree,omitempty"`                                                                   // EDU-2
	AcademicDegreeProgramDateRange              *DR   `hl7:"false,Academic Degree Program Date Range" json:"academic_degree_program_date_range,omitempty"`                             // EDU-3
	AcademicDegreeProgramParticipationDateRange *DR   `hl7:"false,Academic Degree Program Participation Date Range" json:"academic_degree_program_participation_date_range,omitempty"` // EDU-4
	AcademicDegreeGrantedDate                   *DT   `hl7:"false,Academic Degree Granted Date" json:"academic_degree_granted_date,omitempty"`                                         // EDU-5
	School                                      *XON  `hl7:"false,School" json:"school,omitempty"`                                                                                     // EDU-6
	SchoolTypeCode                              *CE   `hl7:"false,School Type Code" json:"school_type_code,omitempty"`                                                                 // EDU-7
	SchoolAddress                               *XAD  `hl7:"false,School Address" json:"school_address,omitempty"`                                                                     // EDU-8
	MajorFieldOfStudy                           []CWE `hl7:"false,Major Field Of Study" json:"major_field_of_study,omitempty"`                                                         // EDU-9
}

func (s *EDU) SegmentName() string {
	return "EDU"
}

//  EQL represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type EQL struct {
	QueryTag                *ST `hl7:"false,Query Tag" json:"query_tag,omitempty"`                                  // EQL-1
	QueryResponseFormatCode *ID `hl7:"true,Query/Response Format Code" json:"query_response_format_code,omitempty"` // EQL-2
	EQLQueryName            *CE `hl7:"true,EQL Query Name" json:"eql_query_name,omitempty"`                         // EQL-3
	EQLQueryStatement       *ST `hl7:"true,EQL Query Statement" json:"eql_query_statement,omitempty"`               // EQL-4
}

func (s *EQL) SegmentName() string {
	return "EQL"
}

//  EQP represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type EQP struct {
	EventType       *CE `hl7:"true,Event Type" json:"event_type,omitempty"`             // EQP-1
	FileName        *ST `hl7:"false,File Name" json:"file_name,omitempty"`              // EQP-2
	StartDateTime   *TS `hl7:"true,Start Date/Time" json:"start_date_time,omitempty"`   // EQP-3
	EndDateTime     *TS `hl7:"false,End Date/Time" json:"end_date_time,omitempty"`      // EQP-4
	TransactionData *FT `hl7:"true,Transaction Data" json:"transaction_data,omitempty"` // EQP-5
}

func (s *EQP) SegmentName() string {
	return "EQP"
}

//  EQU represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type EQU struct {
	EquipmentInstanceIdentifier *EI `hl7:"true,Equipment Instance Identifier" json:"equipment_instance_identifier,omitempty"` // EQU-1
	EventDateTime               *TS `hl7:"true,Event Date/Time" json:"event_date_time,omitempty"`                             // EQU-2
	EquipmentState              *CE `hl7:"false,Equipment State" json:"equipment_state,omitempty"`                            // EQU-3
	LocalRemoteControlState     *CE `hl7:"false,Local/Remote Control State" json:"local_remote_control_state,omitempty"`      // EQU-4
	AlertLevel                  *CE `hl7:"false,Alert Level" json:"alert_level,omitempty"`                                    // EQU-5
}

func (s *EQU) SegmentName() string {
	return "EQU"
}

//  ERQ represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ERQ struct {
	QueryTag           *ST   `hl7:"false,Query Tag" json:"query_tag,omitempty"`                       // ERQ-1
	EventIdentifier    *CE   `hl7:"true,Event Identifier" json:"event_identifier,omitempty"`          // ERQ-2
	InputParameterList []QIP `hl7:"false,Input Parameter List" json:"input_parameter_list,omitempty"` // ERQ-3
}

func (s *ERQ) SegmentName() string {
	return "ERQ"
}

//  ERR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ERR struct {
	ErrorCodeAndLocation      []ELD `hl7:"false,Error Code And Location" json:"error_code_and_location,omitempty"`         // ERR-1
	ErrorLocation             []ERL `hl7:"false,Error Location" json:"error_location,omitempty"`                           // ERR-2
	HL7ErrorCode              *CWE  `hl7:"true,HL7 Error Code" json:"hl_7_error_code,omitempty"`                           // ERR-3
	Severity                  *ID   `hl7:"true,Severity" json:"severity,omitempty"`                                        // ERR-4
	ApplicationErrorCode      *CWE  `hl7:"false,Application Error Code" json:"application_error_code,omitempty"`           // ERR-5
	ApplicationErrorParameter []ST  `hl7:"false,Application Error Parameter" json:"application_error_parameter,omitempty"` // ERR-6
	DiagnosticInformation     *TX   `hl7:"false,Diagnostic Information" json:"diagnostic_information,omitempty"`           // ERR-7
	UserMessage               *TX   `hl7:"false,User Message" json:"user_message,omitempty"`                               // ERR-8
	InformPersonIndicator     []IS  `hl7:"false,Inform Person Indicator" json:"inform_person_indicator,omitempty"`         // ERR-9
	OverrideType              *CWE  `hl7:"false,Override Type" json:"override_type,omitempty"`                             // ERR-10
	OverrideReasonCode        []CWE `hl7:"false,Override Reason Code" json:"override_reason_code,omitempty"`               // ERR-11
	HelpDeskContactPoint      []XTN `hl7:"false,Help Desk Contact Point" json:"help_desk_contact_point,omitempty"`         // ERR-12
}

func (s *ERR) SegmentName() string {
	return "ERR"
}

//  EVN represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type EVN struct {
	EventTypeCode        *ID   `hl7:"false,Event Type Code" json:"event_type_code,omitempty"`                 // EVN-1
	RecordedDateTime     *TS   `hl7:"true,Recorded Date/Time" json:"recorded_date_time,omitempty"`            // EVN-2
	DateTimePlannedEvent *TS   `hl7:"false,Date/Time Planned Event" json:"date_time_planned_event,omitempty"` // EVN-3
	EventReasonCode      *IS   `hl7:"false,Event Reason Code" json:"event_reason_code,omitempty"`             // EVN-4
	OperatorID           []XCN `hl7:"false,Operator ID" json:"operator_id,omitempty"`                         // EVN-5
	EventOccurred        *TS   `hl7:"false,Event Occurred" json:"event_occurred,omitempty"`                   // EVN-6
	EventFacility        *HD   `hl7:"false,Event Facility" json:"event_facility,omitempty"`                   // EVN-7
}

func (s *EVN) SegmentName() string {
	return "EVN"
}

//  FAC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type FAC struct {
	FacilityIDFAC                       *EI   `hl7:"true,Facility ID-FAC" json:"facility_idfac,omitempty"`                                               // FAC-1
	FacilityType                        *ID   `hl7:"false,Facility Type" json:"facility_type,omitempty"`                                                 // FAC-2
	FacilityAddress                     []XAD `hl7:"true,Facility Address" json:"facility_address,omitempty"`                                            // FAC-3
	FacilityTelecommunication           *XTN  `hl7:"true,Facility Telecommunication" json:"facility_telecommunication,omitempty"`                        // FAC-4
	ContactPerson                       []XCN `hl7:"false,Contact Person" json:"contact_person,omitempty"`                                               // FAC-5
	ContactTitle                        []ST  `hl7:"false,Contact Title" json:"contact_title,omitempty"`                                                 // FAC-6
	ContactAddress                      []XAD `hl7:"false,Contact Address" json:"contact_address,omitempty"`                                             // FAC-7
	ContactTelecommunication            []XTN `hl7:"false,Contact Telecommunication" json:"contact_telecommunication,omitempty"`                         // FAC-8
	SignatureAuthority                  []XCN `hl7:"true,Signature Authority" json:"signature_authority,omitempty"`                                      // FAC-9
	SignatureAuthorityTitle             *ST   `hl7:"false,Signature Authority Title" json:"signature_authority_title,omitempty"`                         // FAC-10
	SignatureAuthorityAddress           []XAD `hl7:"false,Signature Authority Address" json:"signature_authority_address,omitempty"`                     // FAC-11
	SignatureAuthorityTelecommunication *XTN  `hl7:"false,Signature Authority Telecommunication" json:"signature_authority_telecommunication,omitempty"` // FAC-12
}

func (s *FAC) SegmentName() string {
	return "FAC"
}

//  FHS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type FHS struct {
	FileFieldSeparator       *ST `hl7:"true,File Field Separator" json:"file_field_separator,omitempty"`              // FHS-1
	FileEncodingCharacters   *ST `hl7:"true,File Encoding Characters" json:"file_encoding_characters,omitempty"`      // FHS-2
	FileSendingApplication   *HD `hl7:"false,File Sending Application" json:"file_sending_application,omitempty"`     // FHS-3
	FileSendingFacility      *HD `hl7:"false,File Sending Facility" json:"file_sending_facility,omitempty"`           // FHS-4
	FileReceivingApplication *HD `hl7:"false,File Receiving Application" json:"file_receiving_application,omitempty"` // FHS-5
	FileReceivingFacility    *HD `hl7:"false,File Receiving Facility" json:"file_receiving_facility,omitempty"`       // FHS-6
	FileCreationDateTime     *TS `hl7:"false,File Creation Date/Time" json:"file_creation_date_time,omitempty"`       // FHS-7
	FileSecurity             *ST `hl7:"false,File Security" json:"file_security,omitempty"`                           // FHS-8
	FileNameID               *ST `hl7:"false,File Name/ID" json:"file_name_id,omitempty"`                             // FHS-9
	FileHeaderComment        *ST `hl7:"false,File Header Comment" json:"file_header_comment,omitempty"`               // FHS-10
	FileControlID            *ST `hl7:"false,File Control ID" json:"file_control_id,omitempty"`                       // FHS-11
	ReferenceFileControlID   *ST `hl7:"false,Reference File Control ID" json:"reference_file_control_id,omitempty"`   // FHS-12
}

func (s *FHS) SegmentName() string {
	return "FHS"
}

//  FT1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type FT1 struct {
	SetIDFT1                                   *SI   `hl7:"false,Set ID - FT1" json:"set_idft_1,omitempty"`                                                                        // FT1-1
	TransactionID                              *ST   `hl7:"false,Transaction ID" json:"transaction_id,omitempty"`                                                                  // FT1-2
	TransactionBatchID                         *ST   `hl7:"false,Transaction Batch ID" json:"transaction_batch_id,omitempty"`                                                      // FT1-3
	TransactionDate                            *DR   `hl7:"true,Transaction Date" json:"transaction_date,omitempty"`                                                               // FT1-4
	TransactionPostingDate                     *TS   `hl7:"false,Transaction Posting Date" json:"transaction_posting_date,omitempty"`                                              // FT1-5
	TransactionType                            *IS   `hl7:"true,Transaction Type" json:"transaction_type,omitempty"`                                                               // FT1-6
	TransactionCode                            *CE   `hl7:"true,Transaction Code" json:"transaction_code,omitempty"`                                                               // FT1-7
	TransactionDescription                     *ST   `hl7:"false,Transaction Description" json:"transaction_description,omitempty"`                                                // FT1-8
	TransactionDescriptionAlt                  *ST   `hl7:"false,Transaction Description - Alt" json:"transaction_description_alt,omitempty"`                                      // FT1-9
	TransactionQuantity                        *NM   `hl7:"false,Transaction Quantity" json:"transaction_quantity,omitempty"`                                                      // FT1-10
	TransactionAmountExtended                  *CP   `hl7:"false,Transaction Amount - Extended" json:"transaction_amount_extended,omitempty"`                                      // FT1-11
	TransactionAmountUnit                      *CP   `hl7:"false,Transaction Amount - Unit" json:"transaction_amount_unit,omitempty"`                                              // FT1-12
	DepartmentCode                             *CE   `hl7:"false,Department Code" json:"department_code,omitempty"`                                                                // FT1-13
	InsurancePlanID                            *CE   `hl7:"false,Insurance Plan ID" json:"insurance_plan_id,omitempty"`                                                            // FT1-14
	InsuranceAmount                            *CP   `hl7:"false,Insurance Amount" json:"insurance_amount,omitempty"`                                                              // FT1-15
	AssignedPatientLocation                    *PL   `hl7:"false,Assigned Patient Location" json:"assigned_patient_location,omitempty"`                                            // FT1-16
	FeeSchedule                                *IS   `hl7:"false,Fee Schedule" json:"fee_schedule,omitempty"`                                                                      // FT1-17
	PatientType                                *IS   `hl7:"false,Patient Type" json:"patient_type,omitempty"`                                                                      // FT1-18
	DiagnosisCodeFT1                           []CE  `hl7:"false,Diagnosis Code - FT1" json:"diagnosis_code_ft_1,omitempty"`                                                       // FT1-19
	PerformedByCode                            []XCN `hl7:"false,Performed By Code" json:"performed_by_code,omitempty"`                                                            // FT1-20
	OrderedByCode                              []XCN `hl7:"false,Ordered By Code" json:"ordered_by_code,omitempty"`                                                                // FT1-21
	UnitCost                                   *CP   `hl7:"false,Unit Cost" json:"unit_cost,omitempty"`                                                                            // FT1-22
	FillerOrderNumber                          *EI   `hl7:"false,Filler Order Number" json:"filler_order_number,omitempty"`                                                        // FT1-23
	EnteredByCode                              []XCN `hl7:"false,Entered By Code" json:"entered_by_code,omitempty"`                                                                // FT1-24
	ProcedureCode                              *CE   `hl7:"false,Procedure Code" json:"procedure_code,omitempty"`                                                                  // FT1-25
	ProcedureCodeModifier                      []CE  `hl7:"false,Procedure Code Modifier" json:"procedure_code_modifier,omitempty"`                                                // FT1-26
	AdvancedBeneficiaryNoticeCode              *CE   `hl7:"false,Advanced Beneficiary Notice Code" json:"advanced_beneficiary_notice_code,omitempty"`                              // FT1-27
	MedicallyNecessaryDuplicateProcedureReason *CWE  `hl7:"false,Medically Necessary Duplicate Procedure Reason." json:"medically_necessary_duplicate_procedure_reason,omitempty"` // FT1-28
	NDCCode                                    *CNE  `hl7:"false,NDC Code" json:"ndc_code,omitempty"`                                                                              // FT1-29
	PaymentReferenceID                         *CX   `hl7:"false,Payment Reference ID" json:"payment_reference_id,omitempty"`                                                      // FT1-30
	TransactionReferenceKey                    []SI  `hl7:"false,Transaction Reference Key" json:"transaction_reference_key,omitempty"`                                            // FT1-31
}

func (s *FT1) SegmentName() string {
	return "FT1"
}

//  FTS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type FTS struct {
	FileBatchCount     *NM `hl7:"false,File Batch Count" json:"file_batch_count,omitempty"`         // FTS-1
	FileTrailerComment *ST `hl7:"false,File Trailer Comment" json:"file_trailer_comment,omitempty"` // FTS-2
}

func (s *FTS) SegmentName() string {
	return "FTS"
}

//  GOL represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type GOL struct {
	ActionCode                  *ID   `hl7:"true,Action Code" json:"action_code,omitempty"`                                            // GOL-1
	ActionDateTime              *TS   `hl7:"true,Action Date/Time" json:"action_date_time,omitempty"`                                  // GOL-2
	GoalID                      *CE   `hl7:"true,Goal ID" json:"goal_id,omitempty"`                                                    // GOL-3
	GoalInstanceID              *EI   `hl7:"true,Goal Instance ID" json:"goal_instance_id,omitempty"`                                  // GOL-4
	EpisodeOfCareID             *EI   `hl7:"false,Episode Of Care ID" json:"episode_of_care_id,omitempty"`                             // GOL-5
	GoalListPriority            *NM   `hl7:"false,Goal List Priority" json:"goal_list_priority,omitempty"`                             // GOL-6
	GoalEstablishedDateTime     *TS   `hl7:"false,Goal Established Date/Time" json:"goal_established_date_time,omitempty"`             // GOL-7
	ExpectedGoalAchieveDateTime *TS   `hl7:"false,Expected Goal Achieve Date/Time" json:"expected_goal_achieve_date_time,omitempty"`   // GOL-8
	GoalClassification          *CE   `hl7:"false,Goal Classification" json:"goal_classification,omitempty"`                           // GOL-9
	GoalManagementDiscipline    *CE   `hl7:"false,Goal Management Discipline" json:"goal_management_discipline,omitempty"`             // GOL-10
	CurrentGoalReviewStatus     *CE   `hl7:"false,Current Goal Review Status" json:"current_goal_review_status,omitempty"`             // GOL-11
	CurrentGoalReviewDateTime   *TS   `hl7:"false,Current Goal Review Date/Time" json:"current_goal_review_date_time,omitempty"`       // GOL-12
	NextGoalReviewDateTime      *TS   `hl7:"false,Next Goal Review Date/Time" json:"next_goal_review_date_time,omitempty"`             // GOL-13
	PreviousGoalReviewDateTime  *TS   `hl7:"false,Previous Goal Review Date/Time" json:"previous_goal_review_date_time,omitempty"`     // GOL-14
	GoalReviewInterval          *TQ   `hl7:"false,Goal Review Interval" json:"goal_review_interval,omitempty"`                         // GOL-15
	GoalEvaluation              *CE   `hl7:"false,Goal Evaluation" json:"goal_evaluation,omitempty"`                                   // GOL-16
	GoalEvaluationComment       []ST  `hl7:"false,Goal Evaluation Comment" json:"goal_evaluation_comment,omitempty"`                   // GOL-17
	GoalLifeCycleStatus         *CE   `hl7:"false,Goal Life Cycle Status" json:"goal_life_cycle_status,omitempty"`                     // GOL-18
	GoalLifeCycleStatusDateTime *TS   `hl7:"false,Goal Life Cycle Status Date/Time" json:"goal_life_cycle_status_date_time,omitempty"` // GOL-19
	GoalTargetType              []CE  `hl7:"false,Goal Target Type" json:"goal_target_type,omitempty"`                                 // GOL-20
	GoalTargetName              []XPN `hl7:"false,Goal Target Name" json:"goal_target_name,omitempty"`                                 // GOL-21
}

func (s *GOL) SegmentName() string {
	return "GOL"
}

//  GP1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type GP1 struct {
	TypeOfBillCode              *IS  `hl7:"true,Type Of Bill Code" json:"type_of_bill_code,omitempty"`                            // GP1-1
	RevenueCode                 []IS `hl7:"false,Revenue Code" json:"revenue_code,omitempty"`                                     // GP1-2
	OverallClaimDispositionCode *IS  `hl7:"false,Overall Claim Disposition Code" json:"overall_claim_disposition_code,omitempty"` // GP1-3
	OCEEditsPerVisitCode        []IS `hl7:"false,OCE Edits Per Visit Code" json:"oce_edits_per_visit_code,omitempty"`             // GP1-4
	OutlierCost                 *CP  `hl7:"false,Outlier Cost" json:"outlier_cost,omitempty"`                                     // GP1-5
}

func (s *GP1) SegmentName() string {
	return "GP1"
}

//  GP2 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type GP2 struct {
	RevenueCode                         *IS  `hl7:"false,Revenue Code" json:"revenue_code,omitempty"`                                                     // GP2-1
	NumberOfServiceUnits                *NM  `hl7:"false,Number Of Service Units" json:"number_of_service_units,omitempty"`                               // GP2-2
	Charge                              *CP  `hl7:"false,Charge" json:"charge,omitempty"`                                                                 // GP2-3
	ReimbursementActionCode             *IS  `hl7:"false,Reimbursement Action Code" json:"reimbursement_action_code,omitempty"`                           // GP2-4
	DenialOrRejectionCode               *IS  `hl7:"false,Denial Or Rejection Code" json:"denial_or_rejection_code,omitempty"`                             // GP2-5
	OCEEditCode                         []IS `hl7:"false,OCE Edit Code" json:"oce_edit_code,omitempty"`                                                   // GP2-6
	AmbulatoryPaymentClassificationCode *CE  `hl7:"false,Ambulatory Payment Classification Code" json:"ambulatory_payment_classification_code,omitempty"` // GP2-7
	ModifierEditCode                    []IS `hl7:"false,Modifier Edit Code" json:"modifier_edit_code,omitempty"`                                         // GP2-8
	PaymentAdjustmentCode               *IS  `hl7:"false,Payment Adjustment Code" json:"payment_adjustment_code,omitempty"`                               // GP2-9
	PackagingStatusCode                 *IS  `hl7:"false,Packaging Status Code" json:"packaging_status_code,omitempty"`                                   // GP2-10
	ExpectedCMSPaymentAmount            *CP  `hl7:"false,Expected CMS Payment Amount" json:"expected_cms_payment_amount,omitempty"`                       // GP2-11
	ReimbursementTypeCode               *IS  `hl7:"false,Reimbursement Type Code" json:"reimbursement_type_code,omitempty"`                               // GP2-12
	CoPayAmount                         *CP  `hl7:"false,Co-Pay Amount" json:"co_pay_amount,omitempty"`                                                   // GP2-13
	PayRatePerServiceUnit               *NM  `hl7:"false,Pay Rate Per Service Unit" json:"pay_rate_per_service_unit,omitempty"`                           // GP2-14
}

func (s *GP2) SegmentName() string {
	return "GP2"
}

//  GT1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type GT1 struct {
	SetIDGT1                           *SI   `hl7:"true,Set ID - GT1" json:"set_idgt_1,omitempty"`                                                        // GT1-1
	GuarantorNumber                    []CX  `hl7:"false,Guarantor Number" json:"guarantor_number,omitempty"`                                             // GT1-2
	GuarantorName                      []XPN `hl7:"true,Guarantor Name" json:"guarantor_name,omitempty"`                                                  // GT1-3
	GuarantorSpouseName                []XPN `hl7:"false,Guarantor Spouse Name" json:"guarantor_spouse_name,omitempty"`                                   // GT1-4
	GuarantorAddress                   []XAD `hl7:"false,Guarantor Address" json:"guarantor_address,omitempty"`                                           // GT1-5
	GuarantorPhNumHome                 []XTN `hl7:"false,Guarantor Ph Num - Home" json:"guarantor_ph_num_home,omitempty"`                                 // GT1-6
	GuarantorPhNumBusiness             []XTN `hl7:"false,Guarantor Ph Num - Business" json:"guarantor_ph_num_business,omitempty"`                         // GT1-7
	GuarantorDateTimeOfBirth           *TS   `hl7:"false,Guarantor Date/Time Of Birth" json:"guarantor_date_time_of_birth,omitempty"`                     // GT1-8
	GuarantorAdministrativeSex         *IS   `hl7:"false,Guarantor Administrative Sex" json:"guarantor_administrative_sex,omitempty"`                     // GT1-9
	GuarantorType                      *IS   `hl7:"false,Guarantor Type" json:"guarantor_type,omitempty"`                                                 // GT1-10
	GuarantorRelationship              *CE   `hl7:"false,Guarantor Relationship" json:"guarantor_relationship,omitempty"`                                 // GT1-11
	GuarantorSSN                       *ST   `hl7:"false,Guarantor SSN" json:"guarantor_ssn,omitempty"`                                                   // GT1-12
	GuarantorDateBegin                 *DT   `hl7:"false,Guarantor Date - Begin" json:"guarantor_date_begin,omitempty"`                                   // GT1-13
	GuarantorDateEnd                   *DT   `hl7:"false,Guarantor Date - End" json:"guarantor_date_end,omitempty"`                                       // GT1-14
	GuarantorPriority                  *NM   `hl7:"false,Guarantor Priority" json:"guarantor_priority,omitempty"`                                         // GT1-15
	GuarantorEmployerName              []XPN `hl7:"false,Guarantor Employer Name" json:"guarantor_employer_name,omitempty"`                               // GT1-16
	GuarantorEmployerAddress           []XAD `hl7:"false,Guarantor Employer Address" json:"guarantor_employer_address,omitempty"`                         // GT1-17
	GuarantorEmployerPhoneNumber       []XTN `hl7:"false,Guarantor Employer Phone Number" json:"guarantor_employer_phone_number,omitempty"`               // GT1-18
	GuarantorEmployeeIDNumber          []CX  `hl7:"false,Guarantor Employee ID Number" json:"guarantor_employee_id_number,omitempty"`                     // GT1-19
	GuarantorEmploymentStatus          *IS   `hl7:"false,Guarantor Employment Status" json:"guarantor_employment_status,omitempty"`                       // GT1-20
	GuarantorOrganizationName          []XON `hl7:"false,Guarantor Organization Name" json:"guarantor_organization_name,omitempty"`                       // GT1-21
	GuarantorBillingHoldFlag           *ID   `hl7:"false,Guarantor Billing Hold Flag" json:"guarantor_billing_hold_flag,omitempty"`                       // GT1-22
	GuarantorCreditRatingCode          *CE   `hl7:"false,Guarantor Credit Rating Code" json:"guarantor_credit_rating_code,omitempty"`                     // GT1-23
	GuarantorDeathDateAndTime          *TS   `hl7:"false,Guarantor Death Date And Time" json:"guarantor_death_date_and_time,omitempty"`                   // GT1-24
	GuarantorDeathFlag                 *ID   `hl7:"false,Guarantor Death Flag" json:"guarantor_death_flag,omitempty"`                                     // GT1-25
	GuarantorChargeAdjustmentCode      *CE   `hl7:"false,Guarantor Charge Adjustment Code" json:"guarantor_charge_adjustment_code,omitempty"`             // GT1-26
	GuarantorHouseholdAnnualIncome     *CP   `hl7:"false,Guarantor Household Annual Income" json:"guarantor_household_annual_income,omitempty"`           // GT1-27
	GuarantorHouseholdSize             *NM   `hl7:"false,Guarantor Household Size" json:"guarantor_household_size,omitempty"`                             // GT1-28
	GuarantorEmployerIDNumber          []CX  `hl7:"false,Guarantor Employer ID Number" json:"guarantor_employer_id_number,omitempty"`                     // GT1-29
	GuarantorMaritalStatusCode         *CE   `hl7:"false,Guarantor Marital Status Code" json:"guarantor_marital_status_code,omitempty"`                   // GT1-30
	GuarantorHireEffectiveDate         *DT   `hl7:"false,Guarantor Hire Effective Date" json:"guarantor_hire_effective_date,omitempty"`                   // GT1-31
	EmploymentStopDate                 *DT   `hl7:"false,Employment Stop Date" json:"employment_stop_date,omitempty"`                                     // GT1-32
	LivingDependency                   *IS   `hl7:"false,Living Dependency" json:"living_dependency,omitempty"`                                           // GT1-33
	AmbulatoryStatus                   []IS  `hl7:"false,Ambulatory Status" json:"ambulatory_status,omitempty"`                                           // GT1-34
	Citizenship                        []CE  `hl7:"false,Citizenship" json:"citizenship,omitempty"`                                                       // GT1-35
	PrimaryLanguage                    *CE   `hl7:"false,Primary Language" json:"primary_language,omitempty"`                                             // GT1-36
	LivingArrangement                  *IS   `hl7:"false,Living Arrangement" json:"living_arrangement,omitempty"`                                         // GT1-37
	PublicityCode                      *CE   `hl7:"false,Publicity Code" json:"publicity_code,omitempty"`                                                 // GT1-38
	ProtectionIndicator                *ID   `hl7:"false,Protection Indicator" json:"protection_indicator,omitempty"`                                     // GT1-39
	StudentIndicator                   *IS   `hl7:"false,Student Indicator" json:"student_indicator,omitempty"`                                           // GT1-40
	Religion                           *CE   `hl7:"false,Religion" json:"religion,omitempty"`                                                             // GT1-41
	MotherSMaidenName                  []XPN `hl7:"false,Mother'S Maiden Name" json:"mother_s_maiden_name,omitempty"`                                     // GT1-42
	Nationality                        *CE   `hl7:"false,Nationality" json:"nationality,omitempty"`                                                       // GT1-43
	EthnicGroup                        []CE  `hl7:"false,Ethnic Group" json:"ethnic_group,omitempty"`                                                     // GT1-44
	ContactPersonSName                 []XPN `hl7:"false,Contact Person'S Name" json:"contact_person_s_name,omitempty"`                                   // GT1-45
	ContactPersonSTelephoneNumber      []XTN `hl7:"false,Contact Person'S Telephone Number" json:"contact_person_s_telephone_number,omitempty"`           // GT1-46
	ContactReason                      *CE   `hl7:"false,Contact Reason" json:"contact_reason,omitempty"`                                                 // GT1-47
	ContactRelationship                *IS   `hl7:"false,Contact Relationship" json:"contact_relationship,omitempty"`                                     // GT1-48
	JobTitle                           *ST   `hl7:"false,Job Title" json:"job_title,omitempty"`                                                           // GT1-49
	JobCodeClass                       *JCC  `hl7:"false,Job Code/Class" json:"job_code_class,omitempty"`                                                 // GT1-50
	GuarantorEmployerSOrganizationName []XON `hl7:"false,Guarantor Employer'S Organization Name" json:"guarantor_employer_s_organization_name,omitempty"` // GT1-51
	Handicap                           *IS   `hl7:"false,Handicap" json:"handicap,omitempty"`                                                             // GT1-52
	JobStatus                          *IS   `hl7:"false,Job Status" json:"job_status,omitempty"`                                                         // GT1-53
	GuarantorFinancialClass            *FC   `hl7:"false,Guarantor Financial Class" json:"guarantor_financial_class,omitempty"`                           // GT1-54
	GuarantorRace                      []CE  `hl7:"false,Guarantor Race" json:"guarantor_race,omitempty"`                                                 // GT1-55
	GuarantorBirthPlace                *ST   `hl7:"false,Guarantor Birth Place" json:"guarantor_birth_place,omitempty"`                                   // GT1-56
	VIPIndicator                       *IS   `hl7:"false,VIP Indicator" json:"vip_indicator,omitempty"`                                                   // GT1-57
}

func (s *GT1) SegmentName() string {
	return "GT1"
}

//  IAM represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type IAM struct {
	SetIDIAM                             *SI  `hl7:"true,Set ID - IAM" json:"set_idiam,omitempty"`                                                             // IAM-1
	AllergenTypeCode                     *CE  `hl7:"false,Allergen Type Code" json:"allergen_type_code,omitempty"`                                             // IAM-2
	AllergenCodeMnemonicDescription      *CE  `hl7:"true,Allergen Code/Mnemonic/Description" json:"allergen_code_mnemonic_description,omitempty"`              // IAM-3
	AllergySeverityCode                  *CE  `hl7:"false,Allergy Severity Code" json:"allergy_severity_code,omitempty"`                                       // IAM-4
	AllergyReactionCode                  []ST `hl7:"false,Allergy Reaction Code" json:"allergy_reaction_code,omitempty"`                                       // IAM-5
	AllergyActionCode                    *CNE `hl7:"true,Allergy Action Code" json:"allergy_action_code,omitempty"`                                            // IAM-6
	AllergyUniqueIdentifier              *EI  `hl7:"false,Allergy Unique Identifier" json:"allergy_unique_identifier,omitempty"`                               // IAM-7
	ActionReason                         *ST  `hl7:"false,Action Reason" json:"action_reason,omitempty"`                                                       // IAM-8
	SensitivityToCausativeAgentCode      *CE  `hl7:"false,Sensitivity To Causative Agent Code" json:"sensitivity_to_causative_agent_code,omitempty"`           // IAM-9
	AllergenGroupCodeMnemonicDescription *CE  `hl7:"false,Allergen Group Code/Mnemonic/Description" json:"allergen_group_code_mnemonic_description,omitempty"` // IAM-10
	OnsetDate                            *DT  `hl7:"false,Onset Date" json:"onset_date,omitempty"`                                                             // IAM-11
	OnsetDateText                        *ST  `hl7:"false,Onset Date Text" json:"onset_date_text,omitempty"`                                                   // IAM-12
	ReportedDateTime                     *TS  `hl7:"false,Reported Date/Time" json:"reported_date_time,omitempty"`                                             // IAM-13
	ReportedBy                           *XPN `hl7:"false,Reported By" json:"reported_by,omitempty"`                                                           // IAM-14
	RelationshipToPatientCode            *CE  `hl7:"false,Relationship To Patient Code" json:"relationship_to_patient_code,omitempty"`                         // IAM-15
	AlertDeviceCode                      *CE  `hl7:"false,Alert Device Code" json:"alert_device_code,omitempty"`                                               // IAM-16
	AllergyClinicalStatusCode            *CE  `hl7:"false,Allergy Clinical Status Code" json:"allergy_clinical_status_code,omitempty"`                         // IAM-17
	StatusedByPerson                     *XCN `hl7:"false,Statused By Person" json:"statused_by_person,omitempty"`                                             // IAM-18
	StatusedByOrganization               *XON `hl7:"false,Statused By Organization" json:"statused_by_organization,omitempty"`                                 // IAM-19
	StatusedAtDateTime                   *TS  `hl7:"false,Statused At Date/Time" json:"statused_at_date_time,omitempty"`                                       // IAM-20
}

func (s *IAM) SegmentName() string {
	return "IAM"
}

//  IIM represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type IIM struct {
	PrimaryKeyValueIIM            *CWE `hl7:"true,Primary Key Value - IIM" json:"primary_key_value_iim,omitempty"`                      // IIM-1
	ServiceItemCode               *CWE `hl7:"true,Service Item Code" json:"service_item_code,omitempty"`                                // IIM-2
	InventoryLotNumber            *ST  `hl7:"false,Inventory Lot Number" json:"inventory_lot_number,omitempty"`                         // IIM-3
	InventoryExpirationDate       *TS  `hl7:"false,Inventory Expiration Date" json:"inventory_expiration_date,omitempty"`               // IIM-4
	InventoryManufacturerName     *CWE `hl7:"false,Inventory Manufacturer Name" json:"inventory_manufacturer_name,omitempty"`           // IIM-5
	InventoryLocation             *CWE `hl7:"false,Inventory Location" json:"inventory_location,omitempty"`                             // IIM-6
	InventoryReceivedDate         *TS  `hl7:"false,Inventory Received Date" json:"inventory_received_date,omitempty"`                   // IIM-7
	InventoryReceivedQuantity     *NM  `hl7:"false,Inventory Received Quantity" json:"inventory_received_quantity,omitempty"`           // IIM-8
	InventoryReceivedQuantityUnit *CWE `hl7:"false,Inventory Received Quantity Unit" json:"inventory_received_quantity_unit,omitempty"` // IIM-9
	InventoryReceivedItemCost     *MO  `hl7:"false,Inventory Received Item Cost" json:"inventory_received_item_cost,omitempty"`         // IIM-10
	InventoryOnHandDate           *TS  `hl7:"false,Inventory On Hand Date" json:"inventory_on_hand_date,omitempty"`                     // IIM-11
	InventoryOnHandQuantity       *NM  `hl7:"false,Inventory On Hand Quantity" json:"inventory_on_hand_quantity,omitempty"`             // IIM-12
	InventoryOnHandQuantityUnit   *CWE `hl7:"false,Inventory On Hand Quantity Unit" json:"inventory_on_hand_quantity_unit,omitempty"`   // IIM-13
	ProcedureCode                 *CE  `hl7:"false,Procedure Code" json:"procedure_code,omitempty"`                                     // IIM-14
	ProcedureCodeModifier         []CE `hl7:"false,Procedure Code Modifier" json:"procedure_code_modifier,omitempty"`                   // IIM-15
}

func (s *IIM) SegmentName() string {
	return "IIM"
}

//  IN1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type IN1 struct {
	SetIDIN1                      *SI   `hl7:"true,Set ID - IN1" json:"set_idin_1,omitempty"`                                              // IN1-1
	InsurancePlanID               *CE   `hl7:"true,Insurance Plan ID" json:"insurance_plan_id,omitempty"`                                  // IN1-2
	InsuranceCompanyID            []CX  `hl7:"true,Insurance Company ID" json:"insurance_company_id,omitempty"`                            // IN1-3
	InsuranceCompanyName          []XON `hl7:"false,Insurance Company Name" json:"insurance_company_name,omitempty"`                       // IN1-4
	InsuranceCompanyAddress       []XAD `hl7:"false,Insurance Company Address" json:"insurance_company_address,omitempty"`                 // IN1-5
	InsuranceCoContactPerson      []XPN `hl7:"false,Insurance Co Contact Person" json:"insurance_co_contact_person,omitempty"`             // IN1-6
	InsuranceCoPhoneNumber        []XTN `hl7:"false,Insurance Co Phone Number" json:"insurance_co_phone_number,omitempty"`                 // IN1-7
	GroupNumber                   *ST   `hl7:"false,Group Number" json:"group_number,omitempty"`                                           // IN1-8
	GroupName                     []XON `hl7:"false,Group Name" json:"group_name,omitempty"`                                               // IN1-9
	InsuredSGroupEmpID            []CX  `hl7:"false,Insured'S Group Emp ID" json:"insured_s_group_emp_id,omitempty"`                       // IN1-10
	InsuredSGroupEmpName          []XON `hl7:"false,Insured'S Group Emp Name" json:"insured_s_group_emp_name,omitempty"`                   // IN1-11
	PlanEffectiveDate             *DT   `hl7:"false,Plan Effective Date" json:"plan_effective_date,omitempty"`                             // IN1-12
	PlanExpirationDate            *DT   `hl7:"false,Plan Expiration Date" json:"plan_expiration_date,omitempty"`                           // IN1-13
	AuthorizationInformation      *AUI  `hl7:"false,Authorization Information" json:"authorization_information,omitempty"`                 // IN1-14
	PlanType                      *IS   `hl7:"false,Plan Type" json:"plan_type,omitempty"`                                                 // IN1-15
	NameOfInsured                 []XPN `hl7:"false,Name Of Insured" json:"name_of_insured,omitempty"`                                     // IN1-16
	InsuredSRelationshipToPatient *CE   `hl7:"false,Insured'S Relationship To Patient" json:"insured_s_relationship_to_patient,omitempty"` // IN1-17
	InsuredSDateOfBirth           *TS   `hl7:"false,Insured'S Date Of Birth" json:"insured_s_date_of_birth,omitempty"`                     // IN1-18
	InsuredSAddress               []XAD `hl7:"false,Insured'S Address" json:"insured_s_address,omitempty"`                                 // IN1-19
	AssignmentOfBenefits          *IS   `hl7:"false,Assignment Of Benefits" json:"assignment_of_benefits,omitempty"`                       // IN1-20
	CoordinationOfBenefits        *IS   `hl7:"false,Coordination Of Benefits" json:"coordination_of_benefits,omitempty"`                   // IN1-21
	CoordOfBenPriority            *ST   `hl7:"false,Coord Of Ben. Priority" json:"coord_of_ben_priority,omitempty"`                        // IN1-22
	NoticeOfAdmissionFlag         *ID   `hl7:"false,Notice Of Admission Flag" json:"notice_of_admission_flag,omitempty"`                   // IN1-23
	NoticeOfAdmissionDate         *DT   `hl7:"false,Notice Of Admission Date" json:"notice_of_admission_date,omitempty"`                   // IN1-24
	ReportOfEligibilityFlag       *ID   `hl7:"false,Report Of Eligibility Flag" json:"report_of_eligibility_flag,omitempty"`               // IN1-25
	ReportOfEligibilityDate       *DT   `hl7:"false,Report Of Eligibility Date" json:"report_of_eligibility_date,omitempty"`               // IN1-26
	ReleaseInformationCode        *IS   `hl7:"false,Release Information Code" json:"release_information_code,omitempty"`                   // IN1-27
	PreAdmitCert                  *ST   `hl7:"false,Pre-Admit Cert" json:"pre_admit_cert,omitempty"`                                       // IN1-28
	VerificationDateTime          *TS   `hl7:"false,Verification Date/Time" json:"verification_date_time,omitempty"`                       // IN1-29
	VerificationBy                []XCN `hl7:"false,Verification By" json:"verification_by,omitempty"`                                     // IN1-30
	TypeOfAgreementCode           *IS   `hl7:"false,Type Of Agreement Code" json:"type_of_agreement_code,omitempty"`                       // IN1-31
	BillingStatus                 *IS   `hl7:"false,Billing Status" json:"billing_status,omitempty"`                                       // IN1-32
	LifetimeReserveDays           *NM   `hl7:"false,Lifetime Reserve Days" json:"lifetime_reserve_days,omitempty"`                         // IN1-33
	DelayBeforeLRDay              *NM   `hl7:"false,Delay Before L.R. Day" json:"delay_before_lr_day,omitempty"`                           // IN1-34
	CompanyPlanCode               *IS   `hl7:"false,Company Plan Code" json:"company_plan_code,omitempty"`                                 // IN1-35
	PolicyNumber                  *ST   `hl7:"false,Policy Number" json:"policy_number,omitempty"`                                         // IN1-36
	PolicyDeductible              *CP   `hl7:"false,Policy Deductible" json:"policy_deductible,omitempty"`                                 // IN1-37
	PolicyLimitAmount             *CP   `hl7:"false,Policy Limit - Amount" json:"policy_limit_amount,omitempty"`                           // IN1-38
	PolicyLimitDays               *NM   `hl7:"false,Policy Limit - Days" json:"policy_limit_days,omitempty"`                               // IN1-39
	RoomRateSemiPrivate           *CP   `hl7:"false,Room Rate - Semi-Private" json:"room_rate_semi_private,omitempty"`                     // IN1-40
	RoomRatePrivate               *CP   `hl7:"false,Room Rate - Private" json:"room_rate_private,omitempty"`                               // IN1-41
	InsuredSEmploymentStatus      *CE   `hl7:"false,Insured'S Employment Status" json:"insured_s_employment_status,omitempty"`             // IN1-42
	InsuredSAdministrativeSex     *IS   `hl7:"false,Insured'S Administrative Sex" json:"insured_s_administrative_sex,omitempty"`           // IN1-43
	InsuredSEmployerSAddress      []XAD `hl7:"false,Insured'S Employer'S Address" json:"insured_s_employer_s_address,omitempty"`           // IN1-44
	VerificationStatus            *ST   `hl7:"false,Verification Status" json:"verification_status,omitempty"`                             // IN1-45
	PriorInsurancePlanID          *IS   `hl7:"false,Prior Insurance Plan ID" json:"prior_insurance_plan_id,omitempty"`                     // IN1-46
	CoverageType                  *IS   `hl7:"false,Coverage Type" json:"coverage_type,omitempty"`                                         // IN1-47
	Handicap                      *IS   `hl7:"false,Handicap" json:"handicap,omitempty"`                                                   // IN1-48
	InsuredSIDNumber              []CX  `hl7:"false,Insured'S ID Number" json:"insured_sid_number,omitempty"`                              // IN1-49
	SignatureCode                 *IS   `hl7:"false,Signature Code" json:"signature_code,omitempty"`                                       // IN1-50
	SignatureCodeDate             *DT   `hl7:"false,Signature Code Date" json:"signature_code_date,omitempty"`                             // IN1-51
	InsuredSBirthPlace            *ST   `hl7:"false,Insured'S Birth Place" json:"insured_s_birth_place,omitempty"`                         // IN1-52
	VIPIndicator                  *IS   `hl7:"false,VIP Indicator" json:"vip_indicator,omitempty"`                                         // IN1-53
}

func (s *IN1) SegmentName() string {
	return "IN1"
}

//  IN2 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type IN2 struct {
	InsuredSEmployeeID                   []CX  `hl7:"false,Insured'S Employee ID" json:"insured_s_employee_id,omitempty"`                                         // IN2-1
	InsuredSSocialSecurityNumber         *ST   `hl7:"false,Insured'S Social Security Number" json:"insured_s_social_security_number,omitempty"`                   // IN2-2
	InsuredSEmployerSNameAndID           []XCN `hl7:"false,Insured'S Employer'S Name And ID" json:"insured_s_employer_s_name_and_id,omitempty"`                   // IN2-3
	EmployerInformationData              *IS   `hl7:"false,Employer Information Data" json:"employer_information_data,omitempty"`                                 // IN2-4
	MailClaimParty                       []IS  `hl7:"false,Mail Claim Party" json:"mail_claim_party,omitempty"`                                                   // IN2-5
	MedicareHealthInsCardNumber          *ST   `hl7:"false,Medicare Health Ins Card Number" json:"medicare_health_ins_card_number,omitempty"`                     // IN2-6
	MedicaidCaseName                     []XPN `hl7:"false,Medicaid Case Name" json:"medicaid_case_name,omitempty"`                                               // IN2-7
	MedicaidCaseNumber                   *ST   `hl7:"false,Medicaid Case Number" json:"medicaid_case_number,omitempty"`                                           // IN2-8
	MilitarySponsorName                  []XPN `hl7:"false,Military Sponsor Name" json:"military_sponsor_name,omitempty"`                                         // IN2-9
	MilitaryIDNumber                     *ST   `hl7:"false,Military ID Number" json:"military_id_number,omitempty"`                                               // IN2-10
	DependentOfMilitaryRecipient         *CE   `hl7:"false,Dependent Of Military Recipient" json:"dependent_of_military_recipient,omitempty"`                     // IN2-11
	MilitaryOrganization                 *ST   `hl7:"false,Military Organization" json:"military_organization,omitempty"`                                         // IN2-12
	MilitaryStation                      *ST   `hl7:"false,Military Station" json:"military_station,omitempty"`                                                   // IN2-13
	MilitaryService                      *IS   `hl7:"false,Military Service" json:"military_service,omitempty"`                                                   // IN2-14
	MilitaryRankGrade                    *IS   `hl7:"false,Military Rank/Grade" json:"military_rank_grade,omitempty"`                                             // IN2-15
	MilitaryStatus                       *IS   `hl7:"false,Military Status" json:"military_status,omitempty"`                                                     // IN2-16
	MilitaryRetireDate                   *DT   `hl7:"false,Military Retire Date" json:"military_retire_date,omitempty"`                                           // IN2-17
	MilitaryNonAvailCertOnFile           *ID   `hl7:"false,Military Non-Avail Cert On File" json:"military_non_avail_cert_on_file,omitempty"`                     // IN2-18
	BabyCoverage                         *ID   `hl7:"false,Baby Coverage" json:"baby_coverage,omitempty"`                                                         // IN2-19
	CombineBabyBill                      *ID   `hl7:"false,Combine Baby Bill" json:"combine_baby_bill,omitempty"`                                                 // IN2-20
	BloodDeductible                      *ST   `hl7:"false,Blood Deductible" json:"blood_deductible,omitempty"`                                                   // IN2-21
	SpecialCoverageApprovalName          []XPN `hl7:"false,Special Coverage Approval Name" json:"special_coverage_approval_name,omitempty"`                       // IN2-22
	SpecialCoverageApprovalTitle         *ST   `hl7:"false,Special Coverage Approval Title" json:"special_coverage_approval_title,omitempty"`                     // IN2-23
	NonCoveredInsuranceCode              []IS  `hl7:"false,Non-Covered Insurance Code" json:"non_covered_insurance_code,omitempty"`                               // IN2-24
	PayorID                              []CX  `hl7:"false,Payor ID" json:"payor_id,omitempty"`                                                                   // IN2-25
	PayorSubscriberID                    []CX  `hl7:"false,Payor Subscriber ID" json:"payor_subscriber_id,omitempty"`                                             // IN2-26
	EligibilitySource                    *IS   `hl7:"false,Eligibility Source" json:"eligibility_source,omitempty"`                                               // IN2-27
	RoomCoverageTypeAmount               []RMC `hl7:"false,Room Coverage Type/Amount" json:"room_coverage_type_amount,omitempty"`                                 // IN2-28
	PolicyTypeAmount                     []PTA `hl7:"false,Policy Type/Amount" json:"policy_type_amount,omitempty"`                                               // IN2-29
	DailyDeductible                      *DDI  `hl7:"false,Daily Deductible" json:"daily_deductible,omitempty"`                                                   // IN2-30
	LivingDependency                     *IS   `hl7:"false,Living Dependency" json:"living_dependency,omitempty"`                                                 // IN2-31
	AmbulatoryStatus                     []IS  `hl7:"false,Ambulatory Status" json:"ambulatory_status,omitempty"`                                                 // IN2-32
	Citizenship                          []CE  `hl7:"false,Citizenship" json:"citizenship,omitempty"`                                                             // IN2-33
	PrimaryLanguage                      *CE   `hl7:"false,Primary Language" json:"primary_language,omitempty"`                                                   // IN2-34
	LivingArrangement                    *IS   `hl7:"false,Living Arrangement" json:"living_arrangement,omitempty"`                                               // IN2-35
	PublicityCode                        *CE   `hl7:"false,Publicity Code" json:"publicity_code,omitempty"`                                                       // IN2-36
	ProtectionIndicator                  *ID   `hl7:"false,Protection Indicator" json:"protection_indicator,omitempty"`                                           // IN2-37
	StudentIndicator                     *IS   `hl7:"false,Student Indicator" json:"student_indicator,omitempty"`                                                 // IN2-38
	Religion                             *CE   `hl7:"false,Religion" json:"religion,omitempty"`                                                                   // IN2-39
	MotherSMaidenName                    []XPN `hl7:"false,Mother'S Maiden Name" json:"mother_s_maiden_name,omitempty"`                                           // IN2-40
	Nationality                          *CE   `hl7:"false,Nationality" json:"nationality,omitempty"`                                                             // IN2-41
	EthnicGroup                          []CE  `hl7:"false,Ethnic Group" json:"ethnic_group,omitempty"`                                                           // IN2-42
	MaritalStatus                        []CE  `hl7:"false,Marital Status" json:"marital_status,omitempty"`                                                       // IN2-43
	InsuredSEmploymentStartDate          *DT   `hl7:"false,Insured'S Employment Start Date" json:"insured_s_employment_start_date,omitempty"`                     // IN2-44
	EmploymentStopDate                   *DT   `hl7:"false,Employment Stop Date" json:"employment_stop_date,omitempty"`                                           // IN2-45
	JobTitle                             *ST   `hl7:"false,Job Title" json:"job_title,omitempty"`                                                                 // IN2-46
	JobCodeClass                         *JCC  `hl7:"false,Job Code/Class" json:"job_code_class,omitempty"`                                                       // IN2-47
	JobStatus                            *IS   `hl7:"false,Job Status" json:"job_status,omitempty"`                                                               // IN2-48
	EmployerContactPersonName            []XPN `hl7:"false,Employer Contact Person Name" json:"employer_contact_person_name,omitempty"`                           // IN2-49
	EmployerContactPersonPhoneNumber     []XTN `hl7:"false,Employer Contact Person Phone Number" json:"employer_contact_person_phone_number,omitempty"`           // IN2-50
	EmployerContactReason                *IS   `hl7:"false,Employer Contact Reason" json:"employer_contact_reason,omitempty"`                                     // IN2-51
	InsuredSContactPersonSName           []XPN `hl7:"false,Insured'S Contact Person'S Name" json:"insured_s_contact_person_s_name,omitempty"`                     // IN2-52
	InsuredSContactPersonPhoneNumber     []XTN `hl7:"false,Insured'S Contact Person Phone Number" json:"insured_s_contact_person_phone_number,omitempty"`         // IN2-53
	InsuredSContactPersonReason          []IS  `hl7:"false,Insured'S Contact Person Reason" json:"insured_s_contact_person_reason,omitempty"`                     // IN2-54
	RelationshipToThePatientStartDate    *DT   `hl7:"false,Relationship To The Patient Start Date" json:"relationship_to_the_patient_start_date,omitempty"`       // IN2-55
	RelationshipToThePatientStopDate     []DT  `hl7:"false,Relationship To The Patient Stop Date" json:"relationship_to_the_patient_stop_date,omitempty"`         // IN2-56
	InsuranceCoContactReason             *IS   `hl7:"false,Insurance Co. Contact Reason" json:"insurance_co_contact_reason,omitempty"`                            // IN2-57
	InsuranceCoContactPhoneNumber        *XTN  `hl7:"false,Insurance Co Contact Phone Number" json:"insurance_co_contact_phone_number,omitempty"`                 // IN2-58
	PolicyScope                          *IS   `hl7:"false,Policy Scope" json:"policy_scope,omitempty"`                                                           // IN2-59
	PolicySource                         *IS   `hl7:"false,Policy Source" json:"policy_source,omitempty"`                                                         // IN2-60
	PatientMemberNumber                  *CX   `hl7:"false,Patient Member Number" json:"patient_member_number,omitempty"`                                         // IN2-61
	GuarantorSRelationshipToInsured      *CE   `hl7:"false,Guarantor'S Relationship To Insured" json:"guarantor_s_relationship_to_insured,omitempty"`             // IN2-62
	InsuredSPhoneNumberHome              []XTN `hl7:"false,Insured'S Phone Number - Home" json:"insured_s_phone_number_home,omitempty"`                           // IN2-63
	InsuredSEmployerPhoneNumber          []XTN `hl7:"false,Insured'S Employer Phone Number" json:"insured_s_employer_phone_number,omitempty"`                     // IN2-64
	MilitaryHandicappedProgram           *CE   `hl7:"false,Military Handicapped Program" json:"military_handicapped_program,omitempty"`                           // IN2-65
	SuspendFlag                          *ID   `hl7:"false,Suspend Flag" json:"suspend_flag,omitempty"`                                                           // IN2-66
	CopayLimitFlag                       *ID   `hl7:"false,Copay Limit Flag" json:"copay_limit_flag,omitempty"`                                                   // IN2-67
	StoplossLimitFlag                    *ID   `hl7:"false,Stoploss Limit Flag" json:"stoploss_limit_flag,omitempty"`                                             // IN2-68
	InsuredOrganizationNameAndID         []XON `hl7:"false,Insured Organization Name And ID" json:"insured_organization_name_and_id,omitempty"`                   // IN2-69
	InsuredEmployerOrganizationNameAndID []XON `hl7:"false,Insured Employer Organization Name And ID" json:"insured_employer_organization_name_and_id,omitempty"` // IN2-70
	Race                                 []CE  `hl7:"false,Race" json:"race,omitempty"`                                                                           // IN2-71
	CMSPatientSRelationshipToInsured     *CE   `hl7:"false,CMS Patient'S Relationship To Insured" json:"cms_patient_s_relationship_to_insured,omitempty"`         // IN2-72
}

func (s *IN2) SegmentName() string {
	return "IN2"
}

//  IN3 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type IN3 struct {
	SetIDIN3                           *SI   `hl7:"true,Set ID - IN3" json:"set_idin_3,omitempty"`                                                      // IN3-1
	CertificationNumber                *CX   `hl7:"false,Certification Number" json:"certification_number,omitempty"`                                   // IN3-2
	CertifiedBy                        []XCN `hl7:"false,Certified By" json:"certified_by,omitempty"`                                                   // IN3-3
	CertificationRequired              *ID   `hl7:"false,Certification Required" json:"certification_required,omitempty"`                               // IN3-4
	Penalty                            *MOP  `hl7:"false,Penalty" json:"penalty,omitempty"`                                                             // IN3-5
	CertificationDateTime              *TS   `hl7:"false,Certification Date/Time" json:"certification_date_time,omitempty"`                             // IN3-6
	CertificationModifyDateTime        *TS   `hl7:"false,Certification Modify Date/Time" json:"certification_modify_date_time,omitempty"`               // IN3-7
	Operator                           []XCN `hl7:"false,Operator" json:"operator,omitempty"`                                                           // IN3-8
	CertificationBeginDate             *DT   `hl7:"false,Certification Begin Date" json:"certification_begin_date,omitempty"`                           // IN3-9
	CertificationEndDate               *DT   `hl7:"false,Certification End Date" json:"certification_end_date,omitempty"`                               // IN3-10
	Days                               *DTN  `hl7:"false,Days" json:"days,omitempty"`                                                                   // IN3-11
	NonConcurCodeDescription           *CE   `hl7:"false,Non-Concur Code/Description" json:"non_concur_code_description,omitempty"`                     // IN3-12
	NonConcurEffectiveDateTime         *TS   `hl7:"false,Non-Concur Effective Date/Time" json:"non_concur_effective_date_time,omitempty"`               // IN3-13
	PhysicianReviewer                  []XCN `hl7:"false,Physician Reviewer" json:"physician_reviewer,omitempty"`                                       // IN3-14
	CertificationContact               *ST   `hl7:"false,Certification Contact" json:"certification_contact,omitempty"`                                 // IN3-15
	CertificationContactPhoneNumber    []XTN `hl7:"false,Certification Contact Phone Number" json:"certification_contact_phone_number,omitempty"`       // IN3-16
	AppealReason                       *CE   `hl7:"false,Appeal Reason" json:"appeal_reason,omitempty"`                                                 // IN3-17
	CertificationAgency                *CE   `hl7:"false,Certification Agency" json:"certification_agency,omitempty"`                                   // IN3-18
	CertificationAgencyPhoneNumber     []XTN `hl7:"false,Certification Agency Phone Number" json:"certification_agency_phone_number,omitempty"`         // IN3-19
	PreCertificationRequirement        []ICD `hl7:"false,Pre-Certification Requirement" json:"pre_certification_requirement,omitempty"`                 // IN3-20
	CaseManager                        *ST   `hl7:"false,Case Manager" json:"case_manager,omitempty"`                                                   // IN3-21
	SecondOpinionDate                  *DT   `hl7:"false,Second Opinion Date" json:"second_opinion_date,omitempty"`                                     // IN3-22
	SecondOpinionStatus                *IS   `hl7:"false,Second Opinion Status" json:"second_opinion_status,omitempty"`                                 // IN3-23
	SecondOpinionDocumentationReceived []IS  `hl7:"false,Second Opinion Documentation Received" json:"second_opinion_documentation_received,omitempty"` // IN3-24
	SecondOpinionPhysician             []XCN `hl7:"false,Second Opinion Physician" json:"second_opinion_physician,omitempty"`                           // IN3-25
}

func (s *IN3) SegmentName() string {
	return "IN3"
}

//  INV represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type INV struct {
	SubstanceIdentifier          *CE  `hl7:"true,Substance Identifier" json:"substance_identifier,omitempty"`                      // INV-1
	SubstanceStatus              []CE `hl7:"true,Substance Status" json:"substance_status,omitempty"`                              // INV-2
	SubstanceType                *CE  `hl7:"false,Substance Type" json:"substance_type,omitempty"`                                 // INV-3
	InventoryContainerIdentifier *CE  `hl7:"false,Inventory Container Identifier" json:"inventory_container_identifier,omitempty"` // INV-4
	ContainerCarrierIdentifier   *CE  `hl7:"false,Container Carrier Identifier" json:"container_carrier_identifier,omitempty"`     // INV-5
	PositionOnCarrier            *CE  `hl7:"false,Position On Carrier" json:"position_on_carrier,omitempty"`                       // INV-6
	InitialQuantity              *NM  `hl7:"false,Initial Quantity" json:"initial_quantity,omitempty"`                             // INV-7
	CurrentQuantity              *NM  `hl7:"false,Current Quantity" json:"current_quantity,omitempty"`                             // INV-8
	AvailableQuantity            *NM  `hl7:"false,Available Quantity" json:"available_quantity,omitempty"`                         // INV-9
	ConsumptionQuantity          *NM  `hl7:"false,Consumption Quantity" json:"consumption_quantity,omitempty"`                     // INV-10
	QuantityUnits                *CE  `hl7:"false,Quantity Units" json:"quantity_units,omitempty"`                                 // INV-11
	ExpirationDateTime           *TS  `hl7:"false,Expiration Date/Time" json:"expiration_date_time,omitempty"`                     // INV-12
	FirstUsedDateTime            *TS  `hl7:"false,First Used Date/Time" json:"first_used_date_time,omitempty"`                     // INV-13
	OnBoardStabilityDuration     *TQ  `hl7:"false,On Board Stability Duration" json:"on_board_stability_duration,omitempty"`       // INV-14
	TestFluidIdentifierS         []CE `hl7:"false,Test/Fluid Identifier(S)" json:"test_fluid_identifier_s,omitempty"`              // INV-15
	ManufacturerLotNumber        *ST  `hl7:"false,Manufacturer Lot Number" json:"manufacturer_lot_number,omitempty"`               // INV-16
	ManufacturerIdentifier       *CE  `hl7:"false,Manufacturer Identifier" json:"manufacturer_identifier,omitempty"`               // INV-17
	SupplierIdentifier           *CE  `hl7:"false,Supplier Identifier" json:"supplier_identifier,omitempty"`                       // INV-18
	OnBoardStabilityTime         *CQ  `hl7:"false,On Board Stability Time" json:"on_board_stability_time,omitempty"`               // INV-19
	TargetValue                  *CQ  `hl7:"false,Target Value" json:"target_value,omitempty"`                                     // INV-20
}

func (s *INV) SegmentName() string {
	return "INV"
}

//  IPC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type IPC struct {
	AccessionIdentifier            *EI  `hl7:"true,Accession Identifier" json:"accession_identifier,omitempty"`                            // IPC-1
	RequestedProcedureID           *EI  `hl7:"true,Requested Procedure ID" json:"requested_procedure_id,omitempty"`                        // IPC-2
	StudyInstanceUID               *EI  `hl7:"true,Study Instance UID" json:"study_instance_uid,omitempty"`                                // IPC-3
	ScheduledProcedureStepID       *EI  `hl7:"true,Scheduled Procedure Step ID" json:"scheduled_procedure_step_id,omitempty"`              // IPC-4
	Modality                       *CE  `hl7:"false,Modality" json:"modality,omitempty"`                                                   // IPC-5
	ProtocolCode                   []CE `hl7:"false,Protocol Code" json:"protocol_code,omitempty"`                                         // IPC-6
	ScheduledStationName           *EI  `hl7:"false,Scheduled Station Name" json:"scheduled_station_name,omitempty"`                       // IPC-7
	ScheduledProcedureStepLocation []CE `hl7:"false,Scheduled Procedure Step Location" json:"scheduled_procedure_step_location,omitempty"` // IPC-8
	ScheduledAETitle               *ST  `hl7:"false,Scheduled AE Title" json:"scheduled_ae_title,omitempty"`                               // IPC-9
}

func (s *IPC) SegmentName() string {
	return "IPC"
}

//  ISD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ISD struct {
	ReferenceInteractionNumberUniqueIdentifier *NM `hl7:"true,Reference Interaction Number (Unique Identifier)" json:"reference_interaction_number_unique_identifier,omitempty"` // ISD-1
	InteractionTypeIdentifier                  *CE `hl7:"false,Interaction Type Identifier" json:"interaction_type_identifier,omitempty"`                                        // ISD-2
	InteractionActiveState                     *CE `hl7:"true,Interaction Active State" json:"interaction_active_state,omitempty"`                                               // ISD-3
}

func (s *ISD) SegmentName() string {
	return "ISD"
}

//  LAN represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type LAN struct {
	SetIDLAN                *SI  `hl7:"true,Set ID - LAN" json:"set_idlan,omitempty"`                               // LAN-1
	LanguageCode            *CE  `hl7:"true,Language Code" json:"language_code,omitempty"`                          // LAN-2
	LanguageAbilityCode     []CE `hl7:"false,Language Ability Code" json:"language_ability_code,omitempty"`         // LAN-3
	LanguageProficiencyCode *CE  `hl7:"false,Language Proficiency Code" json:"language_proficiency_code,omitempty"` // LAN-4
}

func (s *LAN) SegmentName() string {
	return "LAN"
}

//  LCC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type LCC struct {
	PrimaryKeyValueLCC *PL  `hl7:"true,Primary Key Value - LCC" json:"primary_key_value_lcc,omitempty"` // LCC-1
	LocationDepartment *CE  `hl7:"true,Location Department" json:"location_department,omitempty"`       // LCC-2
	AccommodationType  []CE `hl7:"false,Accommodation Type" json:"accommodation_type,omitempty"`        // LCC-3
	ChargeCode         []CE `hl7:"true,Charge Code" json:"charge_code,omitempty"`                       // LCC-4
}

func (s *LCC) SegmentName() string {
	return "LCC"
}

//  LCH represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type LCH struct {
	PrimaryKeyValueLCH             *PL `hl7:"true,Primary Key Value - LCH" json:"primary_key_value_lch,omitempty"`                       // LCH-1
	SegmentActionCode              *ID `hl7:"false,Segment Action Code" json:"segment_action_code,omitempty"`                            // LCH-2
	SegmentUniqueKey               *EI `hl7:"false,Segment Unique Key" json:"segment_unique_key,omitempty"`                              // LCH-3
	LocationCharacteristicID       *CE `hl7:"true,Location Characteristic ID" json:"location_characteristic_id,omitempty"`               // LCH-4
	LocationCharacteristicValueLCH *CE `hl7:"true,Location Characteristic Value-LCH" json:"location_characteristic_value_lch,omitempty"` // LCH-5
}

func (s *LCH) SegmentName() string {
	return "LCH"
}

//  LDP represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type LDP struct {
	PrimaryKeyValueLDP  *PL  `hl7:"true,Primary Key Value - LDP" json:"primary_key_value_ldp,omitempty"`  // LDP-1
	LocationDepartment  *CE  `hl7:"true,Location Department" json:"location_department,omitempty"`        // LDP-2
	LocationService     []IS `hl7:"false,Location Service" json:"location_service,omitempty"`             // LDP-3
	SpecialtyType       []CE `hl7:"false,Specialty Type" json:"specialty_type,omitempty"`                 // LDP-4
	ValidPatientClasses []IS `hl7:"false,Valid Patient Classes" json:"valid_patient_classes,omitempty"`   // LDP-5
	ActiveInactiveFlag  *ID  `hl7:"false,Active/Inactive Flag" json:"active_inactive_flag,omitempty"`     // LDP-6
	ActivationDateLDP   *TS  `hl7:"false,Activation Date  LDP" json:"activation_date_ldp,omitempty"`      // LDP-7
	InactivationDateLDP *TS  `hl7:"false,Inactivation Date - LDP" json:"inactivation_date_ldp,omitempty"` // LDP-8
	InactivatedReason   *ST  `hl7:"false,Inactivated Reason" json:"inactivated_reason,omitempty"`         // LDP-9
	VisitingHours       []VH `hl7:"false,Visiting Hours" json:"visiting_hours,omitempty"`                 // LDP-10
	ContactPhone        *XTN `hl7:"false,Contact Phone" json:"contact_phone,omitempty"`                   // LDP-11
	LocationCostCenter  *CE  `hl7:"false,Location Cost Center" json:"location_cost_center,omitempty"`     // LDP-12
}

func (s *LDP) SegmentName() string {
	return "LDP"
}

//  LOC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type LOC struct {
	PrimaryKeyValueLOC  *PL   `hl7:"true,Primary Key Value - LOC" json:"primary_key_value_loc,omitempty"`  // LOC-1
	LocationDescription *ST   `hl7:"false,Location Description" json:"location_description,omitempty"`     // LOC-2
	LocationTypeLOC     []IS  `hl7:"true,Location Type - LOC" json:"location_type_loc,omitempty"`          // LOC-3
	OrganizationNameLOC []XON `hl7:"false,Organization Name - LOC" json:"organization_name_loc,omitempty"` // LOC-4
	LocationAddress     []XAD `hl7:"false,Location Address" json:"location_address,omitempty"`             // LOC-5
	LocationPhone       []XTN `hl7:"false,Location Phone" json:"location_phone,omitempty"`                 // LOC-6
	LicenseNumber       []CE  `hl7:"false,License Number" json:"license_number,omitempty"`                 // LOC-7
	LocationEquipment   []IS  `hl7:"false,Location Equipment" json:"location_equipment,omitempty"`         // LOC-8
	LocationServiceCode *IS   `hl7:"false,Location Service Code" json:"location_service_code,omitempty"`   // LOC-9
}

func (s *LOC) SegmentName() string {
	return "LOC"
}

//  LRL represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type LRL struct {
	PrimaryKeyValueLRL                      *PL   `hl7:"true,Primary Key Value - LRL" json:"primary_key_value_lrl,omitempty"`                                          // LRL-1
	SegmentActionCode                       *ID   `hl7:"false,Segment Action Code" json:"segment_action_code,omitempty"`                                               // LRL-2
	SegmentUniqueKey                        *EI   `hl7:"false,Segment Unique Key" json:"segment_unique_key,omitempty"`                                                 // LRL-3
	LocationRelationshipID                  *CE   `hl7:"true,Location Relationship ID" json:"location_relationship_id,omitempty"`                                      // LRL-4
	OrganizationalLocationRelationshipValue []XON `hl7:"false,Organizational Location Relationship Value" json:"organizational_location_relationship_value,omitempty"` // LRL-5
	PatientLocationRelationshipValue        *PL   `hl7:"false,Patient Location Relationship Value" json:"patient_location_relationship_value,omitempty"`               // LRL-6
}

func (s *LRL) SegmentName() string {
	return "LRL"
}

//  MFA represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type MFA struct {
	RecordLevelEventCode      *ID   `hl7:"true,Record-Level Event Code" json:"record_level_event_code,omitempty"`             // MFA-1
	MFNControlID              *ST   `hl7:"false,MFN Control ID" json:"mfn_control_id,omitempty"`                              // MFA-2
	EventCompletionDateTime   *TS   `hl7:"false,Event Completion Date/Time" json:"event_completion_date_time,omitempty"`      // MFA-3
	MFNRecordLevelErrorReturn *CE   `hl7:"true,MFN Record Level Error Return" json:"mfn_record_level_error_return,omitempty"` // MFA-4
	PrimaryKeyValueMFA        []Any `hl7:"true,Primary Key Value - MFA" json:"primary_key_value_mfa,omitempty"`               // MFA-5
	PrimaryKeyValueTypeMFA    []ID  `hl7:"true,Primary Key Value Type - MFA" json:"primary_key_value_type_mfa,omitempty"`     // MFA-6
}

func (s *MFA) SegmentName() string {
	return "MFA"
}

//  MFE represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type MFE struct {
	RecordLevelEventCode *ID   `hl7:"true,Record-Level Event Code" json:"record_level_event_code,omitempty"` // MFE-1
	MFNControlID         *ST   `hl7:"false,MFN Control ID" json:"mfn_control_id,omitempty"`                  // MFE-2
	EffectiveDateTime    *TS   `hl7:"false,Effective Date/Time" json:"effective_date_time,omitempty"`        // MFE-3
	PrimaryKeyValueMFE   []Any `hl7:"true,Primary Key Value - MFE" json:"primary_key_value_mfe,omitempty"`   // MFE-4
	PrimaryKeyValueType  []ID  `hl7:"true,Primary Key Value Type" json:"primary_key_value_type,omitempty"`   // MFE-5
}

func (s *MFE) SegmentName() string {
	return "MFE"
}

//  MFI represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type MFI struct {
	MasterFileIdentifier            *CE `hl7:"true,Master File Identifier" json:"master_file_identifier,omitempty"`                          // MFI-1
	MasterFileApplicationIdentifier *HD `hl7:"false,Master File Application Identifier" json:"master_file_application_identifier,omitempty"` // MFI-2
	FileLevelEventCode              *ID `hl7:"true,File-Level Event Code" json:"file_level_event_code,omitempty"`                            // MFI-3
	EnteredDateTime                 *TS `hl7:"false,Entered Date/Time" json:"entered_date_time,omitempty"`                                   // MFI-4
	EffectiveDateTime               *TS `hl7:"false,Effective Date/Time" json:"effective_date_time,omitempty"`                               // MFI-5
	ResponseLevelCode               *ID `hl7:"true,Response Level Code" json:"response_level_code,omitempty"`                                // MFI-6
}

func (s *MFI) SegmentName() string {
	return "MFI"
}

//  MRG represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type MRG struct {
	PriorPatientIdentifierList []CX  `hl7:"true,Prior Patient Identifier List" json:"prior_patient_identifier_list,omitempty"` // MRG-1
	PriorAlternatePatientID    []CX  `hl7:"false,Prior Alternate Patient ID" json:"prior_alternate_patient_id,omitempty"`      // MRG-2
	PriorPatientAccountNumber  *CX   `hl7:"false,Prior Patient Account Number" json:"prior_patient_account_number,omitempty"`  // MRG-3
	PriorPatientID             *CX   `hl7:"false,Prior Patient ID" json:"prior_patient_id,omitempty"`                          // MRG-4
	PriorVisitNumber           *CX   `hl7:"false,Prior Visit Number" json:"prior_visit_number,omitempty"`                      // MRG-5
	PriorAlternateVisitID      *CX   `hl7:"false,Prior Alternate Visit ID" json:"prior_alternate_visit_id,omitempty"`          // MRG-6
	PriorPatientName           []XPN `hl7:"false,Prior Patient Name" json:"prior_patient_name,omitempty"`                      // MRG-7
}

func (s *MRG) SegmentName() string {
	return "MRG"
}

//  MSA represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type MSA struct {
	AcknowledgmentCode        *ID  `hl7:"true,Acknowledgment Code" json:"acknowledgment_code,omitempty"`                  // MSA-1
	MessageControlID          *ST  `hl7:"true,Message Control ID" json:"message_control_id,omitempty"`                    // MSA-2
	TextMessage               *ST  `hl7:"false,Text Message" json:"text_message,omitempty"`                               // MSA-3
	ExpectedSequenceNumber    *NM  `hl7:"false,Expected Sequence Number" json:"expected_sequence_number,omitempty"`       // MSA-4
	DelayedAcknowledgmentType *NUL `hl7:"false,Delayed Acknowledgment Type" json:"delayed_acknowledgment_type,omitempty"` // MSA-5
	ErrorCondition            *CE  `hl7:"false,Error Condition" json:"error_condition,omitempty"`                         // MSA-6
}

func (s *MSA) SegmentName() string {
	return "MSA"
}

//  MSH represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type MSH struct {
	//  Missing: MSH.1
	EncodingCharacters                  *Delimiters `hl7:"true,Encoding Characters" json:"encoding_characters,omitempty"`                                          // MSH-2
	SendingApplication                  *HD         `hl7:"false,Sending Application" json:"sending_application,omitempty"`                                         // MSH-3
	SendingFacility                     *HD         `hl7:"false,Sending Facility" json:"sending_facility,omitempty"`                                               // MSH-4
	ReceivingApplication                *HD         `hl7:"false,Receiving Application" json:"receiving_application,omitempty"`                                     // MSH-5
	ReceivingFacility                   *HD         `hl7:"false,Receiving Facility" json:"receiving_facility,omitempty"`                                           // MSH-6
	DateTimeOfMessage                   *TS         `hl7:"true,Date/Time Of Message" json:"date_time_of_message,omitempty"`                                        // MSH-7
	Security                            *ST         `hl7:"false,Security" json:"security,omitempty"`                                                               // MSH-8
	MessageType                         *MSG        `hl7:"true,Message Type" json:"message_type,omitempty"`                                                        // MSH-9
	MessageControlID                    *ST         `hl7:"true,Message Control ID" json:"message_control_id,omitempty"`                                            // MSH-10
	ProcessingID                        *PT         `hl7:"true,Processing ID" json:"processing_id,omitempty"`                                                      // MSH-11
	VersionID                           *VID        `hl7:"true,Version ID" json:"version_id,omitempty"`                                                            // MSH-12
	SequenceNumber                      *NM         `hl7:"false,Sequence Number" json:"sequence_number,omitempty"`                                                 // MSH-13
	ContinuationPointer                 *ST         `hl7:"false,Continuation Pointer" json:"continuation_pointer,omitempty"`                                       // MSH-14
	AcceptAcknowledgmentType            *ID         `hl7:"false,Accept Acknowledgment Type" json:"accept_acknowledgment_type,omitempty"`                           // MSH-15
	ApplicationAcknowledgmentType       *ID         `hl7:"false,Application Acknowledgment Type" json:"application_acknowledgment_type,omitempty"`                 // MSH-16
	CountryCode                         *ID         `hl7:"false,Country Code" json:"country_code,omitempty"`                                                       // MSH-17
	CharacterSet                        []ID        `hl7:"false,Character Set" json:"character_set,omitempty"`                                                     // MSH-18
	PrincipalLanguageOfMessage          *CE         `hl7:"false,Principal Language Of Message" json:"principal_language_of_message,omitempty"`                     // MSH-19
	AlternateCharacterSetHandlingScheme *ID         `hl7:"false,Alternate Character Set Handling Scheme" json:"alternate_character_set_handling_scheme,omitempty"` // MSH-20
	MessageProfileIdentifier            []EI        `hl7:"false,Message Profile Identifier" json:"message_profile_identifier,omitempty"`                           // MSH-21
}

func (s *MSH) SegmentName() string {
	return "MSH"
}

//  NCK represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type NCK struct {
	SystemDateTime *TS `hl7:"true,System Date/Time" json:"system_date_time,omitempty"` // NCK-1
}

func (s *NCK) SegmentName() string {
	return "NCK"
}

//  NDS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type NDS struct {
	NotificationReferenceNumber *NM `hl7:"true,Notification Reference Number" json:"notification_reference_number,omitempty"` // NDS-1
	NotificationDateTime        *TS `hl7:"true,Notification Date/Time" json:"notification_date_time,omitempty"`               // NDS-2
	NotificationAlertSeverity   *CE `hl7:"true,Notification Alert Severity" json:"notification_alert_severity,omitempty"`     // NDS-3
	NotificationCode            *CE `hl7:"true,Notification Code" json:"notification_code,omitempty"`                         // NDS-4
}

func (s *NDS) SegmentName() string {
	return "NDS"
}

//  NK1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type NK1 struct {
	SetIDNK1                                 *SI   `hl7:"true,Set ID - NK1" json:"set_idnk_1,omitempty"`                                                                          // NK1-1
	Name                                     []XPN `hl7:"false,Name" json:"name,omitempty"`                                                                                       // NK1-2
	Relationship                             *CE   `hl7:"false,Relationship" json:"relationship,omitempty"`                                                                       // NK1-3
	Address                                  []XAD `hl7:"false,Address" json:"address,omitempty"`                                                                                 // NK1-4
	PhoneNumber                              []XTN `hl7:"false,Phone Number" json:"phone_number,omitempty"`                                                                       // NK1-5
	BusinessPhoneNumber                      []XTN `hl7:"false,Business Phone Number" json:"business_phone_number,omitempty"`                                                     // NK1-6
	ContactRole                              *CE   `hl7:"false,Contact Role" json:"contact_role,omitempty"`                                                                       // NK1-7
	StartDate                                *DT   `hl7:"false,Start Date" json:"start_date,omitempty"`                                                                           // NK1-8
	EndDate                                  *DT   `hl7:"false,End Date" json:"end_date,omitempty"`                                                                               // NK1-9
	NextOfKinAssociatedPartiesJobTitle       *ST   `hl7:"false,Next Of Kin / Associated Parties Job Title" json:"next_of_kin_associated_parties_job_title,omitempty"`             // NK1-10
	NextOfKinAssociatedPartiesJobCodeClass   *JCC  `hl7:"false,Next Of Kin / Associated Parties Job Code/Class" json:"next_of_kin_associated_parties_job_code_class,omitempty"`   // NK1-11
	NextOfKinAssociatedPartiesEmployeeNumber *CX   `hl7:"false,Next Of Kin / Associated Parties Employee Number" json:"next_of_kin_associated_parties_employee_number,omitempty"` // NK1-12
	OrganizationNameNK1                      []XON `hl7:"false,Organization Name - NK1" json:"organization_name_nk_1,omitempty"`                                                  // NK1-13
	MaritalStatus                            *CE   `hl7:"false,Marital Status" json:"marital_status,omitempty"`                                                                   // NK1-14
	AdministrativeSex                        *IS   `hl7:"false,Administrative Sex" json:"administrative_sex,omitempty"`                                                           // NK1-15
	DateTimeOfBirth                          *TS   `hl7:"false,Date/Time Of Birth" json:"date_time_of_birth,omitempty"`                                                           // NK1-16
	LivingDependency                         []IS  `hl7:"false,Living Dependency" json:"living_dependency,omitempty"`                                                             // NK1-17
	AmbulatoryStatus                         []IS  `hl7:"false,Ambulatory Status" json:"ambulatory_status,omitempty"`                                                             // NK1-18
	Citizenship                              []CE  `hl7:"false,Citizenship" json:"citizenship,omitempty"`                                                                         // NK1-19
	PrimaryLanguage                          *CE   `hl7:"false,Primary Language" json:"primary_language,omitempty"`                                                               // NK1-20
	LivingArrangement                        *IS   `hl7:"false,Living Arrangement" json:"living_arrangement,omitempty"`                                                           // NK1-21
	PublicityCode                            *CE   `hl7:"false,Publicity Code" json:"publicity_code,omitempty"`                                                                   // NK1-22
	ProtectionIndicator                      *ID   `hl7:"false,Protection Indicator" json:"protection_indicator,omitempty"`                                                       // NK1-23
	StudentIndicator                         *IS   `hl7:"false,Student Indicator" json:"student_indicator,omitempty"`                                                             // NK1-24
	Religion                                 *CE   `hl7:"false,Religion" json:"religion,omitempty"`                                                                               // NK1-25
	MotherSMaidenName                        []XPN `hl7:"false,Mother'S Maiden Name" json:"mother_s_maiden_name,omitempty"`                                                       // NK1-26
	Nationality                              *CE   `hl7:"false,Nationality" json:"nationality,omitempty"`                                                                         // NK1-27
	EthnicGroup                              []CE  `hl7:"false,Ethnic Group" json:"ethnic_group,omitempty"`                                                                       // NK1-28
	ContactReason                            []CE  `hl7:"false,Contact Reason" json:"contact_reason,omitempty"`                                                                   // NK1-29
	ContactPersonSName                       []XPN `hl7:"false,Contact Person'S Name" json:"contact_person_s_name,omitempty"`                                                     // NK1-30
	ContactPersonSTelephoneNumber            []XTN `hl7:"false,Contact Person'S Telephone Number" json:"contact_person_s_telephone_number,omitempty"`                             // NK1-31
	ContactPersonSAddress                    []XAD `hl7:"false,Contact Person'S Address" json:"contact_person_s_address,omitempty"`                                               // NK1-32
	NextOfKinAssociatedPartySIdentifiers     []CX  `hl7:"false,Next Of Kin/Associated Party'S Identifiers" json:"next_of_kin_associated_party_s_identifiers,omitempty"`           // NK1-33
	JobStatus                                *IS   `hl7:"false,Job Status" json:"job_status,omitempty"`                                                                           // NK1-34
	Race                                     []CE  `hl7:"false,Race" json:"race,omitempty"`                                                                                       // NK1-35
	Handicap                                 *IS   `hl7:"false,Handicap" json:"handicap,omitempty"`                                                                               // NK1-36
	ContactPersonSocialSecurityNumber        *ST   `hl7:"false,Contact Person Social Security Number" json:"contact_person_social_security_number,omitempty"`                     // NK1-37
	NextOfKinBirthPlace                      *ST   `hl7:"false,Next Of Kin Birth Place" json:"next_of_kin_birth_place,omitempty"`                                                 // NK1-38
	VIPIndicator                             *IS   `hl7:"false,VIP Indicator" json:"vip_indicator,omitempty"`                                                                     // NK1-39
}

func (s *NK1) SegmentName() string {
	return "NK1"
}

//  NPU represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type NPU struct {
	BedLocation *PL `hl7:"true,Bed Location" json:"bed_location,omitempty"` // NPU-1
	BedStatus   *IS `hl7:"false,Bed Status" json:"bed_status,omitempty"`    // NPU-2
}

func (s *NPU) SegmentName() string {
	return "NPU"
}

//  NSC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type NSC struct {
	ApplicationChangeType *IS `hl7:"true,Application Change Type" json:"application_change_type,omitempty"` // NSC-1
	CurrentCPU            *ST `hl7:"false,Current CPU" json:"current_cpu,omitempty"`                        // NSC-2
	CurrentFileserver     *ST `hl7:"false,Current Fileserver" json:"current_fileserver,omitempty"`          // NSC-3
	CurrentApplication    *HD `hl7:"false,Current Application" json:"current_application,omitempty"`        // NSC-4
	CurrentFacility       *HD `hl7:"false,Current Facility" json:"current_facility,omitempty"`              // NSC-5
	NewCPU                *ST `hl7:"false,New CPU" json:"new_cpu,omitempty"`                                // NSC-6
	NewFileserver         *ST `hl7:"false,New Fileserver" json:"new_fileserver,omitempty"`                  // NSC-7
	NewApplication        *HD `hl7:"false,New Application" json:"new_application,omitempty"`                // NSC-8
	NewFacility           *HD `hl7:"false,New Facility" json:"new_facility,omitempty"`                      // NSC-9
}

func (s *NSC) SegmentName() string {
	return "NSC"
}

//  NST represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type NST struct {
	StatisticsAvailable           *ID `hl7:"true,Statistics Available" json:"statistics_available,omitempty"`                          // NST-1
	SourceIdentifier              *ST `hl7:"false,Source Identifier" json:"source_identifier,omitempty"`                               // NST-2
	SourceType                    *ID `hl7:"false,Source Type" json:"source_type,omitempty"`                                           // NST-3
	StatisticsStart               *TS `hl7:"false,Statistics Start" json:"statistics_start,omitempty"`                                 // NST-4
	StatisticsEnd                 *TS `hl7:"false,Statistics End" json:"statistics_end,omitempty"`                                     // NST-5
	ReceiveCharacterCount         *NM `hl7:"false,Receive Character Count" json:"receive_character_count,omitempty"`                   // NST-6
	SendCharacterCount            *NM `hl7:"false,Send Character Count" json:"send_character_count,omitempty"`                         // NST-7
	MessagesReceived              *NM `hl7:"false,Messages Received" json:"messages_received,omitempty"`                               // NST-8
	MessagesSent                  *NM `hl7:"false,Messages Sent" json:"messages_sent,omitempty"`                                       // NST-9
	ChecksumErrorsReceived        *NM `hl7:"false,Checksum Errors Received" json:"checksum_errors_received,omitempty"`                 // NST-10
	LengthErrorsReceived          *NM `hl7:"false,Length Errors Received" json:"length_errors_received,omitempty"`                     // NST-11
	OtherErrorsReceived           *NM `hl7:"false,Other Errors Received" json:"other_errors_received,omitempty"`                       // NST-12
	ConnectTimeouts               *NM `hl7:"false,Connect Timeouts" json:"connect_timeouts,omitempty"`                                 // NST-13
	ReceiveTimeouts               *NM `hl7:"false,Receive Timeouts" json:"receive_timeouts,omitempty"`                                 // NST-14
	ApplicationControlLevelErrors *NM `hl7:"false,Application Control-Level Errors" json:"application_control_level_errors,omitempty"` // NST-15
}

func (s *NST) SegmentName() string {
	return "NST"
}

//  NTE represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type NTE struct {
	SetIDNTE        *SI  `hl7:"false,Set ID - NTE" json:"set_idnte,omitempty"`              // NTE-1
	SourceOfComment *ID  `hl7:"false,Source Of Comment" json:"source_of_comment,omitempty"` // NTE-2
	Comment         []FT `hl7:"false,Comment" json:"comment,omitempty"`                     // NTE-3
	CommentType     *CE  `hl7:"false,Comment Type" json:"comment_type,omitempty"`           // NTE-4
}

func (s *NTE) SegmentName() string {
	return "NTE"
}

//  OBR represents the corresponding HL7 segment.
//  Definition from HL7 SYNTHETIC
type OBR struct {
	SetIDOBR                                   *SI   `hl7:"false,Set ID - OBR" json:"set_idobr,omitempty"`                                                                         // OBR-1
	PlacerOrderNumber                          *EI   `hl7:"false,Placer Order Number" json:"placer_order_number,omitempty"`                                                        // OBR-2
	FillerOrderNumber                          *EI   `hl7:"false,Filler Order Number" json:"filler_order_number,omitempty"`                                                        // OBR-3
	UniversalServiceIdentifier                 *CWE  `hl7:"true,Universal Service Identifier" json:"universal_service_identifier,omitempty"`                                       // OBR-4
	PriorityOBR                                *ID   `hl7:"false,Priority - OBR" json:"priority_obr,omitempty"`                                                                    // OBR-5
	RequestedDateTime                          *TS   `hl7:"false,Requested Date/Time" json:"requested_date_time,omitempty"`                                                        // OBR-6
	ObservationDateTime                        *TS   `hl7:"false,Observation Date/Time" json:"observation_date_time,omitempty"`                                                    // OBR-7
	ObservationEndDateTime                     *TS   `hl7:"false,Observation End Date/Time" json:"observation_end_date_time,omitempty"`                                            // OBR-8
	CollectionVolume                           *CQ   `hl7:"false,Collection Volume" json:"collection_volume,omitempty"`                                                            // OBR-9
	CollectorIdentifier                        []XCN `hl7:"false,Collector Identifier" json:"collector_identifier,omitempty"`                                                      // OBR-10
	SpecimenActionCode                         *ID   `hl7:"false,Specimen Action Code" json:"specimen_action_code,omitempty"`                                                      // OBR-11
	DangerCode                                 *CE   `hl7:"false,Danger Code" json:"danger_code,omitempty"`                                                                        // OBR-12
	RelevantClinicalInformation                *ST   `hl7:"false,Relevant Clinical Information" json:"relevant_clinical_information,omitempty"`                                    // OBR-13
	SpecimenReceivedDateTime                   *TS   `hl7:"false,Specimen Received Date/Time" json:"specimen_received_date_time,omitempty"`                                        // OBR-14
	SpecimenSource                             *SPS  `hl7:"false,Specimen Source" json:"specimen_source,omitempty"`                                                                // OBR-15
	OrderingProvider                           []XCN `hl7:"false,Ordering Provider" json:"ordering_provider,omitempty"`                                                            // OBR-16
	OrderCallbackPhoneNumber                   []XTN `hl7:"false,Order Callback Phone Number" json:"order_callback_phone_number,omitempty"`                                        // OBR-17
	PlacerField1                               *ST   `hl7:"false,Placer Field 1" json:"placer_field_1,omitempty"`                                                                  // OBR-18
	PlacerField2                               *ST   `hl7:"false,Placer Field 2" json:"placer_field_2,omitempty"`                                                                  // OBR-19
	FillerField1                               *ST   `hl7:"false,Filler Field 1" json:"filler_field_1,omitempty"`                                                                  // OBR-20
	FillerField2                               *ST   `hl7:"false,Filler Field 2" json:"filler_field_2,omitempty"`                                                                  // OBR-21
	ResultsRptStatusChngDateTime               *TS   `hl7:"false,Results Rpt/Status Chng - Date/Time" json:"results_rpt_status_chng_date_time,omitempty"`                          // OBR-22
	ChargeToPractice                           *MOC  `hl7:"false,Charge To Practice" json:"charge_to_practice,omitempty"`                                                          // OBR-23
	DiagnosticServSectID                       *ID   `hl7:"false,Diagnostic Serv Sect ID" json:"diagnostic_serv_sect_id,omitempty"`                                                // OBR-24
	ResultStatus                               *ID   `hl7:"false,Result Status" json:"result_status,omitempty"`                                                                    // OBR-25
	ParentResult                               *PRL  `hl7:"false,Parent Result" json:"parent_result,omitempty"`                                                                    // OBR-26
	QuantityTiming                             []TQ  `hl7:"false,Quantity/Timing" json:"quantity_timing,omitempty"`                                                                // OBR-27
	ResultCopiesTo                             []XCN `hl7:"false,Result Copies To" json:"result_copies_to,omitempty"`                                                              // OBR-28
	Parent                                     *EIP  `hl7:"false,Parent" json:"parent,omitempty"`                                                                                  // OBR-29
	TransportationMode                         *ID   `hl7:"false,Transportation Mode" json:"transportation_mode,omitempty"`                                                        // OBR-30
	ReasonForStudy                             []CE  `hl7:"false,Reason For Study" json:"reason_for_study,omitempty"`                                                              // OBR-31
	PrincipalResultInterpreter                 *NDL  `hl7:"false,Principal Result Interpreter" json:"principal_result_interpreter,omitempty"`                                      // OBR-32
	AssistantResultInterpreter                 []NDL `hl7:"false,Assistant Result Interpreter" json:"assistant_result_interpreter,omitempty"`                                      // OBR-33
	Technician                                 []NDL `hl7:"false,Technician" json:"technician,omitempty"`                                                                          // OBR-34
	Transcriptionist                           []NDL `hl7:"false,Transcriptionist" json:"transcriptionist,omitempty"`                                                              // OBR-35
	ScheduledDateTime                          *TS   `hl7:"false,Scheduled Date/Time" json:"scheduled_date_time,omitempty"`                                                        // OBR-36
	NumberOfSampleContainers                   *NM   `hl7:"false,Number Of Sample Containers *" json:"number_of_sample_containers,omitempty"`                                      // OBR-37
	TransportLogisticsOfCollectedSample        []CE  `hl7:"false,Transport Logistics Of Collected Sample" json:"transport_logistics_of_collected_sample,omitempty"`                // OBR-38
	CollectorSComment                          []CE  `hl7:"false,Collector'S Comment *" json:"collector_s_comment,omitempty"`                                                      // OBR-39
	TransportArrangementResponsibility         *CE   `hl7:"false,Transport Arrangement Responsibility" json:"transport_arrangement_responsibility,omitempty"`                      // OBR-40
	TransportArranged                          *ID   `hl7:"false,Transport Arranged" json:"transport_arranged,omitempty"`                                                          // OBR-41
	EscortRequired                             *ID   `hl7:"false,Escort Required" json:"escort_required,omitempty"`                                                                // OBR-42
	PlannedPatientTransportComment             []CE  `hl7:"false,Planned Patient Transport Comment" json:"planned_patient_transport_comment,omitempty"`                            // OBR-43
	ProcedureCode                              *CE   `hl7:"false,Procedure Code" json:"procedure_code,omitempty"`                                                                  // OBR-44
	ProcedureCodeModifier                      []CE  `hl7:"false,Procedure Code Modifier" json:"procedure_code_modifier,omitempty"`                                                // OBR-45
	PlacerSupplementalServiceInformation       []CE  `hl7:"false,Placer Supplemental Service Information" json:"placer_supplemental_service_information,omitempty"`                // OBR-46
	FillerSupplementalServiceInformation       []CE  `hl7:"false,Filler Supplemental Service Information" json:"filler_supplemental_service_information,omitempty"`                // OBR-47
	MedicallyNecessaryDuplicateProcedureReason *CWE  `hl7:"false,Medically Necessary Duplicate Procedure Reason." json:"medically_necessary_duplicate_procedure_reason,omitempty"` // OBR-48
	ResultHandling                             *IS   `hl7:"false,Result Handling" json:"result_handling,omitempty"`                                                                // OBR-49
	ParentUniversalServiceIdentifier           *CWE  `hl7:"false,Parent Universal Service Identifier" json:"parent_universal_service_identifier,omitempty"`                        // OBR-50
}

func (s *OBR) SegmentName() string {
	return "OBR"
}

//  OBX represents the corresponding HL7 segment.
//  Definition from HL7 SYNTHETIC
type OBX struct {
	SetIDOBX                               *SI   `hl7:"false,Set ID - OBX" json:"set_idobx,omitempty"`                                                                     // OBX-1
	ValueType                              *ID   `hl7:"false,Value Type" json:"value_type,omitempty"`                                                                      // OBX-2
	ObservationIdentifier                  *CWE  `hl7:"true,Observation Identifier" json:"observation_identifier,omitempty"`                                               // OBX-3
	ObservationSubID                       *ST   `hl7:"false,Observation Sub-ID" json:"observation_sub_id,omitempty"`                                                      // OBX-4
	ObservationValue                       []Any `hl7:"false,Observation Value" json:"observation_value,omitempty"`                                                        // OBX-5
	Units                                  *CE   `hl7:"false,Units" json:"units,omitempty"`                                                                                // OBX-6
	ReferencesRange                        *ST   `hl7:"false,References Range" json:"references_range,omitempty"`                                                          // OBX-7
	AbnormalFlags                          []IS  `hl7:"false,Abnormal Flags" json:"abnormal_flags,omitempty"`                                                              // OBX-8
	Probability                            *NM   `hl7:"false,Probability" json:"probability,omitempty"`                                                                    // OBX-9
	NatureOfAbnormalTest                   []ID  `hl7:"false,Nature Of Abnormal Test" json:"nature_of_abnormal_test,omitempty"`                                            // OBX-10
	ObservationResultStatus                *ID   `hl7:"true,Observation Result Status" json:"observation_result_status,omitempty"`                                         // OBX-11
	EffectiveDateOfReferenceRangeValues    *TS   `hl7:"false,Effective Date Of Reference Range Values" json:"effective_date_of_reference_range_values,omitempty"`          // OBX-12
	UserDefinedAccessChecks                *ST   `hl7:"false,User Defined Access Checks" json:"user_defined_access_checks,omitempty"`                                      // OBX-13
	DateTimeOfTheObservation               *TS   `hl7:"false,Date/Time Of The Observation" json:"date_time_of_the_observation,omitempty"`                                  // OBX-14
	ProducerSReference                     *CE   `hl7:"false,Producer'S Reference" json:"producer_s_reference,omitempty"`                                                  // OBX-15
	ResponsibleObserver                    []XCN `hl7:"false,Responsible Observer" json:"responsible_observer,omitempty"`                                                  // OBX-16
	ObservationMethod                      []CE  `hl7:"false,Observation Method" json:"observation_method,omitempty"`                                                      // OBX-17
	EquipmentInstanceIdentifier            []EI  `hl7:"false,Equipment Instance Identifier" json:"equipment_instance_identifier,omitempty"`                                // OBX-18
	DateTimeOfTheAnalysis                  *TS   `hl7:"false,Date/Time Of The Analysis" json:"date_time_of_the_analysis,omitempty"`                                        // OBX-19
	ReservedForHarmonizationWithVersion26A []XON `hl7:"false,Reserved For Harmonization With Version 2.6 A" json:"reserved_for_harmonization_with_version_26_a,omitempty"` // OBX-20
	ReservedForHarmonizationWithVersion26B []XON `hl7:"false,Reserved For Harmonization With Version 2.6 B" json:"reserved_for_harmonization_with_version_26_b,omitempty"` // OBX-21
	ReservedForHarmonizationWithVersion26C []XON `hl7:"false,Reserved For Harmonization With Version 2.6 C" json:"reserved_for_harmonization_with_version_26_c,omitempty"` // OBX-22
	PerformingOrganizationName             *XON  `hl7:"false,Performing Organization Name" json:"performing_organization_name,omitempty"`                                  // OBX-23
	PerformingOrganizationAddress          *XAD  `hl7:"false,Performing Organization Address" json:"performing_organization_address,omitempty"`                            // OBX-24
	PerformingOrganizationMedicalDirector  *XCN  `hl7:"false,Performing Organization Medical Director" json:"performing_organization_medical_director,omitempty"`          // OBX-25
}

func (s *OBX) SegmentName() string {
	return "OBX"
}

//  ODS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ODS struct {
	Type                           *ID  `hl7:"true,Type" json:"type,omitempty"`                                                               // ODS-1
	ServicePeriod                  []CE `hl7:"false,Service Period" json:"service_period,omitempty"`                                          // ODS-2
	DietSupplementOrPreferenceCode []CE `hl7:"true,Diet, Supplement, Or Preference Code" json:"diet_supplement_or_preference_code,omitempty"` // ODS-3
	TextInstruction                []ST `hl7:"false,Text Instruction" json:"text_instruction,omitempty"`                                      // ODS-4
}

func (s *ODS) SegmentName() string {
	return "ODS"
}

//  ODT represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ODT struct {
	TrayType        *CE  `hl7:"true,Tray Type" json:"tray_type,omitempty"`                // ODT-1
	ServicePeriod   []CE `hl7:"false,Service Period" json:"service_period,omitempty"`     // ODT-2
	TextInstruction *ST  `hl7:"false,Text Instruction" json:"text_instruction,omitempty"` // ODT-3
}

func (s *ODT) SegmentName() string {
	return "ODT"
}

//  OM1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type OM1 struct {
	SequenceNumberTestObservationMasterFile                *NM   `hl7:"true,Sequence Number - Test/Observation Master File" json:"sequence_number_test_observation_master_file,omitempty"`                                        // OM1-1
	ProducerSServiceTestObservationID                      *CE   `hl7:"true,Producer'S Service/Test/Observation ID" json:"producer_s_service_test_observation_id,omitempty"`                                                      // OM1-2
	PermittedDataTypes                                     []ID  `hl7:"false,Permitted Data Types" json:"permitted_data_types,omitempty"`                                                                                         // OM1-3
	SpecimenRequired                                       *ID   `hl7:"true,Specimen Required" json:"specimen_required,omitempty"`                                                                                                // OM1-4
	ProducerID                                             *CE   `hl7:"true,Producer ID" json:"producer_id,omitempty"`                                                                                                            // OM1-5
	ObservationDescription                                 *TX   `hl7:"false,Observation Description" json:"observation_description,omitempty"`                                                                                   // OM1-6
	OtherServiceTestObservationIDsForTheObservation        *CE   `hl7:"false,Other Service/Test/Observation IDs For The Observation" json:"other_service_test_observation_i_ds_for_the_observation,omitempty"`                    // OM1-7
	OtherNames                                             []ST  `hl7:"true,Other Names" json:"other_names,omitempty"`                                                                                                            // OM1-8
	PreferredReportNameForTheObservation                   *ST   `hl7:"false,Preferred Report Name For The Observation" json:"preferred_report_name_for_the_observation,omitempty"`                                               // OM1-9
	PreferredShortNameOrMnemonicForObservation             *ST   `hl7:"false,Preferred Short Name Or Mnemonic For Observation" json:"preferred_short_name_or_mnemonic_for_observation,omitempty"`                                 // OM1-10
	PreferredLongNameForTheObservation                     *ST   `hl7:"false,Preferred Long Name For The Observation" json:"preferred_long_name_for_the_observation,omitempty"`                                                   // OM1-11
	Orderability                                           *ID   `hl7:"false,Orderability" json:"orderability,omitempty"`                                                                                                         // OM1-12
	IdentityOfInstrumentUsedToPerformThisStudy             []CE  `hl7:"false,Identity Of Instrument Used To Perform This Study" json:"identity_of_instrument_used_to_perform_this_study,omitempty"`                               // OM1-13
	CodedRepresentationOfMethod                            []CE  `hl7:"false,Coded Representation Of Method" json:"coded_representation_of_method,omitempty"`                                                                     // OM1-14
	PortableDeviceIndicator                                *ID   `hl7:"false,Portable Device Indicator" json:"portable_device_indicator,omitempty"`                                                                               // OM1-15
	ObservationProducingDepartmentSection                  []CE  `hl7:"false,Observation Producing Department/Section" json:"observation_producing_department_section,omitempty"`                                                 // OM1-16
	TelephoneNumberOfSection                               *XTN  `hl7:"false,Telephone Number Of Section" json:"telephone_number_of_section,omitempty"`                                                                           // OM1-17
	NatureOfServiceTestObservation                         *IS   `hl7:"true,Nature Of Service/Test/Observation" json:"nature_of_service_test_observation,omitempty"`                                                              // OM1-18
	ReportSubheader                                        *CE   `hl7:"false,Report Subheader" json:"report_subheader,omitempty"`                                                                                                 // OM1-19
	ReportDisplayOrder                                     *ST   `hl7:"false,Report Display Order" json:"report_display_order,omitempty"`                                                                                         // OM1-20
	DateTimeStampForAnyChangeInDefinitionForTheObservation *TS   `hl7:"false,Date/Time Stamp For Any Change In Definition For The Observation" json:"date_time_stamp_for_any_change_in_definition_for_the_observation,omitempty"` // OM1-21
	EffectiveDateTimeOfChange                              *TS   `hl7:"false,Effective Date/Time Of Change" json:"effective_date_time_of_change,omitempty"`                                                                       // OM1-22
	TypicalTurnAroundTime                                  *NM   `hl7:"false,Typical Turn-Around Time" json:"typical_turn_around_time,omitempty"`                                                                                 // OM1-23
	ProcessingTime                                         *NM   `hl7:"false,Processing Time" json:"processing_time,omitempty"`                                                                                                   // OM1-24
	ProcessingPriority                                     []ID  `hl7:"false,Processing Priority" json:"processing_priority,omitempty"`                                                                                           // OM1-25
	ReportingPriority                                      *ID   `hl7:"false,Reporting Priority" json:"reporting_priority,omitempty"`                                                                                             // OM1-26
	OutsideSiteSWhereObservationMayBePerformed             []CE  `hl7:"false,Outside Site(S) Where Observation May Be Performed" json:"outside_site_s_where_observation_may_be_performed,omitempty"`                              // OM1-27
	AddressOfOutsideSiteS                                  []XAD `hl7:"false,Address Of Outside Site(S)" json:"address_of_outside_site_s,omitempty"`                                                                              // OM1-28
	PhoneNumberOfOutsideSite                               *XTN  `hl7:"false,Phone Number Of Outside Site" json:"phone_number_of_outside_site,omitempty"`                                                                         // OM1-29
	ConfidentialityCode                                    *CWE  `hl7:"false,Confidentiality Code" json:"confidentiality_code,omitempty"`                                                                                         // OM1-30
	ObservationsRequiredToInterpretTheObservation          *CE   `hl7:"false,Observations Required To Interpret The Observation" json:"observations_required_to_interpret_the_observation,omitempty"`                             // OM1-31
	InterpretationOfObservations                           *TX   `hl7:"false,Interpretation Of Observations" json:"interpretation_of_observations,omitempty"`                                                                     // OM1-32
	ContraindicationsToObservations                        *CE   `hl7:"false,Contraindications To Observations" json:"contraindications_to_observations,omitempty"`                                                               // OM1-33
	ReflexTestsObservations                                []CE  `hl7:"false,Reflex Tests/Observations" json:"reflex_tests_observations,omitempty"`                                                                               // OM1-34
	RulesThatTriggerReflexTesting                          *TX   `hl7:"false,Rules That Trigger Reflex Testing" json:"rules_that_trigger_reflex_testing,omitempty"`                                                               // OM1-35
	FixedCannedMessage                                     *CE   `hl7:"false,Fixed Canned Message" json:"fixed_canned_message,omitempty"`                                                                                         // OM1-36
	PatientPreparation                                     *TX   `hl7:"false,Patient Preparation" json:"patient_preparation,omitempty"`                                                                                           // OM1-37
	ProcedureMedication                                    *CE   `hl7:"false,Procedure Medication" json:"procedure_medication,omitempty"`                                                                                         // OM1-38
	FactorsThatMayAffectTheObservation                     *TX   `hl7:"false,Factors That May Affect The Observation" json:"factors_that_may_affect_the_observation,omitempty"`                                                   // OM1-39
	ServiceTestObservationPerformanceSchedule              []ST  `hl7:"false,Service/Test/Observation Performance Schedule" json:"service_test_observation_performance_schedule,omitempty"`                                       // OM1-40
	DescriptionOfTestMethods                               *TX   `hl7:"false,Description Of Test Methods" json:"description_of_test_methods,omitempty"`                                                                           // OM1-41
	KindOfQuantityObserved                                 *CE   `hl7:"false,Kind Of Quantity Observed" json:"kind_of_quantity_observed,omitempty"`                                                                               // OM1-42
	PointVersusInterval                                    *CE   `hl7:"false,Point Versus Interval" json:"point_versus_interval,omitempty"`                                                                                       // OM1-43
	ChallengeInformation                                   *TX   `hl7:"false,Challenge Information" json:"challenge_information,omitempty"`                                                                                       // OM1-44
	RelationshipModifier                                   *CE   `hl7:"false,Relationship Modifier" json:"relationship_modifier,omitempty"`                                                                                       // OM1-45
	TargetAnatomicSiteOfTest                               *CE   `hl7:"false,Target Anatomic Site Of Test" json:"target_anatomic_site_of_test,omitempty"`                                                                         // OM1-46
	ModalityOfImagingMeasurement                           *CE   `hl7:"false,Modality Of Imaging Measurement" json:"modality_of_imaging_measurement,omitempty"`                                                                   // OM1-47
}

func (s *OM1) SegmentName() string {
	return "OM1"
}

//  OM2 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type OM2 struct {
	SequenceNumberTestObservationMasterFile              *NM   `hl7:"false,Sequence Number - Test/Observation Master File" json:"sequence_number_test_observation_master_file,omitempty"`                               // OM2-1
	UnitsOfMeasure                                       *CE   `hl7:"false,Units Of Measure" json:"units_of_measure,omitempty"`                                                                                         // OM2-2
	RangeOfDecimalPrecision                              []NM  `hl7:"false,Range Of Decimal Precision" json:"range_of_decimal_precision,omitempty"`                                                                     // OM2-3
	CorrespondingSIUnitsOfMeasure                        *CE   `hl7:"false,Corresponding SI Units Of Measure" json:"corresponding_si_units_of_measure,omitempty"`                                                       // OM2-4
	SIConversionFactor                                   *TX   `hl7:"false,SI Conversion Factor" json:"si_conversion_factor,omitempty"`                                                                                 // OM2-5
	ReferenceNormalRangeOrdinalAndContinuousObservations []RFR `hl7:"false,Reference (Normal) Range - Ordinal And Continuous Observations" json:"reference_normal_range_ordinal_and_continuous_observations,omitempty"` // OM2-6
	CriticalRangeForOrdinalAndContinuousObservations     []RFR `hl7:"false,Critical Range For Ordinal And Continuous Observations" json:"critical_range_for_ordinal_and_continuous_observations,omitempty"`             // OM2-7
	AbsoluteRangeForOrdinalAndContinuousObservations     *RFR  `hl7:"false,Absolute Range For Ordinal And Continuous Observations" json:"absolute_range_for_ordinal_and_continuous_observations,omitempty"`             // OM2-8
	DeltaCheckCriteria                                   []DLT `hl7:"false,Delta Check Criteria" json:"delta_check_criteria,omitempty"`                                                                                 // OM2-9
	MinimumMeaningfulIncrements                          *NM   `hl7:"false,Minimum Meaningful Increments" json:"minimum_meaningful_increments,omitempty"`                                                               // OM2-10
}

func (s *OM2) SegmentName() string {
	return "OM2"
}

//  OM3 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type OM3 struct {
	SequenceNumberTestObservationMasterFile     *NM  `hl7:"false,Sequence Number - Test/Observation Master File" json:"sequence_number_test_observation_master_file,omitempty"`       // OM3-1
	PreferredCodingSystem                       *CE  `hl7:"false,Preferred Coding System" json:"preferred_coding_system,omitempty"`                                                   // OM3-2
	ValidCodedAnswers                           *CE  `hl7:"false,Valid Coded Answers" json:"valid_coded_answers,omitempty"`                                                           // OM3-3
	NormalTextCodesForCategoricalObservations   []CE `hl7:"false,Normal Text/Codes For Categorical Observations" json:"normal_text_codes_for_categorical_observations,omitempty"`     // OM3-4
	AbnormalTextCodesForCategoricalObservations []CE `hl7:"false,Abnormal Text/Codes For Categorical Observations" json:"abnormal_text_codes_for_categorical_observations,omitempty"` // OM3-5
	CriticalTextCodesForCategoricalObservations []CE `hl7:"false,Critical Text/Codes For Categorical Observations" json:"critical_text_codes_for_categorical_observations,omitempty"` // OM3-6
	ValueType                                   *ID  `hl7:"false,Value Type" json:"value_type,omitempty"`                                                                             // OM3-7
}

func (s *OM3) SegmentName() string {
	return "OM3"
}

//  OM4 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type OM4 struct {
	SequenceNumberTestObservationMasterFile *NM  `hl7:"false,Sequence Number - Test/Observation Master File" json:"sequence_number_test_observation_master_file,omitempty"` // OM4-1
	DerivedSpecimen                         *ID  `hl7:"false,Derived Specimen" json:"derived_specimen,omitempty"`                                                           // OM4-2
	ContainerDescription                    *TX  `hl7:"false,Container Description" json:"container_description,omitempty"`                                                 // OM4-3
	ContainerVolume                         *NM  `hl7:"false,Container Volume" json:"container_volume,omitempty"`                                                           // OM4-4
	ContainerUnits                          *CE  `hl7:"false,Container Units" json:"container_units,omitempty"`                                                             // OM4-5
	Specimen                                *CE  `hl7:"false,Specimen" json:"specimen,omitempty"`                                                                           // OM4-6
	Additive                                *CWE `hl7:"false,Additive" json:"additive,omitempty"`                                                                           // OM4-7
	Preparation                             *TX  `hl7:"false,Preparation" json:"preparation,omitempty"`                                                                     // OM4-8
	SpecialHandlingRequirements             *TX  `hl7:"false,Special Handling Requirements" json:"special_handling_requirements,omitempty"`                                 // OM4-9
	NormalCollectionVolume                  *CQ  `hl7:"false,Normal Collection Volume" json:"normal_collection_volume,omitempty"`                                           // OM4-10
	MinimumCollectionVolume                 *CQ  `hl7:"false,Minimum Collection Volume" json:"minimum_collection_volume,omitempty"`                                         // OM4-11
	SpecimenRequirements                    *TX  `hl7:"false,Specimen Requirements" json:"specimen_requirements,omitempty"`                                                 // OM4-12
	SpecimenPriorities                      []ID `hl7:"false,Specimen Priorities" json:"specimen_priorities,omitempty"`                                                     // OM4-13
	SpecimenRetentionTime                   *CQ  `hl7:"false,Specimen Retention Time" json:"specimen_retention_time,omitempty"`                                             // OM4-14
}

func (s *OM4) SegmentName() string {
	return "OM4"
}

//  OM5 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type OM5 struct {
	SequenceNumberTestObservationMasterFile            *NM  `hl7:"false,Sequence Number - Test/Observation Master File" json:"sequence_number_test_observation_master_file,omitempty"`                         // OM5-1
	TestObservationsIncludedWithinAnOrderedTestBattery []CE `hl7:"false,Test/Observations Included Within An Ordered Test Battery" json:"test_observations_included_within_an_ordered_test_battery,omitempty"` // OM5-2
	ObservationIDSuffixes                              *ST  `hl7:"false,Observation ID Suffixes" json:"observation_id_suffixes,omitempty"`                                                                     // OM5-3
}

func (s *OM5) SegmentName() string {
	return "OM5"
}

//  OM6 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type OM6 struct {
	SequenceNumberTestObservationMasterFile *NM `hl7:"false,Sequence Number - Test/Observation Master File" json:"sequence_number_test_observation_master_file,omitempty"` // OM6-1
	DerivationRule                          *TX `hl7:"false,Derivation Rule" json:"derivation_rule,omitempty"`                                                             // OM6-2
}

func (s *OM6) SegmentName() string {
	return "OM6"
}

//  OM7 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type OM7 struct {
	SequenceNumberTestObservationMasterFile *NM  `hl7:"true,Sequence Number - Test/Observation Master File" json:"sequence_number_test_observation_master_file,omitempty"` // OM7-1
	UniversalServiceIdentifier              *CE  `hl7:"true,Universal Service Identifier" json:"universal_service_identifier,omitempty"`                                   // OM7-2
	CategoryIdentifier                      []CE `hl7:"false,Category Identifier" json:"category_identifier,omitempty"`                                                    // OM7-3
	CategoryDescription                     *TX  `hl7:"false,Category Description" json:"category_description,omitempty"`                                                  // OM7-4
	CategorySynonym                         []ST `hl7:"false,Category Synonym" json:"category_synonym,omitempty"`                                                          // OM7-5
	EffectiveTestServiceStartDateTime       *TS  `hl7:"false,Effective Test/Service Start Date/Time" json:"effective_test_service_start_date_time,omitempty"`              // OM7-6
	EffectiveTestServiceEndDateTime         *TS  `hl7:"false,Effective Test/Service End Date/Time" json:"effective_test_service_end_date_time,omitempty"`                  // OM7-7
	TestServiceDefaultDurationQuantity      *NM  `hl7:"false,Test/Service Default Duration Quantity" json:"test_service_default_duration_quantity,omitempty"`              // OM7-8
	TestServiceDefaultDurationUnits         *CE  `hl7:"false,Test/Service Default Duration Units" json:"test_service_default_duration_units,omitempty"`                    // OM7-9
	TestServiceDefaultFrequency             *IS  `hl7:"false,Test/Service Default Frequency" json:"test_service_default_frequency,omitempty"`                              // OM7-10
	ConsentIndicator                        *ID  `hl7:"false,Consent Indicator" json:"consent_indicator,omitempty"`                                                        // OM7-11
	ConsentIdentifier                       *CE  `hl7:"false,Consent Identifier" json:"consent_identifier,omitempty"`                                                      // OM7-12
	ConsentEffectiveStartDateTime           *TS  `hl7:"false,Consent Effective Start Date/Time" json:"consent_effective_start_date_time,omitempty"`                        // OM7-13
	ConsentEffectiveEndDateTime             *TS  `hl7:"false,Consent Effective End Date/Time" json:"consent_effective_end_date_time,omitempty"`                            // OM7-14
	ConsentIntervalQuantity                 *NM  `hl7:"false,Consent Interval Quantity" json:"consent_interval_quantity,omitempty"`                                        // OM7-15
	ConsentIntervalUnits                    *CE  `hl7:"false,Consent Interval Units" json:"consent_interval_units,omitempty"`                                              // OM7-16
	ConsentWaitingPeriodQuantity            *NM  `hl7:"false,Consent Waiting Period Quantity" json:"consent_waiting_period_quantity,omitempty"`                            // OM7-17
	ConsentWaitingPeriodUnits               *CE  `hl7:"false,Consent Waiting Period Units" json:"consent_waiting_period_units,omitempty"`                                  // OM7-18
	EffectiveDateTimeOfChange               *TS  `hl7:"false,Effective Date/Time Of Change" json:"effective_date_time_of_change,omitempty"`                                // OM7-19
	EnteredBy                               *XCN `hl7:"false,Entered By" json:"entered_by,omitempty"`                                                                      // OM7-20
	OrderableAtLocation                     []PL `hl7:"false,Orderable-At Location" json:"orderable_at_location,omitempty"`                                                // OM7-21
	FormularyStatus                         *IS  `hl7:"false,Formulary Status" json:"formulary_status,omitempty"`                                                          // OM7-22
	SpecialOrderIndicator                   *ID  `hl7:"false,Special Order Indicator" json:"special_order_indicator,omitempty"`                                            // OM7-23
	PrimaryKeyValueCDM                      []CE `hl7:"false,Primary Key Value - CDM" json:"primary_key_value_cdm,omitempty"`                                              // OM7-24
}

func (s *OM7) SegmentName() string {
	return "OM7"
}

//  ORC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ORC struct {
	OrderControl                            *ID   `hl7:"true,Order Control" json:"order_control,omitempty"`                                                              // ORC-1
	PlacerOrderNumber                       *EI   `hl7:"false,Placer Order Number" json:"placer_order_number,omitempty"`                                                 // ORC-2
	FillerOrderNumber                       *EI   `hl7:"false,Filler Order Number" json:"filler_order_number,omitempty"`                                                 // ORC-3
	PlacerGroupNumber                       *EI   `hl7:"false,Placer Group Number" json:"placer_group_number,omitempty"`                                                 // ORC-4
	OrderStatus                             *ID   `hl7:"false,Order Status" json:"order_status,omitempty"`                                                               // ORC-5
	ResponseFlag                            *ID   `hl7:"false,Response Flag" json:"response_flag,omitempty"`                                                             // ORC-6
	QuantityTiming                          []TQ  `hl7:"false,Quantity/Timing" json:"quantity_timing,omitempty"`                                                         // ORC-7
	Parent                                  *EIP  `hl7:"false,Parent" json:"parent,omitempty"`                                                                           // ORC-8
	DateTimeOfTransaction                   *TS   `hl7:"false,Date/Time Of Transaction" json:"date_time_of_transaction,omitempty"`                                       // ORC-9
	EnteredBy                               []XCN `hl7:"false,Entered By" json:"entered_by,omitempty"`                                                                   // ORC-10
	VerifiedBy                              []XCN `hl7:"false,Verified By" json:"verified_by,omitempty"`                                                                 // ORC-11
	OrderingProvider                        []XCN `hl7:"false,Ordering Provider" json:"ordering_provider,omitempty"`                                                     // ORC-12
	EntererSLocation                        *PL   `hl7:"false,Enterer'S Location" json:"enterer_s_location,omitempty"`                                                   // ORC-13
	CallBackPhoneNumber                     []XTN `hl7:"false,Call Back Phone Number" json:"call_back_phone_number,omitempty"`                                           // ORC-14
	OrderEffectiveDateTime                  *TS   `hl7:"false,Order Effective Date/Time" json:"order_effective_date_time,omitempty"`                                     // ORC-15
	OrderControlCodeReason                  *CE   `hl7:"false,Order Control Code Reason" json:"order_control_code_reason,omitempty"`                                     // ORC-16
	EnteringOrganization                    *CE   `hl7:"false,Entering Organization" json:"entering_organization,omitempty"`                                             // ORC-17
	EnteringDevice                          *CE   `hl7:"false,Entering Device" json:"entering_device,omitempty"`                                                         // ORC-18
	ActionBy                                []XCN `hl7:"false,Action By" json:"action_by,omitempty"`                                                                     // ORC-19
	AdvancedBeneficiaryNoticeCode           *CE   `hl7:"false,Advanced Beneficiary Notice Code" json:"advanced_beneficiary_notice_code,omitempty"`                       // ORC-20
	OrderingFacilityName                    []XON `hl7:"false,Ordering Facility Name" json:"ordering_facility_name,omitempty"`                                           // ORC-21
	OrderingFacilityAddress                 []XAD `hl7:"false,Ordering Facility Address" json:"ordering_facility_address,omitempty"`                                     // ORC-22
	OrderingFacilityPhoneNumber             []XTN `hl7:"false,Ordering Facility Phone Number" json:"ordering_facility_phone_number,omitempty"`                           // ORC-23
	OrderingProviderAddress                 []XAD `hl7:"false,Ordering Provider Address" json:"ordering_provider_address,omitempty"`                                     // ORC-24
	OrderStatusModifier                     *CWE  `hl7:"false,Order Status Modifier" json:"order_status_modifier,omitempty"`                                             // ORC-25
	AdvancedBeneficiaryNoticeOverrideReason *CWE  `hl7:"false,Advanced Beneficiary Notice Override Reason" json:"advanced_beneficiary_notice_override_reason,omitempty"` // ORC-26
	FillerSExpectedAvailabilityDateTime     *TS   `hl7:"false,Filler'S Expected Availability Date/Time" json:"filler_s_expected_availability_date_time,omitempty"`       // ORC-27
	ConfidentialityCode                     *CWE  `hl7:"false,Confidentiality Code" json:"confidentiality_code,omitempty"`                                               // ORC-28
	OrderType                               *CWE  `hl7:"false,Order Type" json:"order_type,omitempty"`                                                                   // ORC-29
	EntererAuthorizationMode                *CNE  `hl7:"false,Enterer Authorization Mode" json:"enterer_authorization_mode,omitempty"`                                   // ORC-30
	ParentUniversalServiceIdentifier        *CWE  `hl7:"false,Parent Universal Service Identifier" json:"parent_universal_service_identifier,omitempty"`                 // ORC-31
}

func (s *ORC) SegmentName() string {
	return "ORC"
}

//  ORG represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ORG struct {
	SetIDORG                                   *SI `hl7:"true,Set ID - ORG" json:"set_idorg,omitempty"`                                                                             // ORG-1
	OrganizationUnitCode                       *CE `hl7:"false,Organization Unit Code" json:"organization_unit_code,omitempty"`                                                     // ORG-2
	OrganizationUnitTypeCode                   *CE `hl7:"false,Organization Unit Type Code" json:"organization_unit_type_code,omitempty"`                                           // ORG-3
	PrimaryOrgUnitIndicator                    *ID `hl7:"false,Primary Org Unit Indicator" json:"primary_org_unit_indicator,omitempty"`                                             // ORG-4
	PractitionerOrgUnitIdentifier              *CX `hl7:"false,Practitioner Org Unit Identifier" json:"practitioner_org_unit_identifier,omitempty"`                                 // ORG-5
	HealthCareProviderTypeCode                 *CE `hl7:"false,Health Care Provider Type Code" json:"health_care_provider_type_code,omitempty"`                                     // ORG-6
	HealthCareProviderClassificationCode       *CE `hl7:"false,Health Care Provider Classification Code" json:"health_care_provider_classification_code,omitempty"`                 // ORG-7
	HealthCareProviderAreaOfSpecializationCode *CE `hl7:"false,Health Care Provider Area Of Specialization Code" json:"health_care_provider_area_of_specialization_code,omitempty"` // ORG-8
	EffectiveDateRange                         *DR `hl7:"false,Effective Date Range" json:"effective_date_range,omitempty"`                                                         // ORG-9
	EmploymentStatusCode                       *CE `hl7:"false,Employment Status Code" json:"employment_status_code,omitempty"`                                                     // ORG-10
	BoardApprovalIndicator                     *ID `hl7:"false,Board Approval Indicator" json:"board_approval_indicator,omitempty"`                                                 // ORG-11
	PrimaryCarePhysicianIndicator              *ID `hl7:"false,Primary Care Physician Indicator" json:"primary_care_physician_indicator,omitempty"`                                 // ORG-12
}

func (s *ORG) SegmentName() string {
	return "ORG"
}

//  ORO represents the corresponding HL7 segment.
//  Definition from HL7 2.1
type ORO struct {
	ORDERITEMID       *CE  `hl7:"false,ORDER ITEM ID" json:"orderitemid,omitempty"`            // ORO-1
	SUBSTITUTEALLOWED *ID  `hl7:"false,SUBSTITUTE ALLOWED" json:"substituteallowed,omitempty"` // ORO-2
	RESULTSCOPIESTO   []CN `hl7:"false,RESULTS COPIES TO" json:"resultscopiesto,omitempty"`    // ORO-3
	STOCKLOCATION     *ID  `hl7:"false,STOCK LOCATION" json:"stocklocation,omitempty"`         // ORO-4
}

func (s *ORO) SegmentName() string {
	return "ORO"
}

//  OVR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type OVR struct {
	BusinessRuleOverrideType *CWE `hl7:"false,Business Rule Override Type" json:"business_rule_override_type,omitempty"` // OVR-1
	BusinessRuleOverrideCode *CWE `hl7:"false,Business Rule Override Code" json:"business_rule_override_code,omitempty"` // OVR-2
	OverrideComments         *TX  `hl7:"false,Override Comments" json:"override_comments,omitempty"`                     // OVR-3
	OverrideEnteredBy        *XCN `hl7:"false,Override Entered By" json:"override_entered_by,omitempty"`                 // OVR-4
	OverrideAuthorizedBy     *XCN `hl7:"false,Override Authorized By" json:"override_authorized_by,omitempty"`           // OVR-5
}

func (s *OVR) SegmentName() string {
	return "OVR"
}

//  PCR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PCR struct {
	ImplicatedProduct                 *CE  `hl7:"true,Implicated Product" json:"implicated_product,omitempty"`                                        // PCR-1
	GenericProduct                    *IS  `hl7:"false,Generic Product" json:"generic_product,omitempty"`                                             // PCR-2
	ProductClass                      *CE  `hl7:"false,Product Class" json:"product_class,omitempty"`                                                 // PCR-3
	TotalDurationOfTherapy            *CQ  `hl7:"false,Total Duration Of Therapy" json:"total_duration_of_therapy,omitempty"`                         // PCR-4
	ProductManufactureDate            *TS  `hl7:"false,Product Manufacture Date" json:"product_manufacture_date,omitempty"`                           // PCR-5
	ProductExpirationDate             *TS  `hl7:"false,Product Expiration Date" json:"product_expiration_date,omitempty"`                             // PCR-6
	ProductImplantationDate           *TS  `hl7:"false,Product Implantation Date" json:"product_implantation_date,omitempty"`                         // PCR-7
	ProductExplantationDate           *TS  `hl7:"false,Product Explantation Date" json:"product_explantation_date,omitempty"`                         // PCR-8
	SingleUseDevice                   *IS  `hl7:"false,Single Use Device" json:"single_use_device,omitempty"`                                         // PCR-9
	IndicationForProductUse           *CE  `hl7:"false,Indication For Product Use" json:"indication_for_product_use,omitempty"`                       // PCR-10
	ProductProblem                    *IS  `hl7:"false,Product Problem" json:"product_problem,omitempty"`                                             // PCR-11
	ProductSerialLotNumber            []ST `hl7:"false,Product Serial/Lot Number" json:"product_serial_lot_number,omitempty"`                         // PCR-12
	ProductAvailableForInspection     *IS  `hl7:"false,Product Available For Inspection" json:"product_available_for_inspection,omitempty"`           // PCR-13
	ProductEvaluationPerformed        *CE  `hl7:"false,Product Evaluation Performed" json:"product_evaluation_performed,omitempty"`                   // PCR-14
	ProductEvaluationStatus           *CE  `hl7:"false,Product Evaluation Status" json:"product_evaluation_status,omitempty"`                         // PCR-15
	ProductEvaluationResults          *CE  `hl7:"false,Product Evaluation Results" json:"product_evaluation_results,omitempty"`                       // PCR-16
	EvaluatedProductSource            *ID  `hl7:"false,Evaluated Product Source" json:"evaluated_product_source,omitempty"`                           // PCR-17
	DateProductReturnedToManufacturer *TS  `hl7:"false,Date Product Returned To Manufacturer" json:"date_product_returned_to_manufacturer,omitempty"` // PCR-18
	DeviceOperatorQualifications      *ID  `hl7:"false,Device Operator Qualifications" json:"device_operator_qualifications,omitempty"`               // PCR-19
	RelatednessAssessment             *ID  `hl7:"false,Relatedness Assessment" json:"relatedness_assessment,omitempty"`                               // PCR-20
	ActionTakenInResponseToTheEvent   []ID `hl7:"false,Action Taken In Response To The Event" json:"action_taken_in_response_to_the_event,omitempty"` // PCR-21
	EventCausalityObservations        []ID `hl7:"false,Event Causality Observations" json:"event_causality_observations,omitempty"`                   // PCR-22
	IndirectExposureMechanism         []ID `hl7:"false,Indirect Exposure Mechanism" json:"indirect_exposure_mechanism,omitempty"`                     // PCR-23
}

func (s *PCR) SegmentName() string {
	return "PCR"
}

//  PD1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PD1 struct {
	LivingDependency                        []IS  `hl7:"false,Living Dependency" json:"living_dependency,omitempty"`                                                     // PD1-1
	LivingArrangement                       *IS   `hl7:"false,Living Arrangement" json:"living_arrangement,omitempty"`                                                   // PD1-2
	PatientPrimaryFacility                  []XON `hl7:"false,Patient Primary Facility" json:"patient_primary_facility,omitempty"`                                       // PD1-3
	PatientPrimaryCareProviderNameIDNo      []XCN `hl7:"false,Patient Primary Care Provider Name & ID No." json:"patient_primary_care_provider_name_id_no,omitempty"`    // PD1-4
	StudentIndicator                        *IS   `hl7:"false,Student Indicator" json:"student_indicator,omitempty"`                                                     // PD1-5
	Handicap                                *IS   `hl7:"false,Handicap" json:"handicap,omitempty"`                                                                       // PD1-6
	LivingWillCode                          *IS   `hl7:"false,Living Will Code" json:"living_will_code,omitempty"`                                                       // PD1-7
	OrganDonorCode                          *IS   `hl7:"false,Organ Donor Code" json:"organ_donor_code,omitempty"`                                                       // PD1-8
	SeparateBill                            *ID   `hl7:"false,Separate Bill" json:"separate_bill,omitempty"`                                                             // PD1-9
	DuplicatePatient                        []CX  `hl7:"false,Duplicate Patient" json:"duplicate_patient,omitempty"`                                                     // PD1-10
	PublicityCode                           *CE   `hl7:"false,Publicity Code" json:"publicity_code,omitempty"`                                                           // PD1-11
	ProtectionIndicator                     *ID   `hl7:"false,Protection Indicator" json:"protection_indicator,omitempty"`                                               // PD1-12
	ProtectionIndicatorEffectiveDate        *DT   `hl7:"false,Protection Indicator Effective Date" json:"protection_indicator_effective_date,omitempty"`                 // PD1-13
	PlaceOfWorship                          []XON `hl7:"false,Place Of Worship" json:"place_of_worship,omitempty"`                                                       // PD1-14
	AdvanceDirectiveCode                    []CE  `hl7:"false,Advance Directive Code" json:"advance_directive_code,omitempty"`                                           // PD1-15
	ImmunizationRegistryStatus              *IS   `hl7:"false,Immunization Registry Status" json:"immunization_registry_status,omitempty"`                               // PD1-16
	ImmunizationRegistryStatusEffectiveDate *DT   `hl7:"false,Immunization Registry Status Effective Date" json:"immunization_registry_status_effective_date,omitempty"` // PD1-17
	PublicityCodeEffectiveDate              *DT   `hl7:"false,Publicity Code Effective Date" json:"publicity_code_effective_date,omitempty"`                             // PD1-18
	MilitaryBranch                          *IS   `hl7:"false,Military Branch" json:"military_branch,omitempty"`                                                         // PD1-19
	MilitaryRankGrade                       *IS   `hl7:"false,Military Rank/Grade" json:"military_rank_grade,omitempty"`                                                 // PD1-20
	MilitaryStatus                          *IS   `hl7:"false,Military Status" json:"military_status,omitempty"`                                                         // PD1-21
}

func (s *PD1) SegmentName() string {
	return "PD1"
}

//  PDA represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PDA struct {
	DeathCauseCode                 []CE `hl7:"false,Death Cause Code" json:"death_cause_code,omitempty"`                                     // PDA-1
	DeathLocation                  *PL  `hl7:"false,Death Location" json:"death_location,omitempty"`                                         // PDA-2
	DeathCertifiedIndicator        *ID  `hl7:"false,Death Certified Indicator" json:"death_certified_indicator,omitempty"`                   // PDA-3
	DeathCertificateSignedDateTime *TS  `hl7:"false,Death Certificate Signed Date/Time" json:"death_certificate_signed_date_time,omitempty"` // PDA-4
	DeathCertifiedBy               *XCN `hl7:"false,Death Certified By" json:"death_certified_by,omitempty"`                                 // PDA-5
	AutopsyIndicator               *ID  `hl7:"false,Autopsy Indicator" json:"autopsy_indicator,omitempty"`                                   // PDA-6
	AutopsyStartAndEndDateTime     *DR  `hl7:"false,Autopsy Start And End Date/Time" json:"autopsy_start_and_end_date_time,omitempty"`       // PDA-7
	AutopsyPerformedBy             *XCN `hl7:"false,Autopsy Performed By" json:"autopsy_performed_by,omitempty"`                             // PDA-8
	CoronerIndicator               *ID  `hl7:"false,Coroner Indicator" json:"coroner_indicator,omitempty"`                                   // PDA-9
}

func (s *PDA) SegmentName() string {
	return "PDA"
}

//  PDC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PDC struct {
	ManufacturerDistributor []XON `hl7:"true,Manufacturer/Distributor" json:"manufacturer_distributor,omitempty"` // PDC-1
	Country                 *CE   `hl7:"true,Country" json:"country,omitempty"`                                   // PDC-2
	BrandName               *ST   `hl7:"true,Brand Name" json:"brand_name,omitempty"`                             // PDC-3
	DeviceFamilyName        *ST   `hl7:"false,Device Family Name" json:"device_family_name,omitempty"`            // PDC-4
	GenericName             *CE   `hl7:"false,Generic Name" json:"generic_name,omitempty"`                        // PDC-5
	ModelIdentifier         []ST  `hl7:"false,Model Identifier" json:"model_identifier,omitempty"`                // PDC-6
	CatalogueIdentifier     *ST   `hl7:"false,Catalogue Identifier" json:"catalogue_identifier,omitempty"`        // PDC-7
	OtherIdentifier         []ST  `hl7:"false,Other Identifier" json:"other_identifier,omitempty"`                // PDC-8
	ProductCode             *CE   `hl7:"false,Product Code" json:"product_code,omitempty"`                        // PDC-9
	MarketingBasis          *ID   `hl7:"false,Marketing Basis" json:"marketing_basis,omitempty"`                  // PDC-10
	MarketingApprovalID     *ST   `hl7:"false,Marketing Approval ID" json:"marketing_approval_id,omitempty"`      // PDC-11
	LabeledShelfLife        *CQ   `hl7:"false,Labeled Shelf Life" json:"labeled_shelf_life,omitempty"`            // PDC-12
	ExpectedShelfLife       *CQ   `hl7:"false,Expected Shelf Life" json:"expected_shelf_life,omitempty"`          // PDC-13
	DateFirstMarketed       *TS   `hl7:"false,Date First Marketed" json:"date_first_marketed,omitempty"`          // PDC-14
	DateLastMarketed        *TS   `hl7:"false,Date Last Marketed" json:"date_last_marketed,omitempty"`            // PDC-15
}

func (s *PDC) SegmentName() string {
	return "PDC"
}

//  PEO represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PEO struct {
	EventIdentifiersUsed                  []CE  `hl7:"false,Event Identifiers Used" json:"event_identifiers_used,omitempty"`                                           // PEO-1
	EventSymptomDiagnosisCode             []CE  `hl7:"false,Event Symptom/Diagnosis Code" json:"event_symptom_diagnosis_code,omitempty"`                               // PEO-2
	EventOnsetDateTime                    *TS   `hl7:"true,Event Onset Date/Time" json:"event_onset_date_time,omitempty"`                                              // PEO-3
	EventExacerbationDateTime             *TS   `hl7:"false,Event Exacerbation Date/Time" json:"event_exacerbation_date_time,omitempty"`                               // PEO-4
	EventImprovedDateTime                 *TS   `hl7:"false,Event Improved Date/Time" json:"event_improved_date_time,omitempty"`                                       // PEO-5
	EventEndedDataTime                    *TS   `hl7:"false,Event Ended Data/Time" json:"event_ended_data_time,omitempty"`                                             // PEO-6
	EventLocationOccurredAddress          []XAD `hl7:"false,Event Location Occurred Address" json:"event_location_occurred_address,omitempty"`                         // PEO-7
	EventQualification                    []ID  `hl7:"false,Event Qualification" json:"event_qualification,omitempty"`                                                 // PEO-8
	EventSerious                          *ID   `hl7:"false,Event Serious" json:"event_serious,omitempty"`                                                             // PEO-9
	EventExpected                         *ID   `hl7:"false,Event Expected" json:"event_expected,omitempty"`                                                           // PEO-10
	EventOutcome                          []ID  `hl7:"false,Event Outcome" json:"event_outcome,omitempty"`                                                             // PEO-11
	PatientOutcome                        *ID   `hl7:"false,Patient Outcome" json:"patient_outcome,omitempty"`                                                         // PEO-12
	EventDescriptionFromOthers            []FT  `hl7:"false,Event Description From Others" json:"event_description_from_others,omitempty"`                             // PEO-13
	EventFromOriginalReporter             []FT  `hl7:"false,Event From Original Reporter" json:"event_from_original_reporter,omitempty"`                               // PEO-14
	EventDescriptionFromPatient           []FT  `hl7:"false,Event Description From Patient" json:"event_description_from_patient,omitempty"`                           // PEO-15
	EventDescriptionFromPractitioner      []FT  `hl7:"false,Event Description From Practitioner" json:"event_description_from_practitioner,omitempty"`                 // PEO-16
	EventDescriptionFromAutopsy           []FT  `hl7:"false,Event Description From Autopsy" json:"event_description_from_autopsy,omitempty"`                           // PEO-17
	CauseOfDeath                          []CE  `hl7:"false,Cause Of Death" json:"cause_of_death,omitempty"`                                                           // PEO-18
	PrimaryObserverName                   []XPN `hl7:"false,Primary Observer Name" json:"primary_observer_name,omitempty"`                                             // PEO-19
	PrimaryObserverAddress                []XAD `hl7:"false,Primary Observer Address" json:"primary_observer_address,omitempty"`                                       // PEO-20
	PrimaryObserverTelephone              []XTN `hl7:"false,Primary Observer Telephone" json:"primary_observer_telephone,omitempty"`                                   // PEO-21
	PrimaryObserverSQualification         *ID   `hl7:"false,Primary Observer'S Qualification" json:"primary_observer_s_qualification,omitempty"`                       // PEO-22
	ConfirmationProvidedBy                *ID   `hl7:"false,Confirmation Provided By" json:"confirmation_provided_by,omitempty"`                                       // PEO-23
	PrimaryObserverAwareDateTime          *TS   `hl7:"false,Primary Observer Aware Date/Time" json:"primary_observer_aware_date_time,omitempty"`                       // PEO-24
	PrimaryObserverSIdentityMayBeDivulged *ID   `hl7:"false,Primary Observer'S Identity May Be Divulged" json:"primary_observer_s_identity_may_be_divulged,omitempty"` // PEO-25
}

func (s *PEO) SegmentName() string {
	return "PEO"
}

//  PES represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PES struct {
	SenderOrganizationName []XON `hl7:"false,Sender Organization Name" json:"sender_organization_name,omitempty"` // PES-1
	SenderIndividualName   []XCN `hl7:"false,Sender Individual Name" json:"sender_individual_name,omitempty"`     // PES-2
	SenderAddress          []XAD `hl7:"false,Sender Address" json:"sender_address,omitempty"`                     // PES-3
	SenderTelephone        []XTN `hl7:"false,Sender Telephone" json:"sender_telephone,omitempty"`                 // PES-4
	SenderEventIdentifier  *EI   `hl7:"false,Sender Event Identifier" json:"sender_event_identifier,omitempty"`   // PES-5
	SenderSequenceNumber   *NM   `hl7:"false,Sender Sequence Number" json:"sender_sequence_number,omitempty"`     // PES-6
	SenderEventDescription []FT  `hl7:"false,Sender Event Description" json:"sender_event_description,omitempty"` // PES-7
	SenderComment          *FT   `hl7:"false,Sender Comment" json:"sender_comment,omitempty"`                     // PES-8
	SenderAwareDateTime    *TS   `hl7:"false,Sender Aware Date/Time" json:"sender_aware_date_time,omitempty"`     // PES-9
	EventReportDate        *TS   `hl7:"true,Event Report Date" json:"event_report_date,omitempty"`                // PES-10
	EventReportTimingType  []ID  `hl7:"false,Event Report Timing/Type" json:"event_report_timing_type,omitempty"` // PES-11
	EventReportSource      *ID   `hl7:"false,Event Report Source" json:"event_report_source,omitempty"`           // PES-12
	EventReportedTo        []ID  `hl7:"false,Event Reported To" json:"event_reported_to,omitempty"`               // PES-13
}

func (s *PES) SegmentName() string {
	return "PES"
}

//  PID represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PID struct {
	SetIDPID                    *SI   `hl7:"false,Set ID - PID" json:"set_idpid,omitempty"`                                            // PID-1
	PatientID                   *CX   `hl7:"false,Patient ID" json:"patient_id,omitempty"`                                             // PID-2
	PatientIdentifierList       []CX  `hl7:"true,Patient Identifier List" json:"patient_identifier_list,omitempty"`                    // PID-3
	AlternatePatientIDPID       []CX  `hl7:"false,Alternate Patient ID - PID" json:"alternate_patient_idpid,omitempty"`                // PID-4
	PatientName                 []XPN `hl7:"true,Patient Name" json:"patient_name,omitempty"`                                          // PID-5
	MotherSMaidenName           []XPN `hl7:"false,Mother'S Maiden Name" json:"mother_s_maiden_name,omitempty"`                         // PID-6
	DateTimeOfBirth             *TS   `hl7:"false,Date/Time Of Birth" json:"date_time_of_birth,omitempty"`                             // PID-7
	AdministrativeSex           *IS   `hl7:"false,Administrative Sex" json:"administrative_sex,omitempty"`                             // PID-8
	PatientAlias                []XPN `hl7:"false,Patient Alias" json:"patient_alias,omitempty"`                                       // PID-9
	Race                        []CWE `hl7:"false,Race" json:"race,omitempty"`                                                         // PID-10
	PatientAddress              []XAD `hl7:"false,Patient Address" json:"patient_address,omitempty"`                                   // PID-11
	CountyCode                  *IS   `hl7:"false,County Code" json:"county_code,omitempty"`                                           // PID-12
	PhoneNumberHome             []XTN `hl7:"false,Phone Number - Home" json:"phone_number_home,omitempty"`                             // PID-13
	PhoneNumberBusiness         []XTN `hl7:"false,Phone Number - Business" json:"phone_number_business,omitempty"`                     // PID-14
	PrimaryLanguage             *CE   `hl7:"false,Primary Language" json:"primary_language,omitempty"`                                 // PID-15
	MaritalStatus               *CE   `hl7:"false,Marital Status" json:"marital_status,omitempty"`                                     // PID-16
	Religion                    *CE   `hl7:"false,Religion" json:"religion,omitempty"`                                                 // PID-17
	PatientAccountNumber        *CX   `hl7:"false,Patient Account Number" json:"patient_account_number,omitempty"`                     // PID-18
	SSNNumberPatient            *ST   `hl7:"false,SSN Number - Patient" json:"ssn_number_patient,omitempty"`                           // PID-19
	DriverSLicenseNumberPatient *DLN  `hl7:"false,Driver'S License Number - Patient" json:"driver_s_license_number_patient,omitempty"` // PID-20
	MotherSIdentifier           []CX  `hl7:"false,Mother'S Identifier" json:"mother_s_identifier,omitempty"`                           // PID-21
	EthnicGroup                 []CWE `hl7:"false,Ethnic Group" json:"ethnic_group,omitempty"`                                         // PID-22
	BirthPlace                  *ST   `hl7:"false,Birth Place" json:"birth_place,omitempty"`                                           // PID-23
	MultipleBirthIndicator      *ID   `hl7:"false,Multiple Birth Indicator" json:"multiple_birth_indicator,omitempty"`                 // PID-24
	BirthOrder                  *NM   `hl7:"false,Birth Order" json:"birth_order,omitempty"`                                           // PID-25
	Citizenship                 []CE  `hl7:"false,Citizenship" json:"citizenship,omitempty"`                                           // PID-26
	VeteransMilitaryStatus      *CE   `hl7:"false,Veterans Military Status" json:"veterans_military_status,omitempty"`                 // PID-27
	Nationality                 *CE   `hl7:"false,Nationality" json:"nationality,omitempty"`                                           // PID-28
	PatientDeathDateAndTime     *TS   `hl7:"false,Patient Death Date And Time" json:"patient_death_date_and_time,omitempty"`           // PID-29
	PatientDeathIndicator       *ID   `hl7:"false,Patient Death Indicator" json:"patient_death_indicator,omitempty"`                   // PID-30
	IdentityUnknownIndicator    *ID   `hl7:"false,Identity Unknown Indicator" json:"identity_unknown_indicator,omitempty"`             // PID-31
	IdentityReliabilityCode     []IS  `hl7:"false,Identity Reliability Code" json:"identity_reliability_code,omitempty"`               // PID-32
	LastUpdateDateTime          *TS   `hl7:"false,Last Update Date/Time" json:"last_update_date_time,omitempty"`                       // PID-33
	LastUpdateFacility          *HD   `hl7:"false,Last Update Facility" json:"last_update_facility,omitempty"`                         // PID-34
	SpeciesCode                 *CE   `hl7:"false,Species Code" json:"species_code,omitempty"`                                         // PID-35
	BreedCode                   *CE   `hl7:"false,Breed Code" json:"breed_code,omitempty"`                                             // PID-36
	Strain                      *ST   `hl7:"false,Strain" json:"strain,omitempty"`                                                     // PID-37
	ProductionClassCode         *CE   `hl7:"false,Production Class Code" json:"production_class_code,omitempty"`                       // PID-38
	TribalCitizenship           []CWE `hl7:"false,Tribal Citizenship" json:"tribal_citizenship,omitempty"`                             // PID-39
}

func (s *PID) SegmentName() string {
	return "PID"
}

//  PR1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PR1 struct {
	SetIDPR1                *SI   `hl7:"true,Set ID - PR1" json:"set_idpr_1,omitempty"`                              // PR1-1
	ProcedureCodingMethod   *IS   `hl7:"false,Procedure Coding Method" json:"procedure_coding_method,omitempty"`     // PR1-2
	ProcedureCode           *CE   `hl7:"true,Procedure Code" json:"procedure_code,omitempty"`                        // PR1-3
	ProcedureDescription    *ST   `hl7:"false,Procedure Description" json:"procedure_description,omitempty"`         // PR1-4
	ProcedureDateTime       *TS   `hl7:"true,Procedure Date/Time" json:"procedure_date_time,omitempty"`              // PR1-5
	ProcedureFunctionalType *IS   `hl7:"false,Procedure Functional Type" json:"procedure_functional_type,omitempty"` // PR1-6
	ProcedureMinutes        *NM   `hl7:"false,Procedure Minutes" json:"procedure_minutes,omitempty"`                 // PR1-7
	Anesthesiologist        []XCN `hl7:"false,Anesthesiologist" json:"anesthesiologist,omitempty"`                   // PR1-8
	AnesthesiaCode          *IS   `hl7:"false,Anesthesia Code" json:"anesthesia_code,omitempty"`                     // PR1-9
	AnesthesiaMinutes       *NM   `hl7:"false,Anesthesia Minutes" json:"anesthesia_minutes,omitempty"`               // PR1-10
	Surgeon                 []XCN `hl7:"false,Surgeon" json:"surgeon,omitempty"`                                     // PR1-11
	ProcedurePractitioner   []XCN `hl7:"false,Procedure Practitioner" json:"procedure_practitioner,omitempty"`       // PR1-12
	ConsentCode             *CE   `hl7:"false,Consent Code" json:"consent_code,omitempty"`                           // PR1-13
	ProcedurePriority       *ID   `hl7:"false,Procedure Priority" json:"procedure_priority,omitempty"`               // PR1-14
	AssociatedDiagnosisCode *CE   `hl7:"false,Associated Diagnosis Code" json:"associated_diagnosis_code,omitempty"` // PR1-15
	ProcedureCodeModifier   []CE  `hl7:"false,Procedure Code Modifier" json:"procedure_code_modifier,omitempty"`     // PR1-16
	ProcedureDRGType        *IS   `hl7:"false,Procedure DRG Type" json:"procedure_drg_type,omitempty"`               // PR1-17
	TissueTypeCode          []CE  `hl7:"false,Tissue Type Code" json:"tissue_type_code,omitempty"`                   // PR1-18
	ProcedureIdentifier     *EI   `hl7:"false,Procedure Identifier" json:"procedure_identifier,omitempty"`           // PR1-19
	ProcedureActionCode     *ID   `hl7:"false,Procedure Action Code" json:"procedure_action_code,omitempty"`         // PR1-20
}

func (s *PR1) SegmentName() string {
	return "PR1"
}

//  PRA represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PRA struct {
	PrimaryKeyValuePRA                        *CE   `hl7:"false,Primary Key Value - PRA" json:"primary_key_value_pra,omitempty"`                                             // PRA-1
	PractitionerGroup                         []CE  `hl7:"false,Practitioner Group" json:"practitioner_group,omitempty"`                                                     // PRA-2
	PractitionerCategory                      []IS  `hl7:"false,Practitioner Category" json:"practitioner_category,omitempty"`                                               // PRA-3
	ProviderBilling                           *ID   `hl7:"false,Provider Billing" json:"provider_billing,omitempty"`                                                         // PRA-4
	Specialty                                 []SPD `hl7:"false,Specialty" json:"specialty,omitempty"`                                                                       // PRA-5
	PractitionerIDNumbers                     []PLN `hl7:"false,Practitioner ID Numbers" json:"practitioner_id_numbers,omitempty"`                                           // PRA-6
	Privileges                                []PIP `hl7:"false,Privileges" json:"privileges,omitempty"`                                                                     // PRA-7
	DateEnteredPractice                       *DT   `hl7:"false,Date Entered Practice" json:"date_entered_practice,omitempty"`                                               // PRA-8
	Institution                               *CE   `hl7:"false,Institution" json:"institution,omitempty"`                                                                   // PRA-9
	DateLeftPractice                          *DT   `hl7:"false,Date Left Practice" json:"date_left_practice,omitempty"`                                                     // PRA-10
	GovernmentReimbursementBillingEligibility []CE  `hl7:"false,Government Reimbursement Billing Eligibility" json:"government_reimbursement_billing_eligibility,omitempty"` // PRA-11
	SetIDPRA                                  *SI   `hl7:"false,Set ID - PRA" json:"set_idpra,omitempty"`                                                                    // PRA-12
}

func (s *PRA) SegmentName() string {
	return "PRA"
}

//  PRB represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PRB struct {
	ActionCode                                        *ID  `hl7:"true,Action Code" json:"action_code,omitempty"`                                                                                          // PRB-1
	ActionDateTime                                    *TS  `hl7:"true,Action Date/Time" json:"action_date_time,omitempty"`                                                                                // PRB-2
	ProblemID                                         *CE  `hl7:"true,Problem ID" json:"problem_id,omitempty"`                                                                                            // PRB-3
	ProblemInstanceID                                 *EI  `hl7:"true,Problem Instance ID" json:"problem_instance_id,omitempty"`                                                                          // PRB-4
	EpisodeOfCareID                                   *EI  `hl7:"false,Episode Of Care ID" json:"episode_of_care_id,omitempty"`                                                                           // PRB-5
	ProblemListPriority                               *NM  `hl7:"false,Problem List Priority" json:"problem_list_priority,omitempty"`                                                                     // PRB-6
	ProblemEstablishedDateTime                        *TS  `hl7:"false,Problem Established Date/Time" json:"problem_established_date_time,omitempty"`                                                     // PRB-7
	AnticipatedProblemResolutionDateTime              *TS  `hl7:"false,Anticipated Problem Resolution Date/Time" json:"anticipated_problem_resolution_date_time,omitempty"`                               // PRB-8
	ActualProblemResolutionDateTime                   *TS  `hl7:"false,Actual Problem Resolution Date/Time" json:"actual_problem_resolution_date_time,omitempty"`                                         // PRB-9
	ProblemClassification                             *CE  `hl7:"false,Problem Classification" json:"problem_classification,omitempty"`                                                                   // PRB-10
	ProblemManagementDiscipline                       []CE `hl7:"false,Problem Management Discipline" json:"problem_management_discipline,omitempty"`                                                     // PRB-11
	ProblemPersistence                                *CE  `hl7:"false,Problem Persistence" json:"problem_persistence,omitempty"`                                                                         // PRB-12
	ProblemConfirmationStatus                         *CE  `hl7:"false,Problem Confirmation Status" json:"problem_confirmation_status,omitempty"`                                                         // PRB-13
	ProblemLifeCycleStatus                            *CE  `hl7:"false,Problem Life Cycle Status" json:"problem_life_cycle_status,omitempty"`                                                             // PRB-14
	ProblemLifeCycleStatusDateTime                    *TS  `hl7:"false,Problem Life Cycle Status Date/Time" json:"problem_life_cycle_status_date_time,omitempty"`                                         // PRB-15
	ProblemDateOfOnset                                *TS  `hl7:"false,Problem Date Of Onset" json:"problem_date_of_onset,omitempty"`                                                                     // PRB-16
	ProblemOnsetText                                  *ST  `hl7:"false,Problem Onset Text" json:"problem_onset_text,omitempty"`                                                                           // PRB-17
	ProblemRanking                                    *CE  `hl7:"false,Problem Ranking" json:"problem_ranking,omitempty"`                                                                                 // PRB-18
	CertaintyOfProblem                                *CE  `hl7:"false,Certainty Of Problem" json:"certainty_of_problem,omitempty"`                                                                       // PRB-19
	ProbabilityOfProblem01                            *NM  `hl7:"false,Probability Of Problem (0-1)" json:"probability_of_problem_01,omitempty"`                                                          // PRB-20
	IndividualAwarenessOfProblem                      *CE  `hl7:"false,Individual Awareness Of Problem" json:"individual_awareness_of_problem,omitempty"`                                                 // PRB-21
	ProblemPrognosis                                  *CE  `hl7:"false,Problem Prognosis" json:"problem_prognosis,omitempty"`                                                                             // PRB-22
	IndividualAwarenessOfPrognosis                    *CE  `hl7:"false,Individual Awareness Of Prognosis" json:"individual_awareness_of_prognosis,omitempty"`                                             // PRB-23
	FamilySignificantOtherAwarenessOfProblemPrognosis *ST  `hl7:"false,Family/Significant Other Awareness Of Problem/Prognosis" json:"family_significant_other_awareness_of_problem_prognosis,omitempty"` // PRB-24
	SecuritySensitivity                               *CE  `hl7:"false,Security/Sensitivity" json:"security_sensitivity,omitempty"`                                                                       // PRB-25
}

func (s *PRB) SegmentName() string {
	return "PRB"
}

//  PRC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PRC struct {
	PrimaryKeyValuePRC  *CE  `hl7:"true,Primary Key Value - PRC" json:"primary_key_value_prc,omitempty"` // PRC-1
	FacilityIDPRC       []CE `hl7:"false,Facility ID - PRC" json:"facility_idprc,omitempty"`             // PRC-2
	Department          []CE `hl7:"false,Department" json:"department,omitempty"`                        // PRC-3
	ValidPatientClasses []IS `hl7:"false,Valid Patient Classes" json:"valid_patient_classes,omitempty"`  // PRC-4
	Price               []CP `hl7:"false,Price" json:"price,omitempty"`                                  // PRC-5
	Formula             []ST `hl7:"false,Formula" json:"formula,omitempty"`                              // PRC-6
	MinimumQuantity     *NM  `hl7:"false,Minimum Quantity" json:"minimum_quantity,omitempty"`            // PRC-7
	MaximumQuantity     *NM  `hl7:"false,Maximum Quantity" json:"maximum_quantity,omitempty"`            // PRC-8
	MinimumPrice        *MO  `hl7:"false,Minimum Price" json:"minimum_price,omitempty"`                  // PRC-9
	MaximumPrice        *MO  `hl7:"false,Maximum Price" json:"maximum_price,omitempty"`                  // PRC-10
	EffectiveStartDate  *TS  `hl7:"false,Effective Start Date" json:"effective_start_date,omitempty"`    // PRC-11
	EffectiveEndDate    *TS  `hl7:"false,Effective End Date" json:"effective_end_date,omitempty"`        // PRC-12
	PriceOverrideFlag   *IS  `hl7:"false,Price Override Flag" json:"price_override_flag,omitempty"`      // PRC-13
	BillingCategory     []CE `hl7:"false,Billing Category" json:"billing_category,omitempty"`            // PRC-14
	ChargeableFlag      *ID  `hl7:"false,Chargeable Flag" json:"chargeable_flag,omitempty"`              // PRC-15
	ActiveInactiveFlag  *ID  `hl7:"false,Active/Inactive Flag" json:"active_inactive_flag,omitempty"`    // PRC-16
	Cost                *MO  `hl7:"false,Cost" json:"cost,omitempty"`                                    // PRC-17
	ChargeOnIndicator   *IS  `hl7:"false,Charge On Indicator" json:"charge_on_indicator,omitempty"`      // PRC-18
}

func (s *PRC) SegmentName() string {
	return "PRC"
}

//  PRD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PRD struct {
	ProviderRole                     []CE  `hl7:"true,Provider Role" json:"provider_role,omitempty"`                                                  // PRD-1
	ProviderName                     []XPN `hl7:"false,Provider Name" json:"provider_name,omitempty"`                                                 // PRD-2
	ProviderAddress                  []XAD `hl7:"false,Provider Address" json:"provider_address,omitempty"`                                           // PRD-3
	ProviderLocation                 *PL   `hl7:"false,Provider Location" json:"provider_location,omitempty"`                                         // PRD-4
	ProviderCommunicationInformation []XTN `hl7:"false,Provider Communication Information" json:"provider_communication_information,omitempty"`       // PRD-5
	PreferredMethodOfContact         *CE   `hl7:"false,Preferred Method Of Contact" json:"preferred_method_of_contact,omitempty"`                     // PRD-6
	ProviderIdentifiers              []PLN `hl7:"false,Provider Identifiers" json:"provider_identifiers,omitempty"`                                   // PRD-7
	EffectiveStartDateOfProviderRole *TS   `hl7:"false,Effective Start Date Of Provider Role" json:"effective_start_date_of_provider_role,omitempty"` // PRD-8
	EffectiveEndDateOfProviderRole   *TS   `hl7:"false,Effective End Date Of Provider Role" json:"effective_end_date_of_provider_role,omitempty"`     // PRD-9
}

func (s *PRD) SegmentName() string {
	return "PRD"
}

//  PSH represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PSH struct {
	ReportType                                         *ST  `hl7:"true,Report Type" json:"report_type,omitempty"`                                                                                              // PSH-1
	ReportFormIdentifier                               *ST  `hl7:"false,Report Form Identifier" json:"report_form_identifier,omitempty"`                                                                       // PSH-2
	ReportDate                                         *TS  `hl7:"true,Report Date" json:"report_date,omitempty"`                                                                                              // PSH-3
	ReportIntervalStartDate                            *TS  `hl7:"false,Report Interval Start Date" json:"report_interval_start_date,omitempty"`                                                               // PSH-4
	ReportIntervalEndDate                              *TS  `hl7:"false,Report Interval End Date" json:"report_interval_end_date,omitempty"`                                                                   // PSH-5
	QuantityManufactured                               *CQ  `hl7:"false,Quantity Manufactured" json:"quantity_manufactured,omitempty"`                                                                         // PSH-6
	QuantityDistributed                                *CQ  `hl7:"false,Quantity Distributed" json:"quantity_distributed,omitempty"`                                                                           // PSH-7
	QuantityDistributedMethod                          *ID  `hl7:"false,Quantity Distributed Method" json:"quantity_distributed_method,omitempty"`                                                             // PSH-8
	QuantityDistributedComment                         *FT  `hl7:"false,Quantity Distributed Comment" json:"quantity_distributed_comment,omitempty"`                                                           // PSH-9
	QuantityInUse                                      *CQ  `hl7:"false,Quantity In Use" json:"quantity_in_use,omitempty"`                                                                                     // PSH-10
	QuantityInUseMethod                                *ID  `hl7:"false,Quantity In Use Method" json:"quantity_in_use_method,omitempty"`                                                                       // PSH-11
	QuantityInUseComment                               *FT  `hl7:"false,Quantity In Use Comment" json:"quantity_in_use_comment,omitempty"`                                                                     // PSH-12
	NumberOfProductExperienceReportsFiledByFacility    []NM `hl7:"false,Number Of Product Experience Reports Filed By Facility" json:"number_of_product_experience_reports_filed_by_facility,omitempty"`       // PSH-13
	NumberOfProductExperienceReportsFiledByDistributor []NM `hl7:"false,Number Of Product Experience Reports Filed By Distributor" json:"number_of_product_experience_reports_filed_by_distributor,omitempty"` // PSH-14
}

func (s *PSH) SegmentName() string {
	return "PSH"
}

//  PTH represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PTH struct {
	ActionCode                           *ID `hl7:"true,Action Code" json:"action_code,omitempty"`                                                                // PTH-1
	PathwayID                            *CE `hl7:"true,Pathway ID" json:"pathway_id,omitempty"`                                                                  // PTH-2
	PathwayInstanceID                    *EI `hl7:"true,Pathway Instance ID" json:"pathway_instance_id,omitempty"`                                                // PTH-3
	PathwayEstablishedDateTime           *TS `hl7:"true,Pathway Established Date/Time" json:"pathway_established_date_time,omitempty"`                            // PTH-4
	PathwayLifeCycleStatus               *CE `hl7:"false,Pathway Life Cycle Status" json:"pathway_life_cycle_status,omitempty"`                                   // PTH-5
	ChangePathwayLifeCycleStatusDateTime *TS `hl7:"false,Change Pathway Life Cycle Status Date/Time" json:"change_pathway_life_cycle_status_date_time,omitempty"` // PTH-6
}

func (s *PTH) SegmentName() string {
	return "PTH"
}

//  PV1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PV1 struct {
	SetIDPV1                *SI   `hl7:"false,Set ID - PV1" json:"set_idpv_1,omitempty"`                             // PV1-1
	PatientClass            *IS   `hl7:"true,Patient Class" json:"patient_class,omitempty"`                          // PV1-2
	AssignedPatientLocation *PL   `hl7:"false,Assigned Patient Location" json:"assigned_patient_location,omitempty"` // PV1-3
	AdmissionType           *IS   `hl7:"false,Admission Type" json:"admission_type,omitempty"`                       // PV1-4
	PreadmitNumber          *CX   `hl7:"false,Preadmit Number" json:"preadmit_number,omitempty"`                     // PV1-5
	PriorPatientLocation    *PL   `hl7:"false,Prior Patient Location" json:"prior_patient_location,omitempty"`       // PV1-6
	AttendingDoctor         []XCN `hl7:"false,Attending Doctor" json:"attending_doctor,omitempty"`                   // PV1-7
	ReferringDoctor         []XCN `hl7:"false,Referring Doctor" json:"referring_doctor,omitempty"`                   // PV1-8
	ConsultingDoctor        []XCN `hl7:"false,Consulting Doctor" json:"consulting_doctor,omitempty"`                 // PV1-9
	HospitalService         *IS   `hl7:"false,Hospital Service" json:"hospital_service,omitempty"`                   // PV1-10
	TemporaryLocation       *PL   `hl7:"false,Temporary Location" json:"temporary_location,omitempty"`               // PV1-11
	PreadmitTestIndicator   *IS   `hl7:"false,Preadmit Test Indicator" json:"preadmit_test_indicator,omitempty"`     // PV1-12
	ReAdmissionIndicator    *IS   `hl7:"false,Re-Admission Indicator" json:"re_admission_indicator,omitempty"`       // PV1-13
	AdmitSource             *IS   `hl7:"false,Admit Source" json:"admit_source,omitempty"`                           // PV1-14
	AmbulatoryStatus        []IS  `hl7:"false,Ambulatory Status" json:"ambulatory_status,omitempty"`                 // PV1-15
	VIPIndicator            *IS   `hl7:"false,VIP Indicator" json:"vip_indicator,omitempty"`                         // PV1-16
	AdmittingDoctor         []XCN `hl7:"false,Admitting Doctor" json:"admitting_doctor,omitempty"`                   // PV1-17
	PatientType             *IS   `hl7:"false,Patient Type" json:"patient_type,omitempty"`                           // PV1-18
	VisitNumber             *CX   `hl7:"false,Visit Number" json:"visit_number,omitempty"`                           // PV1-19
	FinancialClass          []FC  `hl7:"false,Financial Class" json:"financial_class,omitempty"`                     // PV1-20
	ChargePriceIndicator    *IS   `hl7:"false,Charge Price Indicator" json:"charge_price_indicator,omitempty"`       // PV1-21
	CourtesyCode            *IS   `hl7:"false,Courtesy Code" json:"courtesy_code,omitempty"`                         // PV1-22
	CreditRating            *IS   `hl7:"false,Credit Rating" json:"credit_rating,omitempty"`                         // PV1-23
	ContractCode            []IS  `hl7:"false,Contract Code" json:"contract_code,omitempty"`                         // PV1-24
	ContractEffectiveDate   []DT  `hl7:"false,Contract Effective Date" json:"contract_effective_date,omitempty"`     // PV1-25
	ContractAmount          []NM  `hl7:"false,Contract Amount" json:"contract_amount,omitempty"`                     // PV1-26
	ContractPeriod          []NM  `hl7:"false,Contract Period" json:"contract_period,omitempty"`                     // PV1-27
	InterestCode            *IS   `hl7:"false,Interest Code" json:"interest_code,omitempty"`                         // PV1-28
	TransferToBadDebtCode   *IS   `hl7:"false,Transfer To Bad Debt Code" json:"transfer_to_bad_debt_code,omitempty"` // PV1-29
	TransferToBadDebtDate   *DT   `hl7:"false,Transfer To Bad Debt Date" json:"transfer_to_bad_debt_date,omitempty"` // PV1-30
	BadDebtAgencyCode       *IS   `hl7:"false,Bad Debt Agency Code" json:"bad_debt_agency_code,omitempty"`           // PV1-31
	BadDebtTransferAmount   *NM   `hl7:"false,Bad Debt Transfer Amount" json:"bad_debt_transfer_amount,omitempty"`   // PV1-32
	BadDebtRecoveryAmount   *NM   `hl7:"false,Bad Debt Recovery Amount" json:"bad_debt_recovery_amount,omitempty"`   // PV1-33
	DeleteAccountIndicator  *IS   `hl7:"false,Delete Account Indicator" json:"delete_account_indicator,omitempty"`   // PV1-34
	DeleteAccountDate       *DT   `hl7:"false,Delete Account Date" json:"delete_account_date,omitempty"`             // PV1-35
	DischargeDisposition    *IS   `hl7:"false,Discharge Disposition" json:"discharge_disposition,omitempty"`         // PV1-36
	DischargedToLocation    *DLD  `hl7:"false,Discharged To Location" json:"discharged_to_location,omitempty"`       // PV1-37
	DietType                *CE   `hl7:"false,Diet Type" json:"diet_type,omitempty"`                                 // PV1-38
	ServicingFacility       *IS   `hl7:"false,Servicing Facility" json:"servicing_facility,omitempty"`               // PV1-39
	BedStatus               *IS   `hl7:"false,Bed Status" json:"bed_status,omitempty"`                               // PV1-40
	AccountStatus           *IS   `hl7:"false,Account Status" json:"account_status,omitempty"`                       // PV1-41
	PendingLocation         *PL   `hl7:"false,Pending Location" json:"pending_location,omitempty"`                   // PV1-42
	PriorTemporaryLocation  *PL   `hl7:"false,Prior Temporary Location" json:"prior_temporary_location,omitempty"`   // PV1-43
	AdmitDateTime           *TS   `hl7:"false,Admit Date/Time" json:"admit_date_time,omitempty"`                     // PV1-44
	DischargeDateTime       []TS  `hl7:"false,Discharge Date/Time" json:"discharge_date_time,omitempty"`             // PV1-45
	CurrentPatientBalance   *NM   `hl7:"false,Current Patient Balance" json:"current_patient_balance,omitempty"`     // PV1-46
	TotalCharges            *NM   `hl7:"false,Total Charges" json:"total_charges,omitempty"`                         // PV1-47
	TotalAdjustments        *NM   `hl7:"false,Total Adjustments" json:"total_adjustments,omitempty"`                 // PV1-48
	TotalPayments           *NM   `hl7:"false,Total Payments" json:"total_payments,omitempty"`                       // PV1-49
	AlternateVisitID        *CX   `hl7:"false,Alternate Visit ID" json:"alternate_visit_id,omitempty"`               // PV1-50
	VisitIndicator          *IS   `hl7:"false,Visit Indicator" json:"visit_indicator,omitempty"`                     // PV1-51
	OtherHealthcareProvider []XCN `hl7:"false,Other Healthcare Provider" json:"other_healthcare_provider,omitempty"` // PV1-52
}

func (s *PV1) SegmentName() string {
	return "PV1"
}

//  PV2 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type PV2 struct {
	PriorPendingLocation                *PL   `hl7:"false,Prior Pending Location" json:"prior_pending_location,omitempty"`                                     // PV2-1
	AccommodationCode                   *CE   `hl7:"false,Accommodation Code" json:"accommodation_code,omitempty"`                                             // PV2-2
	AdmitReason                         *CE   `hl7:"false,Admit Reason" json:"admit_reason,omitempty"`                                                         // PV2-3
	TransferReason                      *CE   `hl7:"false,Transfer Reason" json:"transfer_reason,omitempty"`                                                   // PV2-4
	PatientValuables                    []ST  `hl7:"false,Patient Valuables" json:"patient_valuables,omitempty"`                                               // PV2-5
	PatientValuablesLocation            *ST   `hl7:"false,Patient Valuables Location" json:"patient_valuables_location,omitempty"`                             // PV2-6
	VisitUserCode                       []IS  `hl7:"false,Visit User Code" json:"visit_user_code,omitempty"`                                                   // PV2-7
	ExpectedAdmitDateTime               *TS   `hl7:"false,Expected Admit Date/Time" json:"expected_admit_date_time,omitempty"`                                 // PV2-8
	ExpectedDischargeDateTime           *TS   `hl7:"false,Expected Discharge Date/Time" json:"expected_discharge_date_time,omitempty"`                         // PV2-9
	EstimatedLengthOfInpatientStay      *NM   `hl7:"false,Estimated Length Of Inpatient Stay" json:"estimated_length_of_inpatient_stay,omitempty"`             // PV2-10
	ActualLengthOfInpatientStay         *NM   `hl7:"false,Actual Length Of Inpatient Stay" json:"actual_length_of_inpatient_stay,omitempty"`                   // PV2-11
	VisitDescription                    *ST   `hl7:"false,Visit Description" json:"visit_description,omitempty"`                                               // PV2-12
	ReferralSourceCode                  []XCN `hl7:"false,Referral Source Code" json:"referral_source_code,omitempty"`                                         // PV2-13
	PreviousServiceDate                 *DT   `hl7:"false,Previous Service Date" json:"previous_service_date,omitempty"`                                       // PV2-14
	EmploymentIllnessRelatedIndicator   *ID   `hl7:"false,Employment Illness Related Indicator" json:"employment_illness_related_indicator,omitempty"`         // PV2-15
	PurgeStatusCode                     *IS   `hl7:"false,Purge Status Code" json:"purge_status_code,omitempty"`                                               // PV2-16
	PurgeStatusDate                     *DT   `hl7:"false,Purge Status Date" json:"purge_status_date,omitempty"`                                               // PV2-17
	SpecialProgramCode                  *IS   `hl7:"false,Special Program Code" json:"special_program_code,omitempty"`                                         // PV2-18
	RetentionIndicator                  *ID   `hl7:"false,Retention Indicator" json:"retention_indicator,omitempty"`                                           // PV2-19
	ExpectedNumberOfInsurancePlans      *NM   `hl7:"false,Expected Number Of Insurance Plans" json:"expected_number_of_insurance_plans,omitempty"`             // PV2-20
	VisitPublicityCode                  *IS   `hl7:"false,Visit Publicity Code" json:"visit_publicity_code,omitempty"`                                         // PV2-21
	VisitProtectionIndicator            *ID   `hl7:"false,Visit Protection Indicator" json:"visit_protection_indicator,omitempty"`                             // PV2-22
	ClinicOrganizationName              []XON `hl7:"false,Clinic Organization Name" json:"clinic_organization_name,omitempty"`                                 // PV2-23
	PatientStatusCode                   *IS   `hl7:"false,Patient Status Code" json:"patient_status_code,omitempty"`                                           // PV2-24
	VisitPriorityCode                   *IS   `hl7:"false,Visit Priority Code" json:"visit_priority_code,omitempty"`                                           // PV2-25
	PreviousTreatmentDate               *DT   `hl7:"false,Previous Treatment Date" json:"previous_treatment_date,omitempty"`                                   // PV2-26
	ExpectedDischargeDisposition        *IS   `hl7:"false,Expected Discharge Disposition" json:"expected_discharge_disposition,omitempty"`                     // PV2-27
	SignatureOnFileDate                 *DT   `hl7:"false,Signature On File Date" json:"signature_on_file_date,omitempty"`                                     // PV2-28
	FirstSimilarIllnessDate             *DT   `hl7:"false,First Similar Illness Date" json:"first_similar_illness_date,omitempty"`                             // PV2-29
	PatientChargeAdjustmentCode         *CE   `hl7:"false,Patient Charge Adjustment Code" json:"patient_charge_adjustment_code,omitempty"`                     // PV2-30
	RecurringServiceCode                *IS   `hl7:"false,Recurring Service Code" json:"recurring_service_code,omitempty"`                                     // PV2-31
	BillingMediaCode                    *ID   `hl7:"false,Billing Media Code" json:"billing_media_code,omitempty"`                                             // PV2-32
	ExpectedSurgeryDateAndTime          *TS   `hl7:"false,Expected Surgery Date And Time" json:"expected_surgery_date_and_time,omitempty"`                     // PV2-33
	MilitaryPartnershipCode             *ID   `hl7:"false,Military Partnership Code" json:"military_partnership_code,omitempty"`                               // PV2-34
	MilitaryNonAvailabilityCode         *ID   `hl7:"false,Military Non-Availability Code" json:"military_non_availability_code,omitempty"`                     // PV2-35
	NewbornBabyIndicator                *ID   `hl7:"false,Newborn Baby Indicator" json:"newborn_baby_indicator,omitempty"`                                     // PV2-36
	BabyDetainedIndicator               *ID   `hl7:"false,Baby Detained Indicator" json:"baby_detained_indicator,omitempty"`                                   // PV2-37
	ModeOfArrivalCode                   *CE   `hl7:"false,Mode Of Arrival Code" json:"mode_of_arrival_code,omitempty"`                                         // PV2-38
	RecreationalDrugUseCode             []CE  `hl7:"false,Recreational Drug Use Code" json:"recreational_drug_use_code,omitempty"`                             // PV2-39
	AdmissionLevelOfCareCode            *CE   `hl7:"false,Admission Level Of Care Code" json:"admission_level_of_care_code,omitempty"`                         // PV2-40
	PrecautionCode                      []CE  `hl7:"false,Precaution Code" json:"precaution_code,omitempty"`                                                   // PV2-41
	PatientConditionCode                *CE   `hl7:"false,Patient Condition Code" json:"patient_condition_code,omitempty"`                                     // PV2-42
	LivingWillCode                      *IS   `hl7:"false,Living Will Code" json:"living_will_code,omitempty"`                                                 // PV2-43
	OrganDonorCode                      *IS   `hl7:"false,Organ Donor Code" json:"organ_donor_code,omitempty"`                                                 // PV2-44
	AdvanceDirectiveCode                []CE  `hl7:"false,Advance Directive Code" json:"advance_directive_code,omitempty"`                                     // PV2-45
	PatientStatusEffectiveDate          *DT   `hl7:"false,Patient Status Effective Date" json:"patient_status_effective_date,omitempty"`                       // PV2-46
	ExpectedLOAReturnDateTime           *TS   `hl7:"false,Expected LOA Return Date/Time" json:"expected_loa_return_date_time,omitempty"`                       // PV2-47
	ExpectedPreAdmissionTestingDateTime *TS   `hl7:"false,Expected Pre-Admission Testing Date/Time" json:"expected_pre_admission_testing_date_time,omitempty"` // PV2-48
	NotifyClergyCode                    []IS  `hl7:"false,Notify Clergy Code" json:"notify_clergy_code,omitempty"`                                             // PV2-49
}

func (s *PV2) SegmentName() string {
	return "PV2"
}

//  QAK represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type QAK struct {
	QueryTag            *ST `hl7:"false,Query Tag" json:"query_tag,omitempty"`                         // QAK-1
	QueryResponseStatus *ID `hl7:"false,Query Response Status" json:"query_response_status,omitempty"` // QAK-2
	MessageQueryName    *CE `hl7:"false,Message Query Name" json:"message_query_name,omitempty"`       // QAK-3
	HitCount            *NM `hl7:"false,Hit Count" json:"hit_count,omitempty"`                         // QAK-4
	ThisPayload         *NM `hl7:"false,This Payload" json:"this_payload,omitempty"`                   // QAK-5
	HitsRemaining       *NM `hl7:"false,Hits Remaining" json:"hits_remaining,omitempty"`               // QAK-6
}

func (s *QAK) SegmentName() string {
	return "QAK"
}

//  QID represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type QID struct {
	QueryTag         *ST `hl7:"true,Query Tag" json:"query_tag,omitempty"`                   // QID-1
	MessageQueryName *CE `hl7:"true,Message Query Name" json:"message_query_name,omitempty"` // QID-2
}

func (s *QID) SegmentName() string {
	return "QID"
}

//  QPD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type QPD struct {
	MessageQueryName                 *CE  `hl7:"true,Message Query Name" json:"message_query_name,omitempty"`                                        // QPD-1
	QueryTag                         *ST  `hl7:"false,Query Tag" json:"query_tag,omitempty"`                                                         // QPD-2
	UserParametersInSuccessiveFields *Any `hl7:"false,User Parameters (In Successive Fields)" json:"user_parameters_in_successive_fields,omitempty"` // QPD-3
}

func (s *QPD) SegmentName() string {
	return "QPD"
}

//  QRD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type QRD struct {
	QueryDateTime            *TS   `hl7:"true,Query Date/Time" json:"query_date_time,omitempty"`                          // QRD-1
	QueryFormatCode          *ID   `hl7:"true,Query Format Code" json:"query_format_code,omitempty"`                      // QRD-2
	QueryPriority            *ID   `hl7:"true,Query Priority" json:"query_priority,omitempty"`                            // QRD-3
	QueryID                  *ST   `hl7:"true,Query ID" json:"query_id,omitempty"`                                        // QRD-4
	DeferredResponseType     *ID   `hl7:"false,Deferred Response Type" json:"deferred_response_type,omitempty"`           // QRD-5
	DeferredResponseDateTime *TS   `hl7:"false,Deferred Response Date/Time" json:"deferred_response_date_time,omitempty"` // QRD-6
	QuantityLimitedRequest   *CQ   `hl7:"true,Quantity Limited Request" json:"quantity_limited_request,omitempty"`        // QRD-7
	WhoSubjectFilter         []XCN `hl7:"true,Who Subject Filter" json:"who_subject_filter,omitempty"`                    // QRD-8
	WhatSubjectFilter        []CE  `hl7:"true,What Subject Filter" json:"what_subject_filter,omitempty"`                  // QRD-9
	WhatDepartmentDataCode   []CE  `hl7:"true,What Department Data Code" json:"what_department_data_code,omitempty"`      // QRD-10
	WhatDataCodeValueQual    []VR  `hl7:"false,What Data Code Value Qual." json:"what_data_code_value_qual,omitempty"`    // QRD-11
	QueryResultsLevel        *ID   `hl7:"false,Query Results Level" json:"query_results_level,omitempty"`                 // QRD-12
}

func (s *QRD) SegmentName() string {
	return "QRD"
}

//  QRF represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type QRF struct {
	WhereSubjectFilter           []ST `hl7:"true,Where Subject Filter" json:"where_subject_filter,omitempty"`                          // QRF-1
	WhenDataStartDateTime        *TS  `hl7:"false,When Data Start Date/Time" json:"when_data_start_date_time,omitempty"`               // QRF-2
	WhenDataEndDateTime          *TS  `hl7:"false,When Data End Date/Time" json:"when_data_end_date_time,omitempty"`                   // QRF-3
	WhatUserQualifier            []ST `hl7:"false,What User Qualifier" json:"what_user_qualifier,omitempty"`                           // QRF-4
	OtherQRYSubjectFilter        []ST `hl7:"false,Other QRY Subject Filter" json:"other_qry_subject_filter,omitempty"`                 // QRF-5
	WhichDateTimeQualifier       []ID `hl7:"false,Which Date/Time Qualifier" json:"which_date_time_qualifier,omitempty"`               // QRF-6
	WhichDateTimeStatusQualifier []ID `hl7:"false,Which Date/Time Status Qualifier" json:"which_date_time_status_qualifier,omitempty"` // QRF-7
	DateTimeSelectionQualifier   []ID `hl7:"false,Date/Time Selection Qualifier" json:"date_time_selection_qualifier,omitempty"`       // QRF-8
	WhenQuantityTimingQualifier  *TQ  `hl7:"false,When Quantity/Timing Qualifier" json:"when_quantity_timing_qualifier,omitempty"`     // QRF-9
	SearchConfidenceThreshold    *NM  `hl7:"false,Search Confidence Threshold" json:"search_confidence_threshold,omitempty"`           // QRF-10
}

func (s *QRF) SegmentName() string {
	return "QRF"
}

//  QRI represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type QRI struct {
	CandidateConfidence *NM  `hl7:"false,Candidate Confidence" json:"candidate_confidence,omitempty"` // QRI-1
	MatchReasonCode     []IS `hl7:"false,Match Reason Code" json:"match_reason_code,omitempty"`       // QRI-2
	AlgorithmDescriptor *CE  `hl7:"false,Algorithm Descriptor" json:"algorithm_descriptor,omitempty"` // QRI-3
}

func (s *QRI) SegmentName() string {
	return "QRI"
}

//  RCP represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RCP struct {
	QueryPriority            *ID   `hl7:"false,Query Priority" json:"query_priority,omitempty"`                           // RCP-1
	QuantityLimitedRequest   *CQ   `hl7:"false,Quantity Limited Request" json:"quantity_limited_request,omitempty"`       // RCP-2
	ResponseModality         *CE   `hl7:"false,Response Modality" json:"response_modality,omitempty"`                     // RCP-3
	ExecutionAndDeliveryTime *TS   `hl7:"false,Execution And Delivery Time" json:"execution_and_delivery_time,omitempty"` // RCP-4
	ModifyIndicator          *ID   `hl7:"false,Modify Indicator" json:"modify_indicator,omitempty"`                       // RCP-5
	SortByField              []SRT `hl7:"false,Sort-By Field" json:"sort_by_field,omitempty"`                             // RCP-6
	SegmentGroupInclusion    []ID  `hl7:"false,Segment Group Inclusion" json:"segment_group_inclusion,omitempty"`         // RCP-7
}

func (s *RCP) SegmentName() string {
	return "RCP"
}

//  RDF represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RDF struct {
	NumberOfColumnsPerRow *NM   `hl7:"true,Number Of Columns Per Row" json:"number_of_columns_per_row,omitempty"` // RDF-1
	ColumnDescription     []RCD `hl7:"true,Column Description" json:"column_description,omitempty"`               // RDF-2
}

func (s *RDF) SegmentName() string {
	return "RDF"
}

//  RDT represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RDT struct {
	ColumnValue *Any `hl7:"true,Column Value" json:"column_value,omitempty"` // RDT-1
}

func (s *RDT) SegmentName() string {
	return "RDT"
}

//  RF1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RF1 struct {
	ReferralStatus                *CE  `hl7:"false,Referral Status" json:"referral_status,omitempty"`                                // RF1-1
	ReferralPriority              *CE  `hl7:"false,Referral Priority" json:"referral_priority,omitempty"`                            // RF1-2
	ReferralType                  *CE  `hl7:"false,Referral Type" json:"referral_type,omitempty"`                                    // RF1-3
	ReferralDisposition           []CE `hl7:"false,Referral Disposition" json:"referral_disposition,omitempty"`                      // RF1-4
	ReferralCategory              *CE  `hl7:"false,Referral Category" json:"referral_category,omitempty"`                            // RF1-5
	OriginatingReferralIdentifier *EI  `hl7:"true,Originating Referral Identifier" json:"originating_referral_identifier,omitempty"` // RF1-6
	EffectiveDate                 *TS  `hl7:"false,Effective Date" json:"effective_date,omitempty"`                                  // RF1-7
	ExpirationDate                *TS  `hl7:"false,Expiration Date" json:"expiration_date,omitempty"`                                // RF1-8
	ProcessDate                   *TS  `hl7:"false,Process Date" json:"process_date,omitempty"`                                      // RF1-9
	ReferralReason                []CE `hl7:"false,Referral Reason" json:"referral_reason,omitempty"`                                // RF1-10
	ExternalReferralIdentifier    []EI `hl7:"false,External Referral Identifier" json:"external_referral_identifier,omitempty"`      // RF1-11
}

func (s *RF1) SegmentName() string {
	return "RF1"
}

//  RGS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RGS struct {
	SetIDRGS          *SI `hl7:"true,Set ID - RGS" json:"set_idrgs,omitempty"`                   // RGS-1
	SegmentActionCode *ID `hl7:"false,Segment Action Code" json:"segment_action_code,omitempty"` // RGS-2
	ResourceGroupID   *CE `hl7:"false,Resource Group ID" json:"resource_group_id,omitempty"`     // RGS-3
}

func (s *RGS) SegmentName() string {
	return "RGS"
}

//  RMI represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RMI struct {
	RiskManagementIncidentCode *CE `hl7:"false,Risk Management Incident Code" json:"risk_management_incident_code,omitempty"` // RMI-1
	DateTimeIncident           *TS `hl7:"false,Date/Time Incident" json:"date_time_incident,omitempty"`                       // RMI-2
	IncidentTypeCode           *CE `hl7:"false,Incident Type Code" json:"incident_type_code,omitempty"`                       // RMI-3
}

func (s *RMI) SegmentName() string {
	return "RMI"
}

//  ROL represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type ROL struct {
	RoleInstanceID              *EI   `hl7:"false,Role Instance ID" json:"role_instance_id,omitempty"`                             // ROL-1
	ActionCode                  *ID   `hl7:"true,Action Code" json:"action_code,omitempty"`                                        // ROL-2
	RoleROL                     *CE   `hl7:"true,Role-ROL" json:"role_rol,omitempty"`                                              // ROL-3
	RolePerson                  []XCN `hl7:"true,Role Person" json:"role_person,omitempty"`                                        // ROL-4
	RoleBeginDateTime           *TS   `hl7:"false,Role Begin Date/Time" json:"role_begin_date_time,omitempty"`                     // ROL-5
	RoleEndDateTime             *TS   `hl7:"false,Role End Date/Time" json:"role_end_date_time,omitempty"`                         // ROL-6
	RoleDuration                *CE   `hl7:"false,Role Duration" json:"role_duration,omitempty"`                                   // ROL-7
	RoleActionReason            *CE   `hl7:"false,Role Action Reason" json:"role_action_reason,omitempty"`                         // ROL-8
	ProviderType                []CE  `hl7:"false,Provider Type" json:"provider_type,omitempty"`                                   // ROL-9
	OrganizationUnitType        *CE   `hl7:"false,Organization Unit Type" json:"organization_unit_type,omitempty"`                 // ROL-10
	OfficeHomeAddressBirthplace []XAD `hl7:"false,Office/Home Address/Birthplace" json:"office_home_address_birthplace,omitempty"` // ROL-11
	Phone                       []XTN `hl7:"false,Phone" json:"phone,omitempty"`                                                   // ROL-12
}

func (s *ROL) SegmentName() string {
	return "ROL"
}

//  RQ1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RQ1 struct {
	AnticipatedPrice       *ST `hl7:"false,Anticipated Price" json:"anticipated_price,omitempty"`             // RQ1-1
	ManufacturerIdentifier *CE `hl7:"false,Manufacturer Identifier" json:"manufacturer_identifier,omitempty"` // RQ1-2
	ManufacturerSCatalog   *ST `hl7:"false,Manufacturer'S Catalog" json:"manufacturer_s_catalog,omitempty"`   // RQ1-3
	VendorID               *CE `hl7:"false,Vendor ID" json:"vendor_id,omitempty"`                             // RQ1-4
	VendorCatalog          *ST `hl7:"false,Vendor Catalog" json:"vendor_catalog,omitempty"`                   // RQ1-5
	Taxable                *ID `hl7:"false,Taxable" json:"taxable,omitempty"`                                 // RQ1-6
	SubstituteAllowed      *ID `hl7:"false,Substitute Allowed" json:"substitute_allowed,omitempty"`           // RQ1-7
}

func (s *RQ1) SegmentName() string {
	return "RQ1"
}

//  RQD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RQD struct {
	RequisitionLineNumber    *SI `hl7:"false,Requisition Line Number" json:"requisition_line_number,omitempty"`         // RQD-1
	ItemCodeInternal         *CE `hl7:"false,Item Code - Internal" json:"item_code_internal,omitempty"`                 // RQD-2
	ItemCodeExternal         *CE `hl7:"false,Item Code - External" json:"item_code_external,omitempty"`                 // RQD-3
	HospitalItemCode         *CE `hl7:"false,Hospital Item Code" json:"hospital_item_code,omitempty"`                   // RQD-4
	RequisitionQuantity      *NM `hl7:"false,Requisition Quantity" json:"requisition_quantity,omitempty"`               // RQD-5
	RequisitionUnitOfMeasure *CE `hl7:"false,Requisition Unit Of Measure" json:"requisition_unit_of_measure,omitempty"` // RQD-6
	DeptCostCenter           *IS `hl7:"false,Dept. Cost Center" json:"dept_cost_center,omitempty"`                      // RQD-7
	ItemNaturalAccountCode   *IS `hl7:"false,Item Natural Account Code" json:"item_natural_account_code,omitempty"`     // RQD-8
	DeliverToID              *CE `hl7:"false,Deliver To ID" json:"deliver_to_id,omitempty"`                             // RQD-9
	DateNeeded               *DT `hl7:"false,Date Needed" json:"date_needed,omitempty"`                                 // RQD-10
}

func (s *RQD) SegmentName() string {
	return "RQD"
}

//  RX1 represents the corresponding HL7 segment.
//  Definition from HL7 2.1
type RX1 struct {
	UNUSED1              *ST  `hl7:"false,UNUSED" json:"unused_1,omitempty"`                               // RX1-1
	UNUSED2              *ST  `hl7:"false,UNUSED" json:"unused_2,omitempty"`                               // RX1-2
	ROUTE                *ST  `hl7:"false,ROUTE" json:"route,omitempty"`                                   // RX1-3
	SITEADMINISTERED     *ST  `hl7:"false,SITE ADMINISTERED" json:"siteadministered,omitempty"`            // RX1-4
	IVSOLUTIONRATE       *CQ  `hl7:"false,IV SOLUTION RATE" json:"ivsolutionrate,omitempty"`               // RX1-5
	DRUGSTRENGTH         *CQ  `hl7:"false,DRUG STRENGTH" json:"drugstrength,omitempty"`                    // RX1-6
	FINALCONCENTRATION   *NM  `hl7:"false,FINAL CONCENTRATION" json:"finalconcentration,omitempty"`        // RX1-7
	FINALVOLUMEINML      *NM  `hl7:"false,FINAL VOLUME IN ML." json:"finalvolumeinml,omitempty"`           // RX1-8
	DRUGDOSE             *CM  `hl7:"false,DRUG DOSE" json:"drugdose,omitempty"`                            // RX1-9
	DRUGROLE             *ID  `hl7:"false,DRUG ROLE" json:"drugrole,omitempty"`                            // RX1-10
	PRESCRIPTIONSEQUENCE *NM  `hl7:"false,PRESCRIPTION SEQUENCE #" json:"prescriptionsequence,omitempty"`  // RX1-11
	QUANTITYDISPENSED    *CQ  `hl7:"false,QUANTITY DISPENSED" json:"quantitydispensed,omitempty"`          // RX1-12
	UNUSED3              *ST  `hl7:"false,UNUSED" json:"unused_3,omitempty"`                               // RX1-13
	DRUGID               *CE  `hl7:"false,DRUG ID" json:"drugid,omitempty"`                                // RX1-14
	COMPONENTDRUGIDS     []ID `hl7:"false,COMPONENT DRUG IDS" json:"componentdrugids,omitempty"`           // RX1-15
	PRESCRIPTIONTYPE     *ID  `hl7:"false,PRESCRIPTION TYPE" json:"prescriptiontype,omitempty"`            // RX1-16
	SUBSTITUTIONSTATUS   *ID  `hl7:"false,SUBSTITUTION STATUS" json:"substitutionstatus,omitempty"`        // RX1-17
	RXORDERSTATUS        *ID  `hl7:"false,RX ORDER STATUS" json:"rxorderstatus,omitempty"`                 // RX1-18
	NUMBEROFREFILLS      *NM  `hl7:"false,NUMBER OF REFILLS" json:"numberofrefills,omitempty"`             // RX1-19
	UNUSED4              *ST  `hl7:"false,UNUSED" json:"unused_4,omitempty"`                               // RX1-20
	REFILLSREMAINING     *NM  `hl7:"false,REFILLS REMAINING" json:"refillsremaining,omitempty"`            // RX1-21
	DEACLASS             *ID  `hl7:"false,DEA CLASS" json:"deaclass,omitempty"`                            // RX1-22
	ORDERINGMDSDEANUMBER *NM  `hl7:"false,ORDERING MD'S DEA NUMBER" json:"orderingmdsdeanumber,omitempty"` // RX1-23
	UNUSED5              *ST  `hl7:"false,UNUSED" json:"unused_5,omitempty"`                               // RX1-24
	LASTREFILLDATETIME   *TS  `hl7:"false,LAST REFILL DATE/TIME" json:"lastrefilldatetime,omitempty"`      // RX1-25
	RXNUMBER             *ST  `hl7:"false,RX NUMBER" json:"rxnumber,omitempty"`                            // RX1-26
	PRNSTATUS            *ID  `hl7:"false,PRN STATUS" json:"prnstatus,omitempty"`                          // RX1-27
	PHARMACYINSTRUCTIONS []TX `hl7:"false,PHARMACY INSTRUCTIONS" json:"pharmacyinstructions,omitempty"`    // RX1-28
	PATIENTINSTRUCTIONS  []TX `hl7:"false,PATIENT INSTRUCTIONS" json:"patientinstructions,omitempty"`      // RX1-29
	INSTRUCTIONS         []TX `hl7:"false,INSTRUCTIONS" json:"instructions,omitempty"`                     // RX1-30
}

func (s *RX1) SegmentName() string {
	return "RX1"
}

//  RXA represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RXA struct {
	GiveSubIDCounter                    *NM   `hl7:"true,Give Sub-ID Counter" json:"give_sub_id_counter,omitempty"`                                          // RXA-1
	AdministrationSubIDCounter          *NM   `hl7:"true,Administration Sub-ID Counter" json:"administration_sub_id_counter,omitempty"`                      // RXA-2
	DateTimeStartOfAdministration       *TS   `hl7:"true,Date/Time Start Of Administration" json:"date_time_start_of_administration,omitempty"`              // RXA-3
	DateTimeEndOfAdministration         *TS   `hl7:"true,Date/Time End Of Administration" json:"date_time_end_of_administration,omitempty"`                  // RXA-4
	AdministeredCode                    *CE   `hl7:"true,Administered Code" json:"administered_code,omitempty"`                                              // RXA-5
	AdministeredAmount                  *NM   `hl7:"true,Administered Amount" json:"administered_amount,omitempty"`                                          // RXA-6
	AdministeredUnits                   *CE   `hl7:"false,Administered Units" json:"administered_units,omitempty"`                                           // RXA-7
	AdministeredDosageForm              *CE   `hl7:"false,Administered Dosage Form" json:"administered_dosage_form,omitempty"`                               // RXA-8
	AdministrationNotes                 []CE  `hl7:"false,Administration Notes" json:"administration_notes,omitempty"`                                       // RXA-9
	AdministeringProvider               []XCN `hl7:"false,Administering Provider" json:"administering_provider,omitempty"`                                   // RXA-10
	AdministeredAtLocation              *LA2  `hl7:"false,Administered-At Location" json:"administered_at_location,omitempty"`                               // RXA-11
	AdministeredPerTimeUnit             *ST   `hl7:"false,Administered Per (Time Unit)" json:"administered_per_time_unit,omitempty"`                         // RXA-12
	AdministeredStrength                *NM   `hl7:"false,Administered Strength" json:"administered_strength,omitempty"`                                     // RXA-13
	AdministeredStrengthUnits           *CE   `hl7:"false,Administered Strength Units" json:"administered_strength_units,omitempty"`                         // RXA-14
	SubstanceLotNumber                  []ST  `hl7:"false,Substance Lot Number" json:"substance_lot_number,omitempty"`                                       // RXA-15
	SubstanceExpirationDate             []TS  `hl7:"false,Substance Expiration Date" json:"substance_expiration_date,omitempty"`                             // RXA-16
	SubstanceManufacturerName           []CE  `hl7:"false,Substance Manufacturer Name" json:"substance_manufacturer_name,omitempty"`                         // RXA-17
	SubstanceTreatmentRefusalReason     []CE  `hl7:"false,Substance/Treatment Refusal Reason" json:"substance_treatment_refusal_reason,omitempty"`           // RXA-18
	Indication                          []CE  `hl7:"false,Indication" json:"indication,omitempty"`                                                           // RXA-19
	CompletionStatus                    *ID   `hl7:"false,Completion Status" json:"completion_status,omitempty"`                                             // RXA-20
	ActionCodeRXA                       *ID   `hl7:"false,Action Code - RXA" json:"action_code_rxa,omitempty"`                                               // RXA-21
	SystemEntryDateTime                 *TS   `hl7:"false,System Entry Date/Time" json:"system_entry_date_time,omitempty"`                                   // RXA-22
	AdministeredDrugStrengthVolume      *NM   `hl7:"false,Administered Drug Strength Volume" json:"administered_drug_strength_volume,omitempty"`             // RXA-23
	AdministeredDrugStrengthVolumeUnits *CWE  `hl7:"false,Administered Drug Strength Volume Units" json:"administered_drug_strength_volume_units,omitempty"` // RXA-24
	AdministeredBarcodeIdentifier       *CWE  `hl7:"false,Administered Barcode Identifier" json:"administered_barcode_identifier,omitempty"`                 // RXA-25
	PharmacyOrderType                   *ID   `hl7:"false,Pharmacy Order Type" json:"pharmacy_order_type,omitempty"`                                         // RXA-26
}

func (s *RXA) SegmentName() string {
	return "RXA"
}

//  RXC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RXC struct {
	RXComponentType                  *ID  `hl7:"true,RX Component Type" json:"rx_component_type,omitempty"`                                        // RXC-1
	ComponentCode                    *CE  `hl7:"true,Component Code" json:"component_code,omitempty"`                                              // RXC-2
	ComponentAmount                  *NM  `hl7:"true,Component Amount" json:"component_amount,omitempty"`                                          // RXC-3
	ComponentUnits                   *CE  `hl7:"true,Component Units" json:"component_units,omitempty"`                                            // RXC-4
	ComponentStrength                *NM  `hl7:"false,Component Strength" json:"component_strength,omitempty"`                                     // RXC-5
	ComponentStrengthUnits           *CE  `hl7:"false,Component Strength Units" json:"component_strength_units,omitempty"`                         // RXC-6
	SupplementaryCode                []CE `hl7:"false,Supplementary Code" json:"supplementary_code,omitempty"`                                     // RXC-7
	ComponentDrugStrengthVolume      *NM  `hl7:"false,Component Drug Strength Volume" json:"component_drug_strength_volume,omitempty"`             // RXC-8
	ComponentDrugStrengthVolumeUnits *CWE `hl7:"false,Component Drug Strength Volume Units" json:"component_drug_strength_volume_units,omitempty"` // RXC-9
}

func (s *RXC) SegmentName() string {
	return "RXC"
}

//  RXD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RXD struct {
	DispenseSubIDCounter                                    *NM   `hl7:"true,Dispense Sub-ID Counter" json:"dispense_sub_id_counter,omitempty"`                                                                              // RXD-1
	DispenseGiveCode                                        *CE   `hl7:"true,Dispense/Give Code" json:"dispense_give_code,omitempty"`                                                                                        // RXD-2
	DateTimeDispensed                                       *TS   `hl7:"true,Date/Time Dispensed" json:"date_time_dispensed,omitempty"`                                                                                      // RXD-3
	ActualDispenseAmount                                    *NM   `hl7:"true,Actual Dispense Amount" json:"actual_dispense_amount,omitempty"`                                                                                // RXD-4
	ActualDispenseUnits                                     *CE   `hl7:"false,Actual Dispense Units" json:"actual_dispense_units,omitempty"`                                                                                 // RXD-5
	ActualDosageForm                                        *CE   `hl7:"false,Actual Dosage Form" json:"actual_dosage_form,omitempty"`                                                                                       // RXD-6
	PrescriptionNumber                                      *ST   `hl7:"true,Prescription Number" json:"prescription_number,omitempty"`                                                                                      // RXD-7
	NumberOfRefillsRemaining                                *NM   `hl7:"false,Number Of Refills Remaining" json:"number_of_refills_remaining,omitempty"`                                                                     // RXD-8
	DispenseNotes                                           []ST  `hl7:"false,Dispense Notes" json:"dispense_notes,omitempty"`                                                                                               // RXD-9
	DispensingProvider                                      []XCN `hl7:"false,Dispensing Provider" json:"dispensing_provider,omitempty"`                                                                                     // RXD-10
	SubstitutionStatus                                      *ID   `hl7:"false,Substitution Status" json:"substitution_status,omitempty"`                                                                                     // RXD-11
	TotalDailyDose                                          *CQ   `hl7:"false,Total Daily Dose" json:"total_daily_dose,omitempty"`                                                                                           // RXD-12
	DispenseToLocation                                      *LA2  `hl7:"false,Dispense-To Location" json:"dispense_to_location,omitempty"`                                                                                   // RXD-13
	NeedsHumanReview                                        *ID   `hl7:"false,Needs Human Review" json:"needs_human_review,omitempty"`                                                                                       // RXD-14
	PharmacyTreatmentSupplierSSpecialDispensingInstructions []CE  `hl7:"false,Pharmacy/Treatment Supplier'S Special Dispensing Instructions" json:"pharmacy_treatment_supplier_s_special_dispensing_instructions,omitempty"` // RXD-15
	ActualStrength                                          *NM   `hl7:"false,Actual Strength" json:"actual_strength,omitempty"`                                                                                             // RXD-16
	ActualStrengthUnit                                      *CE   `hl7:"false,Actual Strength Unit" json:"actual_strength_unit,omitempty"`                                                                                   // RXD-17
	SubstanceLotNumber                                      []ST  `hl7:"false,Substance Lot Number" json:"substance_lot_number,omitempty"`                                                                                   // RXD-18
	SubstanceExpirationDate                                 []TS  `hl7:"false,Substance Expiration Date" json:"substance_expiration_date,omitempty"`                                                                         // RXD-19
	SubstanceManufacturerName                               []CE  `hl7:"false,Substance Manufacturer Name" json:"substance_manufacturer_name,omitempty"`                                                                     // RXD-20
	Indication                                              []CE  `hl7:"false,Indication" json:"indication,omitempty"`                                                                                                       // RXD-21
	DispensePackageSize                                     *NM   `hl7:"false,Dispense Package Size" json:"dispense_package_size,omitempty"`                                                                                 // RXD-22
	DispensePackageSizeUnit                                 *CE   `hl7:"false,Dispense Package Size Unit" json:"dispense_package_size_unit,omitempty"`                                                                       // RXD-23
	DispensePackageMethod                                   *ID   `hl7:"false,Dispense Package Method" json:"dispense_package_method,omitempty"`                                                                             // RXD-24
	SupplementaryCode                                       []CE  `hl7:"false,Supplementary Code" json:"supplementary_code,omitempty"`                                                                                       // RXD-25
	InitiatingLocation                                      *CE   `hl7:"false,Initiating Location" json:"initiating_location,omitempty"`                                                                                     // RXD-26
	PackagingAssemblyLocation                               *CE   `hl7:"false,Packaging/Assembly Location" json:"packaging_assembly_location,omitempty"`                                                                     // RXD-27
	ActualDrugStrengthVolume                                *NM   `hl7:"false,Actual Drug Strength Volume" json:"actual_drug_strength_volume,omitempty"`                                                                     // RXD-28
	ActualDrugStrengthVolumeUnits                           *CWE  `hl7:"false,Actual Drug Strength Volume Units" json:"actual_drug_strength_volume_units,omitempty"`                                                         // RXD-29
	DispenseToPharmacy                                      *CWE  `hl7:"false,Dispense To Pharmacy" json:"dispense_to_pharmacy,omitempty"`                                                                                   // RXD-30
	DispenseToPharmacyAddress                               *XAD  `hl7:"false,Dispense To Pharmacy Address" json:"dispense_to_pharmacy_address,omitempty"`                                                                   // RXD-31
	PharmacyOrderType                                       *ID   `hl7:"false,Pharmacy Order Type" json:"pharmacy_order_type,omitempty"`                                                                                     // RXD-32
	DispenseType                                            *CWE  `hl7:"false,Dispense Type" json:"dispense_type,omitempty"`                                                                                                 // RXD-33
}

func (s *RXD) SegmentName() string {
	return "RXD"
}

//  RXE represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RXE struct {
	QuantityTiming                                          *TQ   `hl7:"false,Quantity/Timing" json:"quantity_timing,omitempty"`                                                                                             // RXE-1
	GiveCode                                                *CE   `hl7:"true,Give Code" json:"give_code,omitempty"`                                                                                                          // RXE-2
	GiveAmountMinimum                                       *NM   `hl7:"true,Give Amount - Minimum" json:"give_amount_minimum,omitempty"`                                                                                    // RXE-3
	GiveAmountMaximum                                       *NM   `hl7:"false,Give Amount - Maximum" json:"give_amount_maximum,omitempty"`                                                                                   // RXE-4
	GiveUnits                                               *CE   `hl7:"true,Give Units" json:"give_units,omitempty"`                                                                                                        // RXE-5
	GiveDosageForm                                          *CE   `hl7:"false,Give Dosage Form" json:"give_dosage_form,omitempty"`                                                                                           // RXE-6
	ProviderSAdministrationInstructions                     []CE  `hl7:"false,Provider'S Administration Instructions" json:"provider_s_administration_instructions,omitempty"`                                               // RXE-7
	DeliverToLocation                                       *LA1  `hl7:"false,Deliver-To Location" json:"deliver_to_location,omitempty"`                                                                                     // RXE-8
	SubstitutionStatus                                      *ID   `hl7:"false,Substitution Status" json:"substitution_status,omitempty"`                                                                                     // RXE-9
	DispenseAmount                                          *NM   `hl7:"false,Dispense Amount" json:"dispense_amount,omitempty"`                                                                                             // RXE-10
	DispenseUnits                                           *CE   `hl7:"false,Dispense Units" json:"dispense_units,omitempty"`                                                                                               // RXE-11
	NumberOfRefills                                         *NM   `hl7:"false,Number Of Refills" json:"number_of_refills,omitempty"`                                                                                         // RXE-12
	OrderingProviderSDEANumber                              []XCN `hl7:"false,Ordering Provider'S DEA Number" json:"ordering_provider_sdea_number,omitempty"`                                                                // RXE-13
	PharmacistTreatmentSupplierSVerifierID                  []XCN `hl7:"false,Pharmacist/Treatment Supplier'S Verifier ID" json:"pharmacist_treatment_supplier_s_verifier_id,omitempty"`                                     // RXE-14
	PrescriptionNumber                                      *ST   `hl7:"false,Prescription Number" json:"prescription_number,omitempty"`                                                                                     // RXE-15
	NumberOfRefillsRemaining                                *NM   `hl7:"false,Number Of Refills Remaining" json:"number_of_refills_remaining,omitempty"`                                                                     // RXE-16
	NumberOfRefillsDosesDispensed                           *NM   `hl7:"false,Number Of Refills/Doses Dispensed" json:"number_of_refills_doses_dispensed,omitempty"`                                                         // RXE-17
	DTOfMostRecentRefillOrDoseDispensed                     *TS   `hl7:"false,D/T Of Most Recent Refill Or Dose Dispensed" json:"dt_of_most_recent_refill_or_dose_dispensed,omitempty"`                                      // RXE-18
	TotalDailyDose                                          *CQ   `hl7:"false,Total Daily Dose" json:"total_daily_dose,omitempty"`                                                                                           // RXE-19
	NeedsHumanReview                                        *ID   `hl7:"false,Needs Human Review" json:"needs_human_review,omitempty"`                                                                                       // RXE-20
	PharmacyTreatmentSupplierSSpecialDispensingInstructions []CE  `hl7:"false,Pharmacy/Treatment Supplier'S Special Dispensing Instructions" json:"pharmacy_treatment_supplier_s_special_dispensing_instructions,omitempty"` // RXE-21
	GivePerTimeUnit                                         *ST   `hl7:"false,Give Per (Time Unit)" json:"give_per_time_unit,omitempty"`                                                                                     // RXE-22
	GiveRateAmount                                          *ST   `hl7:"false,Give Rate Amount" json:"give_rate_amount,omitempty"`                                                                                           // RXE-23
	GiveRateUnits                                           *CE   `hl7:"false,Give Rate Units" json:"give_rate_units,omitempty"`                                                                                             // RXE-24
	GiveStrength                                            *NM   `hl7:"false,Give Strength" json:"give_strength,omitempty"`                                                                                                 // RXE-25
	GiveStrengthUnits                                       *CE   `hl7:"false,Give Strength Units" json:"give_strength_units,omitempty"`                                                                                     // RXE-26
	GiveIndication                                          []CE  `hl7:"false,Give Indication" json:"give_indication,omitempty"`                                                                                             // RXE-27
	DispensePackageSize                                     *NM   `hl7:"false,Dispense Package Size" json:"dispense_package_size,omitempty"`                                                                                 // RXE-28
	DispensePackageSizeUnit                                 *CE   `hl7:"false,Dispense Package Size Unit" json:"dispense_package_size_unit,omitempty"`                                                                       // RXE-29
	DispensePackageMethod                                   *ID   `hl7:"false,Dispense Package Method" json:"dispense_package_method,omitempty"`                                                                             // RXE-30
	SupplementaryCode                                       []CE  `hl7:"false,Supplementary Code" json:"supplementary_code,omitempty"`                                                                                       // RXE-31
	OriginalOrderDateTime                                   *TS   `hl7:"false,Original Order Date/Time" json:"original_order_date_time,omitempty"`                                                                           // RXE-32
	GiveDrugStrengthVolume                                  *NM   `hl7:"false,Give Drug Strength Volume" json:"give_drug_strength_volume,omitempty"`                                                                         // RXE-33
	GiveDrugStrengthVolumeUnits                             *CWE  `hl7:"false,Give Drug Strength Volume Units" json:"give_drug_strength_volume_units,omitempty"`                                                             // RXE-34
	ControlledSubstanceSchedule                             *CWE  `hl7:"false,Controlled Substance Schedule" json:"controlled_substance_schedule,omitempty"`                                                                 // RXE-35
	FormularyStatus                                         *ID   `hl7:"false,Formulary Status" json:"formulary_status,omitempty"`                                                                                           // RXE-36
	PharmaceuticalSubstanceAlternative                      []CWE `hl7:"false,Pharmaceutical Substance Alternative" json:"pharmaceutical_substance_alternative,omitempty"`                                                   // RXE-37
	PharmacyOfMostRecentFill                                *CWE  `hl7:"false,Pharmacy Of Most Recent Fill" json:"pharmacy_of_most_recent_fill,omitempty"`                                                                   // RXE-38
	InitialDispenseAmount                                   *NM   `hl7:"false,Initial Dispense Amount" json:"initial_dispense_amount,omitempty"`                                                                             // RXE-39
	DispensingPharmacy                                      *CWE  `hl7:"false,Dispensing Pharmacy" json:"dispensing_pharmacy,omitempty"`                                                                                     // RXE-40
	DispensingPharmacyAddress                               *XAD  `hl7:"false,Dispensing Pharmacy Address" json:"dispensing_pharmacy_address,omitempty"`                                                                     // RXE-41
	DeliverToPatientLocation                                *PL   `hl7:"false,Deliver-To Patient Location" json:"deliver_to_patient_location,omitempty"`                                                                     // RXE-42
	DeliverToAddress                                        *XAD  `hl7:"false,Deliver-To Address" json:"deliver_to_address,omitempty"`                                                                                       // RXE-43
	PharmacyOrderType                                       *ID   `hl7:"false,Pharmacy Order Type" json:"pharmacy_order_type,omitempty"`                                                                                     // RXE-44
}

func (s *RXE) SegmentName() string {
	return "RXE"
}

//  RXG represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RXG struct {
	GiveSubIDCounter                                            *NM  `hl7:"true,Give Sub-ID Counter" json:"give_sub_id_counter,omitempty"`                                                                                              // RXG-1
	DispenseSubIDCounter                                        *NM  `hl7:"false,Dispense Sub-ID Counter" json:"dispense_sub_id_counter,omitempty"`                                                                                     // RXG-2
	QuantityTiming                                              *TQ  `hl7:"false,Quantity/Timing" json:"quantity_timing,omitempty"`                                                                                                     // RXG-3
	GiveCode                                                    *CE  `hl7:"true,Give Code" json:"give_code,omitempty"`                                                                                                                  // RXG-4
	GiveAmountMinimum                                           *NM  `hl7:"true,Give Amount - Minimum" json:"give_amount_minimum,omitempty"`                                                                                            // RXG-5
	GiveAmountMaximum                                           *NM  `hl7:"false,Give Amount - Maximum" json:"give_amount_maximum,omitempty"`                                                                                           // RXG-6
	GiveUnits                                                   *CE  `hl7:"true,Give Units" json:"give_units,omitempty"`                                                                                                                // RXG-7
	GiveDosageForm                                              *CE  `hl7:"false,Give Dosage Form" json:"give_dosage_form,omitempty"`                                                                                                   // RXG-8
	AdministrationNotes                                         []CE `hl7:"false,Administration Notes" json:"administration_notes,omitempty"`                                                                                           // RXG-9
	SubstitutionStatus                                          *ID  `hl7:"false,Substitution Status" json:"substitution_status,omitempty"`                                                                                             // RXG-10
	DispenseToLocation                                          *LA2 `hl7:"false,Dispense-To Location" json:"dispense_to_location,omitempty"`                                                                                           // RXG-11
	NeedsHumanReview                                            *ID  `hl7:"false,Needs Human Review" json:"needs_human_review,omitempty"`                                                                                               // RXG-12
	PharmacyTreatmentSupplierSSpecialAdministrationInstructions []CE `hl7:"false,Pharmacy/Treatment Supplier'S Special Administration Instructions" json:"pharmacy_treatment_supplier_s_special_administration_instructions,omitempty"` // RXG-13
	GivePerTimeUnit                                             *ST  `hl7:"false,Give Per (Time Unit)" json:"give_per_time_unit,omitempty"`                                                                                             // RXG-14
	GiveRateAmount                                              *ST  `hl7:"false,Give Rate Amount" json:"give_rate_amount,omitempty"`                                                                                                   // RXG-15
	GiveRateUnits                                               *CE  `hl7:"false,Give Rate Units" json:"give_rate_units,omitempty"`                                                                                                     // RXG-16
	GiveStrength                                                *NM  `hl7:"false,Give Strength" json:"give_strength,omitempty"`                                                                                                         // RXG-17
	GiveStrengthUnits                                           *CE  `hl7:"false,Give Strength Units" json:"give_strength_units,omitempty"`                                                                                             // RXG-18
	SubstanceLotNumber                                          []ST `hl7:"false,Substance Lot Number" json:"substance_lot_number,omitempty"`                                                                                           // RXG-19
	SubstanceExpirationDate                                     []TS `hl7:"false,Substance Expiration Date" json:"substance_expiration_date,omitempty"`                                                                                 // RXG-20
	SubstanceManufacturerName                                   []CE `hl7:"false,Substance Manufacturer Name" json:"substance_manufacturer_name,omitempty"`                                                                             // RXG-21
	Indication                                                  []CE `hl7:"false,Indication" json:"indication,omitempty"`                                                                                                               // RXG-22
	GiveDrugStrengthVolume                                      *NM  `hl7:"false,Give Drug Strength Volume" json:"give_drug_strength_volume,omitempty"`                                                                                 // RXG-23
	GiveDrugStrengthVolumeUnits                                 *CWE `hl7:"false,Give Drug Strength Volume Units" json:"give_drug_strength_volume_units,omitempty"`                                                                     // RXG-24
	GiveBarcodeIdentifier                                       *CWE `hl7:"false,Give Barcode Identifier" json:"give_barcode_identifier,omitempty"`                                                                                     // RXG-25
	PharmacyOrderType                                           *ID  `hl7:"false,Pharmacy Order Type" json:"pharmacy_order_type,omitempty"`                                                                                             // RXG-26
}

func (s *RXG) SegmentName() string {
	return "RXG"
}

//  RXO represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RXO struct {
	RequestedGiveCode                      *CE   `hl7:"false,Requested Give Code" json:"requested_give_code,omitempty"`                                                 // RXO-1
	RequestedGiveAmountMinimum             *NM   `hl7:"false,Requested Give Amount - Minimum" json:"requested_give_amount_minimum,omitempty"`                           // RXO-2
	RequestedGiveAmountMaximum             *NM   `hl7:"false,Requested Give Amount - Maximum" json:"requested_give_amount_maximum,omitempty"`                           // RXO-3
	RequestedGiveUnits                     *CE   `hl7:"false,Requested Give Units" json:"requested_give_units,omitempty"`                                               // RXO-4
	RequestedDosageForm                    *CE   `hl7:"false,Requested Dosage Form" json:"requested_dosage_form,omitempty"`                                             // RXO-5
	ProviderSPharmacyTreatmentInstructions []CE  `hl7:"false,Provider'S Pharmacy/Treatment Instructions" json:"provider_s_pharmacy_treatment_instructions,omitempty"`   // RXO-6
	ProviderSAdministrationInstructions    []CE  `hl7:"false,Provider'S Administration Instructions" json:"provider_s_administration_instructions,omitempty"`           // RXO-7
	DeliverToLocation                      *LA1  `hl7:"false,Deliver-To Location" json:"deliver_to_location,omitempty"`                                                 // RXO-8
	AllowSubstitutions                     *ID   `hl7:"false,Allow Substitutions" json:"allow_substitutions,omitempty"`                                                 // RXO-9
	RequestedDispenseCode                  *CE   `hl7:"false,Requested Dispense Code" json:"requested_dispense_code,omitempty"`                                         // RXO-10
	RequestedDispenseAmount                *NM   `hl7:"false,Requested Dispense Amount" json:"requested_dispense_amount,omitempty"`                                     // RXO-11
	RequestedDispenseUnits                 *CE   `hl7:"false,Requested Dispense Units" json:"requested_dispense_units,omitempty"`                                       // RXO-12
	NumberOfRefills                        *NM   `hl7:"false,Number Of Refills" json:"number_of_refills,omitempty"`                                                     // RXO-13
	OrderingProviderSDEANumber             []XCN `hl7:"false,Ordering Provider'S DEA Number" json:"ordering_provider_sdea_number,omitempty"`                            // RXO-14
	PharmacistTreatmentSupplierSVerifierID []XCN `hl7:"false,Pharmacist/Treatment Supplier'S Verifier ID" json:"pharmacist_treatment_supplier_s_verifier_id,omitempty"` // RXO-15
	NeedsHumanReview                       *ID   `hl7:"false,Needs Human Review" json:"needs_human_review,omitempty"`                                                   // RXO-16
	RequestedGivePerTimeUnit               *ST   `hl7:"false,Requested Give Per (Time Unit)" json:"requested_give_per_time_unit,omitempty"`                             // RXO-17
	RequestedGiveStrength                  *NM   `hl7:"false,Requested Give Strength" json:"requested_give_strength,omitempty"`                                         // RXO-18
	RequestedGiveStrengthUnits             *CE   `hl7:"false,Requested Give Strength Units" json:"requested_give_strength_units,omitempty"`                             // RXO-19
	Indication                             []CE  `hl7:"false,Indication" json:"indication,omitempty"`                                                                   // RXO-20
	RequestedGiveRateAmount                *ST   `hl7:"false,Requested Give Rate Amount" json:"requested_give_rate_amount,omitempty"`                                   // RXO-21
	RequestedGiveRateUnits                 *CE   `hl7:"false,Requested Give Rate Units" json:"requested_give_rate_units,omitempty"`                                     // RXO-22
	TotalDailyDose                         *CQ   `hl7:"false,Total Daily Dose" json:"total_daily_dose,omitempty"`                                                       // RXO-23
	SupplementaryCode                      []CE  `hl7:"false,Supplementary Code" json:"supplementary_code,omitempty"`                                                   // RXO-24
	RequestedDrugStrengthVolume            *NM   `hl7:"false,Requested Drug Strength Volume" json:"requested_drug_strength_volume,omitempty"`                           // RXO-25
	RequestedDrugStrengthVolumeUnits       *CWE  `hl7:"false,Requested Drug Strength Volume Units" json:"requested_drug_strength_volume_units,omitempty"`               // RXO-26
	PharmacyOrderType                      *ID   `hl7:"false,Pharmacy Order Type" json:"pharmacy_order_type,omitempty"`                                                 // RXO-27
	DispensingInterval                     *NM   `hl7:"false,Dispensing Interval" json:"dispensing_interval,omitempty"`                                                 // RXO-28
}

func (s *RXO) SegmentName() string {
	return "RXO"
}

//  RXR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type RXR struct {
	Route                      *CE  `hl7:"true,Route" json:"route,omitempty"`                                                // RXR-1
	AdministrationSite         *CWE `hl7:"false,Administration Site" json:"administration_site,omitempty"`                   // RXR-2
	AdministrationDevice       *CE  `hl7:"false,Administration Device" json:"administration_device,omitempty"`               // RXR-3
	AdministrationMethod       *CWE `hl7:"false,Administration Method" json:"administration_method,omitempty"`               // RXR-4
	RoutingInstruction         *CE  `hl7:"false,Routing Instruction" json:"routing_instruction,omitempty"`                   // RXR-5
	AdministrationSiteModifier *CWE `hl7:"false,Administration Site Modifier" json:"administration_site_modifier,omitempty"` // RXR-6
}

func (s *RXR) SegmentName() string {
	return "RXR"
}

//  SAC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type SAC struct {
	ExternalAccessionIdentifier       *EI   `hl7:"false,External Accession Identifier" json:"external_accession_identifier,omitempty"`                 // SAC-1
	AccessionIdentifier               *EI   `hl7:"false,Accession Identifier" json:"accession_identifier,omitempty"`                                   // SAC-2
	ContainerIdentifier               *EI   `hl7:"false,Container Identifier" json:"container_identifier,omitempty"`                                   // SAC-3
	PrimaryParentContainerIdentifier  *EI   `hl7:"false,Primary (Parent) Container Identifier" json:"primary_parent_container_identifier,omitempty"`   // SAC-4
	EquipmentContainerIdentifier      *EI   `hl7:"false,Equipment Container Identifier" json:"equipment_container_identifier,omitempty"`               // SAC-5
	SpecimenSource                    *SPS  `hl7:"false,Specimen Source" json:"specimen_source,omitempty"`                                             // SAC-6
	RegistrationDateTime              *TS   `hl7:"false,Registration Date/Time" json:"registration_date_time,omitempty"`                               // SAC-7
	ContainerStatus                   *CE   `hl7:"false,Container Status" json:"container_status,omitempty"`                                           // SAC-8
	CarrierType                       *CE   `hl7:"false,Carrier Type" json:"carrier_type,omitempty"`                                                   // SAC-9
	CarrierIdentifier                 *EI   `hl7:"false,Carrier Identifier" json:"carrier_identifier,omitempty"`                                       // SAC-10
	PositionInCarrier                 *NA   `hl7:"false,Position In Carrier" json:"position_in_carrier,omitempty"`                                     // SAC-11
	TrayTypeSAC                       *CE   `hl7:"false,Tray Type - SAC" json:"tray_type_sac,omitempty"`                                               // SAC-12
	TrayIdentifier                    *EI   `hl7:"false,Tray Identifier" json:"tray_identifier,omitempty"`                                             // SAC-13
	PositionInTray                    *NA   `hl7:"false,Position In Tray" json:"position_in_tray,omitempty"`                                           // SAC-14
	Location                          []CE  `hl7:"false,Location" json:"location,omitempty"`                                                           // SAC-15
	ContainerHeight                   *NM   `hl7:"false,Container Height" json:"container_height,omitempty"`                                           // SAC-16
	ContainerDiameter                 *NM   `hl7:"false,Container Diameter" json:"container_diameter,omitempty"`                                       // SAC-17
	BarrierDelta                      *NM   `hl7:"false,Barrier Delta" json:"barrier_delta,omitempty"`                                                 // SAC-18
	BottomDelta                       *NM   `hl7:"false,Bottom Delta" json:"bottom_delta,omitempty"`                                                   // SAC-19
	ContainerHeightDiameterDeltaUnits *CE   `hl7:"false,Container Height/Diameter/Delta Units" json:"container_height_diameter_delta_units,omitempty"` // SAC-20
	ContainerVolume                   *NM   `hl7:"false,Container Volume" json:"container_volume,omitempty"`                                           // SAC-21
	AvailableSpecimenVolume           *NM   `hl7:"false,Available Specimen Volume" json:"available_specimen_volume,omitempty"`                         // SAC-22
	InitialSpecimenVolume             *NM   `hl7:"false,Initial Specimen Volume" json:"initial_specimen_volume,omitempty"`                             // SAC-23
	VolumeUnits                       *CE   `hl7:"false,Volume Units" json:"volume_units,omitempty"`                                                   // SAC-24
	SeparatorType                     *CE   `hl7:"false,Separator Type" json:"separator_type,omitempty"`                                               // SAC-25
	CapType                           *CE   `hl7:"false,Cap Type" json:"cap_type,omitempty"`                                                           // SAC-26
	Additive                          []CWE `hl7:"false,Additive" json:"additive,omitempty"`                                                           // SAC-27
	SpecimenComponent                 *CE   `hl7:"false,Specimen Component" json:"specimen_component,omitempty"`                                       // SAC-28
	DilutionFactor                    *SN   `hl7:"false,Dilution Factor" json:"dilution_factor,omitempty"`                                             // SAC-29
	Treatment                         *CE   `hl7:"false,Treatment" json:"treatment,omitempty"`                                                         // SAC-30
	Temperature                       *SN   `hl7:"false,Temperature" json:"temperature,omitempty"`                                                     // SAC-31
	HemolysisIndex                    *NM   `hl7:"false,Hemolysis Index" json:"hemolysis_index,omitempty"`                                             // SAC-32
	HemolysisIndexUnits               *CE   `hl7:"false,Hemolysis Index Units" json:"hemolysis_index_units,omitempty"`                                 // SAC-33
	LipemiaIndex                      *NM   `hl7:"false,Lipemia Index" json:"lipemia_index,omitempty"`                                                 // SAC-34
	LipemiaIndexUnits                 *CE   `hl7:"false,Lipemia Index Units" json:"lipemia_index_units,omitempty"`                                     // SAC-35
	IcterusIndex                      *NM   `hl7:"false,Icterus Index" json:"icterus_index,omitempty"`                                                 // SAC-36
	IcterusIndexUnits                 *CE   `hl7:"false,Icterus Index Units" json:"icterus_index_units,omitempty"`                                     // SAC-37
	FibrinIndex                       *NM   `hl7:"false,Fibrin Index" json:"fibrin_index,omitempty"`                                                   // SAC-38
	FibrinIndexUnits                  *CE   `hl7:"false,Fibrin Index Units" json:"fibrin_index_units,omitempty"`                                       // SAC-39
	SystemInducedContaminants         []CE  `hl7:"false,System Induced Contaminants" json:"system_induced_contaminants,omitempty"`                     // SAC-40
	DrugInterference                  []CE  `hl7:"false,Drug Interference" json:"drug_interference,omitempty"`                                         // SAC-41
	ArtificialBlood                   *CE   `hl7:"false,Artificial Blood" json:"artificial_blood,omitempty"`                                           // SAC-42
	SpecialHandlingCode               []CWE `hl7:"false,Special Handling Code" json:"special_handling_code,omitempty"`                                 // SAC-43
	OtherEnvironmentalFactors         []CE  `hl7:"false,Other Environmental Factors" json:"other_environmental_factors,omitempty"`                     // SAC-44
}

func (s *SAC) SegmentName() string {
	return "SAC"
}

//  SCH represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type SCH struct {
	PlacerAppointmentID       *EI   `hl7:"false,Placer Appointment ID" json:"placer_appointment_id,omitempty"`               // SCH-1
	FillerAppointmentID       *EI   `hl7:"false,Filler Appointment ID" json:"filler_appointment_id,omitempty"`               // SCH-2
	OccurrenceNumber          *NM   `hl7:"false,Occurrence Number" json:"occurrence_number,omitempty"`                       // SCH-3
	PlacerGroupNumber         *EI   `hl7:"false,Placer Group Number" json:"placer_group_number,omitempty"`                   // SCH-4
	ScheduleID                *CE   `hl7:"false,Schedule ID" json:"schedule_id,omitempty"`                                   // SCH-5
	EventReason               *CE   `hl7:"true,Event Reason" json:"event_reason,omitempty"`                                  // SCH-6
	AppointmentReason         *CE   `hl7:"false,Appointment Reason" json:"appointment_reason,omitempty"`                     // SCH-7
	AppointmentType           *CE   `hl7:"false,Appointment Type" json:"appointment_type,omitempty"`                         // SCH-8
	AppointmentDuration       *NM   `hl7:"false,Appointment Duration" json:"appointment_duration,omitempty"`                 // SCH-9
	AppointmentDurationUnits  *CE   `hl7:"false,Appointment Duration Units" json:"appointment_duration_units,omitempty"`     // SCH-10
	AppointmentTimingQuantity []TQ  `hl7:"false,Appointment Timing Quantity" json:"appointment_timing_quantity,omitempty"`   // SCH-11
	PlacerContactPerson       []XCN `hl7:"false,Placer Contact Person" json:"placer_contact_person,omitempty"`               // SCH-12
	PlacerContactPhoneNumber  *XTN  `hl7:"false,Placer Contact Phone Number" json:"placer_contact_phone_number,omitempty"`   // SCH-13
	PlacerContactAddress      []XAD `hl7:"false,Placer Contact Address" json:"placer_contact_address,omitempty"`             // SCH-14
	PlacerContactLocation     *PL   `hl7:"false,Placer Contact Location" json:"placer_contact_location,omitempty"`           // SCH-15
	FillerContactPerson       []XCN `hl7:"true,Filler Contact Person" json:"filler_contact_person,omitempty"`                // SCH-16
	FillerContactPhoneNumber  *XTN  `hl7:"false,Filler Contact Phone Number" json:"filler_contact_phone_number,omitempty"`   // SCH-17
	FillerContactAddress      []XAD `hl7:"false,Filler Contact Address" json:"filler_contact_address,omitempty"`             // SCH-18
	FillerContactLocation     *PL   `hl7:"false,Filler Contact Location" json:"filler_contact_location,omitempty"`           // SCH-19
	EnteredByPerson           []XCN `hl7:"true,Entered By Person" json:"entered_by_person,omitempty"`                        // SCH-20
	EnteredByPhoneNumber      []XTN `hl7:"false,Entered By Phone Number" json:"entered_by_phone_number,omitempty"`           // SCH-21
	EnteredByLocation         *PL   `hl7:"false,Entered By Location" json:"entered_by_location,omitempty"`                   // SCH-22
	ParentPlacerAppointmentID *EI   `hl7:"false,Parent Placer Appointment ID" json:"parent_placer_appointment_id,omitempty"` // SCH-23
	ParentFillerAppointmentID *EI   `hl7:"false,Parent Filler Appointment ID" json:"parent_filler_appointment_id,omitempty"` // SCH-24
	FillerStatusCode          *CE   `hl7:"false,Filler Status Code" json:"filler_status_code,omitempty"`                     // SCH-25
	PlacerOrderNumber         []EI  `hl7:"false,Placer Order Number" json:"placer_order_number,omitempty"`                   // SCH-26
	FillerOrderNumber         []EI  `hl7:"false,Filler Order Number" json:"filler_order_number,omitempty"`                   // SCH-27
}

func (s *SCH) SegmentName() string {
	return "SCH"
}

//  SFT represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type SFT struct {
	SoftwareVendorOrganization              *XON `hl7:"true,Software Vendor Organization" json:"software_vendor_organization,omitempty"`                                 // SFT-1
	SoftwareCertifiedVersionOrReleaseNumber *ST  `hl7:"true,Software Certified Version Or Release Number" json:"software_certified_version_or_release_number,omitempty"` // SFT-2
	SoftwareProductName                     *ST  `hl7:"true,Software Product Name" json:"software_product_name,omitempty"`                                               // SFT-3
	SoftwareBinaryID                        *ST  `hl7:"true,Software Binary ID" json:"software_binary_id,omitempty"`                                                     // SFT-4
	SoftwareProductInformation              *TX  `hl7:"false,Software Product Information" json:"software_product_information,omitempty"`                                // SFT-5
	SoftwareInstallDate                     *TS  `hl7:"false,Software Install Date" json:"software_install_date,omitempty"`                                              // SFT-6
}

func (s *SFT) SegmentName() string {
	return "SFT"
}

//  SID represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type SID struct {
	ApplicationMethodIdentifier     *CE `hl7:"false,Application / Method Identifier" json:"application_method_identifier,omitempty"`       // SID-1
	SubstanceLotNumber              *ST `hl7:"false,Substance Lot Number" json:"substance_lot_number,omitempty"`                           // SID-2
	SubstanceContainerIdentifier    *ST `hl7:"false,Substance Container Identifier" json:"substance_container_identifier,omitempty"`       // SID-3
	SubstanceManufacturerIdentifier *CE `hl7:"false,Substance Manufacturer Identifier" json:"substance_manufacturer_identifier,omitempty"` // SID-4
}

func (s *SID) SegmentName() string {
	return "SID"
}

//  SPM represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type SPM struct {
	SetIDSPM                   *SI   `hl7:"false,Set ID - SPM" json:"set_idspm,omitempty"`                                      // SPM-1
	SpecimenID                 *EIP  `hl7:"false,Specimen ID" json:"specimen_id,omitempty"`                                     // SPM-2
	SpecimenParentIDs          []EIP `hl7:"false,Specimen Parent IDs" json:"specimen_parent_i_ds,omitempty"`                    // SPM-3
	SpecimenType               *CWE  `hl7:"true,Specimen Type" json:"specimen_type,omitempty"`                                  // SPM-4
	SpecimenTypeModifier       []CWE `hl7:"false,Specimen Type Modifier" json:"specimen_type_modifier,omitempty"`               // SPM-5
	SpecimenAdditives          []CWE `hl7:"false,Specimen Additives" json:"specimen_additives,omitempty"`                       // SPM-6
	SpecimenCollectionMethod   *CWE  `hl7:"false,Specimen Collection Method" json:"specimen_collection_method,omitempty"`       // SPM-7
	SpecimenSourceSite         *CWE  `hl7:"false,Specimen Source Site" json:"specimen_source_site,omitempty"`                   // SPM-8
	SpecimenSourceSiteModifier []CWE `hl7:"false,Specimen Source Site Modifier" json:"specimen_source_site_modifier,omitempty"` // SPM-9
	SpecimenCollectionSite     *CWE  `hl7:"false,Specimen Collection Site" json:"specimen_collection_site,omitempty"`           // SPM-10
	SpecimenRole               []CWE `hl7:"false,Specimen Role" json:"specimen_role,omitempty"`                                 // SPM-11
	SpecimenCollectionAmount   *CQ   `hl7:"false,Specimen Collection Amount" json:"specimen_collection_amount,omitempty"`       // SPM-12
	GroupedSpecimenCount       *NM   `hl7:"false,Grouped Specimen Count" json:"grouped_specimen_count,omitempty"`               // SPM-13
	SpecimenDescription        []ST  `hl7:"false,Specimen Description" json:"specimen_description,omitempty"`                   // SPM-14
	SpecimenHandlingCode       []CWE `hl7:"false,Specimen Handling Code" json:"specimen_handling_code,omitempty"`               // SPM-15
	SpecimenRiskCode           []CWE `hl7:"false,Specimen Risk Code" json:"specimen_risk_code,omitempty"`                       // SPM-16
	SpecimenCollectionDateTime *DR   `hl7:"false,Specimen Collection Date/Time" json:"specimen_collection_date_time,omitempty"` // SPM-17
	SpecimenReceivedDateTime   *TS   `hl7:"false,Specimen Received Date/Time" json:"specimen_received_date_time,omitempty"`     // SPM-18
	SpecimenExpirationDateTime *TS   `hl7:"false,Specimen Expiration Date/Time" json:"specimen_expiration_date_time,omitempty"` // SPM-19
	SpecimenAvailability       *ID   `hl7:"false,Specimen Availability" json:"specimen_availability,omitempty"`                 // SPM-20
	SpecimenRejectReason       []CWE `hl7:"false,Specimen Reject Reason" json:"specimen_reject_reason,omitempty"`               // SPM-21
	SpecimenQuality            *CWE  `hl7:"false,Specimen Quality" json:"specimen_quality,omitempty"`                           // SPM-22
	SpecimenAppropriateness    *CWE  `hl7:"false,Specimen Appropriateness" json:"specimen_appropriateness,omitempty"`           // SPM-23
	SpecimenCondition          []CWE `hl7:"false,Specimen Condition" json:"specimen_condition,omitempty"`                       // SPM-24
	SpecimenCurrentQuantity    *CQ   `hl7:"false,Specimen Current Quantity" json:"specimen_current_quantity,omitempty"`         // SPM-25
	NumberOfSpecimenContainers *NM   `hl7:"false,Number Of Specimen Containers" json:"number_of_specimen_containers,omitempty"` // SPM-26
	ContainerType              *CWE  `hl7:"false,Container Type" json:"container_type,omitempty"`                               // SPM-27
	ContainerCondition         *CWE  `hl7:"false,Container Condition" json:"container_condition,omitempty"`                     // SPM-28
	SpecimenChildRole          *CWE  `hl7:"false,Specimen Child Role" json:"specimen_child_role,omitempty"`                     // SPM-29
}

func (s *SPM) SegmentName() string {
	return "SPM"
}

//  SPR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type SPR struct {
	QueryTag                *ST   `hl7:"false,Query Tag" json:"query_tag,omitempty"`                                  // SPR-1
	QueryResponseFormatCode *ID   `hl7:"true,Query/Response Format Code" json:"query_response_format_code,omitempty"` // SPR-2
	StoredProcedureName     *CE   `hl7:"true,Stored Procedure Name" json:"stored_procedure_name,omitempty"`           // SPR-3
	InputParameterList      []QIP `hl7:"false,Input Parameter List" json:"input_parameter_list,omitempty"`            // SPR-4
}

func (s *SPR) SegmentName() string {
	return "SPR"
}

//  STF represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type STF struct {
	PrimaryKeyValueSTF              *CE   `hl7:"false,Primary Key Value - STF" json:"primary_key_value_stf,omitempty"`                         // STF-1
	StaffIdentifierList             []CX  `hl7:"false,Staff Identifier List" json:"staff_identifier_list,omitempty"`                           // STF-2
	StaffName                       []XPN `hl7:"false,Staff Name" json:"staff_name,omitempty"`                                                 // STF-3
	StaffType                       []IS  `hl7:"false,Staff Type" json:"staff_type,omitempty"`                                                 // STF-4
	AdministrativeSex               *IS   `hl7:"false,Administrative Sex" json:"administrative_sex,omitempty"`                                 // STF-5
	DateTimeOfBirth                 *TS   `hl7:"false,Date/Time Of Birth" json:"date_time_of_birth,omitempty"`                                 // STF-6
	ActiveInactiveFlag              *ID   `hl7:"false,Active/Inactive Flag" json:"active_inactive_flag,omitempty"`                             // STF-7
	Department                      []CE  `hl7:"false,Department" json:"department,omitempty"`                                                 // STF-8
	HospitalServiceSTF              []CE  `hl7:"false,Hospital Service - STF" json:"hospital_service_stf,omitempty"`                           // STF-9
	Phone                           []XTN `hl7:"false,Phone" json:"phone,omitempty"`                                                           // STF-10
	OfficeHomeAddressBirthplace     []XAD `hl7:"false,Office/Home Address/Birthplace" json:"office_home_address_birthplace,omitempty"`         // STF-11
	InstitutionActivationDate       []DIN `hl7:"false,Institution Activation Date" json:"institution_activation_date,omitempty"`               // STF-12
	InstitutionInactivationDate     []DIN `hl7:"false,Institution Inactivation Date" json:"institution_inactivation_date,omitempty"`           // STF-13
	BackupPersonID                  []CE  `hl7:"false,Backup Person ID" json:"backup_person_id,omitempty"`                                     // STF-14
	EMailAddress                    []ST  `hl7:"false,E-Mail Address" json:"e_mail_address,omitempty"`                                         // STF-15
	PreferredMethodOfContact        *CE   `hl7:"false,Preferred Method Of Contact" json:"preferred_method_of_contact,omitempty"`               // STF-16
	MaritalStatus                   *CE   `hl7:"false,Marital Status" json:"marital_status,omitempty"`                                         // STF-17
	JobTitle                        *ST   `hl7:"false,Job Title" json:"job_title,omitempty"`                                                   // STF-18
	JobCodeClass                    *JCC  `hl7:"false,Job Code/Class" json:"job_code_class,omitempty"`                                         // STF-19
	EmploymentStatusCode            *CE   `hl7:"false,Employment Status Code" json:"employment_status_code,omitempty"`                         // STF-20
	AdditionalInsuredOnAuto         *ID   `hl7:"false,Additional Insured On Auto" json:"additional_insured_on_auto,omitempty"`                 // STF-21
	DriverSLicenseNumberStaff       *DLN  `hl7:"false,Driver'S License Number - Staff" json:"driver_s_license_number_staff,omitempty"`         // STF-22
	CopyAutoIns                     *ID   `hl7:"false,Copy Auto Ins" json:"copy_auto_ins,omitempty"`                                           // STF-23
	AutoInsExpires                  *DT   `hl7:"false,Auto Ins. Expires" json:"auto_ins_expires,omitempty"`                                    // STF-24
	DateLastDMVReview               *DT   `hl7:"false,Date Last DMV Review" json:"date_last_dmv_review,omitempty"`                             // STF-25
	DateNextDMVReview               *DT   `hl7:"false,Date Next DMV Review" json:"date_next_dmv_review,omitempty"`                             // STF-26
	Race                            *CE   `hl7:"false,Race" json:"race,omitempty"`                                                             // STF-27
	EthnicGroup                     *CE   `hl7:"false,Ethnic Group" json:"ethnic_group,omitempty"`                                             // STF-28
	ReActivationApprovalIndicator   *ID   `hl7:"false,Re-Activation Approval Indicator" json:"re_activation_approval_indicator,omitempty"`     // STF-29
	Citizenship                     []CE  `hl7:"false,Citizenship" json:"citizenship,omitempty"`                                               // STF-30
	DeathDateAndTime                *TS   `hl7:"false,Death Date And Time" json:"death_date_and_time,omitempty"`                               // STF-31
	DeathIndicator                  *ID   `hl7:"false,Death Indicator" json:"death_indicator,omitempty"`                                       // STF-32
	InstitutionRelationshipTypeCode *CWE  `hl7:"false,Institution Relationship Type Code" json:"institution_relationship_type_code,omitempty"` // STF-33
	InstitutionRelationshipPeriod   *DR   `hl7:"false,Institution Relationship Period" json:"institution_relationship_period,omitempty"`       // STF-34
	ExpectedReturnDate              *DT   `hl7:"false,Expected Return Date" json:"expected_return_date,omitempty"`                             // STF-35
	CostCenterCode                  []CWE `hl7:"false,Cost Center Code" json:"cost_center_code,omitempty"`                                     // STF-36
	GenericClassificationIndicator  *ID   `hl7:"false,Generic Classification Indicator" json:"generic_classification_indicator,omitempty"`     // STF-37
	InactiveReasonCode              *CWE  `hl7:"false,Inactive Reason Code" json:"inactive_reason_code,omitempty"`                             // STF-38
}

func (s *STF) SegmentName() string {
	return "STF"
}

//  TCC represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type TCC struct {
	UniversalServiceIdentifier            *CE  `hl7:"true,Universal Service Identifier" json:"universal_service_identifier,omitempty"`                              // TCC-1
	TestApplicationIdentifier             *EI  `hl7:"true,Test Application Identifier" json:"test_application_identifier,omitempty"`                                // TCC-2
	SpecimenSource                        *SPS `hl7:"false,Specimen Source" json:"specimen_source,omitempty"`                                                       // TCC-3
	AutoDilutionFactorDefault             *SN  `hl7:"false,Auto-Dilution Factor Default" json:"auto_dilution_factor_default,omitempty"`                             // TCC-4
	RerunDilutionFactorDefault            *SN  `hl7:"false,Rerun Dilution Factor Default" json:"rerun_dilution_factor_default,omitempty"`                           // TCC-5
	PreDilutionFactorDefault              *SN  `hl7:"false,Pre-Dilution Factor Default" json:"pre_dilution_factor_default,omitempty"`                               // TCC-6
	EndogenousContentOfPreDilutionDiluent *SN  `hl7:"false,Endogenous Content Of Pre-Dilution Diluent" json:"endogenous_content_of_pre_dilution_diluent,omitempty"` // TCC-7
	InventoryLimitsWarningLevel           *NM  `hl7:"false,Inventory Limits Warning Level" json:"inventory_limits_warning_level,omitempty"`                         // TCC-8
	AutomaticRerunAllowed                 *ID  `hl7:"false,Automatic Rerun Allowed" json:"automatic_rerun_allowed,omitempty"`                                       // TCC-9
	AutomaticRepeatAllowed                *ID  `hl7:"false,Automatic Repeat Allowed" json:"automatic_repeat_allowed,omitempty"`                                     // TCC-10
	AutomaticReflexAllowed                *ID  `hl7:"false,Automatic Reflex Allowed" json:"automatic_reflex_allowed,omitempty"`                                     // TCC-11
	EquipmentDynamicRange                 *SN  `hl7:"false,Equipment Dynamic Range" json:"equipment_dynamic_range,omitempty"`                                       // TCC-12
	Units                                 *CE  `hl7:"false,Units" json:"units,omitempty"`                                                                           // TCC-13
	ProcessingType                        *CE  `hl7:"false,Processing Type" json:"processing_type,omitempty"`                                                       // TCC-14
}

func (s *TCC) SegmentName() string {
	return "TCC"
}

//  TCD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type TCD struct {
	UniversalServiceIdentifier            *CE `hl7:"true,Universal Service Identifier" json:"universal_service_identifier,omitempty"`                              // TCD-1
	AutoDilutionFactor                    *SN `hl7:"false,Auto-Dilution Factor" json:"auto_dilution_factor,omitempty"`                                             // TCD-2
	RerunDilutionFactor                   *SN `hl7:"false,Rerun Dilution Factor" json:"rerun_dilution_factor,omitempty"`                                           // TCD-3
	PreDilutionFactor                     *SN `hl7:"false,Pre-Dilution Factor" json:"pre_dilution_factor,omitempty"`                                               // TCD-4
	EndogenousContentOfPreDilutionDiluent *SN `hl7:"false,Endogenous Content Of Pre-Dilution Diluent" json:"endogenous_content_of_pre_dilution_diluent,omitempty"` // TCD-5
	AutomaticRepeatAllowed                *ID `hl7:"false,Automatic Repeat Allowed" json:"automatic_repeat_allowed,omitempty"`                                     // TCD-6
	ReflexAllowed                         *ID `hl7:"false,Reflex Allowed" json:"reflex_allowed,omitempty"`                                                         // TCD-7
	AnalyteRepeatStatus                   *CE `hl7:"false,Analyte Repeat Status" json:"analyte_repeat_status,omitempty"`                                           // TCD-8
}

func (s *TCD) SegmentName() string {
	return "TCD"
}

//  TQ1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type TQ1 struct {
	SetIDTQ1             *SI   `hl7:"false,Set ID - TQ1" json:"set_idtq_1,omitempty"`                         // TQ1-1
	Quantity             *CQ   `hl7:"false,Quantity" json:"quantity,omitempty"`                               // TQ1-2
	RepeatPattern        []RPT `hl7:"false,Repeat Pattern" json:"repeat_pattern,omitempty"`                   // TQ1-3
	ExplicitTime         []TM  `hl7:"false,Explicit Time" json:"explicit_time,omitempty"`                     // TQ1-4
	RelativeTimeAndUnits []CQ  `hl7:"false,Relative Time And Units" json:"relative_time_and_units,omitempty"` // TQ1-5
	ServiceDuration      *CQ   `hl7:"false,Service Duration" json:"service_duration,omitempty"`               // TQ1-6
	StartDateTime        *TS   `hl7:"false,Start Date/Time" json:"start_date_time,omitempty"`                 // TQ1-7
	EndDateTime          *TS   `hl7:"false,End Date/Time" json:"end_date_time,omitempty"`                     // TQ1-8
	Priority             []CWE `hl7:"false,Priority" json:"priority,omitempty"`                               // TQ1-9
	ConditionText        *TX   `hl7:"false,Condition Text" json:"condition_text,omitempty"`                   // TQ1-10
	TextInstruction      *TX   `hl7:"false,Text Instruction" json:"text_instruction,omitempty"`               // TQ1-11
	Conjunction          *ID   `hl7:"false,Conjunction" json:"conjunction,omitempty"`                         // TQ1-12
	OccurrenceDuration   *CQ   `hl7:"false,Occurrence Duration" json:"occurrence_duration,omitempty"`         // TQ1-13
	TotalOccurrenceS     *NM   `hl7:"false,Total Occurrence'S" json:"total_occurrence_s,omitempty"`           // TQ1-14
}

func (s *TQ1) SegmentName() string {
	return "TQ1"
}

//  TQ2 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type TQ2 struct {
	SetIDTQ2                          *SI  `hl7:"false,Set ID - TQ2" json:"set_idtq_2,omitempty"`                                                       // TQ2-1
	SequenceResultsFlag               *ID  `hl7:"false,Sequence/Results Flag" json:"sequence_results_flag,omitempty"`                                   // TQ2-2
	RelatedPlacerNumber               []EI `hl7:"false,Related Placer Number" json:"related_placer_number,omitempty"`                                   // TQ2-3
	RelatedFillerNumber               []EI `hl7:"false,Related Filler Number" json:"related_filler_number,omitempty"`                                   // TQ2-4
	RelatedPlacerGroupNumber          []EI `hl7:"false,Related Placer Group Number" json:"related_placer_group_number,omitempty"`                       // TQ2-5
	SequenceConditionCode             *ID  `hl7:"false,Sequence Condition Code" json:"sequence_condition_code,omitempty"`                               // TQ2-6
	CyclicEntryExitIndicator          *ID  `hl7:"false,Cyclic Entry/Exit Indicator" json:"cyclic_entry_exit_indicator,omitempty"`                       // TQ2-7
	SequenceConditionTimeInterval     *CQ  `hl7:"false,Sequence Condition Time Interval" json:"sequence_condition_time_interval,omitempty"`             // TQ2-8
	CyclicGroupMaximumNumberOfRepeats *NM  `hl7:"false,Cyclic Group Maximum Number Of Repeats" json:"cyclic_group_maximum_number_of_repeats,omitempty"` // TQ2-9
	SpecialServiceRequestRelationship *ID  `hl7:"false,Special Service Request Relationship" json:"special_service_request_relationship,omitempty"`     // TQ2-10
}

func (s *TQ2) SegmentName() string {
	return "TQ2"
}

//  TXA represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type TXA struct {
	SetIDTXA                                 *SI   `hl7:"true,Set ID - TXA" json:"set_idtxa,omitempty"`                                                                           // TXA-1
	DocumentType                             *IS   `hl7:"true,Document Type" json:"document_type,omitempty"`                                                                      // TXA-2
	DocumentContentPresentation              *ID   `hl7:"false,Document Content Presentation" json:"document_content_presentation,omitempty"`                                     // TXA-3
	ActivityDateTime                         *TS   `hl7:"false,Activity Date/Time" json:"activity_date_time,omitempty"`                                                           // TXA-4
	PrimaryActivityProviderCodeName          []XCN `hl7:"false,Primary Activity Provider Code/Name" json:"primary_activity_provider_code_name,omitempty"`                         // TXA-5
	OriginationDateTime                      *TS   `hl7:"false,Origination Date/Time" json:"origination_date_time,omitempty"`                                                     // TXA-6
	TranscriptionDateTime                    *TS   `hl7:"false,Transcription Date/Time" json:"transcription_date_time,omitempty"`                                                 // TXA-7
	EditDateTime                             []TS  `hl7:"false,Edit Date/Time" json:"edit_date_time,omitempty"`                                                                   // TXA-8
	OriginatorCodeName                       []XCN `hl7:"false,Originator Code/Name" json:"originator_code_name,omitempty"`                                                       // TXA-9
	AssignedDocumentAuthenticator            []XCN `hl7:"false,Assigned Document Authenticator" json:"assigned_document_authenticator,omitempty"`                                 // TXA-10
	TranscriptionistCodeName                 []XCN `hl7:"false,Transcriptionist Code/Name" json:"transcriptionist_code_name,omitempty"`                                           // TXA-11
	UniqueDocumentNumber                     *EI   `hl7:"true,Unique Document Number" json:"unique_document_number,omitempty"`                                                    // TXA-12
	ParentDocumentNumber                     *EI   `hl7:"false,Parent Document Number" json:"parent_document_number,omitempty"`                                                   // TXA-13
	PlacerOrderNumber                        []EI  `hl7:"false,Placer Order Number" json:"placer_order_number,omitempty"`                                                         // TXA-14
	FillerOrderNumber                        *EI   `hl7:"false,Filler Order Number" json:"filler_order_number,omitempty"`                                                         // TXA-15
	UniqueDocumentFileName                   *ST   `hl7:"false,Unique Document File Name" json:"unique_document_file_name,omitempty"`                                             // TXA-16
	DocumentCompletionStatus                 *ID   `hl7:"true,Document Completion Status" json:"document_completion_status,omitempty"`                                            // TXA-17
	DocumentConfidentialityStatus            *ID   `hl7:"false,Document Confidentiality Status" json:"document_confidentiality_status,omitempty"`                                 // TXA-18
	DocumentAvailabilityStatus               *ID   `hl7:"false,Document Availability Status" json:"document_availability_status,omitempty"`                                       // TXA-19
	DocumentStorageStatus                    *ID   `hl7:"false,Document Storage Status" json:"document_storage_status,omitempty"`                                                 // TXA-20
	DocumentChangeReason                     *ST   `hl7:"false,Document Change Reason" json:"document_change_reason,omitempty"`                                                   // TXA-21
	AuthenticationPersonTimeStamp            []PPN `hl7:"false,Authentication Person, Time Stamp" json:"authentication_person_time_stamp,omitempty"`                              // TXA-22
	DistributedCopiesCodeAndNameOfRecipients []XCN `hl7:"false,Distributed Copies (Code And Name Of Recipients)" json:"distributed_copies_code_and_name_of_recipients,omitempty"` // TXA-23
}

func (s *TXA) SegmentName() string {
	return "TXA"
}

//  UB1 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type UB1 struct {
	SetIDUB1                  *SI   `hl7:"false,Set ID - UB1" json:"set_idub_1,omitempty"`                                      // UB1-1
	BloodDeductible43         *NM   `hl7:"false,Blood Deductible  (43)" json:"blood_deductible_43,omitempty"`                   // UB1-2
	BloodFurnishedPintsOf40   *NM   `hl7:"false,Blood Furnished-Pints Of (40)" json:"blood_furnished_pints_of_40,omitempty"`    // UB1-3
	BloodReplacedPints41      *NM   `hl7:"false,Blood Replaced-Pints (41)" json:"blood_replaced_pints_41,omitempty"`            // UB1-4
	BloodNotReplacedPints42   *NM   `hl7:"false,Blood Not Replaced-Pints(42)" json:"blood_not_replaced_pints_42,omitempty"`     // UB1-5
	CoInsuranceDays25         *NM   `hl7:"false,Co-Insurance Days (25)" json:"co_insurance_days_25,omitempty"`                  // UB1-6
	ConditionCode3539         []IS  `hl7:"false,Condition Code (35-39)" json:"condition_code_3539,omitempty"`                   // UB1-7
	CoveredDays23             *NM   `hl7:"false,Covered Days - (23)" json:"covered_days_23,omitempty"`                          // UB1-8
	NonCoveredDays24          *NM   `hl7:"false,Non Covered Days - (24)" json:"non_covered_days_24,omitempty"`                  // UB1-9
	ValueAmountCode4649       []UVC `hl7:"false,Value Amount & Code (46-49)" json:"value_amount_code_4649,omitempty"`           // UB1-10
	NumberOfGraceDays90       *NM   `hl7:"false,Number Of Grace Days (90)" json:"number_of_grace_days_90,omitempty"`            // UB1-11
	SpecialProgramIndicator44 *CE   `hl7:"false,Special Program Indicator (44)" json:"special_program_indicator_44,omitempty"`  // UB1-12
	PSROURApprovalIndicator87 *CE   `hl7:"false,PSRO/UR Approval Indicator (87)" json:"psrour_approval_indicator_87,omitempty"` // UB1-13
	PSROURApprovedStayFm88    *DT   `hl7:"false,PSRO/UR Approved Stay-Fm (88)" json:"psrour_approved_stay_fm_88,omitempty"`     // UB1-14
	PSROURApprovedStayTo89    *DT   `hl7:"false,PSRO/UR Approved Stay-To (89)" json:"psrour_approved_stay_to_89,omitempty"`     // UB1-15
	Occurrence2832            []OCD `hl7:"false,Occurrence (28-32)" json:"occurrence_2832,omitempty"`                           // UB1-16
	OccurrenceSpan33          *CE   `hl7:"false,Occurrence Span (33)" json:"occurrence_span_33,omitempty"`                      // UB1-17
	OccurSpanStartDate33      *DT   `hl7:"false,Occur Span Start Date(33)" json:"occur_span_start_date_33,omitempty"`           // UB1-18
	OccurSpanEndDate33        *DT   `hl7:"false,Occur Span End Date (33)" json:"occur_span_end_date_33,omitempty"`              // UB1-19
	UB82Locator2              *ST   `hl7:"false,UB-82 Locator 2" json:"ub_82_locator_2,omitempty"`                              // UB1-20
	UB82Locator9              *ST   `hl7:"false,UB-82 Locator 9" json:"ub_82_locator_9,omitempty"`                              // UB1-21
	UB82Locator27             *ST   `hl7:"false,UB-82 Locator 27" json:"ub_82_locator_27,omitempty"`                            // UB1-22
	UB82Locator45             *ST   `hl7:"false,UB-82 Locator 45" json:"ub_82_locator_45,omitempty"`                            // UB1-23
}

func (s *UB1) SegmentName() string {
	return "UB1"
}

//  UB2 represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type UB2 struct {
	SetIDUB2                  *SI   `hl7:"false,Set ID - UB2" json:"set_idub_2,omitempty"`                                       // UB2-1
	CoInsuranceDays9          *ST   `hl7:"false,Co-Insurance Days (9)" json:"co_insurance_days_9,omitempty"`                     // UB2-2
	ConditionCode2430         []IS  `hl7:"false,Condition Code (24-30)" json:"condition_code_2430,omitempty"`                    // UB2-3
	CoveredDays7              *ST   `hl7:"false,Covered Days (7)" json:"covered_days_7,omitempty"`                               // UB2-4
	NonCoveredDays8           *ST   `hl7:"false,Non-Covered Days (8)" json:"non_covered_days_8,omitempty"`                       // UB2-5
	ValueAmountCode           []UVC `hl7:"false,Value Amount & Code" json:"value_amount_code,omitempty"`                         // UB2-6
	OccurrenceCodeDate3235    []OCD `hl7:"false,Occurrence Code & Date (32-35)" json:"occurrence_code_date_3235,omitempty"`      // UB2-7
	OccurrenceSpanCodeDates36 []OSP `hl7:"false,Occurrence Span Code/Dates (36)" json:"occurrence_span_code_dates_36,omitempty"` // UB2-8
	UB92Locator2State         []ST  `hl7:"false,UB92 Locator 2 (State)" json:"ub_92_locator_2_state,omitempty"`                  // UB2-9
	UB92Locator11State        []ST  `hl7:"false,UB92 Locator 11 (State)" json:"ub_92_locator_11_state,omitempty"`                // UB2-10
	UB92Locator31National     *ST   `hl7:"false,UB92 Locator 31 (National)" json:"ub_92_locator_31_national,omitempty"`          // UB2-11
	DocumentControlNumber     []ST  `hl7:"false,Document Control Number" json:"document_control_number,omitempty"`               // UB2-12
	UB92Locator49National     []ST  `hl7:"false,UB92 Locator 49 (National)" json:"ub_92_locator_49_national,omitempty"`          // UB2-13
	UB92Locator56State        []ST  `hl7:"false,UB92 Locator 56 (State)" json:"ub_92_locator_56_state,omitempty"`                // UB2-14
	UB92Locator57National     *ST   `hl7:"false,UB92 Locator 57 (National)" json:"ub_92_locator_57_national,omitempty"`          // UB2-15
	UB92Locator78State        []ST  `hl7:"false,UB92 Locator 78 (State)" json:"ub_92_locator_78_state,omitempty"`                // UB2-16
	SpecialVisitCount         *NM   `hl7:"false,Special Visit Count" json:"special_visit_count,omitempty"`                       // UB2-17
}

func (s *UB2) SegmentName() string {
	return "UB2"
}

//  URD represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type URD struct {
	RUDateTime              *TS   `hl7:"false,R/U Date/Time" json:"ru_date_time,omitempty"`                             // URD-1
	ReportPriority          *ID   `hl7:"false,Report Priority" json:"report_priority,omitempty"`                        // URD-2
	RUWhoSubjectDefinition  []XCN `hl7:"true,R/U Who Subject Definition" json:"ru_who_subject_definition,omitempty"`    // URD-3
	RUWhatSubjectDefinition []CE  `hl7:"false,R/U What Subject Definition" json:"ru_what_subject_definition,omitempty"` // URD-4
	RUWhatDepartmentCode    []CE  `hl7:"false,R/U What Department Code" json:"ru_what_department_code,omitempty"`       // URD-5
	RUDisplayPrintLocations []ST  `hl7:"false,R/U Display/Print Locations" json:"ru_display_print_locations,omitempty"` // URD-6
	RUResultsLevel          *ID   `hl7:"false,R/U Results Level" json:"ru_results_level,omitempty"`                     // URD-7
}

func (s *URD) SegmentName() string {
	return "URD"
}

//  URS represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type URS struct {
	RUWhereSubjectDefinition        []ST `hl7:"true,R/U Where Subject Definition" json:"ru_where_subject_definition,omitempty"`                  // URS-1
	RUWhenDataStartDateTime         *TS  `hl7:"false,R/U When Data Start Date/Time" json:"ru_when_data_start_date_time,omitempty"`               // URS-2
	RUWhenDataEndDateTime           *TS  `hl7:"false,R/U When Data End Date/Time" json:"ru_when_data_end_date_time,omitempty"`                   // URS-3
	RUWhatUserQualifier             []ST `hl7:"false,R/U What User Qualifier" json:"ru_what_user_qualifier,omitempty"`                           // URS-4
	RUOtherResultsSubjectDefinition []ST `hl7:"false,R/U Other Results Subject Definition" json:"ru_other_results_subject_definition,omitempty"` // URS-5
	RUWhichDateTimeQualifier        []ID `hl7:"false,R/U Which Date/Time Qualifier" json:"ru_which_date_time_qualifier,omitempty"`               // URS-6
	RUWhichDateTimeStatusQualifier  []ID `hl7:"false,R/U Which Date/Time Status Qualifier" json:"ru_which_date_time_status_qualifier,omitempty"` // URS-7
	RUDateTimeSelectionQualifier    []ID `hl7:"false,R/U Date/Time Selection Qualifier" json:"ru_date_time_selection_qualifier,omitempty"`       // URS-8
	RUQuantityTimingQualifier       *TQ  `hl7:"false,R/U Quantity/Timing Qualifier" json:"ru_quantity_timing_qualifier,omitempty"`               // URS-9
}

func (s *URS) SegmentName() string {
	return "URS"
}

//  VAR represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type VAR struct {
	VarianceInstanceID     *EI   `hl7:"true,Variance Instance ID" json:"variance_instance_id,omitempty"`            // VAR-1
	DocumentedDateTime     *TS   `hl7:"true,Documented Date/Time" json:"documented_date_time,omitempty"`            // VAR-2
	StatedVarianceDateTime *TS   `hl7:"false,Stated Variance Date/Time" json:"stated_variance_date_time,omitempty"` // VAR-3
	VarianceOriginator     []XCN `hl7:"false,Variance Originator" json:"variance_originator,omitempty"`             // VAR-4
	VarianceClassification *CE   `hl7:"false,Variance Classification" json:"variance_classification,omitempty"`     // VAR-5
	VarianceDescription    []ST  `hl7:"false,Variance Description" json:"variance_description,omitempty"`           // VAR-6
}

func (s *VAR) SegmentName() string {
	return "VAR"
}

//  VTQ represents the corresponding HL7 segment.
//  Definition from HL7 2.5.1
type VTQ struct {
	QueryTag                *ST   `hl7:"false,Query Tag" json:"query_tag,omitempty"`                                  // VTQ-1
	QueryResponseFormatCode *ID   `hl7:"true,Query/Response Format Code" json:"query_response_format_code,omitempty"` // VTQ-2
	VTQueryName             *CE   `hl7:"true,VT Query Name" json:"vt_query_name,omitempty"`                           // VTQ-3
	VirtualTableName        *CE   `hl7:"true,Virtual Table Name" json:"virtual_table_name,omitempty"`                 // VTQ-4
	SelectionCriteria       []QSC `hl7:"false,Selection Criteria" json:"selection_criteria,omitempty"`                // VTQ-5
}

func (s *VTQ) SegmentName() string {
	return "VTQ"
}

//  ACK represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ACK struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   []ERR         `hl7:"false,ERR" json:"err,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ACK) MessageTypeName() string {
	return "ACK"
}

//  ACK_N02 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type ACK_N02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ACK_N02) MessageTypeName() string {
	return "ACK_N02"
}

//  ADR_A19 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADR_A19 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                    `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                     `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                     `hl7:"false,QAK" json:"qak,omitempty"`
	QRD            *QRD                     `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF            *QRF                     `hl7:"false,QRF" json:"qrf,omitempty"`
	QUERY_RESPONSE []ADR_A19_QUERY_RESPONSE `hl7:"true,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *ADR_A19) MessageTypeName() string {
	return "ADR_A19"
}

//  ADR_A19_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADR_A19_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADR_A19_INSURANCE) MessageTypeSubStructName() string {
	return "ADR_A19_INSURANCE"
}

//  ADR_A19_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADR_A19_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADR_A19_PROCEDURE) MessageTypeSubStructName() string {
	return "ADR_A19_PROCEDURE"
}

//  ADR_A19_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADR_A19_QUERY_RESPONSE struct {
	EVN       *EVN                `hl7:"false,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PD1       *PD1                `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1      []ROL               `hl7:"false,ROL1" json:"rol_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2      []ROL               `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []ADR_A19_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADR_A19_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADR_A19_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "ADR_A19_QUERY_RESPONSE"
}

//  ADT_A01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A01 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SFT       []SFT               `hl7:"false,SFT" json:"sft,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PD1       *PD1                `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1      []ROL               `hl7:"false,ROL1" json:"rol_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2      []ROL               `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []ADT_A01_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A01_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	PDA       *PDA                `hl7:"false,PDA" json:"pda,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A01) MessageTypeName() string {
	return "ADT_A01"
}

//  ADT_A01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A01_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A01_INSURANCE"
}

//  ADT_A01_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A01_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A01_PROCEDURE) MessageTypeSubStructName() string {
	return "ADT_A01_PROCEDURE"
}

//  ADT_A02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1  []ROL         `hl7:"false,ROL1" json:"rol_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2  []ROL         `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1   []DB1         `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	PDA   *PDA          `hl7:"false,PDA" json:"pda,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A02) MessageTypeName() string {
	return "ADT_A02"
}

//  ADT_A03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A03 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SFT       []SFT               `hl7:"false,SFT" json:"sft,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PD1       *PD1                `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1      []ROL               `hl7:"false,ROL1" json:"rol_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2      []ROL               `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []ADT_A03_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A03_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	PDA       *PDA                `hl7:"false,PDA" json:"pda,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A03) MessageTypeName() string {
	return "ADT_A03"
}

//  ADT_A03_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A03_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A03_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A03_INSURANCE"
}

//  ADT_A03_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A03_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A03_PROCEDURE) MessageTypeSubStructName() string {
	return "ADT_A03_PROCEDURE"
}

//  ADT_A04 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A04 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	PR1       []PR1               `hl7:"false,PR1" json:"pr_1,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A04_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A04) MessageTypeName() string {
	return "ADT_A04"
}

//  ADT_A04_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A04_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A04_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A04_INSURANCE"
}

//  ADT_A05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A05 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SFT       []SFT               `hl7:"false,SFT" json:"sft,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PD1       *PD1                `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1      []ROL               `hl7:"false,ROL1" json:"rol_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2      []ROL               `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []ADT_A05_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A05_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A05) MessageTypeName() string {
	return "ADT_A05"
}

//  ADT_A05_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A05_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A05_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A05_INSURANCE"
}

//  ADT_A05_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A05_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A05_PROCEDURE) MessageTypeSubStructName() string {
	return "ADT_A05_PROCEDURE"
}

//  ADT_A06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A06 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SFT       []SFT               `hl7:"false,SFT" json:"sft,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PD1       *PD1                `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1      []ROL               `hl7:"false,ROL1" json:"rol_1,omitempty"`
	MRG       *MRG                `hl7:"false,MRG" json:"mrg,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2      []ROL               `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []ADT_A06_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A06_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A06) MessageTypeName() string {
	return "ADT_A06"
}

//  ADT_A06_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A06_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A06_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A06_INSURANCE"
}

//  ADT_A06_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A06_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A06_PROCEDURE) MessageTypeSubStructName() string {
	return "ADT_A06_PROCEDURE"
}

//  ADT_A07 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A07 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	MRG       *MRG                `hl7:"false,MRG" json:"mrg,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	PR1       []PR1               `hl7:"false,PR1" json:"pr_1,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A07_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A07) MessageTypeName() string {
	return "ADT_A07"
}

//  ADT_A07_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A07_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A07_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A07_INSURANCE"
}

//  ADT_A08 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A08 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	PR1       []PR1               `hl7:"false,PR1" json:"pr_1,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A08_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A08) MessageTypeName() string {
	return "ADT_A08"
}

//  ADT_A08_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A08_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A08_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A08_INSURANCE"
}

//  ADT_A09 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A09 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	DB1   []DB1         `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	DG1   []DG1         `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A09) MessageTypeName() string {
	return "ADT_A09"
}

//  ADT_A10 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A10 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	DG1   []DG1         `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A10) MessageTypeName() string {
	return "ADT_A10"
}

//  ADT_A11 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A11 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	DG1   []DG1         `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A11) MessageTypeName() string {
	return "ADT_A11"
}

//  ADT_A12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A12 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	DB1   []DB1         `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	DG1   *DG1          `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A12) MessageTypeName() string {
	return "ADT_A12"
}

//  ADT_A13 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A13 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	PR1       []PR1               `hl7:"false,PR1" json:"pr_1,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A13_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A13) MessageTypeName() string {
	return "ADT_A13"
}

//  ADT_A13_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A13_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A13_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A13_INSURANCE"
}

//  ADT_A14 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A14 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	PR1       []PR1               `hl7:"false,PR1" json:"pr_1,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A14_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A14) MessageTypeName() string {
	return "ADT_A14"
}

//  ADT_A14_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A14_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A14_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A14_INSURANCE"
}

//  ADT_A15 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A15 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1  []ROL         `hl7:"false,ROL1" json:"rol_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2  []ROL         `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1   []DB1         `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	DG1   []DG1         `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A15) MessageTypeName() string {
	return "ADT_A15"
}

//  ADT_A16 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A16 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SFT       []SFT               `hl7:"false,SFT" json:"sft,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PD1       *PD1                `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1      []ROL               `hl7:"false,ROL1" json:"rol_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2      []ROL               `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []ADT_A16_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A16_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A16) MessageTypeName() string {
	return "ADT_A16"
}

//  ADT_A16_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A16_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A16_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A16_INSURANCE"
}

//  ADT_A16_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A16_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A16_PROCEDURE) MessageTypeSubStructName() string {
	return "ADT_A16_PROCEDURE"
}

//  ADT_A17 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A17 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID1  *PID          `hl7:"true,PID1" json:"pid_1,omitempty"`
	PD11  *PD1          `hl7:"false,PD11" json:"pd_11,omitempty"`
	PV11  *PV1          `hl7:"true,PV11" json:"pv_11,omitempty"`
	PV21  *PV2          `hl7:"false,PV21" json:"pv_21,omitempty"`
	DB11  []DB1         `hl7:"false,DB11" json:"db_11,omitempty"`
	OBX1  []OBX         `hl7:"false,OBX1" json:"obx_1,omitempty"`
	PID2  *PID          `hl7:"true,PID2" json:"pid_2,omitempty"`
	PD12  *PD1          `hl7:"false,PD12" json:"pd_12,omitempty"`
	PV12  *PV1          `hl7:"true,PV12" json:"pv_12,omitempty"`
	PV22  *PV2          `hl7:"false,PV22" json:"pv_22,omitempty"`
	DB12  []DB1         `hl7:"false,DB12" json:"db_12,omitempty"`
	OBX2  []OBX         `hl7:"false,OBX2" json:"obx_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A17) MessageTypeName() string {
	return "ADT_A17"
}

//  ADT_A17_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.1
type ADT_A17_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A17_PATIENT) MessageTypeSubStructName() string {
	return "ADT_A17_PATIENT"
}

//  ADT_A18 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A18 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A18) MessageTypeName() string {
	return "ADT_A18"
}

//  ADT_A20 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A20 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	NPU   *NPU          `hl7:"true,NPU" json:"npu,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A20) MessageTypeName() string {
	return "ADT_A20"
}

//  ADT_A21 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A21 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	DB1   []DB1         `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A21) MessageTypeName() string {
	return "ADT_A21"
}

//  ADT_A22 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A22 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A22) MessageTypeName() string {
	return "ADT_A22"
}

//  ADT_A23 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A23 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A23) MessageTypeName() string {
	return "ADT_A23"
}

//  ADT_A24 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A24 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID1  *PID          `hl7:"true,PID1" json:"pid_1,omitempty"`
	PD11  *PD1          `hl7:"false,PD11" json:"pd_11,omitempty"`
	PV11  *PV1          `hl7:"false,PV11" json:"pv_11,omitempty"`
	DB11  []DB1         `hl7:"false,DB11" json:"db_11,omitempty"`
	PID2  *PID          `hl7:"true,PID2" json:"pid_2,omitempty"`
	PD12  *PD1          `hl7:"false,PD12" json:"pd_12,omitempty"`
	PV12  *PV1          `hl7:"false,PV12" json:"pv_12,omitempty"`
	DB12  []DB1         `hl7:"false,DB12" json:"db_12,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A24) MessageTypeName() string {
	return "ADT_A24"
}

//  ADT_A25 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A25 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A25) MessageTypeName() string {
	return "ADT_A25"
}

//  ADT_A26 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A26 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A26) MessageTypeName() string {
	return "ADT_A26"
}

//  ADT_A27 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A27 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A27) MessageTypeName() string {
	return "ADT_A27"
}

//  ADT_A28 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A28 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	PR1       []PR1               `hl7:"false,PR1" json:"pr_1,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A28_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A28) MessageTypeName() string {
	return "ADT_A28"
}

//  ADT_A28_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A28_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A28_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A28_INSURANCE"
}

//  ADT_A29 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A29 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A29) MessageTypeName() string {
	return "ADT_A29"
}

//  ADT_A30 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A30 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A30) MessageTypeName() string {
	return "ADT_A30"
}

//  ADT_A31 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A31 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	PR1       []PR1               `hl7:"false,PR1" json:"pr_1,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ADT_A31_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ADT_A31) MessageTypeName() string {
	return "ADT_A31"
}

//  ADT_A31_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A31_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A31_INSURANCE) MessageTypeSubStructName() string {
	return "ADT_A31_INSURANCE"
}

//  ADT_A32 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A32 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A32) MessageTypeName() string {
	return "ADT_A32"
}

//  ADT_A33 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A33 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A33) MessageTypeName() string {
	return "ADT_A33"
}

//  ADT_A34 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A34 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A34) MessageTypeName() string {
	return "ADT_A34"
}

//  ADT_A35 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A35 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A35) MessageTypeName() string {
	return "ADT_A35"
}

//  ADT_A36 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type ADT_A36 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A36) MessageTypeName() string {
	return "ADT_A36"
}

//  ADT_A37 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A37 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID1  *PID          `hl7:"true,PID1" json:"pid_1,omitempty"`
	PD11  *PD1          `hl7:"false,PD11" json:"pd_11,omitempty"`
	PV11  *PV1          `hl7:"false,PV11" json:"pv_11,omitempty"`
	DB11  []DB1         `hl7:"false,DB11" json:"db_11,omitempty"`
	PID2  *PID          `hl7:"true,PID2" json:"pid_2,omitempty"`
	PD12  *PD1          `hl7:"false,PD12" json:"pd_12,omitempty"`
	PV12  *PV1          `hl7:"false,PV12" json:"pv_12,omitempty"`
	DB12  []DB1         `hl7:"false,DB12" json:"db_12,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A37) MessageTypeName() string {
	return "ADT_A37"
}

//  ADT_A38 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A38 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	DB1   []DB1         `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	DG1   []DG1         `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG   *DRG          `hl7:"false,DRG" json:"drg,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A38) MessageTypeName() string {
	return "ADT_A38"
}

//  ADT_A39 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A39 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	EVN     *EVN              `hl7:"true,EVN" json:"evn,omitempty"`
	PATIENT []ADT_A39_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *ADT_A39) MessageTypeName() string {
	return "ADT_A39"
}

//  ADT_A39_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A39_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A39_PATIENT) MessageTypeSubStructName() string {
	return "ADT_A39_PATIENT"
}

//  ADT_A40 represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ADT_A40 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	EVN     *EVN              `hl7:"true,EVN" json:"evn,omitempty"`
	PATIENT []ADT_A40_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *ADT_A40) MessageTypeName() string {
	return "ADT_A40"
}

//  ADT_A40_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ADT_A40_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A40_PATIENT) MessageTypeSubStructName() string {
	return "ADT_A40_PATIENT"
}

//  ADT_A43 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A43 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	EVN     *EVN              `hl7:"true,EVN" json:"evn,omitempty"`
	PATIENT []ADT_A43_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *ADT_A43) MessageTypeName() string {
	return "ADT_A43"
}

//  ADT_A43_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A43_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A43_PATIENT) MessageTypeSubStructName() string {
	return "ADT_A43_PATIENT"
}

//  ADT_A44 represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ADT_A44 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	EVN     *EVN              `hl7:"true,EVN" json:"evn,omitempty"`
	PATIENT []ADT_A44_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *ADT_A44) MessageTypeName() string {
	return "ADT_A44"
}

//  ADT_A44_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ADT_A44_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A44_PATIENT) MessageTypeSubStructName() string {
	return "ADT_A44_PATIENT"
}

//  ADT_A45 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A45 struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	SFT        []SFT                `hl7:"false,SFT" json:"sft,omitempty"`
	EVN        *EVN                 `hl7:"true,EVN" json:"evn,omitempty"`
	PID        *PID                 `hl7:"true,PID" json:"pid,omitempty"`
	PD1        *PD1                 `hl7:"false,PD1" json:"pd_1,omitempty"`
	MERGE_INFO []ADT_A45_MERGE_INFO `hl7:"true,MERGE_INFO" json:"merge___info,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *ADT_A45) MessageTypeName() string {
	return "ADT_A45"
}

//  ADT_A45_MERGE_INFO represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A45_MERGE_INFO struct {
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A45_MERGE_INFO) MessageTypeSubStructName() string {
	return "ADT_A45_MERGE_INFO"
}

//  ADT_A50 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A50 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	MRG   *MRG          `hl7:"true,MRG" json:"mrg,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A50) MessageTypeName() string {
	return "ADT_A50"
}

//  ADT_A52 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A52 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A52) MessageTypeName() string {
	return "ADT_A52"
}

//  ADT_A54 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A54 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1  []ROL         `hl7:"false,ROL1" json:"rol_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2  []ROL         `hl7:"false,ROL2" json:"rol_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A54) MessageTypeName() string {
	return "ADT_A54"
}

//  ADT_A60 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A60 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	IAM   []IAM         `hl7:"false,IAM" json:"iam,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A60) MessageTypeName() string {
	return "ADT_A60"
}

//  ADT_A61 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ADT_A61 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ADT_A61) MessageTypeName() string {
	return "ADT_A61"
}

//  ARD_A19 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type ARD_A19 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	MSA            *MSA                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                     `hl7:"false,ERR" json:"err,omitempty"`
	QRD            *QRD                     `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF            *QRF                     `hl7:"false,QRF" json:"qrf,omitempty"`
	QUERY_RESPONSE []ARD_A19_QUERY_RESPONSE `hl7:"true,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *ARD_A19) MessageTypeName() string {
	return "ARD_A19"
}

//  ARD_A19_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type ARD_A19_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ARD_A19_INSURANCE) MessageTypeSubStructName() string {
	return "ARD_A19_INSURANCE"
}

//  ARD_A19_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type ARD_A19_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ARD_A19_PROCEDURE) MessageTypeSubStructName() string {
	return "ARD_A19_PROCEDURE"
}

//  ARD_A19_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type ARD_A19_QUERY_RESPONSE struct {
	EVN       *EVN                `hl7:"false,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PD1       *PD1                `hl7:"false,PD1" json:"pd_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []ARD_A19_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []ARD_A19_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ARD_A19_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "ARD_A19_QUERY_RESPONSE"
}

//  BAR_P01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P01 struct {
	MSH   *MSH            `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT           `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN            `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID            `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1            `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL   []ROL           `hl7:"false,ROL" json:"rol,omitempty"`
	VISIT []BAR_P01_VISIT `hl7:"true,VISIT" json:"visit,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *BAR_P01) MessageTypeName() string {
	return "BAR_P01"
}

//  BAR_P01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BAR_P01_INSURANCE) MessageTypeSubStructName() string {
	return "BAR_P01_INSURANCE"
}

//  BAR_P01_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P01_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BAR_P01_PROCEDURE) MessageTypeSubStructName() string {
	return "BAR_P01_PROCEDURE"
}

//  BAR_P01_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P01_VISIT struct {
	PV1       *PV1                `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL       []ROL               `hl7:"false,ROL" json:"rol,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []BAR_P01_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	INSURANCE []BAR_P01_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *BAR_P01_VISIT) MessageTypeSubStructName() string {
	return "BAR_P01_VISIT"
}

//  BAR_P02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P02 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	EVN     *EVN              `hl7:"true,EVN" json:"evn,omitempty"`
	PATIENT []BAR_P02_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *BAR_P02) MessageTypeName() string {
	return "BAR_P02"
}

//  BAR_P02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	DB1   []DB1         `hl7:"false,DB1" json:"db_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BAR_P02_PATIENT) MessageTypeSubStructName() string {
	return "BAR_P02_PATIENT"
}

//  BAR_P05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P05 struct {
	MSH   *MSH            `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT           `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN            `hl7:"true,EVN" json:"evn,omitempty"`
	PID   *PID            `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1            `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL   []ROL           `hl7:"false,ROL" json:"rol,omitempty"`
	VISIT []BAR_P05_VISIT `hl7:"true,VISIT" json:"visit,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *BAR_P05) MessageTypeName() string {
	return "BAR_P05"
}

//  BAR_P05_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P05_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BAR_P05_INSURANCE) MessageTypeSubStructName() string {
	return "BAR_P05_INSURANCE"
}

//  BAR_P05_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P05_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BAR_P05_PROCEDURE) MessageTypeSubStructName() string {
	return "BAR_P05_PROCEDURE"
}

//  BAR_P05_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P05_VISIT struct {
	PV1       *PV1                `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2       *PV2                `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL       []ROL               `hl7:"false,ROL" json:"rol,omitempty"`
	DB1       []DB1               `hl7:"false,DB1" json:"db_1,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	AL1       []AL1               `hl7:"false,AL1" json:"al_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []BAR_P05_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	INSURANCE []BAR_P05_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC       *ACC                `hl7:"false,ACC" json:"acc,omitempty"`
	UB1       *UB1                `hl7:"false,UB1" json:"ub_1,omitempty"`
	UB2       *UB2                `hl7:"false,UB2" json:"ub_2,omitempty"`
	ABS       *ABS                `hl7:"false,ABS" json:"abs,omitempty"`
	BLC       []BLC               `hl7:"false,BLC" json:"blc,omitempty"`
	RMI       *RMI                `hl7:"false,RMI" json:"rmi,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *BAR_P05_VISIT) MessageTypeSubStructName() string {
	return "BAR_P05_VISIT"
}

//  BAR_P06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P06 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	EVN     *EVN              `hl7:"true,EVN" json:"evn,omitempty"`
	PATIENT []BAR_P06_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *BAR_P06) MessageTypeName() string {
	return "BAR_P06"
}

//  BAR_P06_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P06_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BAR_P06_PATIENT) MessageTypeSubStructName() string {
	return "BAR_P06_PATIENT"
}

//  BAR_P10 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P10 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SFT       []SFT               `hl7:"false,SFT" json:"sft,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	GP1       *GP1                `hl7:"true,GP1" json:"gp_1,omitempty"`
	PROCEDURE []BAR_P10_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *BAR_P10) MessageTypeName() string {
	return "BAR_P10"
}

//  BAR_P10_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P10_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	GP2   *GP2          `hl7:"false,GP2" json:"gp_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BAR_P10_PROCEDURE) MessageTypeSubStructName() string {
	return "BAR_P10_PROCEDURE"
}

//  BAR_P12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P12 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SFT       []SFT               `hl7:"false,SFT" json:"sft,omitempty"`
	EVN       *EVN                `hl7:"true,EVN" json:"evn,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PV1       *PV1                `hl7:"true,PV1" json:"pv_1,omitempty"`
	DG1       []DG1               `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG       *DRG                `hl7:"false,DRG" json:"drg,omitempty"`
	PROCEDURE []BAR_P12_PROCEDURE `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *BAR_P12) MessageTypeName() string {
	return "BAR_P12"
}

//  BAR_P12_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BAR_P12_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BAR_P12_PROCEDURE) MessageTypeSubStructName() string {
	return "BAR_P12_PROCEDURE"
}

//  BPS_O29 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BPS_O29 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *BPS_O29_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []BPS_O29_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *BPS_O29) MessageTypeName() string {
	return "BPS_O29"
}

//  BPS_O29_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BPS_O29_ORDER struct {
	ORC     *ORC              `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING  []BPS_O29_TIMING  `hl7:"false,TIMING" json:"timing,omitempty"`
	BPO     *BPO              `hl7:"true,BPO" json:"bpo,omitempty"`
	NTE     []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	PRODUCT []BPS_O29_PRODUCT `hl7:"false,PRODUCT" json:"product,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *BPS_O29_ORDER) MessageTypeSubStructName() string {
	return "BPS_O29_ORDER"
}

//  BPS_O29_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BPS_O29_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *BPS_O29_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *BPS_O29_PATIENT) MessageTypeSubStructName() string {
	return "BPS_O29_PATIENT"
}

//  BPS_O29_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BPS_O29_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BPS_O29_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "BPS_O29_PATIENT_VISIT"
}

//  BPS_O29_PRODUCT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BPS_O29_PRODUCT struct {
	BPX   *BPX          `hl7:"true,BPX" json:"bpx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BPS_O29_PRODUCT) MessageTypeSubStructName() string {
	return "BPS_O29_PRODUCT"
}

//  BPS_O29_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BPS_O29_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BPS_O29_TIMING) MessageTypeSubStructName() string {
	return "BPS_O29_TIMING"
}

//  BRP_O30 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRP_O30 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *BRP_O30_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *BRP_O30) MessageTypeName() string {
	return "BRP_O30"
}

//  BRP_O30_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRP_O30_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []BRP_O30_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	BPO    *BPO             `hl7:"false,BPO" json:"bpo,omitempty"`
	BPX    []BPX            `hl7:"false,BPX" json:"bpx,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *BRP_O30_ORDER) MessageTypeSubStructName() string {
	return "BRP_O30_ORDER"
}

//  BRP_O30_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRP_O30_PATIENT struct {
	PID   *PID            `hl7:"true,PID" json:"pid,omitempty"`
	ORDER []BRP_O30_ORDER `hl7:"false,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *BRP_O30_PATIENT) MessageTypeSubStructName() string {
	return "BRP_O30_PATIENT"
}

//  BRP_O30_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRP_O30_RESPONSE struct {
	PATIENT *BRP_O30_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *BRP_O30_RESPONSE) MessageTypeSubStructName() string {
	return "BRP_O30_RESPONSE"
}

//  BRP_O30_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRP_O30_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BRP_O30_TIMING) MessageTypeSubStructName() string {
	return "BRP_O30_TIMING"
}

//  BRT_O32 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRT_O32 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *BRT_O32_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *BRT_O32) MessageTypeName() string {
	return "BRT_O32"
}

//  BRT_O32_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRT_O32_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []BRT_O32_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	BPO    *BPO             `hl7:"false,BPO" json:"bpo,omitempty"`
	BTX    []BTX            `hl7:"false,BTX" json:"btx,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *BRT_O32_ORDER) MessageTypeSubStructName() string {
	return "BRT_O32_ORDER"
}

//  BRT_O32_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRT_O32_RESPONSE struct {
	PID   *PID            `hl7:"false,PID" json:"pid,omitempty"`
	ORDER []BRT_O32_ORDER `hl7:"false,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *BRT_O32_RESPONSE) MessageTypeSubStructName() string {
	return "BRT_O32_RESPONSE"
}

//  BRT_O32_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BRT_O32_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BRT_O32_TIMING) MessageTypeSubStructName() string {
	return "BRT_O32_TIMING"
}

//  BTS_O31 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BTS_O31 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *BTS_O31_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []BTS_O31_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *BTS_O31) MessageTypeName() string {
	return "BTS_O31"
}

//  BTS_O31_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BTS_O31_ORDER struct {
	ORC            *ORC                     `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING         []BTS_O31_TIMING         `hl7:"false,TIMING" json:"timing,omitempty"`
	BPO            *BPO                     `hl7:"true,BPO" json:"bpo,omitempty"`
	NTE            []NTE                    `hl7:"false,NTE" json:"nte,omitempty"`
	PRODUCT_STATUS []BTS_O31_PRODUCT_STATUS `hl7:"false,PRODUCT_STATUS" json:"product___status,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *BTS_O31_ORDER) MessageTypeSubStructName() string {
	return "BTS_O31_ORDER"
}

//  BTS_O31_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BTS_O31_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *BTS_O31_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *BTS_O31_PATIENT) MessageTypeSubStructName() string {
	return "BTS_O31_PATIENT"
}

//  BTS_O31_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BTS_O31_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BTS_O31_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "BTS_O31_PATIENT_VISIT"
}

//  BTS_O31_PRODUCT_STATUS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BTS_O31_PRODUCT_STATUS struct {
	BTX   *BTX          `hl7:"true,BTX" json:"btx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BTS_O31_PRODUCT_STATUS) MessageTypeSubStructName() string {
	return "BTS_O31_PRODUCT_STATUS"
}

//  BTS_O31_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type BTS_O31_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *BTS_O31_TIMING) MessageTypeSubStructName() string {
	return "BTS_O31_TIMING"
}

//  CRM_C01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CRM_C01 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	PATIENT []CRM_C01_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *CRM_C01) MessageTypeName() string {
	return "CRM_C01"
}

//  CRM_C01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CRM_C01_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	CSR   *CSR          `hl7:"true,CSR" json:"csr,omitempty"`
	CSP   []CSP         `hl7:"false,CSP" json:"csp,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *CRM_C01_PATIENT) MessageTypeSubStructName() string {
	return "CRM_C01_PATIENT"
}

//  CSU_C09 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	PATIENT []CSU_C09_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *CSU_C09) MessageTypeName() string {
	return "CSU_C09"
}

//  CSU_C09_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09_PATIENT struct {
	PID         *PID                  `hl7:"true,PID" json:"pid,omitempty"`
	PD1         *PD1                  `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	VISIT       *CSU_C09_VISIT        `hl7:"false,VISIT" json:"visit,omitempty"`
	CSR         *CSR                  `hl7:"true,CSR" json:"csr,omitempty"`
	STUDY_PHASE []CSU_C09_STUDY_PHASE `hl7:"true,STUDY_PHASE" json:"study___phase,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *CSU_C09_PATIENT) MessageTypeSubStructName() string {
	return "CSU_C09_PATIENT"
}

//  CSU_C09_RX_ADMIN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09_RX_ADMIN struct {
	RXA   *RXA          `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR   *RXR          `hl7:"true,RXR" json:"rxr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *CSU_C09_RX_ADMIN) MessageTypeSubStructName() string {
	return "CSU_C09_RX_ADMIN"
}

//  CSU_C09_STUDY_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09_STUDY_OBSERVATION struct {
	ORC        *ORC                 `hl7:"false,ORC" json:"orc,omitempty"`
	OBR        *OBR                 `hl7:"true,OBR" json:"obr,omitempty"`
	TIMING_QTY []CSU_C09_TIMING_QTY `hl7:"false,TIMING_QTY" json:"timing___qty,omitempty"`
	OBX        []OBX                `hl7:"true,OBX" json:"obx,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *CSU_C09_STUDY_OBSERVATION) MessageTypeSubStructName() string {
	return "CSU_C09_STUDY_OBSERVATION"
}

//  CSU_C09_STUDY_PHARM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09_STUDY_PHARM struct {
	ORC      *ORC               `hl7:"false,ORC" json:"orc,omitempty"`
	RX_ADMIN []CSU_C09_RX_ADMIN `hl7:"true,RX_ADMIN" json:"rx___admin,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *CSU_C09_STUDY_PHARM) MessageTypeSubStructName() string {
	return "CSU_C09_STUDY_PHARM"
}

//  CSU_C09_STUDY_PHASE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09_STUDY_PHASE struct {
	CSP            *CSP                     `hl7:"false,CSP" json:"csp,omitempty"`
	STUDY_SCHEDULE []CSU_C09_STUDY_SCHEDULE `hl7:"true,STUDY_SCHEDULE" json:"study___schedule,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *CSU_C09_STUDY_PHASE) MessageTypeSubStructName() string {
	return "CSU_C09_STUDY_PHASE"
}

//  CSU_C09_STUDY_SCHEDULE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09_STUDY_SCHEDULE struct {
	CSS               *CSS                        `hl7:"false,CSS" json:"css,omitempty"`
	STUDY_OBSERVATION []CSU_C09_STUDY_OBSERVATION `hl7:"true,STUDY_OBSERVATION" json:"study___observation,omitempty"`
	STUDY_PHARM       []CSU_C09_STUDY_PHARM       `hl7:"true,STUDY_PHARM" json:"study___pharm,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *CSU_C09_STUDY_SCHEDULE) MessageTypeSubStructName() string {
	return "CSU_C09_STUDY_SCHEDULE"
}

//  CSU_C09_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *CSU_C09_TIMING_QTY) MessageTypeSubStructName() string {
	return "CSU_C09_TIMING_QTY"
}

//  CSU_C09_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type CSU_C09_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *CSU_C09_VISIT) MessageTypeSubStructName() string {
	return "CSU_C09_VISIT"
}

//  DFT_P03_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_COMMON_ORDER struct {
	ORC             *ORC                      `hl7:"false,ORC" json:"orc,omitempty"`
	TIMING_QUANTITY []DFT_P03_TIMING_QUANTITY `hl7:"false,TIMING_QUANTITY" json:"timing___quantity,omitempty"`
	ORDER           *DFT_P03_ORDER            `hl7:"false,ORDER" json:"order,omitempty"`
	OBSERVATION     []DFT_P03_OBSERVATION     `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other           []interface{}             `json:"other,omitempty"`
}

func (s *DFT_P03_COMMON_ORDER) MessageTypeSubStructName() string {
	return "DFT_P03_COMMON_ORDER"
}

//  DFT_P03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03 struct {
	MSH          *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT          []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	EVN          *EVN                   `hl7:"true,EVN" json:"evn,omitempty"`
	PID          *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1          *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1         []ROL                  `hl7:"false,ROL1" json:"rol_1,omitempty"`
	PV1          *PV1                   `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2          *PV2                   `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2         []ROL                  `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1          []DB1                  `hl7:"false,DB1" json:"db_1,omitempty"`
	COMMON_ORDER []DFT_P03_COMMON_ORDER `hl7:"false,COMMON_ORDER" json:"common___order,omitempty"`
	FINANCIAL    []DFT_P03_FINANCIAL    `hl7:"true,FINANCIAL" json:"financial,omitempty"`
	DG1          []DG1                  `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG          *DRG                   `hl7:"false,DRG" json:"drg,omitempty"`
	GT1          []GT1                  `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE    []DFT_P03_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC          *ACC                   `hl7:"false,ACC" json:"acc,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *DFT_P03) MessageTypeName() string {
	return "DFT_P03"
}

//  DFT_P03_FINANCIAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_FINANCIAL struct {
	FT1                    *FT1                             `hl7:"true,FT1" json:"ft_1,omitempty"`
	NTE                    *NTE                             `hl7:"false,NTE" json:"nte,omitempty"`
	FINANCIAL_PROCEDURE    []DFT_P03_FINANCIAL_PROCEDURE    `hl7:"false,FINANCIAL_PROCEDURE" json:"financial___procedure,omitempty"`
	FINANCIAL_COMMON_ORDER []DFT_P03_FINANCIAL_COMMON_ORDER `hl7:"false,FINANCIAL_COMMON_ORDER" json:"financial___common___order,omitempty"`
	Other                  []interface{}                    `json:"other,omitempty"`
}

func (s *DFT_P03_FINANCIAL) MessageTypeSubStructName() string {
	return "DFT_P03_FINANCIAL"
}

//  DFT_P03_FINANCIAL_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_FINANCIAL_COMMON_ORDER struct {
	ORC                       *ORC                                `hl7:"false,ORC" json:"orc,omitempty"`
	FINANCIAL_TIMING_QUANTITY []DFT_P03_FINANCIAL_TIMING_QUANTITY `hl7:"false,FINANCIAL_TIMING_QUANTITY" json:"financial___timing___quantity,omitempty"`
	FINANCIAL_ORDER           *DFT_P03_FINANCIAL_ORDER            `hl7:"false,FINANCIAL_ORDER" json:"financial___order,omitempty"`
	FINANCIAL_OBSERVATION     []DFT_P03_FINANCIAL_OBSERVATION     `hl7:"false,FINANCIAL_OBSERVATION" json:"financial___observation,omitempty"`
	Other                     []interface{}                       `json:"other,omitempty"`
}

func (s *DFT_P03_FINANCIAL_COMMON_ORDER) MessageTypeSubStructName() string {
	return "DFT_P03_FINANCIAL_COMMON_ORDER"
}

//  DFT_P03_FINANCIAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_FINANCIAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P03_FINANCIAL_OBSERVATION) MessageTypeSubStructName() string {
	return "DFT_P03_FINANCIAL_OBSERVATION"
}

//  DFT_P03_FINANCIAL_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_FINANCIAL_ORDER struct {
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P03_FINANCIAL_ORDER) MessageTypeSubStructName() string {
	return "DFT_P03_FINANCIAL_ORDER"
}

//  DFT_P03_FINANCIAL_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_FINANCIAL_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P03_FINANCIAL_PROCEDURE) MessageTypeSubStructName() string {
	return "DFT_P03_FINANCIAL_PROCEDURE"
}

//  DFT_P03_FINANCIAL_TIMING_QUANTITY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_FINANCIAL_TIMING_QUANTITY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P03_FINANCIAL_TIMING_QUANTITY) MessageTypeSubStructName() string {
	return "DFT_P03_FINANCIAL_TIMING_QUANTITY"
}

//  DFT_P03_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P03_INSURANCE) MessageTypeSubStructName() string {
	return "DFT_P03_INSURANCE"
}

//  DFT_P03_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P03_OBSERVATION) MessageTypeSubStructName() string {
	return "DFT_P03_OBSERVATION"
}

//  DFT_P03_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_ORDER struct {
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P03_ORDER) MessageTypeSubStructName() string {
	return "DFT_P03_ORDER"
}

//  DFT_P03_TIMING_QUANTITY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P03_TIMING_QUANTITY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P03_TIMING_QUANTITY) MessageTypeSubStructName() string {
	return "DFT_P03_TIMING_QUANTITY"
}

//  DFT_P11_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_COMMON_ORDER struct {
	ORC             *ORC                      `hl7:"false,ORC" json:"orc,omitempty"`
	TIMING_QUANTITY []DFT_P11_TIMING_QUANTITY `hl7:"false,TIMING_QUANTITY" json:"timing___quantity,omitempty"`
	ORDER           *DFT_P11_ORDER            `hl7:"false,ORDER" json:"order,omitempty"`
	OBSERVATION     []DFT_P11_OBSERVATION     `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other           []interface{}             `json:"other,omitempty"`
}

func (s *DFT_P11_COMMON_ORDER) MessageTypeSubStructName() string {
	return "DFT_P11_COMMON_ORDER"
}

//  DFT_P11 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11 struct {
	MSH          *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT          []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	EVN          *EVN                   `hl7:"true,EVN" json:"evn,omitempty"`
	PID          *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1          *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	ROL1         []ROL                  `hl7:"false,ROL1" json:"rol_1,omitempty"`
	PV1          *PV1                   `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2          *PV2                   `hl7:"false,PV2" json:"pv_2,omitempty"`
	ROL2         []ROL                  `hl7:"false,ROL2" json:"rol_2,omitempty"`
	DB1          []DB1                  `hl7:"false,DB1" json:"db_1,omitempty"`
	COMMON_ORDER []DFT_P11_COMMON_ORDER `hl7:"false,COMMON_ORDER" json:"common___order,omitempty"`
	DG1          []DG1                  `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG          *DRG                   `hl7:"false,DRG" json:"drg,omitempty"`
	GT1          []GT1                  `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE    []DFT_P11_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC          *ACC                   `hl7:"false,ACC" json:"acc,omitempty"`
	FINANCIAL    []DFT_P11_FINANCIAL    `hl7:"true,FINANCIAL" json:"financial,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *DFT_P11) MessageTypeName() string {
	return "DFT_P11"
}

//  DFT_P11_FINANCIAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_FINANCIAL struct {
	FT1                    *FT1                             `hl7:"true,FT1" json:"ft_1,omitempty"`
	FINANCIAL_PROCEDURE    []DFT_P11_FINANCIAL_PROCEDURE    `hl7:"false,FINANCIAL_PROCEDURE" json:"financial___procedure,omitempty"`
	FINANCIAL_COMMON_ORDER []DFT_P11_FINANCIAL_COMMON_ORDER `hl7:"false,FINANCIAL_COMMON_ORDER" json:"financial___common___order,omitempty"`
	DG1                    []DG1                            `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG                    *DRG                             `hl7:"false,DRG" json:"drg,omitempty"`
	GT1                    []GT1                            `hl7:"false,GT1" json:"gt_1,omitempty"`
	FINANCIAL_INSURANCE    []DFT_P11_FINANCIAL_INSURANCE    `hl7:"false,FINANCIAL_INSURANCE" json:"financial___insurance,omitempty"`
	Other                  []interface{}                    `json:"other,omitempty"`
}

func (s *DFT_P11_FINANCIAL) MessageTypeSubStructName() string {
	return "DFT_P11_FINANCIAL"
}

//  DFT_P11_FINANCIAL_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_FINANCIAL_COMMON_ORDER struct {
	ORC                       *ORC                                `hl7:"false,ORC" json:"orc,omitempty"`
	FINANCIAL_TIMING_QUANTITY []DFT_P11_FINANCIAL_TIMING_QUANTITY `hl7:"false,FINANCIAL_TIMING_QUANTITY" json:"financial___timing___quantity,omitempty"`
	FINANCIAL_ORDER           *DFT_P11_FINANCIAL_ORDER            `hl7:"false,FINANCIAL_ORDER" json:"financial___order,omitempty"`
	FINANCIAL_OBSERVATION     []DFT_P11_FINANCIAL_OBSERVATION     `hl7:"false,FINANCIAL_OBSERVATION" json:"financial___observation,omitempty"`
	Other                     []interface{}                       `json:"other,omitempty"`
}

func (s *DFT_P11_FINANCIAL_COMMON_ORDER) MessageTypeSubStructName() string {
	return "DFT_P11_FINANCIAL_COMMON_ORDER"
}

//  DFT_P11_FINANCIAL_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_FINANCIAL_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_FINANCIAL_INSURANCE) MessageTypeSubStructName() string {
	return "DFT_P11_FINANCIAL_INSURANCE"
}

//  DFT_P11_FINANCIAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_FINANCIAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_FINANCIAL_OBSERVATION) MessageTypeSubStructName() string {
	return "DFT_P11_FINANCIAL_OBSERVATION"
}

//  DFT_P11_FINANCIAL_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_FINANCIAL_ORDER struct {
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_FINANCIAL_ORDER) MessageTypeSubStructName() string {
	return "DFT_P11_FINANCIAL_ORDER"
}

//  DFT_P11_FINANCIAL_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_FINANCIAL_PROCEDURE struct {
	PR1   *PR1          `hl7:"true,PR1" json:"pr_1,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_FINANCIAL_PROCEDURE) MessageTypeSubStructName() string {
	return "DFT_P11_FINANCIAL_PROCEDURE"
}

//  DFT_P11_FINANCIAL_TIMING_QUANTITY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_FINANCIAL_TIMING_QUANTITY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_FINANCIAL_TIMING_QUANTITY) MessageTypeSubStructName() string {
	return "DFT_P11_FINANCIAL_TIMING_QUANTITY"
}

//  DFT_P11_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   []IN3         `hl7:"false,IN3" json:"in_3,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_INSURANCE) MessageTypeSubStructName() string {
	return "DFT_P11_INSURANCE"
}

//  DFT_P11_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_OBSERVATION) MessageTypeSubStructName() string {
	return "DFT_P11_OBSERVATION"
}

//  DFT_P11_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_ORDER struct {
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_ORDER) MessageTypeSubStructName() string {
	return "DFT_P11_ORDER"
}

//  DFT_P11_TIMING_QUANTITY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DFT_P11_TIMING_QUANTITY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DFT_P11_TIMING_QUANTITY) MessageTypeSubStructName() string {
	return "DFT_P11_TIMING_QUANTITY"
}

//  DOC_T12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DOC_T12 struct {
	MSH    *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	MSA    *MSA             `hl7:"true,MSA" json:"msa,omitempty"`
	ERR    *ERR             `hl7:"false,ERR" json:"err,omitempty"`
	QAK    *QAK             `hl7:"false,QAK" json:"qak,omitempty"`
	QRD    *QRD             `hl7:"true,QRD" json:"qrd,omitempty"`
	RESULT []DOC_T12_RESULT `hl7:"true,RESULT" json:"result,omitempty"`
	DSC    *DSC             `hl7:"false,DSC" json:"dsc,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *DOC_T12) MessageTypeName() string {
	return "DOC_T12"
}

//  DOC_T12_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DOC_T12_RESULT struct {
	EVN   *EVN          `hl7:"false,EVN" json:"evn,omitempty"`
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	TXA   *TXA          `hl7:"true,TXA" json:"txa,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DOC_T12_RESULT) MessageTypeSubStructName() string {
	return "DOC_T12_RESULT"
}

//  DSR_P04 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type DSR_P04 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSP   []DSP         `hl7:"true,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DSR_P04) MessageTypeName() string {
	return "DSR_P04"
}

//  DSR_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DSR_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"false,QAK" json:"qak,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSP   []DSP         `hl7:"true,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DSR_Q01) MessageTypeName() string {
	return "DSR_Q01"
}

//  DSR_Q03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type DSR_Q03 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"false,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"false,QAK" json:"qak,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSP   []DSP         `hl7:"true,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DSR_Q03) MessageTypeName() string {
	return "DSR_Q03"
}

//  DSR_R03 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type DSR_R03 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"false,MSA" json:"msa,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSP   []DSP         `hl7:"true,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *DSR_R03) MessageTypeName() string {
	return "DSR_R03"
}

//  EAC_U07_COMMAND represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EAC_U07_COMMAND struct {
	ECD                *ECD                        `hl7:"true,ECD" json:"ecd,omitempty"`
	TQ1                *TQ1                        `hl7:"false,TQ1" json:"tq_1,omitempty"`
	SPECIMEN_CONTAINER *EAC_U07_SPECIMEN_CONTAINER `hl7:"false,SPECIMEN_CONTAINER" json:"specimen___container,omitempty"`
	CNS                *CNS                        `hl7:"false,CNS" json:"cns,omitempty"`
	Other              []interface{}               `json:"other,omitempty"`
}

func (s *EAC_U07_COMMAND) MessageTypeSubStructName() string {
	return "EAC_U07_COMMAND"
}

//  EAC_U07 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EAC_U07 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	EQU     *EQU              `hl7:"true,EQU" json:"equ,omitempty"`
	COMMAND []EAC_U07_COMMAND `hl7:"true,COMMAND" json:"command,omitempty"`
	ROL     *ROL              `hl7:"false,ROL" json:"rol,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *EAC_U07) MessageTypeName() string {
	return "EAC_U07"
}

//  EAC_U07_SPECIMEN_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EAC_U07_SPECIMEN_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	SPM   []SPM         `hl7:"false,SPM" json:"spm,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *EAC_U07_SPECIMEN_CONTAINER) MessageTypeSubStructName() string {
	return "EAC_U07_SPECIMEN_CONTAINER"
}

//  EAN_U09 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EAN_U09 struct {
	MSH          *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT          []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	EQU          *EQU                   `hl7:"true,EQU" json:"equ,omitempty"`
	NOTIFICATION []EAN_U09_NOTIFICATION `hl7:"true,NOTIFICATION" json:"notification,omitempty"`
	ROL          *ROL                   `hl7:"false,ROL" json:"rol,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *EAN_U09) MessageTypeName() string {
	return "EAN_U09"
}

//  EAN_U09_NOTIFICATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EAN_U09_NOTIFICATION struct {
	NDS   *NDS          `hl7:"true,NDS" json:"nds,omitempty"`
	NTE   *NTE          `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *EAN_U09_NOTIFICATION) MessageTypeSubStructName() string {
	return "EAN_U09_NOTIFICATION"
}

//  EAR_U08_COMMAND_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EAR_U08_COMMAND_RESPONSE struct {
	ECD                *ECD                        `hl7:"true,ECD" json:"ecd,omitempty"`
	SPECIMEN_CONTAINER *EAR_U08_SPECIMEN_CONTAINER `hl7:"false,SPECIMEN_CONTAINER" json:"specimen___container,omitempty"`
	ECR                *ECR                        `hl7:"true,ECR" json:"ecr,omitempty"`
	Other              []interface{}               `json:"other,omitempty"`
}

func (s *EAR_U08_COMMAND_RESPONSE) MessageTypeSubStructName() string {
	return "EAR_U08_COMMAND_RESPONSE"
}

//  EAR_U08 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EAR_U08 struct {
	MSH              *MSH                       `hl7:"true,MSH" json:"msh,omitempty"`
	SFT              []SFT                      `hl7:"false,SFT" json:"sft,omitempty"`
	EQU              *EQU                       `hl7:"true,EQU" json:"equ,omitempty"`
	COMMAND_RESPONSE []EAR_U08_COMMAND_RESPONSE `hl7:"true,COMMAND_RESPONSE" json:"command___response,omitempty"`
	ROL              *ROL                       `hl7:"false,ROL" json:"rol,omitempty"`
	Other            []interface{}              `json:"other,omitempty"`
}

func (s *EAR_U08) MessageTypeName() string {
	return "EAR_U08"
}

//  EAR_U08_SPECIMEN_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EAR_U08_SPECIMEN_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	SPM   []SPM         `hl7:"false,SPM" json:"spm,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *EAR_U08_SPECIMEN_CONTAINER) MessageTypeSubStructName() string {
	return "EAR_U08_SPECIMEN_CONTAINER"
}

//  EDR_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type EDR_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	DSP   []DSP         `hl7:"true,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *EDR_Q01) MessageTypeName() string {
	return "EDR_Q01"
}

//  EDR_R07 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EDR_R07 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	DSP   []DSP         `hl7:"true,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *EDR_R07) MessageTypeName() string {
	return "EDR_R07"
}

//  EQQ_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type EQQ_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	EQL   *EQL          `hl7:"true,EQL" json:"eql,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *EQQ_Q01) MessageTypeName() string {
	return "EQQ_Q01"
}

//  EQQ_Q04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type EQQ_Q04 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EQL   *EQL          `hl7:"true,EQL" json:"eql,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *EQQ_Q04) MessageTypeName() string {
	return "EQQ_Q04"
}

//  ERP_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type ERP_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	ERQ   *ERQ          `hl7:"true,ERQ" json:"erq,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ERP_Q01) MessageTypeName() string {
	return "ERP_Q01"
}

//  ERP_R09 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ERP_R09 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	ERQ   *ERQ          `hl7:"true,ERQ" json:"erq,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ERP_R09) MessageTypeName() string {
	return "ERP_R09"
}

//  ESR_U02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ESR_U02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EQU   *EQU          `hl7:"true,EQU" json:"equ,omitempty"`
	ROL   *ROL          `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ESR_U02) MessageTypeName() string {
	return "ESR_U02"
}

//  ESU_U01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ESU_U01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EQU   *EQU          `hl7:"true,EQU" json:"equ,omitempty"`
	ISD   []ISD         `hl7:"false,ISD" json:"isd,omitempty"`
	ROL   *ROL          `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ESU_U01) MessageTypeName() string {
	return "ESU_U01"
}

//  INR_U06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type INR_U06 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EQU   *EQU          `hl7:"true,EQU" json:"equ,omitempty"`
	INV   []INV         `hl7:"true,INV" json:"inv,omitempty"`
	ROL   *ROL          `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *INR_U06) MessageTypeName() string {
	return "INR_U06"
}

//  INU_U05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type INU_U05 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EQU   *EQU          `hl7:"true,EQU" json:"equ,omitempty"`
	INV   []INV         `hl7:"true,INV" json:"inv,omitempty"`
	ROL   *ROL          `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *INU_U05) MessageTypeName() string {
	return "INU_U05"
}

//  LSU_U12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type LSU_U12 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EQU   *EQU          `hl7:"true,EQU" json:"equ,omitempty"`
	EQP   []EQP         `hl7:"true,EQP" json:"eqp,omitempty"`
	ROL   *ROL          `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *LSU_U12) MessageTypeName() string {
	return "LSU_U12"
}

//  MCF_Q02 represents the corresponding HL7 message type.
//  Definition from HL7 2.1
type MCF_Q02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MCF_Q02) MessageTypeName() string {
	return "MCF_Q02"
}

//  MDM_T01_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MDM_T01_COMMON_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []MDM_T01_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	OBR    *OBR             `hl7:"true,OBR" json:"obr,omitempty"`
	NTE    []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *MDM_T01_COMMON_ORDER) MessageTypeSubStructName() string {
	return "MDM_T01_COMMON_ORDER"
}

//  MDM_T01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MDM_T01 struct {
	MSH          *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT          []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	EVN          *EVN                   `hl7:"true,EVN" json:"evn,omitempty"`
	PID          *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PV1          *PV1                   `hl7:"true,PV1" json:"pv_1,omitempty"`
	COMMON_ORDER []MDM_T01_COMMON_ORDER `hl7:"false,COMMON_ORDER" json:"common___order,omitempty"`
	TXA          *TXA                   `hl7:"true,TXA" json:"txa,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *MDM_T01) MessageTypeName() string {
	return "MDM_T01"
}

//  MDM_T01_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MDM_T01_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MDM_T01_TIMING) MessageTypeSubStructName() string {
	return "MDM_T01_TIMING"
}

//  MDM_T02_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MDM_T02_COMMON_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []MDM_T02_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	OBR    *OBR             `hl7:"true,OBR" json:"obr,omitempty"`
	NTE    []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *MDM_T02_COMMON_ORDER) MessageTypeSubStructName() string {
	return "MDM_T02_COMMON_ORDER"
}

//  MDM_T02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MDM_T02 struct {
	MSH          *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT          []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	EVN          *EVN                   `hl7:"true,EVN" json:"evn,omitempty"`
	PID          *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PV1          *PV1                   `hl7:"true,PV1" json:"pv_1,omitempty"`
	COMMON_ORDER []MDM_T02_COMMON_ORDER `hl7:"false,COMMON_ORDER" json:"common___order,omitempty"`
	TXA          *TXA                   `hl7:"true,TXA" json:"txa,omitempty"`
	OBSERVATION  []MDM_T02_OBSERVATION  `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *MDM_T02) MessageTypeName() string {
	return "MDM_T02"
}

//  MDM_T02_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MDM_T02_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MDM_T02_OBSERVATION) MessageTypeSubStructName() string {
	return "MDM_T02_OBSERVATION"
}

//  MDM_T02_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MDM_T02_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MDM_T02_TIMING) MessageTypeSubStructName() string {
	return "MDM_T02_TIMING"
}

//  MFD_M01 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFD_M01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MFI   *MFI          `hl7:"true,MFI" json:"mfi,omitempty"`
	MFA   []MFA         `hl7:"false,MFA" json:"mfa,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFD_M01) MessageTypeName() string {
	return "MFD_M01"
}

//  MFD_M02 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFD_M02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MFI   *MFI          `hl7:"true,MFI" json:"mfi,omitempty"`
	MFA   []MFA         `hl7:"false,MFA" json:"mfa,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFD_M02) MessageTypeName() string {
	return "MFD_M02"
}

//  MFD_M03 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFD_M03 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MFI   *MFI          `hl7:"true,MFI" json:"mfi,omitempty"`
	MFA   []MFA         `hl7:"false,MFA" json:"mfa,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFD_M03) MessageTypeName() string {
	return "MFD_M03"
}

//  MFK_M01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFK_M01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   []ERR         `hl7:"false,ERR" json:"err,omitempty"`
	MFI   *MFI          `hl7:"true,MFI" json:"mfi,omitempty"`
	MFA   []MFA         `hl7:"false,MFA" json:"mfa,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFK_M01) MessageTypeName() string {
	return "MFK_M01"
}

//  MFK_M02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type MFK_M02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	MFI   *MFI          `hl7:"true,MFI" json:"mfi,omitempty"`
	MFA   []MFA         `hl7:"false,MFA" json:"mfa,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFK_M02) MessageTypeName() string {
	return "MFK_M02"
}

//  MFK_M03 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFK_M03 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	MFI   *MFI          `hl7:"true,MFI" json:"mfi,omitempty"`
	MFA   []MFA         `hl7:"false,MFA" json:"mfa,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFK_M03) MessageTypeName() string {
	return "MFK_M03"
}

//  MFN_M01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MFI   *MFI          `hl7:"true,MFI" json:"mfi,omitempty"`
	MF    []MFN_M01_MF  `hl7:"true,MF" json:"mf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M01) MessageTypeName() string {
	return "MFN_M01"
}

//  MFN_M01_MF represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M01_MF struct {
	MFE *MFE `hl7:"true,MFE" json:"mfe,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M01_MF) MessageTypeSubStructName() string {
	return "MFN_M01_MF"
}

//  MFN_M02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M02 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MFI      *MFI               `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_STAFF []MFN_M02_MF_STAFF `hl7:"true,MF_STAFF" json:"mf___staff,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *MFN_M02) MessageTypeName() string {
	return "MFN_M02"
}

//  MFN_M02_MF_STAFF represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M02_MF_STAFF struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	STF   *STF          `hl7:"true,STF" json:"stf,omitempty"`
	PRA   []PRA         `hl7:"false,PRA" json:"pra,omitempty"`
	ORG   []ORG         `hl7:"false,ORG" json:"org,omitempty"`
	AFF   []AFF         `hl7:"false,AFF" json:"aff,omitempty"`
	LAN   []LAN         `hl7:"false,LAN" json:"lan,omitempty"`
	EDU   []EDU         `hl7:"false,EDU" json:"edu,omitempty"`
	CER   []CER         `hl7:"false,CER" json:"cer,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M02_MF_STAFF) MessageTypeSubStructName() string {
	return "MFN_M02_MF_STAFF"
}

//  MFN_M03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M03 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	MFI     *MFI              `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_TEST []MFN_M03_MF_TEST `hl7:"true,MF_TEST" json:"mf___test,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *MFN_M03) MessageTypeName() string {
	return "MFN_M03"
}

//  MFN_M03_MF_TEST represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M03_MF_TEST struct {
	MFE *MFE `hl7:"true,MFE" json:"mfe,omitempty"`
	OM1 *OM1 `hl7:"true,OM1" json:"om_1,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M03_MF_TEST) MessageTypeSubStructName() string {
	return "MFN_M03_MF_TEST"
}

//  MFN_M04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M04 struct {
	MSH    *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT    []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	MFI    *MFI             `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_CDM []MFN_M04_MF_CDM `hl7:"true,MF_CDM" json:"mf___cdm,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *MFN_M04) MessageTypeName() string {
	return "MFN_M04"
}

//  MFN_M04_MF_CDM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M04_MF_CDM struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	CDM   *CDM          `hl7:"true,CDM" json:"cdm,omitempty"`
	PRC   []PRC         `hl7:"false,PRC" json:"prc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M04_MF_CDM) MessageTypeSubStructName() string {
	return "MFN_M04_MF_CDM"
}

//  MFN_M05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M05 struct {
	MSH         *MSH                  `hl7:"true,MSH" json:"msh,omitempty"`
	SFT         []SFT                 `hl7:"false,SFT" json:"sft,omitempty"`
	MFI         *MFI                  `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_LOCATION []MFN_M05_MF_LOCATION `hl7:"true,MF_LOCATION" json:"mf___location,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *MFN_M05) MessageTypeName() string {
	return "MFN_M05"
}

//  MFN_M05_MF_LOCATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M05_MF_LOCATION struct {
	MFE         *MFE                  `hl7:"true,MFE" json:"mfe,omitempty"`
	LOC         *LOC                  `hl7:"true,LOC" json:"loc,omitempty"`
	LCH         []LCH                 `hl7:"false,LCH" json:"lch,omitempty"`
	LRL         []LRL                 `hl7:"false,LRL" json:"lrl,omitempty"`
	MF_LOC_DEPT []MFN_M05_MF_LOC_DEPT `hl7:"true,MF_LOC_DEPT" json:"mf___loc___dept,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *MFN_M05_MF_LOCATION) MessageTypeSubStructName() string {
	return "MFN_M05_MF_LOCATION"
}

//  MFN_M05_MF_LOC_DEPT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M05_MF_LOC_DEPT struct {
	LDP   *LDP          `hl7:"true,LDP" json:"ldp,omitempty"`
	LCH   []LCH         `hl7:"false,LCH" json:"lch,omitempty"`
	LCC   []LCC         `hl7:"false,LCC" json:"lcc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M05_MF_LOC_DEPT) MessageTypeSubStructName() string {
	return "MFN_M05_MF_LOC_DEPT"
}

//  MFN_M06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M06 struct {
	MSH           *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	SFT           []SFT                   `hl7:"false,SFT" json:"sft,omitempty"`
	MFI           *MFI                    `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_CLIN_STUDY []MFN_M06_MF_CLIN_STUDY `hl7:"true,MF_CLIN_STUDY" json:"mf___clin___study,omitempty"`
	Other         []interface{}           `json:"other,omitempty"`
}

func (s *MFN_M06) MessageTypeName() string {
	return "MFN_M06"
}

//  MFN_M06_MF_CDM represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type MFN_M06_MF_CDM struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	CDM   *CDM          `hl7:"true,CDM" json:"cdm,omitempty"`
	PRC   []PRC         `hl7:"false,PRC" json:"prc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M06_MF_CDM) MessageTypeSubStructName() string {
	return "MFN_M06_MF_CDM"
}

//  MFN_M06_MF_CLIN_STUDY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M06_MF_CLIN_STUDY struct {
	MFE                   *MFE                            `hl7:"true,MFE" json:"mfe,omitempty"`
	CM0                   *CM0                            `hl7:"true,CM0" json:"cm_0,omitempty"`
	MF_PHASE_SCHED_DETAIL []MFN_M06_MF_PHASE_SCHED_DETAIL `hl7:"false,MF_PHASE_SCHED_DETAIL" json:"mf___phase___sched___detail,omitempty"`
	Other                 []interface{}                   `json:"other,omitempty"`
}

func (s *MFN_M06_MF_CLIN_STUDY) MessageTypeSubStructName() string {
	return "MFN_M06_MF_CLIN_STUDY"
}

//  MFN_M06_MF_PHASE_SCHED_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M06_MF_PHASE_SCHED_DETAIL struct {
	CM1   *CM1          `hl7:"true,CM1" json:"cm_1,omitempty"`
	CM2   []CM2         `hl7:"false,CM2" json:"cm_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M06_MF_PHASE_SCHED_DETAIL) MessageTypeSubStructName() string {
	return "MFN_M06_MF_PHASE_SCHED_DETAIL"
}

//  MFN_M07 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M07 struct {
	MSH                 *MSH                          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                 []SFT                         `hl7:"false,SFT" json:"sft,omitempty"`
	MFI                 *MFI                          `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_CLIN_STUDY_SCHED []MFN_M07_MF_CLIN_STUDY_SCHED `hl7:"true,MF_CLIN_STUDY_SCHED" json:"mf___clin___study___sched,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *MFN_M07) MessageTypeName() string {
	return "MFN_M07"
}

//  MFN_M07_MF_CLIN_STUDY represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type MFN_M07_MF_CLIN_STUDY struct {
	MFE                   *MFE                            `hl7:"true,MFE" json:"mfe,omitempty"`
	CM0                   *CM0                            `hl7:"true,CM0" json:"cm_0,omitempty"`
	MF_PHASE_SCHED_DETAIL []MFN_M07_MF_PHASE_SCHED_DETAIL `hl7:"false,MF_PHASE_SCHED_DETAIL" json:"mf___phase___sched___detail,omitempty"`
	Other                 []interface{}                   `json:"other,omitempty"`
}

func (s *MFN_M07_MF_CLIN_STUDY) MessageTypeSubStructName() string {
	return "MFN_M07_MF_CLIN_STUDY"
}

//  MFN_M07_MF_CLIN_STUDY_SCHED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M07_MF_CLIN_STUDY_SCHED struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	CM0   *CM0          `hl7:"true,CM0" json:"cm_0,omitempty"`
	CM2   []CM2         `hl7:"false,CM2" json:"cm_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M07_MF_CLIN_STUDY_SCHED) MessageTypeSubStructName() string {
	return "MFN_M07_MF_CLIN_STUDY_SCHED"
}

//  MFN_M07_MF_PHASE_SCHED_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type MFN_M07_MF_PHASE_SCHED_DETAIL struct {
	CM1   *CM1          `hl7:"true,CM1" json:"cm_1,omitempty"`
	CM2   []CM2         `hl7:"false,CM2" json:"cm_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M07_MF_PHASE_SCHED_DETAIL) MessageTypeSubStructName() string {
	return "MFN_M07_MF_PHASE_SCHED_DETAIL"
}

//  MFN_M08 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M08 struct {
	MSH             *MSH                      `hl7:"true,MSH" json:"msh,omitempty"`
	SFT             []SFT                     `hl7:"false,SFT" json:"sft,omitempty"`
	MFI             *MFI                      `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_TEST_NUMERIC []MFN_M08_MF_TEST_NUMERIC `hl7:"true,MF_TEST_NUMERIC" json:"mf___test___numeric,omitempty"`
	Other           []interface{}             `json:"other,omitempty"`
}

func (s *MFN_M08) MessageTypeName() string {
	return "MFN_M08"
}

//  MFN_M08_MF_NUMERIC_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type MFN_M08_MF_NUMERIC_OBSERVATION struct {
	OM2   *OM2          `hl7:"false,OM2" json:"om_2,omitempty"`
	OM3   *OM3          `hl7:"false,OM3" json:"om_3,omitempty"`
	OM4   *OM4          `hl7:"false,OM4" json:"om_4,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M08_MF_NUMERIC_OBSERVATION) MessageTypeSubStructName() string {
	return "MFN_M08_MF_NUMERIC_OBSERVATION"
}

//  MFN_M08_MF_TEST_NUMERIC represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M08_MF_TEST_NUMERIC struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	OM1   *OM1          `hl7:"true,OM1" json:"om_1,omitempty"`
	OM2   *OM2          `hl7:"false,OM2" json:"om_2,omitempty"`
	OM3   *OM3          `hl7:"false,OM3" json:"om_3,omitempty"`
	OM4   *OM4          `hl7:"false,OM4" json:"om_4,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M08_MF_TEST_NUMERIC) MessageTypeSubStructName() string {
	return "MFN_M08_MF_TEST_NUMERIC"
}

//  MFN_M09 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M09 struct {
	MSH                 *MSH                          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                 []SFT                         `hl7:"false,SFT" json:"sft,omitempty"`
	MFI                 *MFI                          `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_TEST_CATEGORICAL []MFN_M09_MF_TEST_CATEGORICAL `hl7:"true,MF_TEST_CATEGORICAL" json:"mf___test___categorical,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *MFN_M09) MessageTypeName() string {
	return "MFN_M09"
}

//  MFN_M09_MF_TEST_CATEGORICAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M09_MF_TEST_CATEGORICAL struct {
	MFE                *MFE                        `hl7:"true,MFE" json:"mfe,omitempty"`
	OM1                *OM1                        `hl7:"true,OM1" json:"om_1,omitempty"`
	MF_TEST_CAT_DETAIL *MFN_M09_MF_TEST_CAT_DETAIL `hl7:"false,MF_TEST_CAT_DETAIL" json:"mf___test___cat___detail,omitempty"`
	Other              []interface{}               `json:"other,omitempty"`
}

func (s *MFN_M09_MF_TEST_CATEGORICAL) MessageTypeSubStructName() string {
	return "MFN_M09_MF_TEST_CATEGORICAL"
}

//  MFN_M09_MF_TEST_CAT_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M09_MF_TEST_CAT_DETAIL struct {
	OM3   *OM3          `hl7:"true,OM3" json:"om_3,omitempty"`
	OM4   []OM4         `hl7:"false,OM4" json:"om_4,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M09_MF_TEST_CAT_DETAIL) MessageTypeSubStructName() string {
	return "MFN_M09_MF_TEST_CAT_DETAIL"
}

//  MFN_M10 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M10 struct {
	MSH               *MSH                        `hl7:"true,MSH" json:"msh,omitempty"`
	SFT               []SFT                       `hl7:"false,SFT" json:"sft,omitempty"`
	MFI               *MFI                        `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_TEST_BATTERIES []MFN_M10_MF_TEST_BATTERIES `hl7:"true,MF_TEST_BATTERIES" json:"mf___test___batteries,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *MFN_M10) MessageTypeName() string {
	return "MFN_M10"
}

//  MFN_M10_MF_TEST_BATTERIES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M10_MF_TEST_BATTERIES struct {
	MFE                 *MFE                         `hl7:"true,MFE" json:"mfe,omitempty"`
	OM1                 *OM1                         `hl7:"true,OM1" json:"om_1,omitempty"`
	MF_TEST_BATT_DETAIL *MFN_M10_MF_TEST_BATT_DETAIL `hl7:"false,MF_TEST_BATT_DETAIL" json:"mf___test___batt___detail,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *MFN_M10_MF_TEST_BATTERIES) MessageTypeSubStructName() string {
	return "MFN_M10_MF_TEST_BATTERIES"
}

//  MFN_M10_MF_TEST_BATT_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M10_MF_TEST_BATT_DETAIL struct {
	OM5   *OM5          `hl7:"true,OM5" json:"om_5,omitempty"`
	OM4   []OM4         `hl7:"false,OM4" json:"om_4,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M10_MF_TEST_BATT_DETAIL) MessageTypeSubStructName() string {
	return "MFN_M10_MF_TEST_BATT_DETAIL"
}

//  MFN_M11 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M11 struct {
	MSH                *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                []SFT                        `hl7:"false,SFT" json:"sft,omitempty"`
	MFI                *MFI                         `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_TEST_CALCULATED []MFN_M11_MF_TEST_CALCULATED `hl7:"true,MF_TEST_CALCULATED" json:"mf___test___calculated,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *MFN_M11) MessageTypeName() string {
	return "MFN_M11"
}

//  MFN_M11_MF_TEST_CALCULATED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M11_MF_TEST_CALCULATED struct {
	MFE                 *MFE                         `hl7:"true,MFE" json:"mfe,omitempty"`
	OM1                 *OM1                         `hl7:"true,OM1" json:"om_1,omitempty"`
	MF_TEST_CALC_DETAIL *MFN_M11_MF_TEST_CALC_DETAIL `hl7:"false,MF_TEST_CALC_DETAIL" json:"mf___test___calc___detail,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *MFN_M11_MF_TEST_CALCULATED) MessageTypeSubStructName() string {
	return "MFN_M11_MF_TEST_CALCULATED"
}

//  MFN_M11_MF_TEST_CALC_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M11_MF_TEST_CALC_DETAIL struct {
	OM6   *OM6          `hl7:"true,OM6" json:"om_6,omitempty"`
	OM2   *OM2          `hl7:"true,OM2" json:"om_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M11_MF_TEST_CALC_DETAIL) MessageTypeSubStructName() string {
	return "MFN_M11_MF_TEST_CALC_DETAIL"
}

//  MFN_M12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M12 struct {
	MSH               *MSH                        `hl7:"true,MSH" json:"msh,omitempty"`
	SFT               []SFT                       `hl7:"false,SFT" json:"sft,omitempty"`
	MFI               *MFI                        `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_OBS_ATTRIBUTES []MFN_M12_MF_OBS_ATTRIBUTES `hl7:"true,MF_OBS_ATTRIBUTES" json:"mf___obs___attributes,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *MFN_M12) MessageTypeName() string {
	return "MFN_M12"
}

//  MFN_M12_MF_OBS_ATTRIBUTES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M12_MF_OBS_ATTRIBUTES struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	OM1   *OM1          `hl7:"true,OM1" json:"om_1,omitempty"`
	OM7   *OM7          `hl7:"false,OM7" json:"om_7,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M12_MF_OBS_ATTRIBUTES) MessageTypeSubStructName() string {
	return "MFN_M12_MF_OBS_ATTRIBUTES"
}

//  MFN_M13 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M13 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MFI   *MFI          `hl7:"true,MFI" json:"mfi,omitempty"`
	MFE   []MFE         `hl7:"true,MFE" json:"mfe,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M13) MessageTypeName() string {
	return "MFN_M13"
}

//  MFN_M15 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M15 struct {
	MSH         *MSH                  `hl7:"true,MSH" json:"msh,omitempty"`
	SFT         []SFT                 `hl7:"false,SFT" json:"sft,omitempty"`
	MFI         *MFI                  `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_INV_ITEM []MFN_M15_MF_INV_ITEM `hl7:"true,MF_INV_ITEM" json:"mf___inv___item,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *MFN_M15) MessageTypeName() string {
	return "MFN_M15"
}

//  MFN_M15_MF_INV_ITEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_M15_MF_INV_ITEM struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	IIM   *IIM          `hl7:"true,IIM" json:"iim,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_M15_MF_INV_ITEM) MessageTypeSubStructName() string {
	return "MFN_M15_MF_INV_ITEM"
}

//  MFN_Znn represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_Znn struct {
	MSH             *MSH                      `hl7:"true,MSH" json:"msh,omitempty"`
	SFT             []SFT                     `hl7:"false,SFT" json:"sft,omitempty"`
	MFI             *MFI                      `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_SITE_DEFINED []MFN_Znn_MF_SITE_DEFINED `hl7:"true,MF_SITE_DEFINED" json:"mf___site___defined,omitempty"`
	Other           []interface{}             `json:"other,omitempty"`
}

func (s *MFN_Znn) MessageTypeName() string {
	return "MFN_Znn"
}

//  MFN_Znn_MF_SITE_DEFINED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFN_Znn_MF_SITE_DEFINED struct {
	MFE *MFE `hl7:"true,MFE" json:"mfe,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFN_Znn_MF_SITE_DEFINED) MessageTypeSubStructName() string {
	return "MFN_Znn_MF_SITE_DEFINED"
}

//  MFQ_M01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFQ_M01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFQ_M01) MessageTypeName() string {
	return "MFQ_M01"
}

//  MFQ_M02 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFQ_M02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFQ_M02) MessageTypeName() string {
	return "MFQ_M02"
}

//  MFQ_M03 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFQ_M03 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFQ_M03) MessageTypeName() string {
	return "MFQ_M03"
}

//  MFR_M01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M01 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR              `hl7:"false,ERR" json:"err,omitempty"`
	QAK      *QAK               `hl7:"false,QAK" json:"qak,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	MFI      *MFI               `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_QUERY []MFR_M01_MF_QUERY `hl7:"true,MF_QUERY" json:"mf___query,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *MFR_M01) MessageTypeName() string {
	return "MFR_M01"
}

//  MFR_M01_MF represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFR_M01_MF struct {
	MFE *MFE `hl7:"true,MFE" json:"mfe,omitempty"`
	//  Missing: anyZSegment
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFR_M01_MF) MessageTypeSubStructName() string {
	return "MFR_M01_MF"
}

//  MFR_M01_MF_QUERY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M01_MF_QUERY struct {
	MFE *MFE `hl7:"true,MFE" json:"mfe,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFR_M01_MF_QUERY) MessageTypeSubStructName() string {
	return "MFR_M01_MF_QUERY"
}

//  MFR_M02 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFR_M02 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR               `hl7:"false,ERR" json:"err,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	MFI      *MFI               `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_STAFF []MFR_M02_MF_STAFF `hl7:"true,MF_STAFF" json:"mf___staff,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *MFR_M02) MessageTypeName() string {
	return "MFR_M02"
}

//  MFR_M02_MF_STAFF represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFR_M02_MF_STAFF struct {
	MFE *MFE `hl7:"true,MFE" json:"mfe,omitempty"`
	//  Missing: anyZSegment
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFR_M02_MF_STAFF) MessageTypeSubStructName() string {
	return "MFR_M02_MF_STAFF"
}

//  MFR_M03 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFR_M03 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA     *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR     *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	QRD     *QRD              `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF              `hl7:"false,QRF" json:"qrf,omitempty"`
	MFI     *MFI              `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_TEST []MFR_M03_MF_TEST `hl7:"true,MF_TEST" json:"mf___test,omitempty"`
	DSC     *DSC              `hl7:"false,DSC" json:"dsc,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *MFR_M03) MessageTypeName() string {
	return "MFR_M03"
}

//  MFR_M03_MF_TEST represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type MFR_M03_MF_TEST struct {
	MFE *MFE `hl7:"true,MFE" json:"mfe,omitempty"`
	//  Missing: anyZSegment
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFR_M03_MF_TEST) MessageTypeSubStructName() string {
	return "MFR_M03_MF_TEST"
}

//  MFR_M04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M04 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR              `hl7:"false,ERR" json:"err,omitempty"`
	QAK      *QAK               `hl7:"false,QAK" json:"qak,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	MFI      *MFI               `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_QUERY []MFR_M04_MF_QUERY `hl7:"true,MF_QUERY" json:"mf___query,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *MFR_M04) MessageTypeName() string {
	return "MFR_M04"
}

//  MFR_M04_MF_QUERY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M04_MF_QUERY struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	CDM   *CDM          `hl7:"true,CDM" json:"cdm,omitempty"`
	PRC   []PRC         `hl7:"false,PRC" json:"prc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFR_M04_MF_QUERY) MessageTypeSubStructName() string {
	return "MFR_M04_MF_QUERY"
}

//  MFR_M05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M05 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR              `hl7:"false,ERR" json:"err,omitempty"`
	QAK      *QAK               `hl7:"false,QAK" json:"qak,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	MFI      *MFI               `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_QUERY []MFR_M05_MF_QUERY `hl7:"true,MF_QUERY" json:"mf___query,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *MFR_M05) MessageTypeName() string {
	return "MFR_M05"
}

//  MFR_M05_MF_QUERY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M05_MF_QUERY struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	LOC   *LOC          `hl7:"true,LOC" json:"loc,omitempty"`
	LCH1  []LCH         `hl7:"false,LCH1" json:"lch_1,omitempty"`
	LRL   []LRL         `hl7:"false,LRL" json:"lrl,omitempty"`
	LDP   []LDP         `hl7:"true,LDP" json:"ldp,omitempty"`
	LCH2  []LCH         `hl7:"false,LCH2" json:"lch_2,omitempty"`
	LCC   []LCC         `hl7:"false,LCC" json:"lcc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFR_M05_MF_QUERY) MessageTypeSubStructName() string {
	return "MFR_M05_MF_QUERY"
}

//  MFR_M06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M06 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR              `hl7:"false,ERR" json:"err,omitempty"`
	QAK      *QAK               `hl7:"false,QAK" json:"qak,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	MFI      *MFI               `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_QUERY []MFR_M06_MF_QUERY `hl7:"true,MF_QUERY" json:"mf___query,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *MFR_M06) MessageTypeName() string {
	return "MFR_M06"
}

//  MFR_M06_MF_QUERY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M06_MF_QUERY struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	CM0   *CM0          `hl7:"true,CM0" json:"cm_0,omitempty"`
	CM1   []CM1         `hl7:"false,CM1" json:"cm_1,omitempty"`
	CM2   []CM2         `hl7:"false,CM2" json:"cm_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFR_M06_MF_QUERY) MessageTypeSubStructName() string {
	return "MFR_M06_MF_QUERY"
}

//  MFR_M07 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M07 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR              `hl7:"false,ERR" json:"err,omitempty"`
	QAK      *QAK               `hl7:"false,QAK" json:"qak,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	MFI      *MFI               `hl7:"true,MFI" json:"mfi,omitempty"`
	MF_QUERY []MFR_M07_MF_QUERY `hl7:"true,MF_QUERY" json:"mf___query,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *MFR_M07) MessageTypeName() string {
	return "MFR_M07"
}

//  MFR_M07_MF_QUERY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type MFR_M07_MF_QUERY struct {
	MFE   *MFE          `hl7:"true,MFE" json:"mfe,omitempty"`
	CM0   *CM0          `hl7:"true,CM0" json:"cm_0,omitempty"`
	CM2   []CM2         `hl7:"false,CM2" json:"cm_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *MFR_M07_MF_QUERY) MessageTypeSubStructName() string {
	return "MFR_M07_MF_QUERY"
}

//  NMD_N01_APP_STATS represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMD_N01_APP_STATS struct {
	NST   *NST          `hl7:"true,NST" json:"nst,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMD_N01_APP_STATS) MessageTypeSubStructName() string {
	return "NMD_N01_APP_STATS"
}

//  NMD_N01_APP_STATUS represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMD_N01_APP_STATUS struct {
	NSC   *NSC          `hl7:"true,NSC" json:"nsc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMD_N01_APP_STATUS) MessageTypeSubStructName() string {
	return "NMD_N01_APP_STATUS"
}

//  NMD_N01_CLOCK represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMD_N01_CLOCK struct {
	NCK   *NCK          `hl7:"true,NCK" json:"nck,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMD_N01_CLOCK) MessageTypeSubStructName() string {
	return "NMD_N01_CLOCK"
}

//  NMD_N01_CLOCK_AND_STATS_WITH_NOTES represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMD_N01_CLOCK_AND_STATS_WITH_NOTES struct {
	CLOCK      *NMD_N01_CLOCK      `hl7:"false,CLOCK" json:"clock,omitempty"`
	APP_STATS  *NMD_N01_APP_STATS  `hl7:"false,APP_STATS" json:"app___stats,omitempty"`
	APP_STATUS *NMD_N01_APP_STATUS `hl7:"false,APP_STATUS" json:"app___status,omitempty"`
	Other      []interface{}       `json:"other,omitempty"`
}

func (s *NMD_N01_CLOCK_AND_STATS_WITH_NOTES) MessageTypeSubStructName() string {
	return "NMD_N01_CLOCK_AND_STATS_WITH_NOTES"
}

//  NMD_N01 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMD_N01 struct {
	MSH                        *MSH                                 `hl7:"true,MSH" json:"msh,omitempty"`
	CLOCK_AND_STATS_WITH_NOTES []NMD_N01_CLOCK_AND_STATS_WITH_NOTES `hl7:"true,CLOCK_AND_STATS_WITH_NOTES" json:"clock___and___stats___with___notes,omitempty"`
	Other                      []interface{}                        `json:"other,omitempty"`
}

func (s *NMD_N01) MessageTypeName() string {
	return "NMD_N01"
}

//  NMD_N02_APP_STATS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMD_N02_APP_STATS struct {
	NST   *NST          `hl7:"true,NST" json:"nst,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMD_N02_APP_STATS) MessageTypeSubStructName() string {
	return "NMD_N02_APP_STATS"
}

//  NMD_N02_APP_STATUS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMD_N02_APP_STATUS struct {
	NSC   *NSC          `hl7:"true,NSC" json:"nsc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMD_N02_APP_STATUS) MessageTypeSubStructName() string {
	return "NMD_N02_APP_STATUS"
}

//  NMD_N02_CLOCK represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMD_N02_CLOCK struct {
	NCK   *NCK          `hl7:"true,NCK" json:"nck,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMD_N02_CLOCK) MessageTypeSubStructName() string {
	return "NMD_N02_CLOCK"
}

//  NMD_N02_CLOCK_AND_STATS_WITH_NOTES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMD_N02_CLOCK_AND_STATS_WITH_NOTES struct {
	CLOCK      *NMD_N02_CLOCK      `hl7:"false,CLOCK" json:"clock,omitempty"`
	APP_STATS  *NMD_N02_APP_STATS  `hl7:"false,APP_STATS" json:"app___stats,omitempty"`
	APP_STATUS *NMD_N02_APP_STATUS `hl7:"false,APP_STATUS" json:"app___status,omitempty"`
	Other      []interface{}       `json:"other,omitempty"`
}

func (s *NMD_N02_CLOCK_AND_STATS_WITH_NOTES) MessageTypeSubStructName() string {
	return "NMD_N02_CLOCK_AND_STATS_WITH_NOTES"
}

//  NMD_N02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMD_N02 struct {
	MSH                        *MSH                                 `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                        []SFT                                `hl7:"false,SFT" json:"sft,omitempty"`
	CLOCK_AND_STATS_WITH_NOTES []NMD_N02_CLOCK_AND_STATS_WITH_NOTES `hl7:"true,CLOCK_AND_STATS_WITH_NOTES" json:"clock___and___stats___with___notes,omitempty"`
	Other                      []interface{}                        `json:"other,omitempty"`
}

func (s *NMD_N02) MessageTypeName() string {
	return "NMD_N02"
}

//  NMQ_N01_CLOCK_AND_STATISTICS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMQ_N01_CLOCK_AND_STATISTICS struct {
	NCK   *NCK          `hl7:"false,NCK" json:"nck,omitempty"`
	NST   *NST          `hl7:"false,NST" json:"nst,omitempty"`
	NSC   *NSC          `hl7:"false,NSC" json:"nsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMQ_N01_CLOCK_AND_STATISTICS) MessageTypeSubStructName() string {
	return "NMQ_N01_CLOCK_AND_STATISTICS"
}

//  NMQ_N01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMQ_N01 struct {
	MSH                  *MSH                           `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                  []SFT                          `hl7:"false,SFT" json:"sft,omitempty"`
	QRY_WITH_DETAIL      *NMQ_N01_QRY_WITH_DETAIL       `hl7:"false,QRY_WITH_DETAIL" json:"qry___with___detail,omitempty"`
	CLOCK_AND_STATISTICS []NMQ_N01_CLOCK_AND_STATISTICS `hl7:"true,CLOCK_AND_STATISTICS" json:"clock___and___statistics,omitempty"`
	Other                []interface{}                  `json:"other,omitempty"`
}

func (s *NMQ_N01) MessageTypeName() string {
	return "NMQ_N01"
}

//  NMQ_N01_QRY_WITH_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMQ_N01_QRY_WITH_DETAIL struct {
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMQ_N01_QRY_WITH_DETAIL) MessageTypeSubStructName() string {
	return "NMQ_N01_QRY_WITH_DETAIL"
}

//  NMQ_N02_CLOCK_AND_STATISTICS represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMQ_N02_CLOCK_AND_STATISTICS struct {
	NCK   *NCK          `hl7:"false,NCK" json:"nck,omitempty"`
	NST   *NST          `hl7:"false,NST" json:"nst,omitempty"`
	NSC   *NSC          `hl7:"false,NSC" json:"nsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMQ_N02_CLOCK_AND_STATISTICS) MessageTypeSubStructName() string {
	return "NMQ_N02_CLOCK_AND_STATISTICS"
}

//  NMQ_N02 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMQ_N02 struct {
	MSH                  *MSH                           `hl7:"true,MSH" json:"msh,omitempty"`
	QRY_WITH_DETAIL      *NMQ_N02_QRY_WITH_DETAIL       `hl7:"false,QRY_WITH_DETAIL" json:"qry___with___detail,omitempty"`
	CLOCK_AND_STATISTICS []NMQ_N02_CLOCK_AND_STATISTICS `hl7:"true,CLOCK_AND_STATISTICS" json:"clock___and___statistics,omitempty"`
	Other                []interface{}                  `json:"other,omitempty"`
}

func (s *NMQ_N02) MessageTypeName() string {
	return "NMQ_N02"
}

//  NMQ_N02_QRY_WITH_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMQ_N02_QRY_WITH_DETAIL struct {
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMQ_N02_QRY_WITH_DETAIL) MessageTypeSubStructName() string {
	return "NMQ_N02_QRY_WITH_DETAIL"
}

//  NMR_N01_CLOCK_AND_STATS_WITH_NOTES_ALT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMR_N01_CLOCK_AND_STATS_WITH_NOTES_ALT struct {
	NCK   *NCK          `hl7:"false,NCK" json:"nck,omitempty"`
	NTE1  []NTE         `hl7:"false,NTE1" json:"nte_1,omitempty"`
	NST   *NST          `hl7:"false,NST" json:"nst,omitempty"`
	NTE2  []NTE         `hl7:"false,NTE2" json:"nte_2,omitempty"`
	NSC   *NSC          `hl7:"false,NSC" json:"nsc,omitempty"`
	NTE3  []NTE         `hl7:"false,NTE3" json:"nte_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMR_N01_CLOCK_AND_STATS_WITH_NOTES_ALT) MessageTypeSubStructName() string {
	return "NMR_N01_CLOCK_AND_STATS_WITH_NOTES_ALT"
}

//  NMR_N01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type NMR_N01 struct {
	MSH                            *MSH                                     `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                            []SFT                                    `hl7:"false,SFT" json:"sft,omitempty"`
	MSA                            *MSA                                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR                            []ERR                                    `hl7:"false,ERR" json:"err,omitempty"`
	QRD                            *QRD                                     `hl7:"false,QRD" json:"qrd,omitempty"`
	CLOCK_AND_STATS_WITH_NOTES_ALT []NMR_N01_CLOCK_AND_STATS_WITH_NOTES_ALT `hl7:"true,CLOCK_AND_STATS_WITH_NOTES_ALT" json:"clock___and___stats___with___notes___alt,omitempty"`
	Other                          []interface{}                            `json:"other,omitempty"`
}

func (s *NMR_N01) MessageTypeName() string {
	return "NMR_N01"
}

//  NMR_N02_CLOCK_AND_STATS_WITH_NOTES_ALT represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMR_N02_CLOCK_AND_STATS_WITH_NOTES_ALT struct {
	NCK   *NCK          `hl7:"false,NCK" json:"nck,omitempty"`
	NTE1  []NTE         `hl7:"false,NTE1" json:"nte_1,omitempty"`
	NST   *NST          `hl7:"false,NST" json:"nst,omitempty"`
	NTE2  []NTE         `hl7:"false,NTE2" json:"nte_2,omitempty"`
	NSC   *NSC          `hl7:"false,NSC" json:"nsc,omitempty"`
	NTE3  []NTE         `hl7:"false,NTE3" json:"nte_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *NMR_N02_CLOCK_AND_STATS_WITH_NOTES_ALT) MessageTypeSubStructName() string {
	return "NMR_N02_CLOCK_AND_STATS_WITH_NOTES_ALT"
}

//  NMR_N02 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type NMR_N02 struct {
	MSH                            *MSH                                     `hl7:"true,MSH" json:"msh,omitempty"`
	MSA                            *MSA                                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR                            *ERR                                     `hl7:"false,ERR" json:"err,omitempty"`
	QRD                            *QRD                                     `hl7:"false,QRD" json:"qrd,omitempty"`
	CLOCK_AND_STATS_WITH_NOTES_ALT []NMR_N02_CLOCK_AND_STATS_WITH_NOTES_ALT `hl7:"true,CLOCK_AND_STATS_WITH_NOTES_ALT" json:"clock___and___stats___with___notes___alt,omitempty"`
	Other                          []interface{}                            `json:"other,omitempty"`
}

func (s *NMR_N02) MessageTypeName() string {
	return "NMR_N02"
}

//  OMB_O27 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMB_O27 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OMB_O27_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OMB_O27_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OMB_O27) MessageTypeName() string {
	return "OMB_O27"
}

//  OMB_O27_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMB_O27_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMB_O27_INSURANCE) MessageTypeSubStructName() string {
	return "OMB_O27_INSURANCE"
}

//  OMB_O27_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMB_O27_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMB_O27_OBSERVATION) MessageTypeSubStructName() string {
	return "OMB_O27_OBSERVATION"
}

//  OMB_O27_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMB_O27_ORDER struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING      []OMB_O27_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	BPO         *BPO                  `hl7:"true,BPO" json:"bpo,omitempty"`
	SPM         *SPM                  `hl7:"false,SPM" json:"spm,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	DG1         []DG1                 `hl7:"false,DG1" json:"dg_1,omitempty"`
	OBSERVATION []OMB_O27_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	FT1         []FT1                 `hl7:"false,FT1" json:"ft_1,omitempty"`
	BLG         *BLG                  `hl7:"false,BLG" json:"blg,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMB_O27_ORDER) MessageTypeSubStructName() string {
	return "OMB_O27_ORDER"
}

//  OMB_O27_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMB_O27_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMB_O27_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMB_O27_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMB_O27_PATIENT) MessageTypeSubStructName() string {
	return "OMB_O27_PATIENT"
}

//  OMB_O27_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMB_O27_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMB_O27_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMB_O27_PATIENT_VISIT"
}

//  OMB_O27_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMB_O27_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMB_O27_TIMING) MessageTypeSubStructName() string {
	return "OMB_O27_TIMING"
}

//  OMD_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMD_O01 struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	NTE        []NTE                `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT    *OMD_O01_PATIENT     `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER_DIET []OMD_O01_ORDER_DIET `hl7:"true,ORDER_DIET" json:"order___diet,omitempty"`
	ORDER_TRAY []OMD_O01_ORDER_TRAY `hl7:"false,ORDER_TRAY" json:"order___tray,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *OMD_O01) MessageTypeName() string {
	return "OMD_O01"
}

//  OMD_O01_DIET represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMD_O01_DIET struct {
	ODS         []ODS                 `hl7:"true,ODS" json:"ods,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []OMD_O01_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMD_O01_DIET) MessageTypeSubStructName() string {
	return "OMD_O01_DIET"
}

//  OMD_O01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMD_O01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O01_INSURANCE) MessageTypeSubStructName() string {
	return "OMD_O01_INSURANCE"
}

//  OMD_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMD_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "OMD_O01_OBSERVATION"
}

//  OMD_O01_ORDER_DIET represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMD_O01_ORDER_DIET struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	DIET  *OMD_O01_DIET `hl7:"false,DIET" json:"diet,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O01_ORDER_DIET) MessageTypeSubStructName() string {
	return "OMD_O01_ORDER_DIET"
}

//  OMD_O01_ORDER_TRAY represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMD_O01_ORDER_TRAY struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	ODT   []ODT         `hl7:"true,ODT" json:"odt,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O01_ORDER_TRAY) MessageTypeSubStructName() string {
	return "OMD_O01_ORDER_TRAY"
}

//  OMD_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMD_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMD_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMD_O01_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMD_O01_PATIENT) MessageTypeSubStructName() string {
	return "OMD_O01_PATIENT"
}

//  OMD_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMD_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMD_O01_PATIENT_VISIT"
}

//  OMD_O03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03 struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	SFT        []SFT                `hl7:"false,SFT" json:"sft,omitempty"`
	NTE        []NTE                `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT    *OMD_O03_PATIENT     `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER_DIET []OMD_O03_ORDER_DIET `hl7:"true,ORDER_DIET" json:"order___diet,omitempty"`
	ORDER_TRAY []OMD_O03_ORDER_TRAY `hl7:"false,ORDER_TRAY" json:"order___tray,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *OMD_O03) MessageTypeName() string {
	return "OMD_O03"
}

//  OMD_O03_DIET represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_DIET struct {
	ODS         []ODS                 `hl7:"true,ODS" json:"ods,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []OMD_O03_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMD_O03_DIET) MessageTypeSubStructName() string {
	return "OMD_O03_DIET"
}

//  OMD_O03_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O03_INSURANCE) MessageTypeSubStructName() string {
	return "OMD_O03_INSURANCE"
}

//  OMD_O03_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O03_OBSERVATION) MessageTypeSubStructName() string {
	return "OMD_O03_OBSERVATION"
}

//  OMD_O03_ORDER_DIET represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_ORDER_DIET struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING_DIET []OMD_O03_TIMING_DIET `hl7:"false,TIMING_DIET" json:"timing___diet,omitempty"`
	DIET        *OMD_O03_DIET         `hl7:"false,DIET" json:"diet,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMD_O03_ORDER_DIET) MessageTypeSubStructName() string {
	return "OMD_O03_ORDER_DIET"
}

//  OMD_O03_ORDER_TRAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_ORDER_TRAY struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING_TRAY []OMD_O03_TIMING_TRAY `hl7:"false,TIMING_TRAY" json:"timing___tray,omitempty"`
	ODT         []ODT                 `hl7:"true,ODT" json:"odt,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMD_O03_ORDER_TRAY) MessageTypeSubStructName() string {
	return "OMD_O03_ORDER_TRAY"
}

//  OMD_O03_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMD_O03_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMD_O03_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMD_O03_PATIENT) MessageTypeSubStructName() string {
	return "OMD_O03_PATIENT"
}

//  OMD_O03_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O03_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMD_O03_PATIENT_VISIT"
}

//  OMD_O03_TIMING_DIET represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_TIMING_DIET struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O03_TIMING_DIET) MessageTypeSubStructName() string {
	return "OMD_O03_TIMING_DIET"
}

//  OMD_O03_TIMING_TRAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMD_O03_TIMING_TRAY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMD_O03_TIMING_TRAY) MessageTypeSubStructName() string {
	return "OMD_O03_TIMING_TRAY"
}

//  OMG_O19_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_CONTAINER) MessageTypeSubStructName() string {
	return "OMG_O19_CONTAINER"
}

//  OMG_O19 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OMG_O19_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OMG_O19_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OMG_O19) MessageTypeName() string {
	return "OMG_O19"
}

//  OMG_O19_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_INSURANCE) MessageTypeSubStructName() string {
	return "OMG_O19_INSURANCE"
}

//  OMG_O19_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_OBSERVATION) MessageTypeSubStructName() string {
	return "OMG_O19_OBSERVATION"
}

//  OMG_O19_OBSERVATION_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_OBSERVATION_PRIOR struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_OBSERVATION_PRIOR) MessageTypeSubStructName() string {
	return "OMG_O19_OBSERVATION_PRIOR"
}

//  OMG_O19_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_ORDER struct {
	ORC          *ORC                   `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING       []OMG_O19_TIMING       `hl7:"false,TIMING" json:"timing,omitempty"`
	OBR          *OBR                   `hl7:"true,OBR" json:"obr,omitempty"`
	NTE          []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	CTD          *CTD                   `hl7:"false,CTD" json:"ctd,omitempty"`
	DG1          []DG1                  `hl7:"false,DG1" json:"dg_1,omitempty"`
	OBSERVATION  []OMG_O19_OBSERVATION  `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	SPECIMEN     []OMG_O19_SPECIMEN     `hl7:"false,SPECIMEN" json:"specimen,omitempty"`
	PRIOR_RESULT []OMG_O19_PRIOR_RESULT `hl7:"false,PRIOR_RESULT" json:"prior___result,omitempty"`
	FT1          []FT1                  `hl7:"false,FT1" json:"ft_1,omitempty"`
	CTI          []CTI                  `hl7:"false,CTI" json:"cti,omitempty"`
	BLG          *BLG                   `hl7:"false,BLG" json:"blg,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *OMG_O19_ORDER) MessageTypeSubStructName() string {
	return "OMG_O19_ORDER"
}

//  OMG_O19_ORDER_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_ORDER_PRIOR struct {
	ORC               *ORC                        `hl7:"false,ORC" json:"orc,omitempty"`
	OBR               *OBR                        `hl7:"true,OBR" json:"obr,omitempty"`
	TIMING_PRIOR      []OMG_O19_TIMING_PRIOR      `hl7:"false,TIMING_PRIOR" json:"timing___prior,omitempty"`
	NTE               []NTE                       `hl7:"false,NTE" json:"nte,omitempty"`
	CTD               *CTD                        `hl7:"false,CTD" json:"ctd,omitempty"`
	OBSERVATION_PRIOR []OMG_O19_OBSERVATION_PRIOR `hl7:"true,OBSERVATION_PRIOR" json:"observation___prior,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *OMG_O19_ORDER_PRIOR) MessageTypeSubStructName() string {
	return "OMG_O19_ORDER_PRIOR"
}

//  OMG_O19_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	NK1           []NK1                  `hl7:"false,NK1" json:"nk_1,omitempty"`
	PATIENT_VISIT *OMG_O19_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMG_O19_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMG_O19_PATIENT) MessageTypeSubStructName() string {
	return "OMG_O19_PATIENT"
}

//  OMG_O19_PATIENT_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_PATIENT_PRIOR struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_PATIENT_PRIOR) MessageTypeSubStructName() string {
	return "OMG_O19_PATIENT_PRIOR"
}

//  OMG_O19_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMG_O19_PATIENT_VISIT"
}

//  OMG_O19_PATIENT_VISIT_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_PATIENT_VISIT_PRIOR struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_PATIENT_VISIT_PRIOR) MessageTypeSubStructName() string {
	return "OMG_O19_PATIENT_VISIT_PRIOR"
}

//  OMG_O19_PRIOR_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_PRIOR_RESULT struct {
	PATIENT_PRIOR       *OMG_O19_PATIENT_PRIOR       `hl7:"false,PATIENT_PRIOR" json:"patient___prior,omitempty"`
	PATIENT_VISIT_PRIOR *OMG_O19_PATIENT_VISIT_PRIOR `hl7:"false,PATIENT_VISIT_PRIOR" json:"patient___visit___prior,omitempty"`
	AL1                 []AL1                        `hl7:"false,AL1" json:"al_1,omitempty"`
	ORDER_PRIOR         []OMG_O19_ORDER_PRIOR        `hl7:"true,ORDER_PRIOR" json:"order___prior,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *OMG_O19_PRIOR_RESULT) MessageTypeSubStructName() string {
	return "OMG_O19_PRIOR_RESULT"
}

//  OMG_O19_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_SPECIMEN struct {
	SPM       *SPM                `hl7:"true,SPM" json:"spm,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	CONTAINER []OMG_O19_CONTAINER `hl7:"false,CONTAINER" json:"container,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *OMG_O19_SPECIMEN) MessageTypeSubStructName() string {
	return "OMG_O19_SPECIMEN"
}

//  OMG_O19_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_TIMING) MessageTypeSubStructName() string {
	return "OMG_O19_TIMING"
}

//  OMG_O19_TIMING_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMG_O19_TIMING_PRIOR struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMG_O19_TIMING_PRIOR) MessageTypeSubStructName() string {
	return "OMG_O19_TIMING_PRIOR"
}

//  OMI_O23 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMI_O23 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OMI_O23_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OMI_O23_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OMI_O23) MessageTypeName() string {
	return "OMI_O23"
}

//  OMI_O23_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMI_O23_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMI_O23_INSURANCE) MessageTypeSubStructName() string {
	return "OMI_O23_INSURANCE"
}

//  OMI_O23_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMI_O23_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMI_O23_OBSERVATION) MessageTypeSubStructName() string {
	return "OMI_O23_OBSERVATION"
}

//  OMI_O23_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMI_O23_ORDER struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING      []OMI_O23_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	CTD         *CTD                  `hl7:"false,CTD" json:"ctd,omitempty"`
	DG1         []DG1                 `hl7:"false,DG1" json:"dg_1,omitempty"`
	OBSERVATION []OMI_O23_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	IPC         []IPC                 `hl7:"true,IPC" json:"ipc,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMI_O23_ORDER) MessageTypeSubStructName() string {
	return "OMI_O23_ORDER"
}

//  OMI_O23_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMI_O23_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMI_O23_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMI_O23_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMI_O23_PATIENT) MessageTypeSubStructName() string {
	return "OMI_O23_PATIENT"
}

//  OMI_O23_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMI_O23_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMI_O23_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMI_O23_PATIENT_VISIT"
}

//  OMI_O23_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMI_O23_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMI_O23_TIMING) MessageTypeSubStructName() string {
	return "OMI_O23_TIMING"
}

//  OML_O21_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_CONTAINER) MessageTypeSubStructName() string {
	return "OML_O21_CONTAINER"
}

//  OML_O21_CONTAINER_1 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type OML_O21_CONTAINER_1 struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_CONTAINER_1) MessageTypeSubStructName() string {
	return "OML_O21_CONTAINER_1"
}

//  OML_O21_CONTAINER_2 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type OML_O21_CONTAINER_2 struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_CONTAINER_2) MessageTypeSubStructName() string {
	return "OML_O21_CONTAINER_2"
}

//  OML_O21 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OML_O21_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OML_O21_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OML_O21) MessageTypeName() string {
	return "OML_O21"
}

//  OML_O21_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_INSURANCE) MessageTypeSubStructName() string {
	return "OML_O21_INSURANCE"
}

//  OML_O21_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	TCD   *TCD          `hl7:"false,TCD" json:"tcd,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_OBSERVATION) MessageTypeSubStructName() string {
	return "OML_O21_OBSERVATION"
}

//  OML_O21_OBSERVATION_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_OBSERVATION_PRIOR struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_OBSERVATION_PRIOR) MessageTypeSubStructName() string {
	return "OML_O21_OBSERVATION_PRIOR"
}

//  OML_O21_OBSERVATION_REQUEST represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_OBSERVATION_REQUEST struct {
	OBR          *OBR                   `hl7:"true,OBR" json:"obr,omitempty"`
	TCD          *TCD                   `hl7:"false,TCD" json:"tcd,omitempty"`
	NTE          []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	CTD          *CTD                   `hl7:"false,CTD" json:"ctd,omitempty"`
	DG1          []DG1                  `hl7:"false,DG1" json:"dg_1,omitempty"`
	OBSERVATION  []OML_O21_OBSERVATION  `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	SPECIMEN     []OML_O21_SPECIMEN     `hl7:"false,SPECIMEN" json:"specimen,omitempty"`
	PRIOR_RESULT []OML_O21_PRIOR_RESULT `hl7:"false,PRIOR_RESULT" json:"prior___result,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *OML_O21_OBSERVATION_REQUEST) MessageTypeSubStructName() string {
	return "OML_O21_OBSERVATION_REQUEST"
}

//  OML_O21_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_ORDER struct {
	ORC                 *ORC                         `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING              []OML_O21_TIMING             `hl7:"false,TIMING" json:"timing,omitempty"`
	OBSERVATION_REQUEST *OML_O21_OBSERVATION_REQUEST `hl7:"false,OBSERVATION_REQUEST" json:"observation___request,omitempty"`
	FT1                 []FT1                        `hl7:"false,FT1" json:"ft_1,omitempty"`
	CTI                 []CTI                        `hl7:"false,CTI" json:"cti,omitempty"`
	BLG                 *BLG                         `hl7:"false,BLG" json:"blg,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *OML_O21_ORDER) MessageTypeSubStructName() string {
	return "OML_O21_ORDER"
}

//  OML_O21_ORDER_GENERAL represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type OML_O21_ORDER_GENERAL struct {
	CONTAINER_1 *OML_O21_CONTAINER_1 `hl7:"false,CONTAINER_1" json:"container___1,omitempty"`
	ORDER       []OML_O21_ORDER      `hl7:"true,ORDER" json:"order,omitempty"`
	Other       []interface{}        `json:"other,omitempty"`
}

func (s *OML_O21_ORDER_GENERAL) MessageTypeSubStructName() string {
	return "OML_O21_ORDER_GENERAL"
}

//  OML_O21_ORDER_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_ORDER_PRIOR struct {
	ORC               *ORC                        `hl7:"false,ORC" json:"orc,omitempty"`
	OBR               *OBR                        `hl7:"true,OBR" json:"obr,omitempty"`
	NTE               []NTE                       `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_PRIOR      []OML_O21_TIMING_PRIOR      `hl7:"false,TIMING_PRIOR" json:"timing___prior,omitempty"`
	OBSERVATION_PRIOR []OML_O21_OBSERVATION_PRIOR `hl7:"true,OBSERVATION_PRIOR" json:"observation___prior,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *OML_O21_ORDER_PRIOR) MessageTypeSubStructName() string {
	return "OML_O21_ORDER_PRIOR"
}

//  OML_O21_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	NK1           []NK1                  `hl7:"false,NK1" json:"nk_1,omitempty"`
	PATIENT_VISIT *OML_O21_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OML_O21_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OML_O21_PATIENT) MessageTypeSubStructName() string {
	return "OML_O21_PATIENT"
}

//  OML_O21_PATIENT_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_PATIENT_PRIOR struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_PATIENT_PRIOR) MessageTypeSubStructName() string {
	return "OML_O21_PATIENT_PRIOR"
}

//  OML_O21_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OML_O21_PATIENT_VISIT"
}

//  OML_O21_PATIENT_VISIT_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_PATIENT_VISIT_PRIOR struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_PATIENT_VISIT_PRIOR) MessageTypeSubStructName() string {
	return "OML_O21_PATIENT_VISIT_PRIOR"
}

//  OML_O21_PRIOR_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_PRIOR_RESULT struct {
	PATIENT_PRIOR       *OML_O21_PATIENT_PRIOR       `hl7:"false,PATIENT_PRIOR" json:"patient___prior,omitempty"`
	PATIENT_VISIT_PRIOR *OML_O21_PATIENT_VISIT_PRIOR `hl7:"false,PATIENT_VISIT_PRIOR" json:"patient___visit___prior,omitempty"`
	AL1                 []AL1                        `hl7:"false,AL1" json:"al_1,omitempty"`
	ORDER_PRIOR         []OML_O21_ORDER_PRIOR        `hl7:"true,ORDER_PRIOR" json:"order___prior,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *OML_O21_PRIOR_RESULT) MessageTypeSubStructName() string {
	return "OML_O21_PRIOR_RESULT"
}

//  OML_O21_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_SPECIMEN struct {
	SPM       *SPM                `hl7:"true,SPM" json:"spm,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	CONTAINER []OML_O21_CONTAINER `hl7:"false,CONTAINER" json:"container,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *OML_O21_SPECIMEN) MessageTypeSubStructName() string {
	return "OML_O21_SPECIMEN"
}

//  OML_O21_TIIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type OML_O21_TIIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_TIIMING) MessageTypeSubStructName() string {
	return "OML_O21_TIIMING"
}

//  OML_O21_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_TIMING) MessageTypeSubStructName() string {
	return "OML_O21_TIMING"
}

//  OML_O21_TIMING_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O21_TIMING_PRIOR struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O21_TIMING_PRIOR) MessageTypeSubStructName() string {
	return "OML_O21_TIMING_PRIOR"
}

//  OML_O33 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT  *OML_O33_PATIENT   `hl7:"false,PATIENT" json:"patient,omitempty"`
	SPECIMEN []OML_O33_SPECIMEN `hl7:"true,SPECIMEN" json:"specimen,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *OML_O33) MessageTypeName() string {
	return "OML_O33"
}

//  OML_O33_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_INSURANCE) MessageTypeSubStructName() string {
	return "OML_O33_INSURANCE"
}

//  OML_O33_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	TCD   *TCD          `hl7:"false,TCD" json:"tcd,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_OBSERVATION) MessageTypeSubStructName() string {
	return "OML_O33_OBSERVATION"
}

//  OML_O33_OBSERVATION_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_OBSERVATION_PRIOR struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_OBSERVATION_PRIOR) MessageTypeSubStructName() string {
	return "OML_O33_OBSERVATION_PRIOR"
}

//  OML_O33_OBSERVATION_REQUEST represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_OBSERVATION_REQUEST struct {
	OBR          *OBR                   `hl7:"true,OBR" json:"obr,omitempty"`
	TCD          *TCD                   `hl7:"false,TCD" json:"tcd,omitempty"`
	NTE          []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	DG1          []DG1                  `hl7:"false,DG1" json:"dg_1,omitempty"`
	OBSERVATION  []OML_O33_OBSERVATION  `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	PRIOR_RESULT []OML_O33_PRIOR_RESULT `hl7:"false,PRIOR_RESULT" json:"prior___result,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *OML_O33_OBSERVATION_REQUEST) MessageTypeSubStructName() string {
	return "OML_O33_OBSERVATION_REQUEST"
}

//  OML_O33_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_ORDER struct {
	ORC                 *ORC                         `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING              []OML_O33_TIMING             `hl7:"false,TIMING" json:"timing,omitempty"`
	OBSERVATION_REQUEST *OML_O33_OBSERVATION_REQUEST `hl7:"false,OBSERVATION_REQUEST" json:"observation___request,omitempty"`
	FT1                 []FT1                        `hl7:"false,FT1" json:"ft_1,omitempty"`
	CTI                 []CTI                        `hl7:"false,CTI" json:"cti,omitempty"`
	BLG                 *BLG                         `hl7:"false,BLG" json:"blg,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *OML_O33_ORDER) MessageTypeSubStructName() string {
	return "OML_O33_ORDER"
}

//  OML_O33_ORDER_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_ORDER_PRIOR struct {
	ORC               *ORC                        `hl7:"false,ORC" json:"orc,omitempty"`
	OBR               *OBR                        `hl7:"true,OBR" json:"obr,omitempty"`
	NTE               []NTE                       `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_PRIOR      []OML_O33_TIMING_PRIOR      `hl7:"false,TIMING_PRIOR" json:"timing___prior,omitempty"`
	OBSERVATION_PRIOR []OML_O33_OBSERVATION_PRIOR `hl7:"true,OBSERVATION_PRIOR" json:"observation___prior,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *OML_O33_ORDER_PRIOR) MessageTypeSubStructName() string {
	return "OML_O33_ORDER_PRIOR"
}

//  OML_O33_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	NK1           []NK1                  `hl7:"false,NK1" json:"nk_1,omitempty"`
	PATIENT_VISIT *OML_O33_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OML_O33_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OML_O33_PATIENT) MessageTypeSubStructName() string {
	return "OML_O33_PATIENT"
}

//  OML_O33_PATIENT_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_PATIENT_PRIOR struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_PATIENT_PRIOR) MessageTypeSubStructName() string {
	return "OML_O33_PATIENT_PRIOR"
}

//  OML_O33_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OML_O33_PATIENT_VISIT"
}

//  OML_O33_PATIENT_VISIT_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_PATIENT_VISIT_PRIOR struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_PATIENT_VISIT_PRIOR) MessageTypeSubStructName() string {
	return "OML_O33_PATIENT_VISIT_PRIOR"
}

//  OML_O33_PRIOR_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_PRIOR_RESULT struct {
	PATIENT_PRIOR       *OML_O33_PATIENT_PRIOR       `hl7:"false,PATIENT_PRIOR" json:"patient___prior,omitempty"`
	PATIENT_VISIT_PRIOR *OML_O33_PATIENT_VISIT_PRIOR `hl7:"false,PATIENT_VISIT_PRIOR" json:"patient___visit___prior,omitempty"`
	AL1                 []AL1                        `hl7:"false,AL1" json:"al_1,omitempty"`
	ORDER_PRIOR         []OML_O33_ORDER_PRIOR        `hl7:"true,ORDER_PRIOR" json:"order___prior,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *OML_O33_PRIOR_RESULT) MessageTypeSubStructName() string {
	return "OML_O33_PRIOR_RESULT"
}

//  OML_O33_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_SPECIMEN struct {
	SPM   *SPM            `hl7:"true,SPM" json:"spm,omitempty"`
	OBX   []OBX           `hl7:"false,OBX" json:"obx,omitempty"`
	SAC   []SAC           `hl7:"false,SAC" json:"sac,omitempty"`
	ORDER []OML_O33_ORDER `hl7:"true,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *OML_O33_SPECIMEN) MessageTypeSubStructName() string {
	return "OML_O33_SPECIMEN"
}

//  OML_O33_TIIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type OML_O33_TIIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_TIIMING) MessageTypeSubStructName() string {
	return "OML_O33_TIIMING"
}

//  OML_O33_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_TIMING) MessageTypeSubStructName() string {
	return "OML_O33_TIMING"
}

//  OML_O33_TIMING_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O33_TIMING_PRIOR struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O33_TIMING_PRIOR) MessageTypeSubStructName() string {
	return "OML_O33_TIMING_PRIOR"
}

//  OML_O35 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT  *OML_O35_PATIENT   `hl7:"false,PATIENT" json:"patient,omitempty"`
	SPECIMEN []OML_O35_SPECIMEN `hl7:"true,SPECIMEN" json:"specimen,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *OML_O35) MessageTypeName() string {
	return "OML_O35"
}

//  OML_O35_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_INSURANCE) MessageTypeSubStructName() string {
	return "OML_O35_INSURANCE"
}

//  OML_O35_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	TCD   *TCD          `hl7:"false,TCD" json:"tcd,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_OBSERVATION) MessageTypeSubStructName() string {
	return "OML_O35_OBSERVATION"
}

//  OML_O35_OBSERVATION_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_OBSERVATION_PRIOR struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_OBSERVATION_PRIOR) MessageTypeSubStructName() string {
	return "OML_O35_OBSERVATION_PRIOR"
}

//  OML_O35_OBSERVATION_REQUEST represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_OBSERVATION_REQUEST struct {
	OBR          *OBR                   `hl7:"true,OBR" json:"obr,omitempty"`
	TCD          *TCD                   `hl7:"false,TCD" json:"tcd,omitempty"`
	NTE          []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	DG1          []DG1                  `hl7:"false,DG1" json:"dg_1,omitempty"`
	OBSERVATION  []OML_O35_OBSERVATION  `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	PRIOR_RESULT []OML_O35_PRIOR_RESULT `hl7:"false,PRIOR_RESULT" json:"prior___result,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *OML_O35_OBSERVATION_REQUEST) MessageTypeSubStructName() string {
	return "OML_O35_OBSERVATION_REQUEST"
}

//  OML_O35_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_ORDER struct {
	ORC                 *ORC                         `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING              []OML_O35_TIMING             `hl7:"false,TIMING" json:"timing,omitempty"`
	OBSERVATION_REQUEST *OML_O35_OBSERVATION_REQUEST `hl7:"false,OBSERVATION_REQUEST" json:"observation___request,omitempty"`
	FT1                 []FT1                        `hl7:"false,FT1" json:"ft_1,omitempty"`
	CTI                 []CTI                        `hl7:"false,CTI" json:"cti,omitempty"`
	BLG                 *BLG                         `hl7:"false,BLG" json:"blg,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *OML_O35_ORDER) MessageTypeSubStructName() string {
	return "OML_O35_ORDER"
}

//  OML_O35_ORDER_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_ORDER_PRIOR struct {
	ORC               *ORC                        `hl7:"false,ORC" json:"orc,omitempty"`
	OBR               *OBR                        `hl7:"true,OBR" json:"obr,omitempty"`
	NTE               []NTE                       `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_PRIOR      []OML_O35_TIMING_PRIOR      `hl7:"false,TIMING_PRIOR" json:"timing___prior,omitempty"`
	OBSERVATION_PRIOR []OML_O35_OBSERVATION_PRIOR `hl7:"true,OBSERVATION_PRIOR" json:"observation___prior,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *OML_O35_ORDER_PRIOR) MessageTypeSubStructName() string {
	return "OML_O35_ORDER_PRIOR"
}

//  OML_O35_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	NK1           []NK1                  `hl7:"false,NK1" json:"nk_1,omitempty"`
	PATIENT_VISIT *OML_O35_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OML_O35_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OML_O35_PATIENT) MessageTypeSubStructName() string {
	return "OML_O35_PATIENT"
}

//  OML_O35_PATIENT_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_PATIENT_PRIOR struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_PATIENT_PRIOR) MessageTypeSubStructName() string {
	return "OML_O35_PATIENT_PRIOR"
}

//  OML_O35_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OML_O35_PATIENT_VISIT"
}

//  OML_O35_PATIENT_VISIT_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_PATIENT_VISIT_PRIOR struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_PATIENT_VISIT_PRIOR) MessageTypeSubStructName() string {
	return "OML_O35_PATIENT_VISIT_PRIOR"
}

//  OML_O35_PRIOR_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_PRIOR_RESULT struct {
	PATIENT_PRIOR       *OML_O35_PATIENT_PRIOR       `hl7:"false,PATIENT_PRIOR" json:"patient___prior,omitempty"`
	PATIENT_VISIT_PRIOR *OML_O35_PATIENT_VISIT_PRIOR `hl7:"false,PATIENT_VISIT_PRIOR" json:"patient___visit___prior,omitempty"`
	AL1                 []AL1                        `hl7:"false,AL1" json:"al_1,omitempty"`
	ORDER_PRIOR         []OML_O35_ORDER_PRIOR        `hl7:"true,ORDER_PRIOR" json:"order___prior,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *OML_O35_PRIOR_RESULT) MessageTypeSubStructName() string {
	return "OML_O35_PRIOR_RESULT"
}

//  OML_O35_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_SPECIMEN struct {
	SPM                *SPM                         `hl7:"true,SPM" json:"spm,omitempty"`
	OBX                []OBX                        `hl7:"false,OBX" json:"obx,omitempty"`
	SPECIMEN_CONTAINER []OML_O35_SPECIMEN_CONTAINER `hl7:"true,SPECIMEN_CONTAINER" json:"specimen___container,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *OML_O35_SPECIMEN) MessageTypeSubStructName() string {
	return "OML_O35_SPECIMEN"
}

//  OML_O35_SPECIMEN_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_SPECIMEN_CONTAINER struct {
	SAC   *SAC            `hl7:"true,SAC" json:"sac,omitempty"`
	ORDER []OML_O35_ORDER `hl7:"true,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *OML_O35_SPECIMEN_CONTAINER) MessageTypeSubStructName() string {
	return "OML_O35_SPECIMEN_CONTAINER"
}

//  OML_O35_TIIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type OML_O35_TIIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_TIIMING) MessageTypeSubStructName() string {
	return "OML_O35_TIIMING"
}

//  OML_O35_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_TIMING) MessageTypeSubStructName() string {
	return "OML_O35_TIMING"
}

//  OML_O35_TIMING_PRIOR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OML_O35_TIMING_PRIOR struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OML_O35_TIMING_PRIOR) MessageTypeSubStructName() string {
	return "OML_O35_TIMING_PRIOR"
}

//  OMN_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMN_O01 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OMN_O01_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OMN_O01_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OMN_O01) MessageTypeName() string {
	return "OMN_O01"
}

//  OMN_O01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMN_O01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMN_O01_INSURANCE) MessageTypeSubStructName() string {
	return "OMN_O01_INSURANCE"
}

//  OMN_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMN_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMN_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "OMN_O01_OBSERVATION"
}

//  OMN_O01_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMN_O01_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *OMN_O01_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	BLG          *BLG                  `hl7:"false,BLG" json:"blg,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *OMN_O01_ORDER) MessageTypeSubStructName() string {
	return "OMN_O01_ORDER"
}

//  OMN_O01_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMN_O01_ORDER_DETAIL struct {
	RQD         *RQD                  `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1         *RQ1                  `hl7:"false,RQ1" json:"rq_1,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []OMN_O01_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMN_O01_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "OMN_O01_ORDER_DETAIL"
}

//  OMN_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMN_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMN_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMN_O01_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMN_O01_PATIENT) MessageTypeSubStructName() string {
	return "OMN_O01_PATIENT"
}

//  OMN_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMN_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMN_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMN_O01_PATIENT_VISIT"
}

//  OMN_O07 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMN_O07 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OMN_O07_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OMN_O07_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OMN_O07) MessageTypeName() string {
	return "OMN_O07"
}

//  OMN_O07_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMN_O07_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMN_O07_INSURANCE) MessageTypeSubStructName() string {
	return "OMN_O07_INSURANCE"
}

//  OMN_O07_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMN_O07_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMN_O07_OBSERVATION) MessageTypeSubStructName() string {
	return "OMN_O07_OBSERVATION"
}

//  OMN_O07_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMN_O07_ORDER struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING      []OMN_O07_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	RQD         *RQD                  `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1         *RQ1                  `hl7:"false,RQ1" json:"rq_1,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []OMN_O07_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	BLG         *BLG                  `hl7:"false,BLG" json:"blg,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMN_O07_ORDER) MessageTypeSubStructName() string {
	return "OMN_O07_ORDER"
}

//  OMN_O07_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMN_O07_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMN_O07_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMN_O07_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMN_O07_PATIENT) MessageTypeSubStructName() string {
	return "OMN_O07_PATIENT"
}

//  OMN_O07_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMN_O07_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMN_O07_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMN_O07_PATIENT_VISIT"
}

//  OMN_O07_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMN_O07_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMN_O07_TIMING) MessageTypeSubStructName() string {
	return "OMN_O07_TIMING"
}

//  OMP_O09_COMPONENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMP_O09_COMPONENT struct {
	RXC   *RXC          `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMP_O09_COMPONENT) MessageTypeSubStructName() string {
	return "OMP_O09_COMPONENT"
}

//  OMP_O09 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMP_O09 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OMP_O09_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OMP_O09_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OMP_O09) MessageTypeName() string {
	return "OMP_O09"
}

//  OMP_O09_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMP_O09_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMP_O09_INSURANCE) MessageTypeSubStructName() string {
	return "OMP_O09_INSURANCE"
}

//  OMP_O09_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMP_O09_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMP_O09_OBSERVATION) MessageTypeSubStructName() string {
	return "OMP_O09_OBSERVATION"
}

//  OMP_O09_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMP_O09_ORDER struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING      []OMP_O09_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	RXO         *RXO                  `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	RXR         []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENT   []OMP_O09_COMPONENT   `hl7:"false,COMPONENT" json:"component,omitempty"`
	OBSERVATION []OMP_O09_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	FT1         []FT1                 `hl7:"false,FT1" json:"ft_1,omitempty"`
	BLG         *BLG                  `hl7:"false,BLG" json:"blg,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMP_O09_ORDER) MessageTypeSubStructName() string {
	return "OMP_O09_ORDER"
}

//  OMP_O09_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMP_O09_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMP_O09_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMP_O09_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMP_O09_PATIENT) MessageTypeSubStructName() string {
	return "OMP_O09_PATIENT"
}

//  OMP_O09_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMP_O09_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMP_O09_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMP_O09_PATIENT_VISIT"
}

//  OMP_O09_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMP_O09_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMP_O09_TIMING) MessageTypeSubStructName() string {
	return "OMP_O09_TIMING"
}

//  OMS_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMS_O01 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OMS_O01_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OMS_O01_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OMS_O01) MessageTypeName() string {
	return "OMS_O01"
}

//  OMS_O01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMS_O01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMS_O01_INSURANCE) MessageTypeSubStructName() string {
	return "OMS_O01_INSURANCE"
}

//  OMS_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMS_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMS_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "OMS_O01_OBSERVATION"
}

//  OMS_O01_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMS_O01_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *OMS_O01_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	BLG          *BLG                  `hl7:"false,BLG" json:"blg,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *OMS_O01_ORDER) MessageTypeSubStructName() string {
	return "OMS_O01_ORDER"
}

//  OMS_O01_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMS_O01_ORDER_DETAIL struct {
	RQD         *RQD                  `hl7:"true,RQD" json:"rqd,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []OMS_O01_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMS_O01_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "OMS_O01_ORDER_DETAIL"
}

//  OMS_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMS_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMS_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMS_O01_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMS_O01_PATIENT) MessageTypeSubStructName() string {
	return "OMS_O01_PATIENT"
}

//  OMS_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OMS_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMS_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMS_O01_PATIENT_VISIT"
}

//  OMS_O05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMS_O05 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OMS_O05_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OMS_O05_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OMS_O05) MessageTypeName() string {
	return "OMS_O05"
}

//  OMS_O05_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMS_O05_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMS_O05_INSURANCE) MessageTypeSubStructName() string {
	return "OMS_O05_INSURANCE"
}

//  OMS_O05_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMS_O05_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMS_O05_OBSERVATION) MessageTypeSubStructName() string {
	return "OMS_O05_OBSERVATION"
}

//  OMS_O05_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMS_O05_ORDER struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING      []OMS_O05_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	RQD         *RQD                  `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1         *RQ1                  `hl7:"false,RQ1" json:"rq_1,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []OMS_O05_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	BLG         *BLG                  `hl7:"false,BLG" json:"blg,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OMS_O05_ORDER) MessageTypeSubStructName() string {
	return "OMS_O05_ORDER"
}

//  OMS_O05_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMS_O05_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *OMS_O05_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []OMS_O05_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *OMS_O05_PATIENT) MessageTypeSubStructName() string {
	return "OMS_O05_PATIENT"
}

//  OMS_O05_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMS_O05_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMS_O05_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "OMS_O05_PATIENT_VISIT"
}

//  OMS_O05_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OMS_O05_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OMS_O05_TIMING) MessageTypeSubStructName() string {
	return "OMS_O05_TIMING"
}

//  ORB_O28 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORB_O28 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORB_O28_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORB_O28) MessageTypeName() string {
	return "ORB_O28"
}

//  ORB_O28_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORB_O28_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []ORB_O28_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	BPO    *BPO             `hl7:"false,BPO" json:"bpo,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *ORB_O28_ORDER) MessageTypeSubStructName() string {
	return "ORB_O28_ORDER"
}

//  ORB_O28_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORB_O28_PATIENT struct {
	PID   *PID            `hl7:"true,PID" json:"pid,omitempty"`
	ORDER []ORB_O28_ORDER `hl7:"false,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *ORB_O28_PATIENT) MessageTypeSubStructName() string {
	return "ORB_O28_PATIENT"
}

//  ORB_O28_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORB_O28_RESPONSE struct {
	PATIENT *ORB_O28_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORB_O28_RESPONSE) MessageTypeSubStructName() string {
	return "ORB_O28_RESPONSE"
}

//  ORB_O28_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORB_O28_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORB_O28_TIMING) MessageTypeSubStructName() string {
	return "ORB_O28_TIMING"
}

//  ORD_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORD_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORD_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORD_O02) MessageTypeName() string {
	return "ORD_O02"
}

//  ORD_O02_ORDER_DIET represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORD_O02_ORDER_DIET struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	ODS   []ODS         `hl7:"false,ODS" json:"ods,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORD_O02_ORDER_DIET) MessageTypeSubStructName() string {
	return "ORD_O02_ORDER_DIET"
}

//  ORD_O02_ORDER_TRAY represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORD_O02_ORDER_TRAY struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	ODT   []ODT         `hl7:"false,ODT" json:"odt,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORD_O02_ORDER_TRAY) MessageTypeSubStructName() string {
	return "ORD_O02_ORDER_TRAY"
}

//  ORD_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORD_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORD_O02_PATIENT) MessageTypeSubStructName() string {
	return "ORD_O02_PATIENT"
}

//  ORD_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORD_O02_RESPONSE struct {
	PATIENT    *ORD_O02_PATIENT     `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER_DIET []ORD_O02_ORDER_DIET `hl7:"true,ORDER_DIET" json:"order___diet,omitempty"`
	ORDER_TRAY []ORD_O02_ORDER_TRAY `hl7:"false,ORDER_TRAY" json:"order___tray,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *ORD_O02_RESPONSE) MessageTypeSubStructName() string {
	return "ORD_O02_RESPONSE"
}

//  ORD_O04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORD_O04 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORD_O04_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORD_O04) MessageTypeName() string {
	return "ORD_O04"
}

//  ORD_O04_ORDER_DIET represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORD_O04_ORDER_DIET struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING_DIET []ORD_O04_TIMING_DIET `hl7:"false,TIMING_DIET" json:"timing___diet,omitempty"`
	ODS         []ODS                 `hl7:"false,ODS" json:"ods,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *ORD_O04_ORDER_DIET) MessageTypeSubStructName() string {
	return "ORD_O04_ORDER_DIET"
}

//  ORD_O04_ORDER_TRAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORD_O04_ORDER_TRAY struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING_TRAY []ORD_O04_TIMING_TRAY `hl7:"false,TIMING_TRAY" json:"timing___tray,omitempty"`
	ODT         []ODT                 `hl7:"false,ODT" json:"odt,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *ORD_O04_ORDER_TRAY) MessageTypeSubStructName() string {
	return "ORD_O04_ORDER_TRAY"
}

//  ORD_O04_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORD_O04_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORD_O04_PATIENT) MessageTypeSubStructName() string {
	return "ORD_O04_PATIENT"
}

//  ORD_O04_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORD_O04_RESPONSE struct {
	PATIENT    *ORD_O04_PATIENT     `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER_DIET []ORD_O04_ORDER_DIET `hl7:"true,ORDER_DIET" json:"order___diet,omitempty"`
	ORDER_TRAY []ORD_O04_ORDER_TRAY `hl7:"false,ORDER_TRAY" json:"order___tray,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *ORD_O04_RESPONSE) MessageTypeSubStructName() string {
	return "ORD_O04_RESPONSE"
}

//  ORD_O04_TIMING_DIET represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORD_O04_TIMING_DIET struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORD_O04_TIMING_DIET) MessageTypeSubStructName() string {
	return "ORD_O04_TIMING_DIET"
}

//  ORD_O04_TIMING_TRAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORD_O04_TIMING_TRAY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORD_O04_TIMING_TRAY) MessageTypeSubStructName() string {
	return "ORD_O04_TIMING_TRAY"
}

//  ORF_R04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORF_R04 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                    `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                     `hl7:"true,MSA" json:"msa,omitempty"`
	QRD            *QRD                     `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF            *QRF                     `hl7:"false,QRF" json:"qrf,omitempty"`
	QUERY_RESPONSE []ORF_R04_QUERY_RESPONSE `hl7:"true,QUERY_RESPONSE" json:"query___response,omitempty"`
	ERR            []ERR                    `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                     `hl7:"false,QAK" json:"qak,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *ORF_R04) MessageTypeName() string {
	return "ORF_R04"
}

//  ORF_R04_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORF_R04_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORF_R04_OBSERVATION) MessageTypeSubStructName() string {
	return "ORF_R04_OBSERVATION"
}

//  ORF_R04_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORF_R04_ORDER struct {
	ORC         *ORC                  `hl7:"false,ORC" json:"orc,omitempty"`
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_QTY  []ORF_R04_TIMING_QTY  `hl7:"false,TIMING_QTY" json:"timing___qty,omitempty"`
	CTD         *CTD                  `hl7:"false,CTD" json:"ctd,omitempty"`
	OBSERVATION []ORF_R04_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	CTI         []CTI                 `hl7:"false,CTI" json:"cti,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *ORF_R04_ORDER) MessageTypeSubStructName() string {
	return "ORF_R04_ORDER"
}

//  ORF_R04_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORF_R04_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORF_R04_PATIENT) MessageTypeSubStructName() string {
	return "ORF_R04_PATIENT"
}

//  ORF_R04_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORF_R04_QUERY_RESPONSE struct {
	PATIENT *ORF_R04_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORF_R04_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORF_R04_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "ORF_R04_QUERY_RESPONSE"
}

//  ORF_R04_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type ORF_R04_RESPONSE struct {
	PATIENT *ORF_R04_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORF_R04_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORF_R04_RESPONSE) MessageTypeSubStructName() string {
	return "ORF_R04_RESPONSE"
}

//  ORF_R04_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORF_R04_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORF_R04_TIMING_QTY) MessageTypeSubStructName() string {
	return "ORF_R04_TIMING_QTY"
}

//  ORG_O20 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORG_O20 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORG_O20_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORG_O20) MessageTypeName() string {
	return "ORG_O20"
}

//  ORG_O20_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORG_O20_ORDER struct {
	ORC      *ORC               `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING   []ORG_O20_TIMING   `hl7:"false,TIMING" json:"timing,omitempty"`
	OBR      *OBR               `hl7:"false,OBR" json:"obr,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	CTI      []CTI              `hl7:"false,CTI" json:"cti,omitempty"`
	SPECIMEN []ORG_O20_SPECIMEN `hl7:"false,SPECIMEN" json:"specimen,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *ORG_O20_ORDER) MessageTypeSubStructName() string {
	return "ORG_O20_ORDER"
}

//  ORG_O20_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORG_O20_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORG_O20_PATIENT) MessageTypeSubStructName() string {
	return "ORG_O20_PATIENT"
}

//  ORG_O20_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORG_O20_RESPONSE struct {
	PATIENT *ORG_O20_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORG_O20_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORG_O20_RESPONSE) MessageTypeSubStructName() string {
	return "ORG_O20_RESPONSE"
}

//  ORG_O20_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORG_O20_SPECIMEN struct {
	SPM   *SPM          `hl7:"true,SPM" json:"spm,omitempty"`
	SAC   []SAC         `hl7:"false,SAC" json:"sac,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORG_O20_SPECIMEN) MessageTypeSubStructName() string {
	return "ORG_O20_SPECIMEN"
}

//  ORG_O20_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORG_O20_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORG_O20_TIMING) MessageTypeSubStructName() string {
	return "ORG_O20_TIMING"
}

//  ORI_O24 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORI_O24 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORI_O24_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORI_O24) MessageTypeName() string {
	return "ORI_O24"
}

//  ORI_O24_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORI_O24_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []ORI_O24_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	OBR    *OBR             `hl7:"true,OBR" json:"obr,omitempty"`
	NTE    []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	IPC    []IPC            `hl7:"true,IPC" json:"ipc,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *ORI_O24_ORDER) MessageTypeSubStructName() string {
	return "ORI_O24_ORDER"
}

//  ORI_O24_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORI_O24_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORI_O24_PATIENT) MessageTypeSubStructName() string {
	return "ORI_O24_PATIENT"
}

//  ORI_O24_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORI_O24_RESPONSE struct {
	PATIENT *ORI_O24_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORI_O24_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORI_O24_RESPONSE) MessageTypeSubStructName() string {
	return "ORI_O24_RESPONSE"
}

//  ORI_O24_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORI_O24_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORI_O24_TIMING) MessageTypeSubStructName() string {
	return "ORI_O24_TIMING"
}

//  ORL_O22_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type ORL_O22_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORL_O22_CONTAINER) MessageTypeSubStructName() string {
	return "ORL_O22_CONTAINER"
}

//  ORL_O22 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O22 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORL_O22_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORL_O22) MessageTypeName() string {
	return "ORL_O22"
}

//  ORL_O22_GENERAL_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type ORL_O22_GENERAL_ORDER struct {
	CONTAINER *ORL_O22_CONTAINER `hl7:"false,CONTAINER" json:"container,omitempty"`
	ORDER     []ORL_O22_ORDER    `hl7:"false,ORDER" json:"order,omitempty"`
	Other     []interface{}      `json:"other,omitempty"`
}

func (s *ORL_O22_GENERAL_ORDER) MessageTypeSubStructName() string {
	return "ORL_O22_GENERAL_ORDER"
}

//  ORL_O22_OBSERVATION_REQUEST represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O22_OBSERVATION_REQUEST struct {
	OBR      *OBR               `hl7:"true,OBR" json:"obr,omitempty"`
	SPECIMEN []ORL_O22_SPECIMEN `hl7:"false,SPECIMEN" json:"specimen,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *ORL_O22_OBSERVATION_REQUEST) MessageTypeSubStructName() string {
	return "ORL_O22_OBSERVATION_REQUEST"
}

//  ORL_O22_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O22_ORDER struct {
	ORC                 *ORC                         `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING              []ORL_O22_TIMING             `hl7:"false,TIMING" json:"timing,omitempty"`
	OBSERVATION_REQUEST *ORL_O22_OBSERVATION_REQUEST `hl7:"false,OBSERVATION_REQUEST" json:"observation___request,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *ORL_O22_ORDER) MessageTypeSubStructName() string {
	return "ORL_O22_ORDER"
}

//  ORL_O22_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O22_PATIENT struct {
	PID   *PID            `hl7:"true,PID" json:"pid,omitempty"`
	ORDER []ORL_O22_ORDER `hl7:"false,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *ORL_O22_PATIENT) MessageTypeSubStructName() string {
	return "ORL_O22_PATIENT"
}

//  ORL_O22_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O22_RESPONSE struct {
	PATIENT *ORL_O22_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORL_O22_RESPONSE) MessageTypeSubStructName() string {
	return "ORL_O22_RESPONSE"
}

//  ORL_O22_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O22_SPECIMEN struct {
	SPM   *SPM          `hl7:"true,SPM" json:"spm,omitempty"`
	SAC   []SAC         `hl7:"false,SAC" json:"sac,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORL_O22_SPECIMEN) MessageTypeSubStructName() string {
	return "ORL_O22_SPECIMEN"
}

//  ORL_O22_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O22_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORL_O22_TIMING) MessageTypeSubStructName() string {
	return "ORL_O22_TIMING"
}

//  ORL_O34 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O34 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORL_O34_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORL_O34) MessageTypeName() string {
	return "ORL_O34"
}

//  ORL_O34_OBSERVATION_REQUEST represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O34_OBSERVATION_REQUEST struct {
	OBR             *OBR                      `hl7:"true,OBR" json:"obr,omitempty"`
	SPMSAC_SUPPGRP2 []ORL_O34_SPMSAC_SUPPGRP2 `hl7:"false,SPMSAC_SUPPGRP2" json:"spmsac___suppgrp_2,omitempty"`
	Other           []interface{}             `json:"other,omitempty"`
}

func (s *ORL_O34_OBSERVATION_REQUEST) MessageTypeSubStructName() string {
	return "ORL_O34_OBSERVATION_REQUEST"
}

//  ORL_O34_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O34_ORDER struct {
	ORC                 *ORC                         `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING              []ORL_O34_TIMING             `hl7:"false,TIMING" json:"timing,omitempty"`
	OBSERVATION_REQUEST *ORL_O34_OBSERVATION_REQUEST `hl7:"false,OBSERVATION_REQUEST" json:"observation___request,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *ORL_O34_ORDER) MessageTypeSubStructName() string {
	return "ORL_O34_ORDER"
}

//  ORL_O34_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O34_PATIENT struct {
	PID      *PID               `hl7:"true,PID" json:"pid,omitempty"`
	SPECIMEN []ORL_O34_SPECIMEN `hl7:"true,SPECIMEN" json:"specimen,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *ORL_O34_PATIENT) MessageTypeSubStructName() string {
	return "ORL_O34_PATIENT"
}

//  ORL_O34_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O34_RESPONSE struct {
	PATIENT *ORL_O34_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORL_O34_RESPONSE) MessageTypeSubStructName() string {
	return "ORL_O34_RESPONSE"
}

//  ORL_O34_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O34_SPECIMEN struct {
	SPM   *SPM            `hl7:"true,SPM" json:"spm,omitempty"`
	OBX   []OBX           `hl7:"false,OBX" json:"obx,omitempty"`
	SAC   []SAC           `hl7:"false,SAC" json:"sac,omitempty"`
	ORDER []ORL_O34_ORDER `hl7:"false,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *ORL_O34_SPECIMEN) MessageTypeSubStructName() string {
	return "ORL_O34_SPECIMEN"
}

//  ORL_O34_SPECIMEN_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type ORL_O34_SPECIMEN_DETAIL struct {
	SPM   *SPM          `hl7:"true,SPM" json:"spm,omitempty"`
	SAC   []SAC         `hl7:"false,SAC" json:"sac,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORL_O34_SPECIMEN_DETAIL) MessageTypeSubStructName() string {
	return "ORL_O34_SPECIMEN_DETAIL"
}

//  ORL_O34_SPMSAC_SUPPGRP2 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O34_SPMSAC_SUPPGRP2 struct {
	SPM   *SPM          `hl7:"true,SPM" json:"spm,omitempty"`
	SAC   []SAC         `hl7:"false,SAC" json:"sac,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORL_O34_SPMSAC_SUPPGRP2) MessageTypeSubStructName() string {
	return "ORL_O34_SPMSAC_SUPPGRP2"
}

//  ORL_O34_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O34_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORL_O34_TIMING) MessageTypeSubStructName() string {
	return "ORL_O34_TIMING"
}

//  ORL_O36 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O36 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORL_O36_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORL_O36) MessageTypeName() string {
	return "ORL_O36"
}

//  ORL_O36_OBSERVATION_REQUEST represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O36_OBSERVATION_REQUEST struct {
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORL_O36_OBSERVATION_REQUEST) MessageTypeSubStructName() string {
	return "ORL_O36_OBSERVATION_REQUEST"
}

//  ORL_O36_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O36_ORDER struct {
	ORC                 *ORC                         `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING              []ORL_O36_TIMING             `hl7:"false,TIMING" json:"timing,omitempty"`
	OBSERVATION_REQUEST *ORL_O36_OBSERVATION_REQUEST `hl7:"false,OBSERVATION_REQUEST" json:"observation___request,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *ORL_O36_ORDER) MessageTypeSubStructName() string {
	return "ORL_O36_ORDER"
}

//  ORL_O36_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O36_PATIENT struct {
	PID      *PID               `hl7:"true,PID" json:"pid,omitempty"`
	SPECIMEN []ORL_O36_SPECIMEN `hl7:"true,SPECIMEN" json:"specimen,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *ORL_O36_PATIENT) MessageTypeSubStructName() string {
	return "ORL_O36_PATIENT"
}

//  ORL_O36_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O36_RESPONSE struct {
	PATIENT *ORL_O36_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORL_O36_RESPONSE) MessageTypeSubStructName() string {
	return "ORL_O36_RESPONSE"
}

//  ORL_O36_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O36_SPECIMEN struct {
	SPM                *SPM                         `hl7:"true,SPM" json:"spm,omitempty"`
	OBX                []OBX                        `hl7:"false,OBX" json:"obx,omitempty"`
	SPECIMEN_CONTAINER []ORL_O36_SPECIMEN_CONTAINER `hl7:"true,SPECIMEN_CONTAINER" json:"specimen___container,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *ORL_O36_SPECIMEN) MessageTypeSubStructName() string {
	return "ORL_O36_SPECIMEN"
}

//  ORL_O36_SPECIMEN_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O36_SPECIMEN_CONTAINER struct {
	SAC   *SAC            `hl7:"true,SAC" json:"sac,omitempty"`
	ORDER []ORL_O36_ORDER `hl7:"false,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *ORL_O36_SPECIMEN_CONTAINER) MessageTypeSubStructName() string {
	return "ORL_O36_SPECIMEN_CONTAINER"
}

//  ORL_O36_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORL_O36_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORL_O36_TIMING) MessageTypeSubStructName() string {
	return "ORL_O36_TIMING"
}

//  ORM_O01_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type ORM_O01_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1   *RQ1          `hl7:"true,RQ1" json:"rq_1,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	ODS   *ODS          `hl7:"true,ODS" json:"ods,omitempty"`
	ODT   *ODT          `hl7:"true,ODT" json:"odt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORM_O01_CHOICE) MessageTypeSubStructName() string {
	return "ORM_O01_CHOICE"
}

//  ORM_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORM_O01 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *ORM_O01_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORM_O01_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORM_O01) MessageTypeName() string {
	return "ORM_O01"
}

//  ORM_O01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORM_O01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORM_O01_INSURANCE) MessageTypeSubStructName() string {
	return "ORM_O01_INSURANCE"
}

//  ORM_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORM_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORM_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "ORM_O01_OBSERVATION"
}

//  ORM_O01_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORM_O01_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *ORM_O01_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	FT1          []FT1                 `hl7:"false,FT1" json:"ft_1,omitempty"`
	CTI          []CTI                 `hl7:"false,CTI" json:"cti,omitempty"`
	BLG          *BLG                  `hl7:"false,BLG" json:"blg,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *ORM_O01_ORDER) MessageTypeSubStructName() string {
	return "ORM_O01_ORDER"
}

//  ORM_O01_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORM_O01_ORDER_DETAIL struct {
	ORDER_DETAIL_SEGMENT *ORM_O01_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	CTD                  *CTD                          `hl7:"false,CTD" json:"ctd,omitempty"`
	DG1                  []DG1                         `hl7:"false,DG1" json:"dg_1,omitempty"`
	OBSERVATION          []ORM_O01_OBSERVATION         `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *ORM_O01_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "ORM_O01_ORDER_DETAIL"
}

//  ORM_O01_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORM_O01_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1   *RQ1          `hl7:"true,RQ1" json:"rq_1,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	ODS   *ODS          `hl7:"true,ODS" json:"ods,omitempty"`
	ODT   *ODT          `hl7:"true,ODT" json:"odt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORM_O01_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "ORM_O01_ORDER_DETAIL_SEGMENT"
}

//  ORM_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORM_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *ORM_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []ORM_O01_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *ORM_O01_PATIENT) MessageTypeSubStructName() string {
	return "ORM_O01_PATIENT"
}

//  ORM_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORM_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORM_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "ORM_O01_PATIENT_VISIT"
}

//  ORN_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORN_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORN_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORN_O02) MessageTypeName() string {
	return "ORN_O02"
}

//  ORN_O02_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORN_O02_ORDER struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1   *RQ1          `hl7:"false,RQ1" json:"rq_1,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORN_O02_ORDER) MessageTypeSubStructName() string {
	return "ORN_O02_ORDER"
}

//  ORN_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORN_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORN_O02_PATIENT) MessageTypeSubStructName() string {
	return "ORN_O02_PATIENT"
}

//  ORN_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORN_O02_RESPONSE struct {
	PATIENT *ORN_O02_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORN_O02_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORN_O02_RESPONSE) MessageTypeSubStructName() string {
	return "ORN_O02_RESPONSE"
}

//  ORN_O08 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORN_O08 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORN_O08_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORN_O08) MessageTypeName() string {
	return "ORN_O08"
}

//  ORN_O08_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORN_O08_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []ORN_O08_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	RQD    *RQD             `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1    *RQ1             `hl7:"false,RQ1" json:"rq_1,omitempty"`
	NTE    []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *ORN_O08_ORDER) MessageTypeSubStructName() string {
	return "ORN_O08_ORDER"
}

//  ORN_O08_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORN_O08_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORN_O08_PATIENT) MessageTypeSubStructName() string {
	return "ORN_O08_PATIENT"
}

//  ORN_O08_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORN_O08_RESPONSE struct {
	PATIENT *ORN_O08_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORN_O08_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORN_O08_RESPONSE) MessageTypeSubStructName() string {
	return "ORN_O08_RESPONSE"
}

//  ORN_O08_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORN_O08_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORN_O08_TIMING) MessageTypeSubStructName() string {
	return "ORN_O08_TIMING"
}

//  ORP_O10_COMPONENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORP_O10_COMPONENT struct {
	RXC   *RXC          `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORP_O10_COMPONENT) MessageTypeSubStructName() string {
	return "ORP_O10_COMPONENT"
}

//  ORP_O10 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORP_O10 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORP_O10_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORP_O10) MessageTypeName() string {
	return "ORP_O10"
}

//  ORP_O10_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORP_O10_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING       []ORP_O10_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL *ORP_O10_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *ORP_O10_ORDER) MessageTypeSubStructName() string {
	return "ORP_O10_ORDER"
}

//  ORP_O10_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORP_O10_ORDER_DETAIL struct {
	RXO       *RXO                `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE       []NTE               `hl7:"false,NTE" json:"nte,omitempty"`
	RXR       []RXR               `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENT []ORP_O10_COMPONENT `hl7:"false,COMPONENT" json:"component,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *ORP_O10_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "ORP_O10_ORDER_DETAIL"
}

//  ORP_O10_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORP_O10_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORP_O10_PATIENT) MessageTypeSubStructName() string {
	return "ORP_O10_PATIENT"
}

//  ORP_O10_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORP_O10_RESPONSE struct {
	PATIENT *ORP_O10_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORP_O10_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORP_O10_RESPONSE) MessageTypeSubStructName() string {
	return "ORP_O10_RESPONSE"
}

//  ORP_O10_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORP_O10_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORP_O10_TIMING) MessageTypeSubStructName() string {
	return "ORP_O10_TIMING"
}

//  ORR_O02_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type ORR_O02_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1   *RQ1          `hl7:"true,RQ1" json:"rq_1,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	ODS   *ODS          `hl7:"true,ODS" json:"ods,omitempty"`
	ODT   *ODT          `hl7:"true,ODT" json:"odt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORR_O02_CHOICE) MessageTypeSubStructName() string {
	return "ORR_O02_CHOICE"
}

//  ORR_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORR_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORR_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORR_O02) MessageTypeName() string {
	return "ORR_O02"
}

//  ORR_O02_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORR_O02_ORDER struct {
	ORC                  *ORC                          `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL_SEGMENT *ORR_O02_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	CTI                  []CTI                         `hl7:"false,CTI" json:"cti,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *ORR_O02_ORDER) MessageTypeSubStructName() string {
	return "ORR_O02_ORDER"
}

//  ORR_O02_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type ORR_O02_ORDER_DETAIL struct {
	//  Only one of the following fields will be set.
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1   *RQ1          `hl7:"true,RQ1" json:"rq_1,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	ODS   *ODS          `hl7:"true,ODS" json:"ods,omitempty"`
	ODT   *ODT          `hl7:"true,ODT" json:"odt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORR_O02_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "ORR_O02_ORDER_DETAIL"
}

//  ORR_O02_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORR_O02_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1   *RQ1          `hl7:"true,RQ1" json:"rq_1,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	ODS   *ODS          `hl7:"true,ODS" json:"ods,omitempty"`
	ODT   *ODT          `hl7:"true,ODT" json:"odt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORR_O02_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "ORR_O02_ORDER_DETAIL_SEGMENT"
}

//  ORR_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORR_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORR_O02_PATIENT) MessageTypeSubStructName() string {
	return "ORR_O02_PATIENT"
}

//  ORR_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORR_O02_RESPONSE struct {
	PATIENT *ORR_O02_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORR_O02_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORR_O02_RESPONSE) MessageTypeSubStructName() string {
	return "ORR_O02_RESPONSE"
}

//  ORS_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORS_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORS_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORS_O02) MessageTypeName() string {
	return "ORS_O02"
}

//  ORS_O02_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORS_O02_ORDER struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORS_O02_ORDER) MessageTypeSubStructName() string {
	return "ORS_O02_ORDER"
}

//  ORS_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORS_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORS_O02_PATIENT) MessageTypeSubStructName() string {
	return "ORS_O02_PATIENT"
}

//  ORS_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type ORS_O02_RESPONSE struct {
	PATIENT *ORS_O02_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORS_O02_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORS_O02_RESPONSE) MessageTypeSubStructName() string {
	return "ORS_O02_RESPONSE"
}

//  ORS_O06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORS_O06 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *ORS_O06_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *ORS_O06) MessageTypeName() string {
	return "ORS_O06"
}

//  ORS_O06_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORS_O06_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []ORS_O06_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	RQD    *RQD             `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1    *RQ1             `hl7:"false,RQ1" json:"rq_1,omitempty"`
	NTE    []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *ORS_O06_ORDER) MessageTypeSubStructName() string {
	return "ORS_O06_ORDER"
}

//  ORS_O06_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORS_O06_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORS_O06_PATIENT) MessageTypeSubStructName() string {
	return "ORS_O06_PATIENT"
}

//  ORS_O06_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORS_O06_RESPONSE struct {
	PATIENT *ORS_O06_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORS_O06_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORS_O06_RESPONSE) MessageTypeSubStructName() string {
	return "ORS_O06_RESPONSE"
}

//  ORS_O06_RSPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type ORS_O06_RSPONSE struct {
	PATIENT *ORS_O06_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ORS_O06_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ORS_O06_RSPONSE) MessageTypeSubStructName() string {
	return "ORS_O06_RSPONSE"
}

//  ORS_O06_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORS_O06_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORS_O06_TIMING) MessageTypeSubStructName() string {
	return "ORS_O06_TIMING"
}

//  ORU_R01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R01 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                    `hl7:"false,SFT" json:"sft,omitempty"`
	PATIENT_RESULT []ORU_R01_PATIENT_RESULT `hl7:"true,PATIENT_RESULT" json:"patient___result,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *ORU_R01) MessageTypeName() string {
	return "ORU_R01"
}

//  ORU_R01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R01_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R01_OBSERVATION) MessageTypeSubStructName() string {
	return "ORU_R01_OBSERVATION"
}

//  ORU_R01_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R01_ORDER_OBSERVATION struct {
	ORC         *ORC                  `hl7:"false,ORC" json:"orc,omitempty"`
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_QTY  []ORU_R01_TIMING_QTY  `hl7:"false,TIMING_QTY" json:"timing___qty,omitempty"`
	CTD         *CTD                  `hl7:"false,CTD" json:"ctd,omitempty"`
	OBSERVATION []ORU_R01_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	FT1         []FT1                 `hl7:"false,FT1" json:"ft_1,omitempty"`
	CTI         []CTI                 `hl7:"false,CTI" json:"cti,omitempty"`
	SPECIMEN    []ORU_R01_SPECIMEN    `hl7:"false,SPECIMEN" json:"specimen,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *ORU_R01_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "ORU_R01_ORDER_OBSERVATION"
}

//  ORU_R01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R01_PATIENT struct {
	PID   *PID           `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1           `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE   []NTE          `hl7:"false,NTE" json:"nte,omitempty"`
	NK1   []NK1          `hl7:"false,NK1" json:"nk_1,omitempty"`
	VISIT *ORU_R01_VISIT `hl7:"false,VISIT" json:"visit,omitempty"`
	Other []interface{}  `json:"other,omitempty"`
}

func (s *ORU_R01_PATIENT) MessageTypeSubStructName() string {
	return "ORU_R01_PATIENT"
}

//  ORU_R01_PATIENT_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R01_PATIENT_RESULT struct {
	PATIENT           *ORU_R01_PATIENT            `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER_OBSERVATION []ORU_R01_ORDER_OBSERVATION `hl7:"true,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *ORU_R01_PATIENT_RESULT) MessageTypeSubStructName() string {
	return "ORU_R01_PATIENT_RESULT"
}

//  ORU_R01_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type ORU_R01_RESPONSE struct {
	PATIENT           *ORU_R01_PATIENT            `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER_OBSERVATION []ORU_R01_ORDER_OBSERVATION `hl7:"true,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *ORU_R01_RESPONSE) MessageTypeSubStructName() string {
	return "ORU_R01_RESPONSE"
}

//  ORU_R01_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R01_SPECIMEN struct {
	SPM   *SPM          `hl7:"true,SPM" json:"spm,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R01_SPECIMEN) MessageTypeSubStructName() string {
	return "ORU_R01_SPECIMEN"
}

//  ORU_R01_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R01_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R01_TIMING_QTY) MessageTypeSubStructName() string {
	return "ORU_R01_TIMING_QTY"
}

//  ORU_R01_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R01_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R01_VISIT) MessageTypeSubStructName() string {
	return "ORU_R01_VISIT"
}

//  ORU_R03 represents the corresponding HL7 message type.
//  Definition from HL7 2.1
type ORU_R03 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	PATIENT_RESULT []ORU_R03_PATIENT_RESULT `hl7:"true,PATIENT_RESULT" json:"patient___result,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *ORU_R03) MessageTypeName() string {
	return "ORU_R03"
}

//  ORU_R03_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.1
type ORU_R03_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R03_OBSERVATION) MessageTypeSubStructName() string {
	return "ORU_R03_OBSERVATION"
}

//  ORU_R03_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.1
type ORU_R03_ORDER_OBSERVATION struct {
	ORC         *ORC                  `hl7:"false,ORC" json:"orc,omitempty"`
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []ORU_R03_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *ORU_R03_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "ORU_R03_ORDER_OBSERVATION"
}

//  ORU_R03_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.1
type ORU_R03_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R03_PATIENT) MessageTypeSubStructName() string {
	return "ORU_R03_PATIENT"
}

//  ORU_R03_PATIENT_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.1
type ORU_R03_PATIENT_RESULT struct {
	PATIENT           *ORU_R03_PATIENT            `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER_OBSERVATION []ORU_R03_ORDER_OBSERVATION `hl7:"true,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *ORU_R03_PATIENT_RESULT) MessageTypeSubStructName() string {
	return "ORU_R03_PATIENT_RESULT"
}

//  ORU_R30 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R30 struct {
	MSH         *MSH                  `hl7:"true,MSH" json:"msh,omitempty"`
	SFT         []SFT                 `hl7:"false,SFT" json:"sft,omitempty"`
	PID         *PID                  `hl7:"true,PID" json:"pid,omitempty"`
	PD1         *PD1                  `hl7:"false,PD1" json:"pd_1,omitempty"`
	VISIT       *ORU_R30_VISIT        `hl7:"false,VISIT" json:"visit,omitempty"`
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_QTY  []ORU_R30_TIMING_QTY  `hl7:"false,TIMING_QTY" json:"timing___qty,omitempty"`
	OBSERVATION []ORU_R30_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *ORU_R30) MessageTypeName() string {
	return "ORU_R30"
}

//  ORU_R30_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R30_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R30_OBSERVATION) MessageTypeSubStructName() string {
	return "ORU_R30_OBSERVATION"
}

//  ORU_R30_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R30_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R30_TIMING_QTY) MessageTypeSubStructName() string {
	return "ORU_R30_TIMING_QTY"
}

//  ORU_R30_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ORU_R30_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R30_VISIT) MessageTypeSubStructName() string {
	return "ORU_R30_VISIT"
}

//  ORU_R32 represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ORU_R32 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	PATIENT_RESULT []ORU_R32_PATIENT_RESULT `hl7:"true,PATIENT_RESULT" json:"patient___result,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *ORU_R32) MessageTypeName() string {
	return "ORU_R32"
}

//  ORU_R32_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ORU_R32_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R32_OBSERVATION) MessageTypeSubStructName() string {
	return "ORU_R32_OBSERVATION"
}

//  ORU_R32_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ORU_R32_ORDER_OBSERVATION struct {
	ORC         *ORC                  `hl7:"false,ORC" json:"orc,omitempty"`
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []ORU_R32_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	CTI         []CTI                 `hl7:"false,CTI" json:"cti,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *ORU_R32_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "ORU_R32_ORDER_OBSERVATION"
}

//  ORU_R32_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ORU_R32_PATIENT struct {
	PID   *PID           `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1           `hl7:"false,PD1" json:"pd_1,omitempty"`
	NK1   []NK1          `hl7:"false,NK1" json:"nk_1,omitempty"`
	NTE   []NTE          `hl7:"false,NTE" json:"nte,omitempty"`
	VISIT *ORU_R32_VISIT `hl7:"false,VISIT" json:"visit,omitempty"`
	Other []interface{}  `json:"other,omitempty"`
}

func (s *ORU_R32_PATIENT) MessageTypeSubStructName() string {
	return "ORU_R32_PATIENT"
}

//  ORU_R32_PATIENT_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ORU_R32_PATIENT_RESULT struct {
	PATIENT           *ORU_R32_PATIENT            `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER_OBSERVATION []ORU_R32_ORDER_OBSERVATION `hl7:"true,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *ORU_R32_PATIENT_RESULT) MessageTypeSubStructName() string {
	return "ORU_R32_PATIENT_RESULT"
}

//  ORU_R32_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 SYNTHETIC
type ORU_R32_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ORU_R32_VISIT) MessageTypeSubStructName() string {
	return "ORU_R32_VISIT"
}

//  OSQ_Q06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OSQ_Q06 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OSQ_Q06) MessageTypeName() string {
	return "OSQ_Q06"
}

//  OSR_Q06_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type OSR_Q06_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1   *RQ1          `hl7:"true,RQ1" json:"rq_1,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	ODS   *ODS          `hl7:"true,ODS" json:"ods,omitempty"`
	ODT   *ODT          `hl7:"true,ODT" json:"odt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OSR_Q06_CHOICE) MessageTypeSubStructName() string {
	return "OSR_Q06_CHOICE"
}

//  OSR_Q06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OSR_Q06 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	QRD      *QRD              `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF              `hl7:"false,QRF" json:"qrf,omitempty"`
	RESPONSE *OSR_Q06_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	DSC      *DSC              `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *OSR_Q06) MessageTypeName() string {
	return "OSR_Q06"
}

//  OSR_Q06_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type OSR_Q06_OBSERVATION struct {
	ORC    *ORC            `hl7:"true,ORC" json:"orc,omitempty"`
	CHOICE *OSR_Q06_CHOICE `hl7:"true,CHOICE" json:"choice,omitempty"`
	NTE    []NTE           `hl7:"false,NTE" json:"nte,omitempty"`
	CTI    []CTI           `hl7:"false,CTI" json:"cti,omitempty"`
	Other  []interface{}   `json:"other,omitempty"`
}

func (s *OSR_Q06_OBSERVATION) MessageTypeSubStructName() string {
	return "OSR_Q06_OBSERVATION"
}

//  OSR_Q06_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OSR_Q06_ORDER struct {
	ORC                  *ORC                          `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING               []OSR_Q06_TIMING              `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL_SEGMENT *OSR_Q06_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	CTI                  []CTI                         `hl7:"false,CTI" json:"cti,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *OSR_Q06_ORDER) MessageTypeSubStructName() string {
	return "OSR_Q06_ORDER"
}

//  OSR_Q06_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OSR_Q06_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	RQD   *RQD          `hl7:"true,RQD" json:"rqd,omitempty"`
	RQ1   *RQ1          `hl7:"true,RQ1" json:"rq_1,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	ODS   *ODS          `hl7:"true,ODS" json:"ods,omitempty"`
	ODT   *ODT          `hl7:"true,ODT" json:"odt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OSR_Q06_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "OSR_Q06_ORDER_DETAIL_SEGMENT"
}

//  OSR_Q06_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OSR_Q06_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OSR_Q06_PATIENT) MessageTypeSubStructName() string {
	return "OSR_Q06_PATIENT"
}

//  OSR_Q06_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OSR_Q06_RESPONSE struct {
	PATIENT *OSR_Q06_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []OSR_Q06_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OSR_Q06_RESPONSE) MessageTypeSubStructName() string {
	return "OSR_Q06_RESPONSE"
}

//  OSR_Q06_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OSR_Q06_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OSR_Q06_TIMING) MessageTypeSubStructName() string {
	return "OSR_Q06_TIMING"
}

//  OUL_R21_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R21_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	SID   *SID          `hl7:"false,SID" json:"sid,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R21_CONTAINER) MessageTypeSubStructName() string {
	return "OUL_R21_CONTAINER"
}

//  OUL_R21 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R21 struct {
	MSH               *MSH                        `hl7:"true,MSH" json:"msh,omitempty"`
	SFT               []SFT                       `hl7:"false,SFT" json:"sft,omitempty"`
	NTE               *NTE                        `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT           *OUL_R21_PATIENT            `hl7:"false,PATIENT" json:"patient,omitempty"`
	VISIT             *OUL_R21_VISIT              `hl7:"false,VISIT" json:"visit,omitempty"`
	ORDER_OBSERVATION []OUL_R21_ORDER_OBSERVATION `hl7:"true,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	DSC               *DSC                        `hl7:"false,DSC" json:"dsc,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *OUL_R21) MessageTypeName() string {
	return "OUL_R21"
}

//  OUL_R21_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R21_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	TCD   *TCD          `hl7:"false,TCD" json:"tcd,omitempty"`
	SID   []SID         `hl7:"false,SID" json:"sid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R21_OBSERVATION) MessageTypeSubStructName() string {
	return "OUL_R21_OBSERVATION"
}

//  OUL_R21_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R21_ORDER_OBSERVATION struct {
	CONTAINER   *OUL_R21_CONTAINER    `hl7:"false,CONTAINER" json:"container,omitempty"`
	ORC         *ORC                  `hl7:"false,ORC" json:"orc,omitempty"`
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_QTY  []OUL_R21_TIMING_QTY  `hl7:"false,TIMING_QTY" json:"timing___qty,omitempty"`
	OBSERVATION []OUL_R21_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	CTI         []CTI                 `hl7:"false,CTI" json:"cti,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *OUL_R21_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "OUL_R21_ORDER_OBSERVATION"
}

//  OUL_R21_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R21_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R21_PATIENT) MessageTypeSubStructName() string {
	return "OUL_R21_PATIENT"
}

//  OUL_R21_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R21_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R21_TIMING_QTY) MessageTypeSubStructName() string {
	return "OUL_R21_TIMING_QTY"
}

//  OUL_R21_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R21_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R21_VISIT) MessageTypeSubStructName() string {
	return "OUL_R21_VISIT"
}

//  OUL_R22_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R22_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	INV   *INV          `hl7:"false,INV" json:"inv,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R22_CONTAINER) MessageTypeSubStructName() string {
	return "OUL_R22_CONTAINER"
}

//  OUL_R22 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R22 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      *NTE               `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT  *OUL_R22_PATIENT   `hl7:"false,PATIENT" json:"patient,omitempty"`
	VISIT    *OUL_R22_VISIT     `hl7:"false,VISIT" json:"visit,omitempty"`
	SPECIMEN []OUL_R22_SPECIMEN `hl7:"true,SPECIMEN" json:"specimen,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *OUL_R22) MessageTypeName() string {
	return "OUL_R22"
}

//  OUL_R22_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R22_ORDER struct {
	OBR        *OBR                 `hl7:"true,OBR" json:"obr,omitempty"`
	ORC        *ORC                 `hl7:"false,ORC" json:"orc,omitempty"`
	NTE        []NTE                `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_QTY []OUL_R22_TIMING_QTY `hl7:"false,TIMING_QTY" json:"timing___qty,omitempty"`
	RESULT     []OUL_R22_RESULT     `hl7:"false,RESULT" json:"result,omitempty"`
	CTI        []CTI                `hl7:"false,CTI" json:"cti,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *OUL_R22_ORDER) MessageTypeSubStructName() string {
	return "OUL_R22_ORDER"
}

//  OUL_R22_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R22_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R22_PATIENT) MessageTypeSubStructName() string {
	return "OUL_R22_PATIENT"
}

//  OUL_R22_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R22_RESULT struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	TCD   *TCD          `hl7:"false,TCD" json:"tcd,omitempty"`
	SID   []SID         `hl7:"false,SID" json:"sid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R22_RESULT) MessageTypeSubStructName() string {
	return "OUL_R22_RESULT"
}

//  OUL_R22_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R22_SPECIMEN struct {
	SPM       *SPM                `hl7:"true,SPM" json:"spm,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	CONTAINER []OUL_R22_CONTAINER `hl7:"false,CONTAINER" json:"container,omitempty"`
	ORDER     []OUL_R22_ORDER     `hl7:"true,ORDER" json:"order,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *OUL_R22_SPECIMEN) MessageTypeSubStructName() string {
	return "OUL_R22_SPECIMEN"
}

//  OUL_R22_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R22_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R22_TIMING_QTY) MessageTypeSubStructName() string {
	return "OUL_R22_TIMING_QTY"
}

//  OUL_R22_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R22_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R22_VISIT) MessageTypeSubStructName() string {
	return "OUL_R22_VISIT"
}

//  OUL_R23_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R23_CONTAINER struct {
	SAC   *SAC            `hl7:"true,SAC" json:"sac,omitempty"`
	INV   *INV            `hl7:"false,INV" json:"inv,omitempty"`
	ORDER []OUL_R23_ORDER `hl7:"true,ORDER" json:"order,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *OUL_R23_CONTAINER) MessageTypeSubStructName() string {
	return "OUL_R23_CONTAINER"
}

//  OUL_R23 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R23 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      *NTE               `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT  *OUL_R23_PATIENT   `hl7:"false,PATIENT" json:"patient,omitempty"`
	VISIT    *OUL_R23_VISIT     `hl7:"false,VISIT" json:"visit,omitempty"`
	SPECIMEN []OUL_R23_SPECIMEN `hl7:"true,SPECIMEN" json:"specimen,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *OUL_R23) MessageTypeName() string {
	return "OUL_R23"
}

//  OUL_R23_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R23_ORDER struct {
	OBR        *OBR                 `hl7:"true,OBR" json:"obr,omitempty"`
	ORC        *ORC                 `hl7:"false,ORC" json:"orc,omitempty"`
	NTE        []NTE                `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_QTY []OUL_R23_TIMING_QTY `hl7:"false,TIMING_QTY" json:"timing___qty,omitempty"`
	RESULT     []OUL_R23_RESULT     `hl7:"false,RESULT" json:"result,omitempty"`
	CTI        []CTI                `hl7:"false,CTI" json:"cti,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *OUL_R23_ORDER) MessageTypeSubStructName() string {
	return "OUL_R23_ORDER"
}

//  OUL_R23_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R23_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R23_PATIENT) MessageTypeSubStructName() string {
	return "OUL_R23_PATIENT"
}

//  OUL_R23_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R23_RESULT struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	TCD   *TCD          `hl7:"false,TCD" json:"tcd,omitempty"`
	SID   []SID         `hl7:"false,SID" json:"sid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R23_RESULT) MessageTypeSubStructName() string {
	return "OUL_R23_RESULT"
}

//  OUL_R23_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R23_SPECIMEN struct {
	SPM       *SPM                `hl7:"true,SPM" json:"spm,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	CONTAINER []OUL_R23_CONTAINER `hl7:"true,CONTAINER" json:"container,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *OUL_R23_SPECIMEN) MessageTypeSubStructName() string {
	return "OUL_R23_SPECIMEN"
}

//  OUL_R23_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R23_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R23_TIMING_QTY) MessageTypeSubStructName() string {
	return "OUL_R23_TIMING_QTY"
}

//  OUL_R23_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R23_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R23_VISIT) MessageTypeSubStructName() string {
	return "OUL_R23_VISIT"
}

//  OUL_R24_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R24_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	INV   *INV          `hl7:"false,INV" json:"inv,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R24_CONTAINER) MessageTypeSubStructName() string {
	return "OUL_R24_CONTAINER"
}

//  OUL_R24 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R24 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     *NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *OUL_R24_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	VISIT   *OUL_R24_VISIT   `hl7:"false,VISIT" json:"visit,omitempty"`
	ORDER   []OUL_R24_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	DSC     *DSC             `hl7:"false,DSC" json:"dsc,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *OUL_R24) MessageTypeName() string {
	return "OUL_R24"
}

//  OUL_R24_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R24_ORDER struct {
	OBR        *OBR                 `hl7:"true,OBR" json:"obr,omitempty"`
	ORC        *ORC                 `hl7:"false,ORC" json:"orc,omitempty"`
	NTE        []NTE                `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_QTY []OUL_R24_TIMING_QTY `hl7:"false,TIMING_QTY" json:"timing___qty,omitempty"`
	SPECIMEN   []OUL_R24_SPECIMEN   `hl7:"false,SPECIMEN" json:"specimen,omitempty"`
	RESULT     []OUL_R24_RESULT     `hl7:"false,RESULT" json:"result,omitempty"`
	CTI        []CTI                `hl7:"false,CTI" json:"cti,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *OUL_R24_ORDER) MessageTypeSubStructName() string {
	return "OUL_R24_ORDER"
}

//  OUL_R24_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R24_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R24_PATIENT) MessageTypeSubStructName() string {
	return "OUL_R24_PATIENT"
}

//  OUL_R24_RESULT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R24_RESULT struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	TCD   *TCD          `hl7:"false,TCD" json:"tcd,omitempty"`
	SID   []SID         `hl7:"false,SID" json:"sid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R24_RESULT) MessageTypeSubStructName() string {
	return "OUL_R24_RESULT"
}

//  OUL_R24_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R24_SPECIMEN struct {
	SPM       *SPM                `hl7:"true,SPM" json:"spm,omitempty"`
	OBX       []OBX               `hl7:"false,OBX" json:"obx,omitempty"`
	CONTAINER []OUL_R24_CONTAINER `hl7:"false,CONTAINER" json:"container,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *OUL_R24_SPECIMEN) MessageTypeSubStructName() string {
	return "OUL_R24_SPECIMEN"
}

//  OUL_R24_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R24_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R24_TIMING_QTY) MessageTypeSubStructName() string {
	return "OUL_R24_TIMING_QTY"
}

//  OUL_R24_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type OUL_R24_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *OUL_R24_VISIT) MessageTypeSubStructName() string {
	return "OUL_R24_VISIT"
}

//  PEX_P07_ASSOCIATED_PERSON represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_ASSOCIATED_PERSON struct {
	NK1                 *NK1                          `hl7:"true,NK1" json:"nk_1,omitempty"`
	ASSOCIATED_RX_ORDER *PEX_P07_ASSOCIATED_RX_ORDER  `hl7:"false,ASSOCIATED_RX_ORDER" json:"associated___rx___order,omitempty"`
	ASSOCIATED_RX_ADMIN []PEX_P07_ASSOCIATED_RX_ADMIN `hl7:"false,ASSOCIATED_RX_ADMIN" json:"associated___rx___admin,omitempty"`
	PRB                 []PRB                         `hl7:"false,PRB" json:"prb,omitempty"`
	OBX                 []OBX                         `hl7:"false,OBX" json:"obx,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PEX_P07_ASSOCIATED_PERSON) MessageTypeSubStructName() string {
	return "PEX_P07_ASSOCIATED_PERSON"
}

//  PEX_P07_ASSOCIATED_RX_ADMIN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_ASSOCIATED_RX_ADMIN struct {
	RXA   *RXA          `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR   *RXR          `hl7:"false,RXR" json:"rxr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PEX_P07_ASSOCIATED_RX_ADMIN) MessageTypeSubStructName() string {
	return "PEX_P07_ASSOCIATED_RX_ADMIN"
}

//  PEX_P07_ASSOCIATED_RX_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_ASSOCIATED_RX_ORDER struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	NK1_TIMING_QTY []PEX_P07_NK1_TIMING_QTY `hl7:"true,NK1_TIMING_QTY" json:"nk_1___timing___qty,omitempty"`
	RXR            []RXR                    `hl7:"false,RXR" json:"rxr,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *PEX_P07_ASSOCIATED_RX_ORDER) MessageTypeSubStructName() string {
	return "PEX_P07_ASSOCIATED_RX_ORDER"
}

//  PEX_P07 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07 struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	SFT        []SFT                `hl7:"false,SFT" json:"sft,omitempty"`
	EVN        *EVN                 `hl7:"true,EVN" json:"evn,omitempty"`
	PID        *PID                 `hl7:"true,PID" json:"pid,omitempty"`
	PD1        *PD1                 `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE        []NTE                `hl7:"false,NTE" json:"nte,omitempty"`
	VISIT      *PEX_P07_VISIT       `hl7:"false,VISIT" json:"visit,omitempty"`
	EXPERIENCE []PEX_P07_EXPERIENCE `hl7:"true,EXPERIENCE" json:"experience,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *PEX_P07) MessageTypeName() string {
	return "PEX_P07"
}

//  PEX_P07_EXPERIENCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_EXPERIENCE struct {
	PES             *PES                      `hl7:"true,PES" json:"pes,omitempty"`
	PEX_OBSERVATION []PEX_P07_PEX_OBSERVATION `hl7:"true,PEX_OBSERVATION" json:"pex___observation,omitempty"`
	Other           []interface{}             `json:"other,omitempty"`
}

func (s *PEX_P07_EXPERIENCE) MessageTypeSubStructName() string {
	return "PEX_P07_EXPERIENCE"
}

//  PEX_P07_NK1_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_NK1_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PEX_P07_NK1_TIMING_QTY) MessageTypeSubStructName() string {
	return "PEX_P07_NK1_TIMING_QTY"
}

//  PEX_P07_PEX_CAUSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_PEX_CAUSE struct {
	PCR               *PCR                        `hl7:"true,PCR" json:"pcr,omitempty"`
	RX_ORDER          *PEX_P07_RX_ORDER           `hl7:"false,RX_ORDER" json:"rx___order,omitempty"`
	RX_ADMINISTRATION []PEX_P07_RX_ADMINISTRATION `hl7:"false,RX_ADMINISTRATION" json:"rx___administration,omitempty"`
	PRB               []PRB                       `hl7:"false,PRB" json:"prb,omitempty"`
	OBX               []OBX                       `hl7:"false,OBX" json:"obx,omitempty"`
	NTE               []NTE                       `hl7:"false,NTE" json:"nte,omitempty"`
	ASSOCIATED_PERSON *PEX_P07_ASSOCIATED_PERSON  `hl7:"false,ASSOCIATED_PERSON" json:"associated___person,omitempty"`
	STUDY             []PEX_P07_STUDY             `hl7:"false,STUDY" json:"study,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *PEX_P07_PEX_CAUSE) MessageTypeSubStructName() string {
	return "PEX_P07_PEX_CAUSE"
}

//  PEX_P07_PEX_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_PEX_OBSERVATION struct {
	PEO       *PEO                `hl7:"true,PEO" json:"peo,omitempty"`
	PEX_CAUSE []PEX_P07_PEX_CAUSE `hl7:"true,PEX_CAUSE" json:"pex___cause,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *PEX_P07_PEX_OBSERVATION) MessageTypeSubStructName() string {
	return "PEX_P07_PEX_OBSERVATION"
}

//  PEX_P07_RX_ADMINISTRATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_RX_ADMINISTRATION struct {
	RXA   *RXA          `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR   *RXR          `hl7:"false,RXR" json:"rxr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PEX_P07_RX_ADMINISTRATION) MessageTypeSubStructName() string {
	return "PEX_P07_RX_ADMINISTRATION"
}

//  PEX_P07_RX_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_RX_ORDER struct {
	RXE        *RXE                 `hl7:"true,RXE" json:"rxe,omitempty"`
	TIMING_QTY []PEX_P07_TIMING_QTY `hl7:"true,TIMING_QTY" json:"timing___qty,omitempty"`
	RXR        []RXR                `hl7:"false,RXR" json:"rxr,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *PEX_P07_RX_ORDER) MessageTypeSubStructName() string {
	return "PEX_P07_RX_ORDER"
}

//  PEX_P07_STUDY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_STUDY struct {
	CSR   *CSR          `hl7:"true,CSR" json:"csr,omitempty"`
	CSP   []CSP         `hl7:"false,CSP" json:"csp,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PEX_P07_STUDY) MessageTypeSubStructName() string {
	return "PEX_P07_STUDY"
}

//  PEX_P07_TIMING_QTY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_TIMING_QTY struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PEX_P07_TIMING_QTY) MessageTypeSubStructName() string {
	return "PEX_P07_TIMING_QTY"
}

//  PEX_P07_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PEX_P07_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PEX_P07_VISIT) MessageTypeSubStructName() string {
	return "PEX_P07_VISIT"
}

//  PGL_PC6_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type PGL_PC6_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_CHOICE) MessageTypeSubStructName() string {
	return "PGL_PC6_CHOICE"
}

//  PGL_PC6 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6 struct {
	MSH           *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT           []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PATIENT_VISIT *PGL_PC6_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	GOAL          []PGL_PC6_GOAL         `hl7:"true,GOAL" json:"goal,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *PGL_PC6) MessageTypeName() string {
	return "PGL_PC6"
}

//  PGL_PC6_GOAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_GOAL struct {
	GOL         *GOL                  `hl7:"true,GOL" json:"gol,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	VAR         []VAR                 `hl7:"false,VAR" json:"var,omitempty"`
	GOAL_ROLE   []PGL_PC6_GOAL_ROLE   `hl7:"false,GOAL_ROLE" json:"goal___role,omitempty"`
	PATHWAY     []PGL_PC6_PATHWAY     `hl7:"false,PATHWAY" json:"pathway,omitempty"`
	OBSERVATION []PGL_PC6_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	PROBLEM     []PGL_PC6_PROBLEM     `hl7:"false,PROBLEM" json:"problem,omitempty"`
	ORDER       []PGL_PC6_ORDER       `hl7:"false,ORDER" json:"order,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *PGL_PC6_GOAL) MessageTypeSubStructName() string {
	return "PGL_PC6_GOAL"
}

//  PGL_PC6_GOAL_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_GOAL_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_GOAL_ROLE) MessageTypeSubStructName() string {
	return "PGL_PC6_GOAL_ROLE"
}

//  PGL_PC6_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_OBSERVATION) MessageTypeSubStructName() string {
	return "PGL_PC6_OBSERVATION"
}

//  PGL_PC6_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *PGL_PC6_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *PGL_PC6_ORDER) MessageTypeSubStructName() string {
	return "PGL_PC6_ORDER"
}

//  PGL_PC6_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_ORDER_DETAIL struct {
	ORDER_DETAIL_SEGMENT *PGL_PC6_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                  []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	ORDER_OBSERVATION    []PGL_PC6_ORDER_OBSERVATION   `hl7:"false,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *PGL_PC6_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "PGL_PC6_ORDER_DETAIL"
}

//  PGL_PC6_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "PGL_PC6_ORDER_DETAIL_SEGMENT"
}

//  PGL_PC6_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_ORDER_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "PGL_PC6_ORDER_OBSERVATION"
}

//  PGL_PC6_PATHWAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_PATHWAY struct {
	PTH   *PTH          `hl7:"true,PTH" json:"pth,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_PATHWAY) MessageTypeSubStructName() string {
	return "PGL_PC6_PATHWAY"
}

//  PGL_PC6_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "PGL_PC6_PATIENT_VISIT"
}

//  PGL_PC6_PROBLEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_PROBLEM struct {
	PRB                 *PRB                          `hl7:"true,PRB" json:"prb,omitempty"`
	NTE                 []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                 []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	PROBLEM_ROLE        []PGL_PC6_PROBLEM_ROLE        `hl7:"false,PROBLEM_ROLE" json:"problem___role,omitempty"`
	PROBLEM_OBSERVATION []PGL_PC6_PROBLEM_OBSERVATION `hl7:"false,PROBLEM_OBSERVATION" json:"problem___observation,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PGL_PC6_PROBLEM) MessageTypeSubStructName() string {
	return "PGL_PC6_PROBLEM"
}

//  PGL_PC6_PROBLEM_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_PROBLEM_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_PROBLEM_OBSERVATION) MessageTypeSubStructName() string {
	return "PGL_PC6_PROBLEM_OBSERVATION"
}

//  PGL_PC6_PROBLEM_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PGL_PC6_PROBLEM_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PGL_PC6_PROBLEM_ROLE) MessageTypeSubStructName() string {
	return "PGL_PC6_PROBLEM_ROLE"
}

//  PIN_I07 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type PIN_I07 struct {
	MSH                 *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	PROVIDER            []PIN_I07_PROVIDER           `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID                 *PID                         `hl7:"true,PID" json:"pid,omitempty"`
	NK1                 []NK1                        `hl7:"false,NK1" json:"nk_1,omitempty"`
	GUARANTOR_INSURANCE *PIN_I07_GUARANTOR_INSURANCE `hl7:"false,GUARANTOR_INSURANCE" json:"guarantor___insurance,omitempty"`
	NTE                 []NTE                        `hl7:"false,NTE" json:"nte,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *PIN_I07) MessageTypeName() string {
	return "PIN_I07"
}

//  PIN_I07_GUARANTOR_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type PIN_I07_GUARANTOR_INSURANCE struct {
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []PIN_I07_INSURANCE `hl7:"true,INSURANCE" json:"insurance,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *PIN_I07_GUARANTOR_INSURANCE) MessageTypeSubStructName() string {
	return "PIN_I07_GUARANTOR_INSURANCE"
}

//  PIN_I07_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type PIN_I07_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PIN_I07_INSURANCE) MessageTypeSubStructName() string {
	return "PIN_I07_INSURANCE"
}

//  PIN_I07_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type PIN_I07_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PIN_I07_PROVIDER) MessageTypeSubStructName() string {
	return "PIN_I07_PROVIDER"
}

//  PMU_B01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PMU_B01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	STF   *STF          `hl7:"true,STF" json:"stf,omitempty"`
	PRA   []PRA         `hl7:"false,PRA" json:"pra,omitempty"`
	ORG   []ORG         `hl7:"false,ORG" json:"org,omitempty"`
	AFF   []AFF         `hl7:"false,AFF" json:"aff,omitempty"`
	LAN   []LAN         `hl7:"false,LAN" json:"lan,omitempty"`
	EDU   []EDU         `hl7:"false,EDU" json:"edu,omitempty"`
	CER   []CER         `hl7:"false,CER" json:"cer,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PMU_B01) MessageTypeName() string {
	return "PMU_B01"
}

//  PMU_B03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PMU_B03 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	STF   *STF          `hl7:"true,STF" json:"stf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PMU_B03) MessageTypeName() string {
	return "PMU_B03"
}

//  PMU_B04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PMU_B04 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	STF   *STF          `hl7:"true,STF" json:"stf,omitempty"`
	PRA   []PRA         `hl7:"false,PRA" json:"pra,omitempty"`
	ORG   []ORG         `hl7:"false,ORG" json:"org,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PMU_B04) MessageTypeName() string {
	return "PMU_B04"
}

//  PMU_B07_CERTIFICATE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PMU_B07_CERTIFICATE struct {
	CER   *CER          `hl7:"true,CER" json:"cer,omitempty"`
	ROL   []ROL         `hl7:"false,ROL" json:"rol,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PMU_B07_CERTIFICATE) MessageTypeSubStructName() string {
	return "PMU_B07_CERTIFICATE"
}

//  PMU_B07 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PMU_B07 struct {
	MSH         *MSH                  `hl7:"true,MSH" json:"msh,omitempty"`
	SFT         []SFT                 `hl7:"false,SFT" json:"sft,omitempty"`
	EVN         *EVN                  `hl7:"true,EVN" json:"evn,omitempty"`
	STF         *STF                  `hl7:"true,STF" json:"stf,omitempty"`
	PRA         *PRA                  `hl7:"false,PRA" json:"pra,omitempty"`
	CERTIFICATE []PMU_B07_CERTIFICATE `hl7:"false,CERTIFICATE" json:"certificate,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *PMU_B07) MessageTypeName() string {
	return "PMU_B07"
}

//  PMU_B08 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PMU_B08 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	EVN   *EVN          `hl7:"true,EVN" json:"evn,omitempty"`
	STF   *STF          `hl7:"true,STF" json:"stf,omitempty"`
	PRA   *PRA          `hl7:"false,PRA" json:"pra,omitempty"`
	CER   []CER         `hl7:"false,CER" json:"cer,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PMU_B08) MessageTypeName() string {
	return "PMU_B08"
}

//  PPG_PCG_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type PPG_PCG_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_CHOICE) MessageTypeSubStructName() string {
	return "PPG_PCG_CHOICE"
}

//  PPG_PCG represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG struct {
	MSH           *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT           []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PATIENT_VISIT *PPG_PCG_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	PATHWAY       []PPG_PCG_PATHWAY      `hl7:"true,PATHWAY" json:"pathway,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *PPG_PCG) MessageTypeName() string {
	return "PPG_PCG"
}

//  PPG_PCG_GOAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_GOAL struct {
	GOL              *GOL                       `hl7:"true,GOL" json:"gol,omitempty"`
	NTE              []NTE                      `hl7:"false,NTE" json:"nte,omitempty"`
	VAR              []VAR                      `hl7:"false,VAR" json:"var,omitempty"`
	GOAL_ROLE        []PPG_PCG_GOAL_ROLE        `hl7:"false,GOAL_ROLE" json:"goal___role,omitempty"`
	GOAL_OBSERVATION []PPG_PCG_GOAL_OBSERVATION `hl7:"false,GOAL_OBSERVATION" json:"goal___observation,omitempty"`
	PROBLEM          []PPG_PCG_PROBLEM          `hl7:"false,PROBLEM" json:"problem,omitempty"`
	ORDER            []PPG_PCG_ORDER            `hl7:"false,ORDER" json:"order,omitempty"`
	Other            []interface{}              `json:"other,omitempty"`
}

func (s *PPG_PCG_GOAL) MessageTypeSubStructName() string {
	return "PPG_PCG_GOAL"
}

//  PPG_PCG_GOAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_GOAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_GOAL_OBSERVATION) MessageTypeSubStructName() string {
	return "PPG_PCG_GOAL_OBSERVATION"
}

//  PPG_PCG_GOAL_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_GOAL_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_GOAL_ROLE) MessageTypeSubStructName() string {
	return "PPG_PCG_GOAL_ROLE"
}

//  PPG_PCG_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *PPG_PCG_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *PPG_PCG_ORDER) MessageTypeSubStructName() string {
	return "PPG_PCG_ORDER"
}

//  PPG_PCG_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_ORDER_DETAIL struct {
	ORDER_DETAIL_SEGMENT *PPG_PCG_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                  []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	ORDER_OBSERVATION    []PPG_PCG_ORDER_OBSERVATION   `hl7:"false,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *PPG_PCG_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "PPG_PCG_ORDER_DETAIL"
}

//  PPG_PCG_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "PPG_PCG_ORDER_DETAIL_SEGMENT"
}

//  PPG_PCG_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_ORDER_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "PPG_PCG_ORDER_OBSERVATION"
}

//  PPG_PCG_PATHWAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_PATHWAY struct {
	PTH          *PTH                   `hl7:"true,PTH" json:"pth,omitempty"`
	NTE          []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	VAR          []VAR                  `hl7:"false,VAR" json:"var,omitempty"`
	PATHWAY_ROLE []PPG_PCG_PATHWAY_ROLE `hl7:"false,PATHWAY_ROLE" json:"pathway___role,omitempty"`
	GOAL         []PPG_PCG_GOAL         `hl7:"false,GOAL" json:"goal,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *PPG_PCG_PATHWAY) MessageTypeSubStructName() string {
	return "PPG_PCG_PATHWAY"
}

//  PPG_PCG_PATHWAY_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_PATHWAY_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_PATHWAY_ROLE) MessageTypeSubStructName() string {
	return "PPG_PCG_PATHWAY_ROLE"
}

//  PPG_PCG_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "PPG_PCG_PATIENT_VISIT"
}

//  PPG_PCG_PROBLEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_PROBLEM struct {
	PRB                 *PRB                          `hl7:"true,PRB" json:"prb,omitempty"`
	NTE                 []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                 []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	PROBLEM_ROLE        []PPG_PCG_PROBLEM_ROLE        `hl7:"false,PROBLEM_ROLE" json:"problem___role,omitempty"`
	PROBLEM_OBSERVATION []PPG_PCG_PROBLEM_OBSERVATION `hl7:"false,PROBLEM_OBSERVATION" json:"problem___observation,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PPG_PCG_PROBLEM) MessageTypeSubStructName() string {
	return "PPG_PCG_PROBLEM"
}

//  PPG_PCG_PROBLEM_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_PROBLEM_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_PROBLEM_OBSERVATION) MessageTypeSubStructName() string {
	return "PPG_PCG_PROBLEM_OBSERVATION"
}

//  PPG_PCG_PROBLEM_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPG_PCG_PROBLEM_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPG_PCG_PROBLEM_ROLE) MessageTypeSubStructName() string {
	return "PPG_PCG_PROBLEM_ROLE"
}

//  PPP_PCB_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type PPP_PCB_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_CHOICE) MessageTypeSubStructName() string {
	return "PPP_PCB_CHOICE"
}

//  PPP_PCB represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB struct {
	MSH           *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT           []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PATIENT_VISIT *PPP_PCB_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	PATHWAY       []PPP_PCB_PATHWAY      `hl7:"true,PATHWAY" json:"pathway,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *PPP_PCB) MessageTypeName() string {
	return "PPP_PCB"
}

//  PPP_PCB_GOAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_GOAL struct {
	GOL              *GOL                       `hl7:"true,GOL" json:"gol,omitempty"`
	NTE              []NTE                      `hl7:"false,NTE" json:"nte,omitempty"`
	VAR              []VAR                      `hl7:"false,VAR" json:"var,omitempty"`
	GOAL_ROLE        []PPP_PCB_GOAL_ROLE        `hl7:"false,GOAL_ROLE" json:"goal___role,omitempty"`
	GOAL_OBSERVATION []PPP_PCB_GOAL_OBSERVATION `hl7:"false,GOAL_OBSERVATION" json:"goal___observation,omitempty"`
	Other            []interface{}              `json:"other,omitempty"`
}

func (s *PPP_PCB_GOAL) MessageTypeSubStructName() string {
	return "PPP_PCB_GOAL"
}

//  PPP_PCB_GOAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_GOAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_GOAL_OBSERVATION) MessageTypeSubStructName() string {
	return "PPP_PCB_GOAL_OBSERVATION"
}

//  PPP_PCB_GOAL_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_GOAL_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_GOAL_ROLE) MessageTypeSubStructName() string {
	return "PPP_PCB_GOAL_ROLE"
}

//  PPP_PCB_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *PPP_PCB_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *PPP_PCB_ORDER) MessageTypeSubStructName() string {
	return "PPP_PCB_ORDER"
}

//  PPP_PCB_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_ORDER_DETAIL struct {
	ORDER_DETAIL_SEGMENT *PPP_PCB_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                  []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	ORDER_OBSERVATION    []PPP_PCB_ORDER_OBSERVATION   `hl7:"false,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *PPP_PCB_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "PPP_PCB_ORDER_DETAIL"
}

//  PPP_PCB_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "PPP_PCB_ORDER_DETAIL_SEGMENT"
}

//  PPP_PCB_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_ORDER_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "PPP_PCB_ORDER_OBSERVATION"
}

//  PPP_PCB_PATHWAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_PATHWAY struct {
	PTH          *PTH                   `hl7:"true,PTH" json:"pth,omitempty"`
	NTE          []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	VAR          []VAR                  `hl7:"false,VAR" json:"var,omitempty"`
	PATHWAY_ROLE []PPP_PCB_PATHWAY_ROLE `hl7:"false,PATHWAY_ROLE" json:"pathway___role,omitempty"`
	PROBLEM      []PPP_PCB_PROBLEM      `hl7:"false,PROBLEM" json:"problem,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *PPP_PCB_PATHWAY) MessageTypeSubStructName() string {
	return "PPP_PCB_PATHWAY"
}

//  PPP_PCB_PATHWAY_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_PATHWAY_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_PATHWAY_ROLE) MessageTypeSubStructName() string {
	return "PPP_PCB_PATHWAY_ROLE"
}

//  PPP_PCB_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "PPP_PCB_PATIENT_VISIT"
}

//  PPP_PCB_PROBLEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_PROBLEM struct {
	PRB                 *PRB                          `hl7:"true,PRB" json:"prb,omitempty"`
	NTE                 []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                 []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	PROBLEM_ROLE        []PPP_PCB_PROBLEM_ROLE        `hl7:"false,PROBLEM_ROLE" json:"problem___role,omitempty"`
	PROBLEM_OBSERVATION []PPP_PCB_PROBLEM_OBSERVATION `hl7:"false,PROBLEM_OBSERVATION" json:"problem___observation,omitempty"`
	GOAL                []PPP_PCB_GOAL                `hl7:"false,GOAL" json:"goal,omitempty"`
	ORDER               []PPP_PCB_ORDER               `hl7:"false,ORDER" json:"order,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PPP_PCB_PROBLEM) MessageTypeSubStructName() string {
	return "PPP_PCB_PROBLEM"
}

//  PPP_PCB_PROBLEM_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_PROBLEM_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_PROBLEM_OBSERVATION) MessageTypeSubStructName() string {
	return "PPP_PCB_PROBLEM_OBSERVATION"
}

//  PPP_PCB_PROBLEM_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPP_PCB_PROBLEM_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPP_PCB_PROBLEM_ROLE) MessageTypeSubStructName() string {
	return "PPP_PCB_PROBLEM_ROLE"
}

//  PPR_PC1_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type PPR_PC1_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_CHOICE) MessageTypeSubStructName() string {
	return "PPR_PC1_CHOICE"
}

//  PPR_PC1 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1 struct {
	MSH           *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT           []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PATIENT_VISIT *PPR_PC1_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	PROBLEM       []PPR_PC1_PROBLEM      `hl7:"true,PROBLEM" json:"problem,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *PPR_PC1) MessageTypeName() string {
	return "PPR_PC1"
}

//  PPR_PC1_GOAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_GOAL struct {
	GOL              *GOL                       `hl7:"true,GOL" json:"gol,omitempty"`
	NTE              []NTE                      `hl7:"false,NTE" json:"nte,omitempty"`
	VAR              []VAR                      `hl7:"false,VAR" json:"var,omitempty"`
	GOAL_ROLE        []PPR_PC1_GOAL_ROLE        `hl7:"false,GOAL_ROLE" json:"goal___role,omitempty"`
	GOAL_OBSERVATION []PPR_PC1_GOAL_OBSERVATION `hl7:"false,GOAL_OBSERVATION" json:"goal___observation,omitempty"`
	Other            []interface{}              `json:"other,omitempty"`
}

func (s *PPR_PC1_GOAL) MessageTypeSubStructName() string {
	return "PPR_PC1_GOAL"
}

//  PPR_PC1_GOAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_GOAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_GOAL_OBSERVATION) MessageTypeSubStructName() string {
	return "PPR_PC1_GOAL_OBSERVATION"
}

//  PPR_PC1_GOAL_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_GOAL_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_GOAL_ROLE) MessageTypeSubStructName() string {
	return "PPR_PC1_GOAL_ROLE"
}

//  PPR_PC1_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *PPR_PC1_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *PPR_PC1_ORDER) MessageTypeSubStructName() string {
	return "PPR_PC1_ORDER"
}

//  PPR_PC1_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_ORDER_DETAIL struct {
	ORDER_DETAIL_SEGMENT *PPR_PC1_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                  []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	ORDER_OBSERVATION    []PPR_PC1_ORDER_OBSERVATION   `hl7:"false,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *PPR_PC1_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "PPR_PC1_ORDER_DETAIL"
}

//  PPR_PC1_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "PPR_PC1_ORDER_DETAIL_SEGMENT"
}

//  PPR_PC1_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_ORDER_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "PPR_PC1_ORDER_OBSERVATION"
}

//  PPR_PC1_PATHWAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_PATHWAY struct {
	PTH   *PTH          `hl7:"true,PTH" json:"pth,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_PATHWAY) MessageTypeSubStructName() string {
	return "PPR_PC1_PATHWAY"
}

//  PPR_PC1_PATHWAY_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type PPR_PC1_PATHWAY_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_PATHWAY_OBSERVATION) MessageTypeSubStructName() string {
	return "PPR_PC1_PATHWAY_OBSERVATION"
}

//  PPR_PC1_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "PPR_PC1_PATIENT_VISIT"
}

//  PPR_PC1_PROBLEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_PROBLEM struct {
	PRB                 *PRB                          `hl7:"true,PRB" json:"prb,omitempty"`
	NTE                 []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                 []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	PROBLEM_ROLE        []PPR_PC1_PROBLEM_ROLE        `hl7:"false,PROBLEM_ROLE" json:"problem___role,omitempty"`
	PATHWAY             []PPR_PC1_PATHWAY             `hl7:"false,PATHWAY" json:"pathway,omitempty"`
	PROBLEM_OBSERVATION []PPR_PC1_PROBLEM_OBSERVATION `hl7:"false,PROBLEM_OBSERVATION" json:"problem___observation,omitempty"`
	GOAL                []PPR_PC1_GOAL                `hl7:"false,GOAL" json:"goal,omitempty"`
	ORDER               []PPR_PC1_ORDER               `hl7:"false,ORDER" json:"order,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PPR_PC1_PROBLEM) MessageTypeSubStructName() string {
	return "PPR_PC1_PROBLEM"
}

//  PPR_PC1_PROBLEM_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_PROBLEM_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_PROBLEM_OBSERVATION) MessageTypeSubStructName() string {
	return "PPR_PC1_PROBLEM_OBSERVATION"
}

//  PPR_PC1_PROBLEM_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPR_PC1_PROBLEM_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPR_PC1_PROBLEM_ROLE) MessageTypeSubStructName() string {
	return "PPR_PC1_PROBLEM_ROLE"
}

//  PPT_PCL_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type PPT_PCL_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_CHOICE) MessageTypeSubStructName() string {
	return "PPT_PCL_CHOICE"
}

//  PPT_PCL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	MSA     *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR     []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	QAK     *QAK              `hl7:"false,QAK" json:"qak,omitempty"`
	QRD     *QRD              `hl7:"true,QRD" json:"qrd,omitempty"`
	PATIENT []PPT_PCL_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *PPT_PCL) MessageTypeName() string {
	return "PPT_PCL"
}

//  PPT_PCL_GOAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_GOAL struct {
	GOL              *GOL                       `hl7:"true,GOL" json:"gol,omitempty"`
	NTE              []NTE                      `hl7:"false,NTE" json:"nte,omitempty"`
	VAR              []VAR                      `hl7:"false,VAR" json:"var,omitempty"`
	GOAL_ROLE        []PPT_PCL_GOAL_ROLE        `hl7:"false,GOAL_ROLE" json:"goal___role,omitempty"`
	GOAL_OBSERVATION []PPT_PCL_GOAL_OBSERVATION `hl7:"false,GOAL_OBSERVATION" json:"goal___observation,omitempty"`
	PROBLEM          []PPT_PCL_PROBLEM          `hl7:"false,PROBLEM" json:"problem,omitempty"`
	ORDER            []PPT_PCL_ORDER            `hl7:"false,ORDER" json:"order,omitempty"`
	Other            []interface{}              `json:"other,omitempty"`
}

func (s *PPT_PCL_GOAL) MessageTypeSubStructName() string {
	return "PPT_PCL_GOAL"
}

//  PPT_PCL_GOAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_GOAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_GOAL_OBSERVATION) MessageTypeSubStructName() string {
	return "PPT_PCL_GOAL_OBSERVATION"
}

//  PPT_PCL_GOAL_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_GOAL_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_GOAL_ROLE) MessageTypeSubStructName() string {
	return "PPT_PCL_GOAL_ROLE"
}

//  PPT_PCL_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *PPT_PCL_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *PPT_PCL_ORDER) MessageTypeSubStructName() string {
	return "PPT_PCL_ORDER"
}

//  PPT_PCL_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_ORDER_DETAIL struct {
	ORDER_DETAIL_SEGMENT *PPT_PCL_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                  []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	ORDER_OBSERVATION    []PPT_PCL_ORDER_OBSERVATION   `hl7:"false,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *PPT_PCL_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "PPT_PCL_ORDER_DETAIL"
}

//  PPT_PCL_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "PPT_PCL_ORDER_DETAIL_SEGMENT"
}

//  PPT_PCL_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_ORDER_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "PPT_PCL_ORDER_OBSERVATION"
}

//  PPT_PCL_PATHWAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_PATHWAY struct {
	PTH          *PTH                   `hl7:"true,PTH" json:"pth,omitempty"`
	NTE          []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	VAR          []VAR                  `hl7:"false,VAR" json:"var,omitempty"`
	PATHWAY_ROLE []PPT_PCL_PATHWAY_ROLE `hl7:"false,PATHWAY_ROLE" json:"pathway___role,omitempty"`
	GOAL         []PPT_PCL_GOAL         `hl7:"false,GOAL" json:"goal,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *PPT_PCL_PATHWAY) MessageTypeSubStructName() string {
	return "PPT_PCL_PATHWAY"
}

//  PPT_PCL_PATHWAY_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_PATHWAY_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_PATHWAY_ROLE) MessageTypeSubStructName() string {
	return "PPT_PCL_PATHWAY_ROLE"
}

//  PPT_PCL_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PATIENT_VISIT *PPT_PCL_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	PATHWAY       []PPT_PCL_PATHWAY      `hl7:"true,PATHWAY" json:"pathway,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *PPT_PCL_PATIENT) MessageTypeSubStructName() string {
	return "PPT_PCL_PATIENT"
}

//  PPT_PCL_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "PPT_PCL_PATIENT_VISIT"
}

//  PPT_PCL_PROBLEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_PROBLEM struct {
	PRB                 *PRB                          `hl7:"true,PRB" json:"prb,omitempty"`
	NTE                 []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                 []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	PROBLEM_ROLE        []PPT_PCL_PROBLEM_ROLE        `hl7:"false,PROBLEM_ROLE" json:"problem___role,omitempty"`
	PROBLEM_OBSERVATION []PPT_PCL_PROBLEM_OBSERVATION `hl7:"false,PROBLEM_OBSERVATION" json:"problem___observation,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PPT_PCL_PROBLEM) MessageTypeSubStructName() string {
	return "PPT_PCL_PROBLEM"
}

//  PPT_PCL_PROBLEM_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_PROBLEM_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_PROBLEM_OBSERVATION) MessageTypeSubStructName() string {
	return "PPT_PCL_PROBLEM_OBSERVATION"
}

//  PPT_PCL_PROBLEM_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPT_PCL_PROBLEM_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPT_PCL_PROBLEM_ROLE) MessageTypeSubStructName() string {
	return "PPT_PCL_PROBLEM_ROLE"
}

//  PPV_PCA_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type PPV_PCA_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR   *OBR          `hl7:"true,OBR" json:"obr,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_CHOICE) MessageTypeSubStructName() string {
	return "PPV_PCA_CHOICE"
}

//  PPV_PCA represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	MSA     *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR     []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	QAK     *QAK              `hl7:"false,QAK" json:"qak,omitempty"`
	QRD     *QRD              `hl7:"true,QRD" json:"qrd,omitempty"`
	PATIENT []PPV_PCA_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *PPV_PCA) MessageTypeName() string {
	return "PPV_PCA"
}

//  PPV_PCA_GOAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_GOAL struct {
	GOL              *GOL                       `hl7:"true,GOL" json:"gol,omitempty"`
	NTE              []NTE                      `hl7:"false,NTE" json:"nte,omitempty"`
	VAR              []VAR                      `hl7:"false,VAR" json:"var,omitempty"`
	GOAL_ROLE        []PPV_PCA_GOAL_ROLE        `hl7:"false,GOAL_ROLE" json:"goal___role,omitempty"`
	GOAL_PATHWAY     []PPV_PCA_GOAL_PATHWAY     `hl7:"false,GOAL_PATHWAY" json:"goal___pathway,omitempty"`
	GOAL_OBSERVATION []PPV_PCA_GOAL_OBSERVATION `hl7:"false,GOAL_OBSERVATION" json:"goal___observation,omitempty"`
	PROBLEM          []PPV_PCA_PROBLEM          `hl7:"false,PROBLEM" json:"problem,omitempty"`
	ORDER            []PPV_PCA_ORDER            `hl7:"false,ORDER" json:"order,omitempty"`
	Other            []interface{}              `json:"other,omitempty"`
}

func (s *PPV_PCA_GOAL) MessageTypeSubStructName() string {
	return "PPV_PCA_GOAL"
}

//  PPV_PCA_GOAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_GOAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_GOAL_OBSERVATION) MessageTypeSubStructName() string {
	return "PPV_PCA_GOAL_OBSERVATION"
}

//  PPV_PCA_GOAL_PATHWAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_GOAL_PATHWAY struct {
	PTH   *PTH          `hl7:"true,PTH" json:"pth,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_GOAL_PATHWAY) MessageTypeSubStructName() string {
	return "PPV_PCA_GOAL_PATHWAY"
}

//  PPV_PCA_GOAL_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_GOAL_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_GOAL_ROLE) MessageTypeSubStructName() string {
	return "PPV_PCA_GOAL_ROLE"
}

//  PPV_PCA_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *PPV_PCA_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *PPV_PCA_ORDER) MessageTypeSubStructName() string {
	return "PPV_PCA_ORDER"
}

//  PPV_PCA_ORDER_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_ORDER_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_ORDER_CHOICE) MessageTypeSubStructName() string {
	return "PPV_PCA_ORDER_CHOICE"
}

//  PPV_PCA_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_ORDER_DETAIL struct {
	ORDER_CHOICE      *PPV_PCA_ORDER_CHOICE       `hl7:"true,ORDER_CHOICE" json:"order___choice,omitempty"`
	NTE               []NTE                       `hl7:"false,NTE" json:"nte,omitempty"`
	VAR               []VAR                       `hl7:"false,VAR" json:"var,omitempty"`
	ORDER_OBSERVATION []PPV_PCA_ORDER_OBSERVATION `hl7:"false,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other             []interface{}               `json:"other,omitempty"`
}

func (s *PPV_PCA_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "PPV_PCA_ORDER_DETAIL"
}

//  PPV_PCA_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_ORDER_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "PPV_PCA_ORDER_OBSERVATION"
}

//  PPV_PCA_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PATIENT_VISIT *PPV_PCA_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	GOAL          []PPV_PCA_GOAL         `hl7:"true,GOAL" json:"goal,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *PPV_PCA_PATIENT) MessageTypeSubStructName() string {
	return "PPV_PCA_PATIENT"
}

//  PPV_PCA_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "PPV_PCA_PATIENT_VISIT"
}

//  PPV_PCA_PROBLEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_PROBLEM struct {
	PRB                 *PRB                          `hl7:"true,PRB" json:"prb,omitempty"`
	NTE                 []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                 []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	PROBLEM_ROLE        []PPV_PCA_PROBLEM_ROLE        `hl7:"false,PROBLEM_ROLE" json:"problem___role,omitempty"`
	PROBLEM_OBSERVATION []PPV_PCA_PROBLEM_OBSERVATION `hl7:"false,PROBLEM_OBSERVATION" json:"problem___observation,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PPV_PCA_PROBLEM) MessageTypeSubStructName() string {
	return "PPV_PCA_PROBLEM"
}

//  PPV_PCA_PROBLEM_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_PROBLEM_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_PROBLEM_OBSERVATION) MessageTypeSubStructName() string {
	return "PPV_PCA_PROBLEM_OBSERVATION"
}

//  PPV_PCA_PROBLEM_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PPV_PCA_PROBLEM_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PPV_PCA_PROBLEM_ROLE) MessageTypeSubStructName() string {
	return "PPV_PCA_PROBLEM_ROLE"
}

//  PRR_PC5_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type PRR_PC5_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_CHOICE) MessageTypeSubStructName() string {
	return "PRR_PC5_CHOICE"
}

//  PRR_PC5 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	MSA     *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR     []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	QAK     *QAK              `hl7:"false,QAK" json:"qak,omitempty"`
	QRD     *QRD              `hl7:"true,QRD" json:"qrd,omitempty"`
	PATIENT []PRR_PC5_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *PRR_PC5) MessageTypeName() string {
	return "PRR_PC5"
}

//  PRR_PC5_GOAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_GOAL struct {
	GOL              *GOL                       `hl7:"true,GOL" json:"gol,omitempty"`
	NTE              []NTE                      `hl7:"false,NTE" json:"nte,omitempty"`
	VAR              []VAR                      `hl7:"false,VAR" json:"var,omitempty"`
	GOAL_ROLE        []PRR_PC5_GOAL_ROLE        `hl7:"false,GOAL_ROLE" json:"goal___role,omitempty"`
	GOAL_OBSERVATION []PRR_PC5_GOAL_OBSERVATION `hl7:"false,GOAL_OBSERVATION" json:"goal___observation,omitempty"`
	Other            []interface{}              `json:"other,omitempty"`
}

func (s *PRR_PC5_GOAL) MessageTypeSubStructName() string {
	return "PRR_PC5_GOAL"
}

//  PRR_PC5_GOAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_GOAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_GOAL_OBSERVATION) MessageTypeSubStructName() string {
	return "PRR_PC5_GOAL_OBSERVATION"
}

//  PRR_PC5_GOAL_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_GOAL_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_GOAL_ROLE) MessageTypeSubStructName() string {
	return "PRR_PC5_GOAL_ROLE"
}

//  PRR_PC5_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *PRR_PC5_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *PRR_PC5_ORDER) MessageTypeSubStructName() string {
	return "PRR_PC5_ORDER"
}

//  PRR_PC5_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_ORDER_DETAIL struct {
	ORDER_DETAIL_SEGMENT *PRR_PC5_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                  []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	ORDER_OBSERVATION    []PRR_PC5_ORDER_OBSERVATION   `hl7:"false,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *PRR_PC5_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "PRR_PC5_ORDER_DETAIL"
}

//  PRR_PC5_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "PRR_PC5_ORDER_DETAIL_SEGMENT"
}

//  PRR_PC5_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_ORDER_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "PRR_PC5_ORDER_OBSERVATION"
}

//  PRR_PC5_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PATIENT_VISIT *PRR_PC5_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	PROBLEM       []PRR_PC5_PROBLEM      `hl7:"true,PROBLEM" json:"problem,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *PRR_PC5_PATIENT) MessageTypeSubStructName() string {
	return "PRR_PC5_PATIENT"
}

//  PRR_PC5_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "PRR_PC5_PATIENT_VISIT"
}

//  PRR_PC5_PROBLEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_PROBLEM struct {
	PRB                 *PRB                          `hl7:"true,PRB" json:"prb,omitempty"`
	NTE                 []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                 []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	PROBLEM_ROLE        []PRR_PC5_PROBLEM_ROLE        `hl7:"false,PROBLEM_ROLE" json:"problem___role,omitempty"`
	PROBLEM_PATHWAY     []PRR_PC5_PROBLEM_PATHWAY     `hl7:"false,PROBLEM_PATHWAY" json:"problem___pathway,omitempty"`
	PROBLEM_OBSERVATION []PRR_PC5_PROBLEM_OBSERVATION `hl7:"false,PROBLEM_OBSERVATION" json:"problem___observation,omitempty"`
	GOAL                []PRR_PC5_GOAL                `hl7:"false,GOAL" json:"goal,omitempty"`
	ORDER               []PRR_PC5_ORDER               `hl7:"false,ORDER" json:"order,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PRR_PC5_PROBLEM) MessageTypeSubStructName() string {
	return "PRR_PC5_PROBLEM"
}

//  PRR_PC5_PROBLEM_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_PROBLEM_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_PROBLEM_OBSERVATION) MessageTypeSubStructName() string {
	return "PRR_PC5_PROBLEM_OBSERVATION"
}

//  PRR_PC5_PROBLEM_PATHWAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_PROBLEM_PATHWAY struct {
	PTH   *PTH          `hl7:"true,PTH" json:"pth,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_PROBLEM_PATHWAY) MessageTypeSubStructName() string {
	return "PRR_PC5_PROBLEM_PATHWAY"
}

//  PRR_PC5_PROBLEM_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PRR_PC5_PROBLEM_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PRR_PC5_PROBLEM_ROLE) MessageTypeSubStructName() string {
	return "PRR_PC5_PROBLEM_ROLE"
}

//  PTR_PCF_CHOICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type PTR_PCF_CHOICE struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_CHOICE) MessageTypeSubStructName() string {
	return "PTR_PCF_CHOICE"
}

//  PTR_PCF represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	MSA     *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR     []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	QAK     *QAK              `hl7:"false,QAK" json:"qak,omitempty"`
	QRD     *QRD              `hl7:"true,QRD" json:"qrd,omitempty"`
	PATIENT []PTR_PCF_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *PTR_PCF) MessageTypeName() string {
	return "PTR_PCF"
}

//  PTR_PCF_GOAL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_GOAL struct {
	GOL              *GOL                       `hl7:"true,GOL" json:"gol,omitempty"`
	NTE              []NTE                      `hl7:"false,NTE" json:"nte,omitempty"`
	VAR              []VAR                      `hl7:"false,VAR" json:"var,omitempty"`
	GOAL_ROLE        []PTR_PCF_GOAL_ROLE        `hl7:"false,GOAL_ROLE" json:"goal___role,omitempty"`
	GOAL_OBSERVATION []PTR_PCF_GOAL_OBSERVATION `hl7:"false,GOAL_OBSERVATION" json:"goal___observation,omitempty"`
	Other            []interface{}              `json:"other,omitempty"`
}

func (s *PTR_PCF_GOAL) MessageTypeSubStructName() string {
	return "PTR_PCF_GOAL"
}

//  PTR_PCF_GOAL_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_GOAL_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_GOAL_OBSERVATION) MessageTypeSubStructName() string {
	return "PTR_PCF_GOAL_OBSERVATION"
}

//  PTR_PCF_GOAL_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_GOAL_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_GOAL_ROLE) MessageTypeSubStructName() string {
	return "PTR_PCF_GOAL_ROLE"
}

//  PTR_PCF_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *PTR_PCF_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *PTR_PCF_ORDER) MessageTypeSubStructName() string {
	return "PTR_PCF_ORDER"
}

//  PTR_PCF_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_ORDER_DETAIL struct {
	ORDER_DETAIL_SEGMENT *PTR_PCF_ORDER_DETAIL_SEGMENT `hl7:"true,ORDER_DETAIL_SEGMENT" json:"order___detail___segment,omitempty"`
	NTE                  []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                  []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	ORDER_OBSERVATION    []PTR_PCF_ORDER_OBSERVATION   `hl7:"false,ORDER_OBSERVATION" json:"order___observation,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *PTR_PCF_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "PTR_PCF_ORDER_DETAIL"
}

//  PTR_PCF_ORDER_DETAIL_SEGMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_ORDER_DETAIL_SEGMENT struct {
	//  Only one of the following fields will be set.
	OBR *OBR `hl7:"true,OBR" json:"obr,omitempty"`
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_ORDER_DETAIL_SEGMENT) MessageTypeSubStructName() string {
	return "PTR_PCF_ORDER_DETAIL_SEGMENT"
}

//  PTR_PCF_ORDER_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_ORDER_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_ORDER_OBSERVATION) MessageTypeSubStructName() string {
	return "PTR_PCF_ORDER_OBSERVATION"
}

//  PTR_PCF_PATHWAY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_PATHWAY struct {
	PTH          *PTH                   `hl7:"true,PTH" json:"pth,omitempty"`
	NTE          []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	VAR          []VAR                  `hl7:"false,VAR" json:"var,omitempty"`
	PATHWAY_ROLE []PTR_PCF_PATHWAY_ROLE `hl7:"false,PATHWAY_ROLE" json:"pathway___role,omitempty"`
	PROBLEM      []PTR_PCF_PROBLEM      `hl7:"false,PROBLEM" json:"problem,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *PTR_PCF_PATHWAY) MessageTypeSubStructName() string {
	return "PTR_PCF_PATHWAY"
}

//  PTR_PCF_PATHWAY_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_PATHWAY_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_PATHWAY_ROLE) MessageTypeSubStructName() string {
	return "PTR_PCF_PATHWAY_ROLE"
}

//  PTR_PCF_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PATIENT_VISIT *PTR_PCF_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	PATHWAY       []PTR_PCF_PATHWAY      `hl7:"true,PATHWAY" json:"pathway,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *PTR_PCF_PATIENT) MessageTypeSubStructName() string {
	return "PTR_PCF_PATIENT"
}

//  PTR_PCF_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "PTR_PCF_PATIENT_VISIT"
}

//  PTR_PCF_PROBLEM represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_PROBLEM struct {
	PRB                 *PRB                          `hl7:"true,PRB" json:"prb,omitempty"`
	NTE                 []NTE                         `hl7:"false,NTE" json:"nte,omitempty"`
	VAR                 []VAR                         `hl7:"false,VAR" json:"var,omitempty"`
	PROBLEM_ROLE        []PTR_PCF_PROBLEM_ROLE        `hl7:"false,PROBLEM_ROLE" json:"problem___role,omitempty"`
	PROBLEM_OBSERVATION []PTR_PCF_PROBLEM_OBSERVATION `hl7:"false,PROBLEM_OBSERVATION" json:"problem___observation,omitempty"`
	GOAL                []PTR_PCF_GOAL                `hl7:"false,GOAL" json:"goal,omitempty"`
	ORDER               []PTR_PCF_ORDER               `hl7:"false,ORDER" json:"order,omitempty"`
	Other               []interface{}                 `json:"other,omitempty"`
}

func (s *PTR_PCF_PROBLEM) MessageTypeSubStructName() string {
	return "PTR_PCF_PROBLEM"
}

//  PTR_PCF_PROBLEM_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_PROBLEM_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_PROBLEM_OBSERVATION) MessageTypeSubStructName() string {
	return "PTR_PCF_PROBLEM_OBSERVATION"
}

//  PTR_PCF_PROBLEM_ROLE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type PTR_PCF_PROBLEM_ROLE struct {
	ROL   *ROL          `hl7:"true,ROL" json:"rol,omitempty"`
	VAR   []VAR         `hl7:"false,VAR" json:"var,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *PTR_PCF_PROBLEM_ROLE) MessageTypeSubStructName() string {
	return "PTR_PCF_PROBLEM_ROLE"
}

//  QBP_K13 represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type QBP_K13 struct {
	MSH            *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	MSA            *MSA                    `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                    `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                    `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                    `hl7:"true,QPD" json:"qpd,omitempty"`
	ROW_DEFINITION *QBP_K13_ROW_DEFINITION `hl7:"false,ROW_DEFINITION" json:"row___definition,omitempty"`
	DSC            *DSC                    `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *QBP_K13) MessageTypeName() string {
	return "QBP_K13"
}

//  QBP_K13_ROW_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type QBP_K13_ROW_DEFINITION struct {
	RDF   *RDF          `hl7:"true,RDF" json:"rdf,omitempty"`
	RDT   []RDT         `hl7:"false,RDT" json:"rdt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QBP_K13_ROW_DEFINITION) MessageTypeSubStructName() string {
	return "QBP_K13_ROW_DEFINITION"
}

//  QBP_Q11 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QBP_Q11 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP   *RCP          `hl7:"true,RCP" json:"rcp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QBP_Q11) MessageTypeName() string {
	return "QBP_Q11"
}

//  QBP_Q13 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QBP_Q13 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	RDF   *RDF          `hl7:"false,RDF" json:"rdf,omitempty"`
	RCP   *RCP          `hl7:"true,RCP" json:"rcp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QBP_Q13) MessageTypeName() string {
	return "QBP_Q13"
}

//  QBP_Q13_QBP represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type QBP_Q13_QBP struct {
	//  Missing: anyZSegment
	Other []interface{} `json:"other,omitempty"`
}

func (s *QBP_Q13_QBP) MessageTypeSubStructName() string {
	return "QBP_Q13_QBP"
}

//  QBP_Q15 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QBP_Q15 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP   *RCP          `hl7:"true,RCP" json:"rcp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QBP_Q15) MessageTypeName() string {
	return "QBP_Q15"
}

//  QBP_Q21 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QBP_Q21 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP   *RCP          `hl7:"true,RCP" json:"rcp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QBP_Q21) MessageTypeName() string {
	return "QBP_Q21"
}

//  QBP_Qnn represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QBP_Qnn struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	RDF   *RDF          `hl7:"false,RDF" json:"rdf,omitempty"`
	RCP   *RCP          `hl7:"true,RCP" json:"rcp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QBP_Qnn) MessageTypeName() string {
	return "QBP_Qnn"
}

//  QBP_Z73 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QBP_Z73 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP   *RCP          `hl7:"true,RCP" json:"rcp,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QBP_Z73) MessageTypeName() string {
	return "QBP_Z73"
}

//  QCK_Q02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QCK_Q02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"false,QAK" json:"qak,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QCK_Q02) MessageTypeName() string {
	return "QCK_Q02"
}

//  QCN_J01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QCN_J01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QID   *QID          `hl7:"true,QID" json:"qid,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QCN_J01) MessageTypeName() string {
	return "QCN_J01"
}

//  QRY_A19 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QRY_A19 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QRY_A19) MessageTypeName() string {
	return "QRY_A19"
}

//  QRY_P04 represents the corresponding HL7 message type.
//  Definition from HL7 2.2
type QRY_P04 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QRY_P04) MessageTypeName() string {
	return "QRY_P04"
}

//  QRY_PC4 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QRY_PC4 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QRY_PC4) MessageTypeName() string {
	return "QRY_PC4"
}

//  QRY_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QRY_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QRY_Q01) MessageTypeName() string {
	return "QRY_Q01"
}

//  QRY_Q02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type QRY_Q02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QRY_Q02) MessageTypeName() string {
	return "QRY_Q02"
}

//  QRY_R02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QRY_R02 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"true,QRF" json:"qrf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QRY_R02) MessageTypeName() string {
	return "QRY_R02"
}

//  QRY_T12 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type QRY_T12 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QRY_T12) MessageTypeName() string {
	return "QRY_T12"
}

//  QSB_Q16 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QSB_Q16 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP   *RCP          `hl7:"true,RCP" json:"rcp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QSB_Q16) MessageTypeName() string {
	return "QSB_Q16"
}

//  QVR_Q17 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QVR_Q17 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	QBP   *QVR_Q17_QBP  `hl7:"false,QBP" json:"qbp,omitempty"`
	RCP   *RCP          `hl7:"true,RCP" json:"rcp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *QVR_Q17) MessageTypeName() string {
	return "QVR_Q17"
}

//  QVR_Q17_QBP represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type QVR_Q17_QBP struct {
	//  Missing: anyHL7Segment
	Other []interface{} `json:"other,omitempty"`
}

func (s *QVR_Q17_QBP) MessageTypeSubStructName() string {
	return "QVR_Q17_QBP"
}

//  RAR_RAR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAR_RAR struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	MSA        *MSA                 `hl7:"true,MSA" json:"msa,omitempty"`
	ERR        []ERR                `hl7:"false,ERR" json:"err,omitempty"`
	SFT        []SFT                `hl7:"false,SFT" json:"sft,omitempty"`
	DEFINITION []RAR_RAR_DEFINITION `hl7:"true,DEFINITION" json:"definition,omitempty"`
	DSC        *DSC                 `hl7:"false,DSC" json:"dsc,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *RAR_RAR) MessageTypeName() string {
	return "RAR_RAR"
}

//  RAR_RAR_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAR_RAR_DEFINITION struct {
	QRD     *QRD             `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF             `hl7:"false,QRF" json:"qrf,omitempty"`
	PATIENT *RAR_RAR_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RAR_RAR_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RAR_RAR_DEFINITION) MessageTypeSubStructName() string {
	return "RAR_RAR_DEFINITION"
}

//  RAR_RAR_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAR_RAR_ENCODING struct {
	RXE   *RXE          `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAR_RAR_ENCODING) MessageTypeSubStructName() string {
	return "RAR_RAR_ENCODING"
}

//  RAR_RAR_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAR_RAR_ORDER struct {
	ORC      *ORC              `hl7:"true,ORC" json:"orc,omitempty"`
	ENCODING *RAR_RAR_ENCODING `hl7:"false,ENCODING" json:"encoding,omitempty"`
	RXA      []RXA             `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR      *RXR              `hl7:"true,RXR" json:"rxr,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RAR_RAR_ORDER) MessageTypeSubStructName() string {
	return "RAR_RAR_ORDER"
}

//  RAR_RAR_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAR_RAR_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAR_RAR_PATIENT) MessageTypeSubStructName() string {
	return "RAR_RAR_PATIENT"
}

//  RAS_O01_COMPONENTS represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01_COMPONENTS struct {
	RXC   []RXC         `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O01_COMPONENTS) MessageTypeSubStructName() string {
	return "RAS_O01_COMPONENTS"
}

//  RAS_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RAS_O01_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RAS_O01_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RAS_O01) MessageTypeName() string {
	return "RAS_O01"
}

//  RAS_O01_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01_ENCODING struct {
	RXE   *RXE          `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O01_ENCODING) MessageTypeSubStructName() string {
	return "RAS_O01_ENCODING"
}

//  RAS_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "RAS_O01_OBSERVATION"
}

//  RAS_O01_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *RAS_O01_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODING     *RAS_O01_ENCODING     `hl7:"false,ENCODING" json:"encoding,omitempty"`
	RXA          []RXA                 `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR          *RXR                  `hl7:"true,RXR" json:"rxr,omitempty"`
	OBSERVATION  []RAS_O01_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	CTI          []CTI                 `hl7:"false,CTI" json:"cti,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RAS_O01_ORDER) MessageTypeSubStructName() string {
	return "RAS_O01_ORDER"
}

//  RAS_O01_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01_ORDER_DETAIL struct {
	RXO                     *RXO                             `hl7:"true,RXO" json:"rxo,omitempty"`
	ORDER_DETAIL_SUPPLEMENT *RAS_O01_ORDER_DETAIL_SUPPLEMENT `hl7:"false,ORDER_DETAIL_SUPPLEMENT" json:"order___detail___supplement,omitempty"`
	Other                   []interface{}                    `json:"other,omitempty"`
}

func (s *RAS_O01_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RAS_O01_ORDER_DETAIL"
}

//  RAS_O01_ORDER_DETAIL_SUPPLEMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01_ORDER_DETAIL_SUPPLEMENT struct {
	NTE        []NTE               `hl7:"true,NTE" json:"nte,omitempty"`
	RXR        []RXR               `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENTS *RAS_O01_COMPONENTS `hl7:"false,COMPONENTS" json:"components,omitempty"`
	Other      []interface{}       `json:"other,omitempty"`
}

func (s *RAS_O01_ORDER_DETAIL_SUPPLEMENT) MessageTypeSubStructName() string {
	return "RAS_O01_ORDER_DETAIL_SUPPLEMENT"
}

//  RAS_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	PATIENT_VISIT *RAS_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RAS_O01_PATIENT) MessageTypeSubStructName() string {
	return "RAS_O01_PATIENT"
}

//  RAS_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RAS_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RAS_O01_PATIENT_VISIT"
}

//  RAS_O17_ADMINISTRATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_ADMINISTRATION struct {
	RXA         []RXA                 `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR         *RXR                  `hl7:"true,RXR" json:"rxr,omitempty"`
	OBSERVATION []RAS_O17_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RAS_O17_ADMINISTRATION) MessageTypeSubStructName() string {
	return "RAS_O17_ADMINISTRATION"
}

//  RAS_O17_COMPONENTS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_COMPONENTS struct {
	RXC   *RXC          `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O17_COMPONENTS) MessageTypeSubStructName() string {
	return "RAS_O17_COMPONENTS"
}

//  RAS_O17 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RAS_O17_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RAS_O17_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RAS_O17) MessageTypeName() string {
	return "RAS_O17"
}

//  RAS_O17_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_ENCODING struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	TIMING_ENCODED []RAS_O17_TIMING_ENCODED `hl7:"true,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RAS_O17_ENCODING) MessageTypeSubStructName() string {
	return "RAS_O17_ENCODING"
}

//  RAS_O17_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O17_OBSERVATION) MessageTypeSubStructName() string {
	return "RAS_O17_OBSERVATION"
}

//  RAS_O17_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_ORDER struct {
	ORC            *ORC                     `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING         []RAS_O17_TIMING         `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL   *RAS_O17_ORDER_DETAIL    `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODING       *RAS_O17_ENCODING        `hl7:"false,ENCODING" json:"encoding,omitempty"`
	ADMINISTRATION []RAS_O17_ADMINISTRATION `hl7:"true,ADMINISTRATION" json:"administration,omitempty"`
	CTI            []CTI                    `hl7:"false,CTI" json:"cti,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RAS_O17_ORDER) MessageTypeSubStructName() string {
	return "RAS_O17_ORDER"
}

//  RAS_O17_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_ORDER_DETAIL struct {
	RXO                     *RXO                             `hl7:"true,RXO" json:"rxo,omitempty"`
	ORDER_DETAIL_SUPPLEMENT *RAS_O17_ORDER_DETAIL_SUPPLEMENT `hl7:"false,ORDER_DETAIL_SUPPLEMENT" json:"order___detail___supplement,omitempty"`
	Other                   []interface{}                    `json:"other,omitempty"`
}

func (s *RAS_O17_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RAS_O17_ORDER_DETAIL"
}

//  RAS_O17_ORDER_DETAIL_SUPPLEMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_ORDER_DETAIL_SUPPLEMENT struct {
	NTE        []NTE                `hl7:"true,NTE" json:"nte,omitempty"`
	RXR        []RXR                `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENTS []RAS_O17_COMPONENTS `hl7:"false,COMPONENTS" json:"components,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *RAS_O17_ORDER_DETAIL_SUPPLEMENT) MessageTypeSubStructName() string {
	return "RAS_O17_ORDER_DETAIL_SUPPLEMENT"
}

//  RAS_O17_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	PATIENT_VISIT *RAS_O17_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RAS_O17_PATIENT) MessageTypeSubStructName() string {
	return "RAS_O17_PATIENT"
}

//  RAS_O17_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O17_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RAS_O17_PATIENT_VISIT"
}

//  RAS_O17_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O17_TIMING) MessageTypeSubStructName() string {
	return "RAS_O17_TIMING"
}

//  RAS_O17_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RAS_O17_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RAS_O17_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RAS_O17_TIMING_ENCODED"
}

//  RCI_I05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RCI_I05 struct {
	MSH         *MSH                  `hl7:"true,MSH" json:"msh,omitempty"`
	SFT         []SFT                 `hl7:"false,SFT" json:"sft,omitempty"`
	MSA         *MSA                  `hl7:"true,MSA" json:"msa,omitempty"`
	QRD         *QRD                  `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF         *QRF                  `hl7:"false,QRF" json:"qrf,omitempty"`
	PROVIDER    []RCI_I05_PROVIDER    `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID         *PID                  `hl7:"true,PID" json:"pid,omitempty"`
	DG1         []DG1                 `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG         []DRG                 `hl7:"false,DRG" json:"drg,omitempty"`
	AL1         []AL1                 `hl7:"false,AL1" json:"al_1,omitempty"`
	OBSERVATION []RCI_I05_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RCI_I05) MessageTypeName() string {
	return "RCI_I05"
}

//  RCI_I05_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RCI_I05_OBSERVATION struct {
	OBR     *OBR              `hl7:"true,OBR" json:"obr,omitempty"`
	NTE     []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESULTS []RCI_I05_RESULTS `hl7:"false,RESULTS" json:"results,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *RCI_I05_OBSERVATION) MessageTypeSubStructName() string {
	return "RCI_I05_OBSERVATION"
}

//  RCI_I05_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RCI_I05_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RCI_I05_PROVIDER) MessageTypeSubStructName() string {
	return "RCI_I05_PROVIDER"
}

//  RCI_I05_RESULTS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RCI_I05_RESULTS struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RCI_I05_RESULTS) MessageTypeSubStructName() string {
	return "RCI_I05_RESULTS"
}

//  RCL_I06 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RCL_I06 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	PROVIDER []RCL_I06_PROVIDER `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID      *PID               `hl7:"true,PID" json:"pid,omitempty"`
	DG1      []DG1              `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG      []DRG              `hl7:"false,DRG" json:"drg,omitempty"`
	AL1      []AL1              `hl7:"false,AL1" json:"al_1,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	DSP      []DSP              `hl7:"false,DSP" json:"dsp,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *RCL_I06) MessageTypeName() string {
	return "RCL_I06"
}

//  RCL_I06_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RCL_I06_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RCL_I06_PROVIDER) MessageTypeSubStructName() string {
	return "RCL_I06_PROVIDER"
}

//  RDE_O01_COMPONENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDE_O01_COMPONENT struct {
	RXC   []RXC         `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O01_COMPONENT) MessageTypeSubStructName() string {
	return "RDE_O01_COMPONENT"
}

//  RDE_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDE_O01 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RDE_O01_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RDE_O01_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RDE_O01) MessageTypeName() string {
	return "RDE_O01"
}

//  RDE_O01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDE_O01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O01_INSURANCE) MessageTypeSubStructName() string {
	return "RDE_O01_INSURANCE"
}

//  RDE_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDE_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "RDE_O01_OBSERVATION"
}

//  RDE_O01_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDE_O01_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *RDE_O01_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	RXE          *RXE                  `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR          []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC          []RXC                 `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION  []RDE_O01_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	CTI          []CTI                 `hl7:"false,CTI" json:"cti,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RDE_O01_ORDER) MessageTypeSubStructName() string {
	return "RDE_O01_ORDER"
}

//  RDE_O01_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDE_O01_ORDER_DETAIL struct {
	RXO       *RXO               `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE       []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	RXR       []RXR              `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENT *RDE_O01_COMPONENT `hl7:"false,COMPONENT" json:"component,omitempty"`
	Other     []interface{}      `json:"other,omitempty"`
}

func (s *RDE_O01_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RDE_O01_ORDER_DETAIL"
}

//  RDE_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDE_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *RDE_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []RDE_O01_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RDE_O01_PATIENT) MessageTypeSubStructName() string {
	return "RDE_O01_PATIENT"
}

//  RDE_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDE_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RDE_O01_PATIENT_VISIT"
}

//  RDE_O11_COMPONENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_COMPONENT struct {
	RXC   *RXC          `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O11_COMPONENT) MessageTypeSubStructName() string {
	return "RDE_O11_COMPONENT"
}

//  RDE_O11 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RDE_O11_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RDE_O11_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RDE_O11) MessageTypeName() string {
	return "RDE_O11"
}

//  RDE_O11_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O11_INSURANCE) MessageTypeSubStructName() string {
	return "RDE_O11_INSURANCE"
}

//  RDE_O11_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O11_OBSERVATION) MessageTypeSubStructName() string {
	return "RDE_O11_OBSERVATION"
}

//  RDE_O11_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_ORDER struct {
	ORC            *ORC                     `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING         []RDE_O11_TIMING         `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL   *RDE_O11_ORDER_DETAIL    `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	NTE            []NTE                    `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_ENCODED []RDE_O11_TIMING_ENCODED `hl7:"true,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION    []RDE_O11_OBSERVATION    `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	FT1            []FT1                    `hl7:"false,FT1" json:"ft_1,omitempty"`
	BLG            *BLG                     `hl7:"false,BLG" json:"blg,omitempty"`
	CTI            []CTI                    `hl7:"false,CTI" json:"cti,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RDE_O11_ORDER) MessageTypeSubStructName() string {
	return "RDE_O11_ORDER"
}

//  RDE_O11_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_ORDER_DETAIL struct {
	RXO       *RXO                `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE       []NTE               `hl7:"false,NTE" json:"nte,omitempty"`
	RXR       []RXR               `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENT []RDE_O11_COMPONENT `hl7:"false,COMPONENT" json:"component,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *RDE_O11_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RDE_O11_ORDER_DETAIL"
}

//  RDE_O11_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *RDE_O11_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []RDE_O11_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RDE_O11_PATIENT) MessageTypeSubStructName() string {
	return "RDE_O11_PATIENT"
}

//  RDE_O11_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O11_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RDE_O11_PATIENT_VISIT"
}

//  RDE_O11_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O11_TIMING) MessageTypeSubStructName() string {
	return "RDE_O11_TIMING"
}

//  RDE_O11_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDE_O11_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDE_O11_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RDE_O11_TIMING_ENCODED"
}

//  RDO_O01_COMPONENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDO_O01_COMPONENT struct {
	RXC   []RXC         `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDO_O01_COMPONENT) MessageTypeSubStructName() string {
	return "RDO_O01_COMPONENT"
}

//  RDO_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDO_O01 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RDO_O01_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RDO_O01_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RDO_O01) MessageTypeName() string {
	return "RDO_O01"
}

//  RDO_O01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDO_O01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDO_O01_INSURANCE) MessageTypeSubStructName() string {
	return "RDO_O01_INSURANCE"
}

//  RDO_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDO_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDO_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "RDO_O01_OBSERVATION"
}

//  RDO_O01_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDO_O01_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *RDO_O01_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	BLG          *BLG                  `hl7:"false,BLG" json:"blg,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RDO_O01_ORDER) MessageTypeSubStructName() string {
	return "RDO_O01_ORDER"
}

//  RDO_O01_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDO_O01_ORDER_DETAIL struct {
	RXO         *RXO                  `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	RXR         []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENT   *RDO_O01_COMPONENT    `hl7:"false,COMPONENT" json:"component,omitempty"`
	OBSERVATION []RDO_O01_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RDO_O01_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RDO_O01_ORDER_DETAIL"
}

//  RDO_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDO_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT_VISIT *RDO_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	INSURANCE     []RDO_O01_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	GT1           *GT1                   `hl7:"false,GT1" json:"gt_1,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RDO_O01_PATIENT) MessageTypeSubStructName() string {
	return "RDO_O01_PATIENT"
}

//  RDO_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDO_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDO_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RDO_O01_PATIENT_VISIT"
}

//  RDR_RDR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDR_RDR struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	MSA        *MSA                 `hl7:"true,MSA" json:"msa,omitempty"`
	ERR        []ERR                `hl7:"false,ERR" json:"err,omitempty"`
	SFT        []SFT                `hl7:"false,SFT" json:"sft,omitempty"`
	DEFINITION []RDR_RDR_DEFINITION `hl7:"true,DEFINITION" json:"definition,omitempty"`
	DSC        *DSC                 `hl7:"false,DSC" json:"dsc,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *RDR_RDR) MessageTypeName() string {
	return "RDR_RDR"
}

//  RDR_RDR_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDR_RDR_DEFINITION struct {
	QRD     *QRD             `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF             `hl7:"false,QRF" json:"qrf,omitempty"`
	PATIENT *RDR_RDR_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RDR_RDR_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RDR_RDR_DEFINITION) MessageTypeSubStructName() string {
	return "RDR_RDR_DEFINITION"
}

//  RDR_RDR_DISPENSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDR_RDR_DISPENSE struct {
	RXD   *RXD          `hl7:"true,RXD" json:"rxd,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDR_RDR_DISPENSE) MessageTypeSubStructName() string {
	return "RDR_RDR_DISPENSE"
}

//  RDR_RDR_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDR_RDR_ENCODING struct {
	RXE   *RXE          `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDR_RDR_ENCODING) MessageTypeSubStructName() string {
	return "RDR_RDR_ENCODING"
}

//  RDR_RDR_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDR_RDR_ORDER struct {
	ORC      *ORC               `hl7:"true,ORC" json:"orc,omitempty"`
	ENCODING *RDR_RDR_ENCODING  `hl7:"false,ENCODING" json:"encoding,omitempty"`
	DISPENSE []RDR_RDR_DISPENSE `hl7:"true,DISPENSE" json:"dispense,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *RDR_RDR_ORDER) MessageTypeSubStructName() string {
	return "RDR_RDR_ORDER"
}

//  RDR_RDR_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDR_RDR_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDR_RDR_PATIENT) MessageTypeSubStructName() string {
	return "RDR_RDR_PATIENT"
}

//  RDS_O01_COMPONENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01_COMPONENT struct {
	RXC   []RXC         `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O01_COMPONENT) MessageTypeSubStructName() string {
	return "RDS_O01_COMPONENT"
}

//  RDS_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RDS_O01_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RDS_O01_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RDS_O01) MessageTypeName() string {
	return "RDS_O01"
}

//  RDS_O01_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01_ENCODING struct {
	RXE   *RXE          `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O01_ENCODING) MessageTypeSubStructName() string {
	return "RDS_O01_ENCODING"
}

//  RDS_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "RDS_O01_OBSERVATION"
}

//  RDS_O01_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *RDS_O01_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODING     *RDS_O01_ENCODING     `hl7:"false,ENCODING" json:"encoding,omitempty"`
	RXD          *RXD                  `hl7:"true,RXD" json:"rxd,omitempty"`
	RXR          []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC          []RXC                 `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION  []RDS_O01_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RDS_O01_ORDER) MessageTypeSubStructName() string {
	return "RDS_O01_ORDER"
}

//  RDS_O01_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01_ORDER_DETAIL struct {
	RXO                     *RXO                             `hl7:"true,RXO" json:"rxo,omitempty"`
	ORDER_DETAIL_SUPPLEMENT *RDS_O01_ORDER_DETAIL_SUPPLEMENT `hl7:"false,ORDER_DETAIL_SUPPLEMENT" json:"order___detail___supplement,omitempty"`
	Other                   []interface{}                    `json:"other,omitempty"`
}

func (s *RDS_O01_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RDS_O01_ORDER_DETAIL"
}

//  RDS_O01_ORDER_DETAIL_SUPPLEMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01_ORDER_DETAIL_SUPPLEMENT struct {
	NTE       []NTE              `hl7:"true,NTE" json:"nte,omitempty"`
	RXR       []RXR              `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENT *RDS_O01_COMPONENT `hl7:"false,COMPONENT" json:"component,omitempty"`
	Other     []interface{}      `json:"other,omitempty"`
}

func (s *RDS_O01_ORDER_DETAIL_SUPPLEMENT) MessageTypeSubStructName() string {
	return "RDS_O01_ORDER_DETAIL_SUPPLEMENT"
}

//  RDS_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	PATIENT_VISIT *RDS_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RDS_O01_PATIENT) MessageTypeSubStructName() string {
	return "RDS_O01_PATIENT"
}

//  RDS_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RDS_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RDS_O01_PATIENT_VISIT"
}

//  RDS_O13_COMPONENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_COMPONENT struct {
	RXC   *RXC          `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O13_COMPONENT) MessageTypeSubStructName() string {
	return "RDS_O13_COMPONENT"
}

//  RDS_O13 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RDS_O13_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RDS_O13_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RDS_O13) MessageTypeName() string {
	return "RDS_O13"
}

//  RDS_O13_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_ENCODING struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	NTE            []NTE                    `hl7:"false,NTE" json:"nte,omitempty"`
	TIMING_ENCODED []RDS_O13_TIMING_ENCODED `hl7:"true,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RDS_O13_ENCODING) MessageTypeSubStructName() string {
	return "RDS_O13_ENCODING"
}

//  RDS_O13_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O13_OBSERVATION) MessageTypeSubStructName() string {
	return "RDS_O13_OBSERVATION"
}

//  RDS_O13_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING       []RDS_O13_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL *RDS_O13_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODING     *RDS_O13_ENCODING     `hl7:"false,ENCODING" json:"encoding,omitempty"`
	RXD          *RXD                  `hl7:"true,RXD" json:"rxd,omitempty"`
	NTE          []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	RXR          []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC          []RXC                 `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION  []RDS_O13_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	FT1          []FT1                 `hl7:"false,FT1" json:"ft_1,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RDS_O13_ORDER) MessageTypeSubStructName() string {
	return "RDS_O13_ORDER"
}

//  RDS_O13_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_ORDER_DETAIL struct {
	RXO                     *RXO                             `hl7:"true,RXO" json:"rxo,omitempty"`
	ORDER_DETAIL_SUPPLEMENT *RDS_O13_ORDER_DETAIL_SUPPLEMENT `hl7:"false,ORDER_DETAIL_SUPPLEMENT" json:"order___detail___supplement,omitempty"`
	Other                   []interface{}                    `json:"other,omitempty"`
}

func (s *RDS_O13_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RDS_O13_ORDER_DETAIL"
}

//  RDS_O13_ORDER_DETAIL_SUPPLEMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_ORDER_DETAIL_SUPPLEMENT struct {
	NTE       []NTE               `hl7:"true,NTE" json:"nte,omitempty"`
	RXR       []RXR               `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENT []RDS_O13_COMPONENT `hl7:"false,COMPONENT" json:"component,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *RDS_O13_ORDER_DETAIL_SUPPLEMENT) MessageTypeSubStructName() string {
	return "RDS_O13_ORDER_DETAIL_SUPPLEMENT"
}

//  RDS_O13_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	PATIENT_VISIT *RDS_O13_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RDS_O13_PATIENT) MessageTypeSubStructName() string {
	return "RDS_O13_PATIENT"
}

//  RDS_O13_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O13_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RDS_O13_PATIENT_VISIT"
}

//  RDS_O13_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O13_TIMING) MessageTypeSubStructName() string {
	return "RDS_O13_TIMING"
}

//  RDS_O13_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDS_O13_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDS_O13_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RDS_O13_TIMING_ENCODED"
}

//  RDY_K15 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RDY_K15 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	DSP   []DSP         `hl7:"false,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RDY_K15) MessageTypeName() string {
	return "RDY_K15"
}

//  REF_I12_AUTHORIZATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type REF_I12_AUTHORIZATION struct {
	AUT   *AUT          `hl7:"true,AUT" json:"aut,omitempty"`
	CTD   *CTD          `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *REF_I12_AUTHORIZATION) MessageTypeSubStructName() string {
	return "REF_I12_AUTHORIZATION"
}

//  REF_I12_AUTHORIZATION_CONTACT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type REF_I12_AUTHORIZATION_CONTACT struct {
	AUT   *AUT          `hl7:"true,AUT" json:"aut,omitempty"`
	CTD   *CTD          `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *REF_I12_AUTHORIZATION_CONTACT) MessageTypeSubStructName() string {
	return "REF_I12_AUTHORIZATION_CONTACT"
}

//  REF_I12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type REF_I12 struct {
	MSH                   *MSH                           `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                   []SFT                          `hl7:"false,SFT" json:"sft,omitempty"`
	RF1                   *RF1                           `hl7:"false,RF1" json:"rf_1,omitempty"`
	AUTHORIZATION_CONTACT *REF_I12_AUTHORIZATION_CONTACT `hl7:"false,AUTHORIZATION_CONTACT" json:"authorization___contact,omitempty"`
	PROVIDER_CONTACT      []REF_I12_PROVIDER_CONTACT     `hl7:"true,PROVIDER_CONTACT" json:"provider___contact,omitempty"`
	PID                   *PID                           `hl7:"true,PID" json:"pid,omitempty"`
	NK1                   []NK1                          `hl7:"false,NK1" json:"nk_1,omitempty"`
	GT1                   []GT1                          `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE             []REF_I12_INSURANCE            `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC                   *ACC                           `hl7:"false,ACC" json:"acc,omitempty"`
	DG1                   []DG1                          `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG                   []DRG                          `hl7:"false,DRG" json:"drg,omitempty"`
	AL1                   []AL1                          `hl7:"false,AL1" json:"al_1,omitempty"`
	PROCEDURE             []REF_I12_PROCEDURE            `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	OBSERVATION           []REF_I12_OBSERVATION          `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	PATIENT_VISIT         *REF_I12_PATIENT_VISIT         `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	NTE                   []NTE                          `hl7:"false,NTE" json:"nte,omitempty"`
	Other                 []interface{}                  `json:"other,omitempty"`
}

func (s *REF_I12) MessageTypeName() string {
	return "REF_I12"
}

//  REF_I12_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type REF_I12_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *REF_I12_INSURANCE) MessageTypeSubStructName() string {
	return "REF_I12_INSURANCE"
}

//  REF_I12_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type REF_I12_OBSERVATION struct {
	OBR           *OBR                    `hl7:"true,OBR" json:"obr,omitempty"`
	NTE           []NTE                   `hl7:"false,NTE" json:"nte,omitempty"`
	RESULTS_NOTES []REF_I12_RESULTS_NOTES `hl7:"false,RESULTS_NOTES" json:"results___notes,omitempty"`
	Other         []interface{}           `json:"other,omitempty"`
}

func (s *REF_I12_OBSERVATION) MessageTypeSubStructName() string {
	return "REF_I12_OBSERVATION"
}

//  REF_I12_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type REF_I12_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *REF_I12_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "REF_I12_PATIENT_VISIT"
}

//  REF_I12_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type REF_I12_PROCEDURE struct {
	PR1                   *PR1                           `hl7:"true,PR1" json:"pr_1,omitempty"`
	AUTHORIZATION_CONTACT *REF_I12_AUTHORIZATION_CONTACT `hl7:"false,AUTHORIZATION_CONTACT" json:"authorization___contact,omitempty"`
	Other                 []interface{}                  `json:"other,omitempty"`
}

func (s *REF_I12_PROCEDURE) MessageTypeSubStructName() string {
	return "REF_I12_PROCEDURE"
}

//  REF_I12_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type REF_I12_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *REF_I12_PROVIDER) MessageTypeSubStructName() string {
	return "REF_I12_PROVIDER"
}

//  REF_I12_PROVIDER_CONTACT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type REF_I12_PROVIDER_CONTACT struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *REF_I12_PROVIDER_CONTACT) MessageTypeSubStructName() string {
	return "REF_I12_PROVIDER_CONTACT"
}

//  REF_I12_RESULTS represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type REF_I12_RESULTS struct {
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []REF_I12_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *REF_I12_RESULTS) MessageTypeSubStructName() string {
	return "REF_I12_RESULTS"
}

//  REF_I12_RESULTS_NOTES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type REF_I12_RESULTS_NOTES struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *REF_I12_RESULTS_NOTES) MessageTypeSubStructName() string {
	return "REF_I12_RESULTS_NOTES"
}

//  REF_I12_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type REF_I12_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *REF_I12_VISIT) MessageTypeSubStructName() string {
	return "REF_I12_VISIT"
}

//  RER_RER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RER_RER struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	MSA        *MSA                 `hl7:"true,MSA" json:"msa,omitempty"`
	ERR        []ERR                `hl7:"false,ERR" json:"err,omitempty"`
	SFT        []SFT                `hl7:"false,SFT" json:"sft,omitempty"`
	DEFINITION []RER_RER_DEFINITION `hl7:"true,DEFINITION" json:"definition,omitempty"`
	DSC        *DSC                 `hl7:"false,DSC" json:"dsc,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *RER_RER) MessageTypeName() string {
	return "RER_RER"
}

//  RER_RER_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RER_RER_DEFINITION struct {
	QRD     *QRD             `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF             `hl7:"false,QRF" json:"qrf,omitempty"`
	PATIENT *RER_RER_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RER_RER_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RER_RER_DEFINITION) MessageTypeSubStructName() string {
	return "RER_RER_DEFINITION"
}

//  RER_RER_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RER_RER_ORDER struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	RXE   *RXE          `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RER_RER_ORDER) MessageTypeSubStructName() string {
	return "RER_RER_ORDER"
}

//  RER_RER_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RER_RER_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RER_RER_PATIENT) MessageTypeSubStructName() string {
	return "RER_RER_PATIENT"
}

//  RGR_RGR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGR_RGR struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	MSA        *MSA                 `hl7:"true,MSA" json:"msa,omitempty"`
	ERR        []ERR                `hl7:"false,ERR" json:"err,omitempty"`
	SFT        []SFT                `hl7:"false,SFT" json:"sft,omitempty"`
	DEFINITION []RGR_RGR_DEFINITION `hl7:"true,DEFINITION" json:"definition,omitempty"`
	DSC        *DSC                 `hl7:"false,DSC" json:"dsc,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *RGR_RGR) MessageTypeName() string {
	return "RGR_RGR"
}

//  RGR_RGR_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGR_RGR_DEFINITION struct {
	QRD     *QRD             `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF             `hl7:"false,QRF" json:"qrf,omitempty"`
	PATIENT *RGR_RGR_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RGR_RGR_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RGR_RGR_DEFINITION) MessageTypeSubStructName() string {
	return "RGR_RGR_DEFINITION"
}

//  RGR_RGR_DEFINTION represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RGR_RGR_DEFINTION struct {
	QRD     *QRD             `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF             `hl7:"false,QRF" json:"qrf,omitempty"`
	PATIENT *RGR_RGR_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RGR_RGR_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RGR_RGR_DEFINTION) MessageTypeSubStructName() string {
	return "RGR_RGR_DEFINTION"
}

//  RGR_RGR_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGR_RGR_ENCODING struct {
	RXE   *RXE          `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGR_RGR_ENCODING) MessageTypeSubStructName() string {
	return "RGR_RGR_ENCODING"
}

//  RGR_RGR_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGR_RGR_ORDER struct {
	ORC      *ORC              `hl7:"true,ORC" json:"orc,omitempty"`
	ENCODING *RGR_RGR_ENCODING `hl7:"false,ENCODING" json:"encoding,omitempty"`
	RXG      []RXG             `hl7:"true,RXG" json:"rxg,omitempty"`
	RXR      []RXR             `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC      []RXC             `hl7:"false,RXC" json:"rxc,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RGR_RGR_ORDER) MessageTypeSubStructName() string {
	return "RGR_RGR_ORDER"
}

//  RGR_RGR_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGR_RGR_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGR_RGR_PATIENT) MessageTypeSubStructName() string {
	return "RGR_RGR_PATIENT"
}

//  RGV_O01_COMPONENTS represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_COMPONENTS struct {
	RXC   []RXC         `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O01_COMPONENTS) MessageTypeSubStructName() string {
	return "RGV_O01_COMPONENTS"
}

//  RGV_O01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RGV_O01_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RGV_O01_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RGV_O01) MessageTypeName() string {
	return "RGV_O01"
}

//  RGV_O01_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_ENCODING struct {
	RXE   *RXE          `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O01_ENCODING) MessageTypeSubStructName() string {
	return "RGV_O01_ENCODING"
}

//  RGV_O01_GIVE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_GIVE struct {
	RXG         *RXG                  `hl7:"true,RXG" json:"rxg,omitempty"`
	RXR         []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC         []RXC                 `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION []RGV_O01_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RGV_O01_GIVE) MessageTypeSubStructName() string {
	return "RGV_O01_GIVE"
}

//  RGV_O01_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O01_OBSERVATION) MessageTypeSubStructName() string {
	return "RGV_O01_OBSERVATION"
}

//  RGV_O01_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *RGV_O01_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODING     *RGV_O01_ENCODING     `hl7:"false,ENCODING" json:"encoding,omitempty"`
	GIVE         []RGV_O01_GIVE        `hl7:"true,GIVE" json:"give,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RGV_O01_ORDER) MessageTypeSubStructName() string {
	return "RGV_O01_ORDER"
}

//  RGV_O01_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_ORDER_DETAIL struct {
	RXO                     *RXO                             `hl7:"true,RXO" json:"rxo,omitempty"`
	ORDER_DETAIL_SUPPLEMENT *RGV_O01_ORDER_DETAIL_SUPPLEMENT `hl7:"false,ORDER_DETAIL_SUPPLEMENT" json:"order___detail___supplement,omitempty"`
	Other                   []interface{}                    `json:"other,omitempty"`
}

func (s *RGV_O01_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RGV_O01_ORDER_DETAIL"
}

//  RGV_O01_ORDER_DETAIL_SUPPLEMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_ORDER_DETAIL_SUPPLEMENT struct {
	NTE        []NTE               `hl7:"true,NTE" json:"nte,omitempty"`
	RXR        []RXR               `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENTS *RGV_O01_COMPONENTS `hl7:"false,COMPONENTS" json:"components,omitempty"`
	Other      []interface{}       `json:"other,omitempty"`
}

func (s *RGV_O01_ORDER_DETAIL_SUPPLEMENT) MessageTypeSubStructName() string {
	return "RGV_O01_ORDER_DETAIL_SUPPLEMENT"
}

//  RGV_O01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	PATIENT_VISIT *RGV_O01_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RGV_O01_PATIENT) MessageTypeSubStructName() string {
	return "RGV_O01_PATIENT"
}

//  RGV_O01_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RGV_O01_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O01_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RGV_O01_PATIENT_VISIT"
}

//  RGV_O15_COMPONENTS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_COMPONENTS struct {
	RXC   *RXC          `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O15_COMPONENTS) MessageTypeSubStructName() string {
	return "RGV_O15_COMPONENTS"
}

//  RGV_O15 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	SFT     []SFT            `hl7:"false,SFT" json:"sft,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT *RGV_O15_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RGV_O15_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RGV_O15) MessageTypeName() string {
	return "RGV_O15"
}

//  RGV_O15_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_ENCODING struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	TIMING_ENCODED []RGV_O15_TIMING_ENCODED `hl7:"true,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RGV_O15_ENCODING) MessageTypeSubStructName() string {
	return "RGV_O15_ENCODING"
}

//  RGV_O15_GIVE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_GIVE struct {
	RXG         *RXG                  `hl7:"true,RXG" json:"rxg,omitempty"`
	TIMING_GIVE []RGV_O15_TIMING_GIVE `hl7:"true,TIMING_GIVE" json:"timing___give,omitempty"`
	RXR         []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC         []RXC                 `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION []RGV_O15_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RGV_O15_GIVE) MessageTypeSubStructName() string {
	return "RGV_O15_GIVE"
}

//  RGV_O15_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O15_OBSERVATION) MessageTypeSubStructName() string {
	return "RGV_O15_OBSERVATION"
}

//  RGV_O15_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING       []RGV_O15_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL *RGV_O15_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODING     *RGV_O15_ENCODING     `hl7:"false,ENCODING" json:"encoding,omitempty"`
	GIVE         []RGV_O15_GIVE        `hl7:"true,GIVE" json:"give,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RGV_O15_ORDER) MessageTypeSubStructName() string {
	return "RGV_O15_ORDER"
}

//  RGV_O15_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_ORDER_DETAIL struct {
	RXO                     *RXO                             `hl7:"true,RXO" json:"rxo,omitempty"`
	ORDER_DETAIL_SUPPLEMENT *RGV_O15_ORDER_DETAIL_SUPPLEMENT `hl7:"false,ORDER_DETAIL_SUPPLEMENT" json:"order___detail___supplement,omitempty"`
	Other                   []interface{}                    `json:"other,omitempty"`
}

func (s *RGV_O15_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RGV_O15_ORDER_DETAIL"
}

//  RGV_O15_ORDER_DETAIL_SUPPLEMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_ORDER_DETAIL_SUPPLEMENT struct {
	NTE        []NTE                `hl7:"true,NTE" json:"nte,omitempty"`
	RXR        []RXR                `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENTS []RGV_O15_COMPONENTS `hl7:"false,COMPONENTS" json:"components,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *RGV_O15_ORDER_DETAIL_SUPPLEMENT) MessageTypeSubStructName() string {
	return "RGV_O15_ORDER_DETAIL_SUPPLEMENT"
}

//  RGV_O15_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	PATIENT_VISIT *RGV_O15_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RGV_O15_PATIENT) MessageTypeSubStructName() string {
	return "RGV_O15_PATIENT"
}

//  RGV_O15_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O15_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RGV_O15_PATIENT_VISIT"
}

//  RGV_O15_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O15_TIMING) MessageTypeSubStructName() string {
	return "RGV_O15_TIMING"
}

//  RGV_O15_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O15_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RGV_O15_TIMING_ENCODED"
}

//  RGV_O15_TIMING_GIVE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RGV_O15_TIMING_GIVE struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RGV_O15_TIMING_GIVE) MessageTypeSubStructName() string {
	return "RGV_O15_TIMING_GIVE"
}

//  ROR_ROR represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ROR_ROR struct {
	MSH        *MSH                 `hl7:"true,MSH" json:"msh,omitempty"`
	MSA        *MSA                 `hl7:"true,MSA" json:"msa,omitempty"`
	ERR        []ERR                `hl7:"false,ERR" json:"err,omitempty"`
	SFT        []SFT                `hl7:"false,SFT" json:"sft,omitempty"`
	DEFINITION []ROR_ROR_DEFINITION `hl7:"true,DEFINITION" json:"definition,omitempty"`
	DSC        *DSC                 `hl7:"false,DSC" json:"dsc,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *ROR_ROR) MessageTypeName() string {
	return "ROR_ROR"
}

//  ROR_ROR_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ROR_ROR_DEFINITION struct {
	QRD     *QRD             `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF             `hl7:"false,QRF" json:"qrf,omitempty"`
	PATIENT *ROR_ROR_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []ROR_ROR_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *ROR_ROR_DEFINITION) MessageTypeSubStructName() string {
	return "ROR_ROR_DEFINITION"
}

//  ROR_ROR_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ROR_ROR_ORDER struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ROR_ROR_ORDER) MessageTypeSubStructName() string {
	return "ROR_ROR_ORDER"
}

//  ROR_ROR_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type ROR_ROR_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *ROR_ROR_PATIENT) MessageTypeSubStructName() string {
	return "ROR_ROR_PATIENT"
}

//  RPA_I08_AUTHORIZATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPA_I08_AUTHORIZATION struct {
	AUT   *AUT          `hl7:"true,AUT" json:"aut,omitempty"`
	CTD   *CTD          `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPA_I08_AUTHORIZATION) MessageTypeSubStructName() string {
	return "RPA_I08_AUTHORIZATION"
}

//  RPA_I08_AUTHORIZATION_1 represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type RPA_I08_AUTHORIZATION_1 struct {
	AUT   *AUT          `hl7:"true,AUT" json:"aut,omitempty"`
	CTD   *CTD          `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPA_I08_AUTHORIZATION_1) MessageTypeSubStructName() string {
	return "RPA_I08_AUTHORIZATION_1"
}

//  RPA_I08_AUTHORIZATION_2 represents the corresponding HL7 message type.
//  Definition from HL7 2.5
type RPA_I08_AUTHORIZATION_2 struct {
	AUT   *AUT          `hl7:"true,AUT" json:"aut,omitempty"`
	CTD   *CTD          `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPA_I08_AUTHORIZATION_2) MessageTypeSubStructName() string {
	return "RPA_I08_AUTHORIZATION_2"
}

//  RPA_I08 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPA_I08 struct {
	MSH           *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	SFT           []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	MSA           *MSA                   `hl7:"true,MSA" json:"msa,omitempty"`
	RF1           *RF1                   `hl7:"false,RF1" json:"rf_1,omitempty"`
	AUTHORIZATION *RPA_I08_AUTHORIZATION `hl7:"false,AUTHORIZATION" json:"authorization,omitempty"`
	PROVIDER      []RPA_I08_PROVIDER     `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	NK1           []NK1                  `hl7:"false,NK1" json:"nk_1,omitempty"`
	GT1           []GT1                  `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE     []RPA_I08_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ACC           *ACC                   `hl7:"false,ACC" json:"acc,omitempty"`
	DG1           []DG1                  `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG           []DRG                  `hl7:"false,DRG" json:"drg,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	PROCEDURE     []RPA_I08_PROCEDURE    `hl7:"true,PROCEDURE" json:"procedure,omitempty"`
	OBSERVATION   []RPA_I08_OBSERVATION  `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	VISIT         *RPA_I08_VISIT         `hl7:"false,VISIT" json:"visit,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RPA_I08) MessageTypeName() string {
	return "RPA_I08"
}

//  RPA_I08_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPA_I08_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPA_I08_INSURANCE) MessageTypeSubStructName() string {
	return "RPA_I08_INSURANCE"
}

//  RPA_I08_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPA_I08_OBSERVATION struct {
	OBR     *OBR              `hl7:"true,OBR" json:"obr,omitempty"`
	NTE     []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESULTS []RPA_I08_RESULTS `hl7:"false,RESULTS" json:"results,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *RPA_I08_OBSERVATION) MessageTypeSubStructName() string {
	return "RPA_I08_OBSERVATION"
}

//  RPA_I08_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPA_I08_PROCEDURE struct {
	PR1           *PR1                   `hl7:"true,PR1" json:"pr_1,omitempty"`
	AUTHORIZATION *RPA_I08_AUTHORIZATION `hl7:"false,AUTHORIZATION" json:"authorization,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RPA_I08_PROCEDURE) MessageTypeSubStructName() string {
	return "RPA_I08_PROCEDURE"
}

//  RPA_I08_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPA_I08_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPA_I08_PROVIDER) MessageTypeSubStructName() string {
	return "RPA_I08_PROVIDER"
}

//  RPA_I08_RESULTS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPA_I08_RESULTS struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPA_I08_RESULTS) MessageTypeSubStructName() string {
	return "RPA_I08_RESULTS"
}

//  RPA_I08_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPA_I08_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPA_I08_VISIT) MessageTypeSubStructName() string {
	return "RPA_I08_VISIT"
}

//  RPI_I01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPI_I01 struct {
	MSH                 *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                 []SFT                        `hl7:"false,SFT" json:"sft,omitempty"`
	MSA                 *MSA                         `hl7:"true,MSA" json:"msa,omitempty"`
	PROVIDER            []RPI_I01_PROVIDER           `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID                 *PID                         `hl7:"true,PID" json:"pid,omitempty"`
	NK1                 []NK1                        `hl7:"false,NK1" json:"nk_1,omitempty"`
	GUARANTOR_INSURANCE *RPI_I01_GUARANTOR_INSURANCE `hl7:"false,GUARANTOR_INSURANCE" json:"guarantor___insurance,omitempty"`
	NTE                 []NTE                        `hl7:"false,NTE" json:"nte,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *RPI_I01) MessageTypeName() string {
	return "RPI_I01"
}

//  RPI_I01_GUARANTOR_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPI_I01_GUARANTOR_INSURANCE struct {
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []RPI_I01_INSURANCE `hl7:"true,INSURANCE" json:"insurance,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *RPI_I01_GUARANTOR_INSURANCE) MessageTypeSubStructName() string {
	return "RPI_I01_GUARANTOR_INSURANCE"
}

//  RPI_I01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPI_I01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPI_I01_INSURANCE) MessageTypeSubStructName() string {
	return "RPI_I01_INSURANCE"
}

//  RPI_I01_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPI_I01_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPI_I01_PROVIDER) MessageTypeSubStructName() string {
	return "RPI_I01_PROVIDER"
}

//  RPI_I04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPI_I04 struct {
	MSH                 *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                 []SFT                        `hl7:"false,SFT" json:"sft,omitempty"`
	MSA                 *MSA                         `hl7:"true,MSA" json:"msa,omitempty"`
	PROVIDER            []RPI_I04_PROVIDER           `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID                 *PID                         `hl7:"true,PID" json:"pid,omitempty"`
	NK1                 []NK1                        `hl7:"false,NK1" json:"nk_1,omitempty"`
	GUARANTOR_INSURANCE *RPI_I04_GUARANTOR_INSURANCE `hl7:"false,GUARANTOR_INSURANCE" json:"guarantor___insurance,omitempty"`
	NTE                 []NTE                        `hl7:"false,NTE" json:"nte,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *RPI_I04) MessageTypeName() string {
	return "RPI_I04"
}

//  RPI_I04_GUARANTOR_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPI_I04_GUARANTOR_INSURANCE struct {
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []RPI_I04_INSURANCE `hl7:"true,INSURANCE" json:"insurance,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *RPI_I04_GUARANTOR_INSURANCE) MessageTypeSubStructName() string {
	return "RPI_I04_GUARANTOR_INSURANCE"
}

//  RPI_I04_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPI_I04_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPI_I04_INSURANCE) MessageTypeSubStructName() string {
	return "RPI_I04_INSURANCE"
}

//  RPI_I04_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPI_I04_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPI_I04_PROVIDER) MessageTypeSubStructName() string {
	return "RPI_I04_PROVIDER"
}

//  RPL_I02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPL_I02 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	PROVIDER []RPL_I02_PROVIDER `hl7:"true,PROVIDER" json:"provider,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	DSP      []DSP              `hl7:"false,DSP" json:"dsp,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *RPL_I02) MessageTypeName() string {
	return "RPL_I02"
}

//  RPL_I02_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPL_I02_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPL_I02_PROVIDER) MessageTypeSubStructName() string {
	return "RPL_I02_PROVIDER"
}

//  RPR_I03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPR_I03 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	PROVIDER []RPR_I03_PROVIDER `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID      []PID              `hl7:"false,PID" json:"pid,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *RPR_I03) MessageTypeName() string {
	return "RPR_I03"
}

//  RPR_I03_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RPR_I03_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RPR_I03_PROVIDER) MessageTypeSubStructName() string {
	return "RPR_I03_PROVIDER"
}

//  RQA_I08_AUTHORIZATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08_AUTHORIZATION struct {
	AUT   *AUT          `hl7:"true,AUT" json:"aut,omitempty"`
	CTD   *CTD          `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQA_I08_AUTHORIZATION) MessageTypeSubStructName() string {
	return "RQA_I08_AUTHORIZATION"
}

//  RQA_I08 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08 struct {
	MSH                 *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                 []SFT                        `hl7:"false,SFT" json:"sft,omitempty"`
	RF1                 *RF1                         `hl7:"false,RF1" json:"rf_1,omitempty"`
	AUTHORIZATION       *RQA_I08_AUTHORIZATION       `hl7:"false,AUTHORIZATION" json:"authorization,omitempty"`
	PROVIDER            []RQA_I08_PROVIDER           `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID                 *PID                         `hl7:"true,PID" json:"pid,omitempty"`
	NK1                 []NK1                        `hl7:"false,NK1" json:"nk_1,omitempty"`
	GUARANTOR_INSURANCE *RQA_I08_GUARANTOR_INSURANCE `hl7:"false,GUARANTOR_INSURANCE" json:"guarantor___insurance,omitempty"`
	ACC                 *ACC                         `hl7:"false,ACC" json:"acc,omitempty"`
	DG1                 []DG1                        `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG                 []DRG                        `hl7:"false,DRG" json:"drg,omitempty"`
	AL1                 []AL1                        `hl7:"false,AL1" json:"al_1,omitempty"`
	PROCEDURE           []RQA_I08_PROCEDURE          `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	OBSERVATION         []RQA_I08_OBSERVATION        `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	VISIT               *RQA_I08_VISIT               `hl7:"false,VISIT" json:"visit,omitempty"`
	NTE                 []NTE                        `hl7:"false,NTE" json:"nte,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *RQA_I08) MessageTypeName() string {
	return "RQA_I08"
}

//  RQA_I08_GUARANTOR_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08_GUARANTOR_INSURANCE struct {
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []RQA_I08_INSURANCE `hl7:"true,INSURANCE" json:"insurance,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *RQA_I08_GUARANTOR_INSURANCE) MessageTypeSubStructName() string {
	return "RQA_I08_GUARANTOR_INSURANCE"
}

//  RQA_I08_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQA_I08_INSURANCE) MessageTypeSubStructName() string {
	return "RQA_I08_INSURANCE"
}

//  RQA_I08_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08_OBSERVATION struct {
	OBR     *OBR              `hl7:"true,OBR" json:"obr,omitempty"`
	NTE     []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESULTS []RQA_I08_RESULTS `hl7:"false,RESULTS" json:"results,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *RQA_I08_OBSERVATION) MessageTypeSubStructName() string {
	return "RQA_I08_OBSERVATION"
}

//  RQA_I08_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08_PROCEDURE struct {
	PR1           *PR1                   `hl7:"true,PR1" json:"pr_1,omitempty"`
	AUTHORIZATION *RQA_I08_AUTHORIZATION `hl7:"false,AUTHORIZATION" json:"authorization,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RQA_I08_PROCEDURE) MessageTypeSubStructName() string {
	return "RQA_I08_PROCEDURE"
}

//  RQA_I08_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQA_I08_PROVIDER) MessageTypeSubStructName() string {
	return "RQA_I08_PROVIDER"
}

//  RQA_I08_RESULTS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08_RESULTS struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQA_I08_RESULTS) MessageTypeSubStructName() string {
	return "RQA_I08_RESULTS"
}

//  RQA_I08_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQA_I08_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQA_I08_VISIT) MessageTypeSubStructName() string {
	return "RQA_I08_VISIT"
}

//  RQC_I05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQC_I05 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	PROVIDER []RQC_I05_PROVIDER `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID      *PID               `hl7:"true,PID" json:"pid,omitempty"`
	NK1      []NK1              `hl7:"false,NK1" json:"nk_1,omitempty"`
	GT1      []GT1              `hl7:"false,GT1" json:"gt_1,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *RQC_I05) MessageTypeName() string {
	return "RQC_I05"
}

//  RQC_I05_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQC_I05_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQC_I05_PROVIDER) MessageTypeSubStructName() string {
	return "RQC_I05_PROVIDER"
}

//  RQC_I06 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RQC_I06 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	QRD      *QRD               `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF      *QRF               `hl7:"false,QRF" json:"qrf,omitempty"`
	PROVIDER []RQC_I06_PROVIDER `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID      *PID               `hl7:"true,PID" json:"pid,omitempty"`
	NK1      []NK1              `hl7:"false,NK1" json:"nk_1,omitempty"`
	GT1      *GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *RQC_I06) MessageTypeName() string {
	return "RQC_I06"
}

//  RQC_I06_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RQC_I06_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQC_I06_PROVIDER) MessageTypeSubStructName() string {
	return "RQC_I06_PROVIDER"
}

//  RQI_I01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQI_I01 struct {
	MSH                 *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                 []SFT                        `hl7:"false,SFT" json:"sft,omitempty"`
	PROVIDER            []RQI_I01_PROVIDER           `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID                 *PID                         `hl7:"true,PID" json:"pid,omitempty"`
	NK1                 []NK1                        `hl7:"false,NK1" json:"nk_1,omitempty"`
	GUARANTOR_INSURANCE *RQI_I01_GUARANTOR_INSURANCE `hl7:"false,GUARANTOR_INSURANCE" json:"guarantor___insurance,omitempty"`
	NTE                 []NTE                        `hl7:"false,NTE" json:"nte,omitempty"`
	Other               []interface{}                `json:"other,omitempty"`
}

func (s *RQI_I01) MessageTypeName() string {
	return "RQI_I01"
}

//  RQI_I01_GUARANTOR_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQI_I01_GUARANTOR_INSURANCE struct {
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []RQI_I01_INSURANCE `hl7:"true,INSURANCE" json:"insurance,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *RQI_I01_GUARANTOR_INSURANCE) MessageTypeSubStructName() string {
	return "RQI_I01_GUARANTOR_INSURANCE"
}

//  RQI_I01_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQI_I01_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQI_I01_INSURANCE) MessageTypeSubStructName() string {
	return "RQI_I01_INSURANCE"
}

//  RQI_I01_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQI_I01_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQI_I01_PROVIDER) MessageTypeSubStructName() string {
	return "RQI_I01_PROVIDER"
}

//  RQP_I04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQP_I04 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	PROVIDER []RQP_I04_PROVIDER `hl7:"true,PROVIDER" json:"provider,omitempty"`
	PID      *PID               `hl7:"true,PID" json:"pid,omitempty"`
	NK1      []NK1              `hl7:"false,NK1" json:"nk_1,omitempty"`
	GT1      []GT1              `hl7:"false,GT1" json:"gt_1,omitempty"`
	NTE      []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *RQP_I04) MessageTypeName() string {
	return "RQP_I04"
}

//  RQP_I04_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQP_I04_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQP_I04_PROVIDER) MessageTypeSubStructName() string {
	return "RQP_I04_PROVIDER"
}

//  RQQ_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type RQQ_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	ERQ   *ERQ          `hl7:"true,ERQ" json:"erq,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQQ_Q01) MessageTypeName() string {
	return "RQQ_Q01"
}

//  RQQ_Q09 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RQQ_Q09 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	ERQ   *ERQ          `hl7:"true,ERQ" json:"erq,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RQQ_Q09) MessageTypeName() string {
	return "RQQ_Q09"
}

//  RRA_O02_ADMINISTRATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRA_O02_ADMINISTRATION struct {
	RXA   []RXA         `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR   *RXR          `hl7:"true,RXR" json:"rxr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRA_O02_ADMINISTRATION) MessageTypeSubStructName() string {
	return "RRA_O02_ADMINISTRATION"
}

//  RRA_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRA_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRA_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRA_O02) MessageTypeName() string {
	return "RRA_O02"
}

//  RRA_O02_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRA_O02_ORDER struct {
	ORC            *ORC                    `hl7:"true,ORC" json:"orc,omitempty"`
	ADMINISTRATION *RRA_O02_ADMINISTRATION `hl7:"false,ADMINISTRATION" json:"administration,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RRA_O02_ORDER) MessageTypeSubStructName() string {
	return "RRA_O02_ORDER"
}

//  RRA_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRA_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRA_O02_PATIENT) MessageTypeSubStructName() string {
	return "RRA_O02_PATIENT"
}

//  RRA_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRA_O02_RESPONSE struct {
	PATIENT *RRA_O02_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRA_O02_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRA_O02_RESPONSE) MessageTypeSubStructName() string {
	return "RRA_O02_RESPONSE"
}

//  RRA_O18_ADMINISTRATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRA_O18_ADMINISTRATION struct {
	RXA   []RXA         `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR   *RXR          `hl7:"true,RXR" json:"rxr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRA_O18_ADMINISTRATION) MessageTypeSubStructName() string {
	return "RRA_O18_ADMINISTRATION"
}

//  RRA_O18 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRA_O18 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRA_O18_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRA_O18) MessageTypeName() string {
	return "RRA_O18"
}

//  RRA_O18_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRA_O18_ORDER struct {
	ORC            *ORC                    `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING         []RRA_O18_TIMING        `hl7:"false,TIMING" json:"timing,omitempty"`
	ADMINISTRATION *RRA_O18_ADMINISTRATION `hl7:"false,ADMINISTRATION" json:"administration,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RRA_O18_ORDER) MessageTypeSubStructName() string {
	return "RRA_O18_ORDER"
}

//  RRA_O18_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRA_O18_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRA_O18_PATIENT) MessageTypeSubStructName() string {
	return "RRA_O18_PATIENT"
}

//  RRA_O18_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRA_O18_RESPONSE struct {
	PATIENT *RRA_O18_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRA_O18_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRA_O18_RESPONSE) MessageTypeSubStructName() string {
	return "RRA_O18_RESPONSE"
}

//  RRA_O18_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRA_O18_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRA_O18_TIMING) MessageTypeSubStructName() string {
	return "RRA_O18_TIMING"
}

//  RRD_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRD_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRD_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRD_O02) MessageTypeName() string {
	return "RRD_O02"
}

//  RRD_O02_DISPENSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRD_O02_DISPENSE struct {
	RXD   *RXD          `hl7:"true,RXD" json:"rxd,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRD_O02_DISPENSE) MessageTypeSubStructName() string {
	return "RRD_O02_DISPENSE"
}

//  RRD_O02_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRD_O02_ORDER struct {
	ORC      *ORC              `hl7:"true,ORC" json:"orc,omitempty"`
	DISPENSE *RRD_O02_DISPENSE `hl7:"false,DISPENSE" json:"dispense,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRD_O02_ORDER) MessageTypeSubStructName() string {
	return "RRD_O02_ORDER"
}

//  RRD_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRD_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRD_O02_PATIENT) MessageTypeSubStructName() string {
	return "RRD_O02_PATIENT"
}

//  RRD_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRD_O02_RESPONSE struct {
	PATIENT *RRD_O02_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRD_O02_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRD_O02_RESPONSE) MessageTypeSubStructName() string {
	return "RRD_O02_RESPONSE"
}

//  RRD_O14 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRD_O14 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRD_O14_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRD_O14) MessageTypeName() string {
	return "RRD_O14"
}

//  RRD_O14_DISPENSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRD_O14_DISPENSE struct {
	RXD   *RXD          `hl7:"true,RXD" json:"rxd,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRD_O14_DISPENSE) MessageTypeSubStructName() string {
	return "RRD_O14_DISPENSE"
}

//  RRD_O14_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRD_O14_ORDER struct {
	ORC      *ORC              `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING   []RRD_O14_TIMING  `hl7:"false,TIMING" json:"timing,omitempty"`
	DISPENSE *RRD_O14_DISPENSE `hl7:"false,DISPENSE" json:"dispense,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRD_O14_ORDER) MessageTypeSubStructName() string {
	return "RRD_O14_ORDER"
}

//  RRD_O14_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRD_O14_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRD_O14_PATIENT) MessageTypeSubStructName() string {
	return "RRD_O14_PATIENT"
}

//  RRD_O14_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRD_O14_RESPONSE struct {
	PATIENT *RRD_O14_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRD_O14_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRD_O14_RESPONSE) MessageTypeSubStructName() string {
	return "RRD_O14_RESPONSE"
}

//  RRD_O14_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRD_O14_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRD_O14_TIMING) MessageTypeSubStructName() string {
	return "RRD_O14_TIMING"
}

//  RRE_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRE_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRE_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRE_O02) MessageTypeName() string {
	return "RRE_O02"
}

//  RRE_O02_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRE_O02_ENCODING struct {
	RXE   *RXE          `hl7:"true,RXE" json:"rxe,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRE_O02_ENCODING) MessageTypeSubStructName() string {
	return "RRE_O02_ENCODING"
}

//  RRE_O02_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRE_O02_ORDER struct {
	ORC      *ORC              `hl7:"true,ORC" json:"orc,omitempty"`
	ENCODING *RRE_O02_ENCODING `hl7:"false,ENCODING" json:"encoding,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRE_O02_ORDER) MessageTypeSubStructName() string {
	return "RRE_O02_ORDER"
}

//  RRE_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRE_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRE_O02_PATIENT) MessageTypeSubStructName() string {
	return "RRE_O02_PATIENT"
}

//  RRE_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRE_O02_RESPONSE struct {
	PATIENT *RRE_O02_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRE_O02_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRE_O02_RESPONSE) MessageTypeSubStructName() string {
	return "RRE_O02_RESPONSE"
}

//  RRE_O12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRE_O12 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRE_O12_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRE_O12) MessageTypeName() string {
	return "RRE_O12"
}

//  RRE_O12_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRE_O12_ENCODING struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	TIMING_ENCODED []RRE_O12_TIMING_ENCODED `hl7:"true,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RRE_O12_ENCODING) MessageTypeSubStructName() string {
	return "RRE_O12_ENCODING"
}

//  RRE_O12_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRE_O12_ORDER struct {
	ORC      *ORC              `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING   []RRE_O12_TIMING  `hl7:"false,TIMING" json:"timing,omitempty"`
	ENCODING *RRE_O12_ENCODING `hl7:"false,ENCODING" json:"encoding,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRE_O12_ORDER) MessageTypeSubStructName() string {
	return "RRE_O12_ORDER"
}

//  RRE_O12_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRE_O12_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRE_O12_PATIENT) MessageTypeSubStructName() string {
	return "RRE_O12_PATIENT"
}

//  RRE_O12_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRE_O12_RESPONSE struct {
	PATIENT *RRE_O12_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRE_O12_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRE_O12_RESPONSE) MessageTypeSubStructName() string {
	return "RRE_O12_RESPONSE"
}

//  RRE_O12_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRE_O12_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRE_O12_TIMING) MessageTypeSubStructName() string {
	return "RRE_O12_TIMING"
}

//  RRE_O12_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRE_O12_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRE_O12_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RRE_O12_TIMING_ENCODED"
}

//  RRG_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRG_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRG_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRG_O02) MessageTypeName() string {
	return "RRG_O02"
}

//  RRG_O02_GIVE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRG_O02_GIVE struct {
	RXG   *RXG          `hl7:"true,RXG" json:"rxg,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRG_O02_GIVE) MessageTypeSubStructName() string {
	return "RRG_O02_GIVE"
}

//  RRG_O02_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRG_O02_ORDER struct {
	ORC   *ORC          `hl7:"true,ORC" json:"orc,omitempty"`
	GIVE  *RRG_O02_GIVE `hl7:"false,GIVE" json:"give,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRG_O02_ORDER) MessageTypeSubStructName() string {
	return "RRG_O02_ORDER"
}

//  RRG_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRG_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRG_O02_PATIENT) MessageTypeSubStructName() string {
	return "RRG_O02_PATIENT"
}

//  RRG_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRG_O02_RESPONSE struct {
	PATIENT *RRG_O02_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRG_O02_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRG_O02_RESPONSE) MessageTypeSubStructName() string {
	return "RRG_O02_RESPONSE"
}

//  RRG_O16 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRG_O16 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRG_O16_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRG_O16) MessageTypeName() string {
	return "RRG_O16"
}

//  RRG_O16_GIVE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRG_O16_GIVE struct {
	RXG         *RXG                  `hl7:"true,RXG" json:"rxg,omitempty"`
	TIMING_GIVE []RRG_O16_TIMING_GIVE `hl7:"true,TIMING_GIVE" json:"timing___give,omitempty"`
	RXR         []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC         []RXC                 `hl7:"false,RXC" json:"rxc,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RRG_O16_GIVE) MessageTypeSubStructName() string {
	return "RRG_O16_GIVE"
}

//  RRG_O16_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRG_O16_ORDER struct {
	ORC    *ORC             `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING []RRG_O16_TIMING `hl7:"false,TIMING" json:"timing,omitempty"`
	GIVE   *RRG_O16_GIVE    `hl7:"false,GIVE" json:"give,omitempty"`
	Other  []interface{}    `json:"other,omitempty"`
}

func (s *RRG_O16_ORDER) MessageTypeSubStructName() string {
	return "RRG_O16_ORDER"
}

//  RRG_O16_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRG_O16_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRG_O16_PATIENT) MessageTypeSubStructName() string {
	return "RRG_O16_PATIENT"
}

//  RRG_O16_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRG_O16_RESPONSE struct {
	PATIENT *RRG_O16_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRG_O16_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRG_O16_RESPONSE) MessageTypeSubStructName() string {
	return "RRG_O16_RESPONSE"
}

//  RRG_O16_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRG_O16_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRG_O16_TIMING) MessageTypeSubStructName() string {
	return "RRG_O16_TIMING"
}

//  RRG_O16_TIMING_GIVE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRG_O16_TIMING_GIVE struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRG_O16_TIMING_GIVE) MessageTypeSubStructName() string {
	return "RRG_O16_TIMING_GIVE"
}

//  RRI_I12_AUTHORIZATION represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type RRI_I12_AUTHORIZATION struct {
	AUT   *AUT          `hl7:"true,AUT" json:"aut,omitempty"`
	CTD   *CTD          `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRI_I12_AUTHORIZATION) MessageTypeSubStructName() string {
	return "RRI_I12_AUTHORIZATION"
}

//  RRI_I12_AUTHORIZATION_CONTACT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRI_I12_AUTHORIZATION_CONTACT struct {
	AUT   *AUT          `hl7:"true,AUT" json:"aut,omitempty"`
	CTD   *CTD          `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRI_I12_AUTHORIZATION_CONTACT) MessageTypeSubStructName() string {
	return "RRI_I12_AUTHORIZATION_CONTACT"
}

//  RRI_I12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRI_I12 struct {
	MSH                   *MSH                           `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                   []SFT                          `hl7:"false,SFT" json:"sft,omitempty"`
	MSA                   *MSA                           `hl7:"false,MSA" json:"msa,omitempty"`
	RF1                   *RF1                           `hl7:"false,RF1" json:"rf_1,omitempty"`
	AUTHORIZATION_CONTACT *RRI_I12_AUTHORIZATION_CONTACT `hl7:"false,AUTHORIZATION_CONTACT" json:"authorization___contact,omitempty"`
	PROVIDER_CONTACT      []RRI_I12_PROVIDER_CONTACT     `hl7:"true,PROVIDER_CONTACT" json:"provider___contact,omitempty"`
	PID                   *PID                           `hl7:"true,PID" json:"pid,omitempty"`
	ACC                   *ACC                           `hl7:"false,ACC" json:"acc,omitempty"`
	DG1                   []DG1                          `hl7:"false,DG1" json:"dg_1,omitempty"`
	DRG                   []DRG                          `hl7:"false,DRG" json:"drg,omitempty"`
	AL1                   []AL1                          `hl7:"false,AL1" json:"al_1,omitempty"`
	PROCEDURE             []RRI_I12_PROCEDURE            `hl7:"false,PROCEDURE" json:"procedure,omitempty"`
	OBSERVATION           []RRI_I12_OBSERVATION          `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	PATIENT_VISIT         *RRI_I12_PATIENT_VISIT         `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	NTE                   []NTE                          `hl7:"false,NTE" json:"nte,omitempty"`
	Other                 []interface{}                  `json:"other,omitempty"`
}

func (s *RRI_I12) MessageTypeName() string {
	return "RRI_I12"
}

//  RRI_I12_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRI_I12_OBSERVATION struct {
	OBR           *OBR                    `hl7:"true,OBR" json:"obr,omitempty"`
	NTE           []NTE                   `hl7:"false,NTE" json:"nte,omitempty"`
	RESULTS_NOTES []RRI_I12_RESULTS_NOTES `hl7:"false,RESULTS_NOTES" json:"results___notes,omitempty"`
	Other         []interface{}           `json:"other,omitempty"`
}

func (s *RRI_I12_OBSERVATION) MessageTypeSubStructName() string {
	return "RRI_I12_OBSERVATION"
}

//  RRI_I12_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRI_I12_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRI_I12_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RRI_I12_PATIENT_VISIT"
}

//  RRI_I12_PROCEDURE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRI_I12_PROCEDURE struct {
	PR1                   *PR1                           `hl7:"true,PR1" json:"pr_1,omitempty"`
	AUTHORIZATION_CONTACT *RRI_I12_AUTHORIZATION_CONTACT `hl7:"false,AUTHORIZATION_CONTACT" json:"authorization___contact,omitempty"`
	Other                 []interface{}                  `json:"other,omitempty"`
}

func (s *RRI_I12_PROCEDURE) MessageTypeSubStructName() string {
	return "RRI_I12_PROCEDURE"
}

//  RRI_I12_PROVIDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type RRI_I12_PROVIDER struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRI_I12_PROVIDER) MessageTypeSubStructName() string {
	return "RRI_I12_PROVIDER"
}

//  RRI_I12_PROVIDER_CONTACT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRI_I12_PROVIDER_CONTACT struct {
	PRD   *PRD          `hl7:"true,PRD" json:"prd,omitempty"`
	CTD   []CTD         `hl7:"false,CTD" json:"ctd,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRI_I12_PROVIDER_CONTACT) MessageTypeSubStructName() string {
	return "RRI_I12_PROVIDER_CONTACT"
}

//  RRI_I12_RESULTS represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type RRI_I12_RESULTS struct {
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	OBSERVATION []RRI_I12_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RRI_I12_RESULTS) MessageTypeSubStructName() string {
	return "RRI_I12_RESULTS"
}

//  RRI_I12_RESULTS_NOTES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RRI_I12_RESULTS_NOTES struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRI_I12_RESULTS_NOTES) MessageTypeSubStructName() string {
	return "RRI_I12_RESULTS_NOTES"
}

//  RRI_I12_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type RRI_I12_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRI_I12_VISIT) MessageTypeSubStructName() string {
	return "RRI_I12_VISIT"
}

//  RRO_O02 represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRO_O02 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      *ERR              `hl7:"false,ERR" json:"err,omitempty"`
	NTE      []NTE             `hl7:"false,NTE" json:"nte,omitempty"`
	RESPONSE *RRO_O02_RESPONSE `hl7:"false,RESPONSE" json:"response,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *RRO_O02) MessageTypeName() string {
	return "RRO_O02"
}

//  RRO_O02_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRO_O02_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	ORDER_DETAIL *RRO_O02_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RRO_O02_ORDER) MessageTypeSubStructName() string {
	return "RRO_O02_ORDER"
}

//  RRO_O02_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRO_O02_ORDER_DETAIL struct {
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE1  []NTE         `hl7:"false,NTE1" json:"nte_1,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	NTE2  []NTE         `hl7:"false,NTE2" json:"nte_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRO_O02_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RRO_O02_ORDER_DETAIL"
}

//  RRO_O02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRO_O02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RRO_O02_PATIENT) MessageTypeSubStructName() string {
	return "RRO_O02_PATIENT"
}

//  RRO_O02_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.3.1
type RRO_O02_RESPONSE struct {
	PATIENT *RRO_O02_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RRO_O02_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RRO_O02_RESPONSE) MessageTypeSubStructName() string {
	return "RRO_O02_RESPONSE"
}

//  RSP_K11 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K11 struct {
	MSH            *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                   `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                    `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                    `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                    `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                    `hl7:"true,QPD" json:"qpd,omitempty"`
	ROW_DEFINITION *RSP_K11_ROW_DEFINITION `hl7:"false,ROW_DEFINITION" json:"row___definition,omitempty"`
	DSC            *DSC                    `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RSP_K11) MessageTypeName() string {
	return "RSP_K11"
}

//  RSP_K11_ROW_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K11_ROW_DEFINITION struct {
	RDF   *RDF          `hl7:"true,RDF" json:"rdf,omitempty"`
	RDT   []RDT         `hl7:"false,RDT" json:"rdt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K11_ROW_DEFINITION) MessageTypeSubStructName() string {
	return "RSP_K11_ROW_DEFINITION"
}

//  RSP_K13 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RSP_K13 struct {
	MSH            *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	MSA            *MSA                    `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                    `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                    `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                    `hl7:"true,QPD" json:"qpd,omitempty"`
	ROW_DEFINITION *RSP_K13_ROW_DEFINITION `hl7:"false,ROW_DEFINITION" json:"row___definition,omitempty"`
	DSC            *DSC                    `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RSP_K13) MessageTypeName() string {
	return "RSP_K13"
}

//  RSP_K13_ROW_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RSP_K13_ROW_DEFINITION struct {
	RDF   *RDF          `hl7:"true,RDF" json:"rdf,omitempty"`
	RDT   []RDT         `hl7:"false,RDT" json:"rdt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K13_ROW_DEFINITION) MessageTypeSubStructName() string {
	return "RSP_K13_ROW_DEFINITION"
}

//  RSP_K15 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RSP_K15 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	DSP   []DSP         `hl7:"false,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K15) MessageTypeName() string {
	return "RSP_K15"
}

//  RSP_K21 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K21 struct {
	MSH            *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                   `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                    `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                    `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                    `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                    `hl7:"true,QPD" json:"qpd,omitempty"`
	QUERY_RESPONSE *RSP_K21_QUERY_RESPONSE `hl7:"false,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                    `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RSP_K21) MessageTypeName() string {
	return "RSP_K21"
}

//  RSP_K21_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K21_QUERY_RESPONSE struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	NK1   []NK1         `hl7:"false,NK1" json:"nk_1,omitempty"`
	QRI   *QRI          `hl7:"true,QRI" json:"qri,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K21_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "RSP_K21_QUERY_RESPONSE"
}

//  RSP_K22 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RSP_K22 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	MSA            *MSA                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                     `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                     `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                     `hl7:"true,QPD" json:"qpd,omitempty"`
	QUERY_RESPONSE []RSP_K22_QUERY_RESPONSE `hl7:"false,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_K22) MessageTypeName() string {
	return "RSP_K22"
}

//  RSP_K22_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RSP_K22_QUERY_RESPONSE struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	QRI   *QRI          `hl7:"false,QRI" json:"qri,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K22_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "RSP_K22_QUERY_RESPONSE"
}

//  RSP_K23 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K23 struct {
	MSH            *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                   `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                    `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                    `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                    `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                    `hl7:"true,QPD" json:"qpd,omitempty"`
	QUERY_RESPONSE *RSP_K23_QUERY_RESPONSE `hl7:"false,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                    `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RSP_K23) MessageTypeName() string {
	return "RSP_K23"
}

//  RSP_K23_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K23_QUERY_RESPONSE struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K23_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "RSP_K23_QUERY_RESPONSE"
}

//  RSP_K24 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RSP_K24 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	QPD   *QPD          `hl7:"true,QPD" json:"qpd,omitempty"`
	PID   *PID          `hl7:"false,PID" json:"pid,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K24) MessageTypeName() string {
	return "RSP_K24"
}

//  RSP_K25 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K25 struct {
	MSH   *MSH            `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT           `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA            `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   []ERR           `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK            `hl7:"true,QAK" json:"qak,omitempty"`
	QPD   *QPD            `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP   *RCP            `hl7:"true,RCP" json:"rcp,omitempty"`
	STAFF []RSP_K25_STAFF `hl7:"true,STAFF" json:"staff,omitempty"`
	DSC   *DSC            `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{}   `json:"other,omitempty"`
}

func (s *RSP_K25) MessageTypeName() string {
	return "RSP_K25"
}

//  RSP_K25_STAFF represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K25_STAFF struct {
	STF   *STF          `hl7:"true,STF" json:"stf,omitempty"`
	PRA   []PRA         `hl7:"false,PRA" json:"pra,omitempty"`
	ORG   []ORG         `hl7:"false,ORG" json:"org,omitempty"`
	AFF   []AFF         `hl7:"false,AFF" json:"aff,omitempty"`
	LAN   []LAN         `hl7:"false,LAN" json:"lan,omitempty"`
	EDU   []EDU         `hl7:"false,EDU" json:"edu,omitempty"`
	CER   []CER         `hl7:"false,CER" json:"cer,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K25_STAFF) MessageTypeSubStructName() string {
	return "RSP_K25_STAFF"
}

//  RSP_K31_COMPONENTS represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_COMPONENTS struct {
	RXC   *RXC          `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K31_COMPONENTS) MessageTypeSubStructName() string {
	return "RSP_K31_COMPONENTS"
}

//  RSP_K31 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR              `hl7:"false,ERR" json:"err,omitempty"`
	SFT      []SFT              `hl7:"false,SFT" json:"sft,omitempty"`
	QAK      *QAK               `hl7:"true,QAK" json:"qak,omitempty"`
	QPD      *QPD               `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP      *RCP               `hl7:"true,RCP" json:"rcp,omitempty"`
	RESPONSE []RSP_K31_RESPONSE `hl7:"true,RESPONSE" json:"response,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *RSP_K31) MessageTypeName() string {
	return "RSP_K31"
}

//  RSP_K31_ENCODING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_ENCODING struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	TIMING_ENCODED []RSP_K31_TIMING_ENCODED `hl7:"true,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_K31_ENCODING) MessageTypeSubStructName() string {
	return "RSP_K31_ENCODING"
}

//  RSP_K31_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K31_OBSERVATION) MessageTypeSubStructName() string {
	return "RSP_K31_OBSERVATION"
}

//  RSP_K31_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_ORDER struct {
	ORC          *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING       []RSP_K31_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL *RSP_K31_ORDER_DETAIL `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODING     *RSP_K31_ENCODING     `hl7:"false,ENCODING" json:"encoding,omitempty"`
	RXD          *RXD                  `hl7:"true,RXD" json:"rxd,omitempty"`
	RXR          []RXR                 `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC          []RXC                 `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION  []RSP_K31_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other        []interface{}         `json:"other,omitempty"`
}

func (s *RSP_K31_ORDER) MessageTypeSubStructName() string {
	return "RSP_K31_ORDER"
}

//  RSP_K31_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_ORDER_DETAIL struct {
	RXO        *RXO                 `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE        []NTE                `hl7:"false,NTE" json:"nte,omitempty"`
	RXR        []RXR                `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENTS []RSP_K31_COMPONENTS `hl7:"false,COMPONENTS" json:"components,omitempty"`
	Other      []interface{}        `json:"other,omitempty"`
}

func (s *RSP_K31_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RSP_K31_ORDER_DETAIL"
}

//  RSP_K31_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_PATIENT struct {
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE           []NTE                  `hl7:"false,NTE" json:"nte,omitempty"`
	AL1           []AL1                  `hl7:"false,AL1" json:"al_1,omitempty"`
	PATIENT_VISIT *RSP_K31_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RSP_K31_PATIENT) MessageTypeSubStructName() string {
	return "RSP_K31_PATIENT"
}

//  RSP_K31_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K31_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RSP_K31_PATIENT_VISIT"
}

//  RSP_K31_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_RESPONSE struct {
	PATIENT *RSP_K31_PATIENT `hl7:"false,PATIENT" json:"patient,omitempty"`
	ORDER   []RSP_K31_ORDER  `hl7:"true,ORDER" json:"order,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RSP_K31_RESPONSE) MessageTypeSubStructName() string {
	return "RSP_K31_RESPONSE"
}

//  RSP_K31_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K31_TIMING) MessageTypeSubStructName() string {
	return "RSP_K31_TIMING"
}

//  RSP_K31_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_K31_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_K31_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RSP_K31_TIMING_ENCODED"
}

//  RSP_Q11 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Q11 struct {
	MSH                  *MSH                          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                  []SFT                         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA                  *MSA                          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR                  []ERR                         `hl7:"false,ERR" json:"err,omitempty"`
	QAK                  *QAK                          `hl7:"true,QAK" json:"qak,omitempty"`
	QPD                  *QPD                          `hl7:"true,QPD" json:"qpd,omitempty"`
	QUERY_RESULT_CLUSTER *RSP_Q11_QUERY_RESULT_CLUSTER `hl7:"false,QUERY_RESULT_CLUSTER" json:"query___result___cluster,omitempty"`
	DSC                  *DSC                          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other                []interface{}                 `json:"other,omitempty"`
}

func (s *RSP_Q11) MessageTypeName() string {
	return "RSP_Q11"
}

//  RSP_Q11_MF_LOC_DEPT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Q11_MF_LOC_DEPT struct {
	LDP   *LDP          `hl7:"true,LDP" json:"ldp,omitempty"`
	LCH   []LCH         `hl7:"false,LCH" json:"lch,omitempty"`
	LCC   []LCC         `hl7:"false,LCC" json:"lcc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Q11_MF_LOC_DEPT) MessageTypeSubStructName() string {
	return "RSP_Q11_MF_LOC_DEPT"
}

//  RSP_Q11_QUERY_RESULT_CLUSTER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Q11_QUERY_RESULT_CLUSTER struct {
	MFE         *MFE                  `hl7:"true,MFE" json:"mfe,omitempty"`
	LOC         *LOC                  `hl7:"true,LOC" json:"loc,omitempty"`
	LCH         []LCH                 `hl7:"false,LCH" json:"lch,omitempty"`
	LRL         []LRL                 `hl7:"false,LRL" json:"lrl,omitempty"`
	MF_LOC_DEPT []RSP_Q11_MF_LOC_DEPT `hl7:"true,MF_LOC_DEPT" json:"mf___loc___dept,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RSP_Q11_QUERY_RESULT_CLUSTER) MessageTypeSubStructName() string {
	return "RSP_Q11_QUERY_RESULT_CLUSTER"
}

//  RSP_Z82_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_COMMON_ORDER struct {
	ORC           *ORC                   `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING        []RSP_Z82_TIMING       `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL  *RSP_Z82_ORDER_DETAIL  `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODED_ORDER *RSP_Z82_ENCODED_ORDER `hl7:"false,ENCODED_ORDER" json:"encoded___order,omitempty"`
	RXD           *RXD                   `hl7:"true,RXD" json:"rxd,omitempty"`
	RXR           []RXR                  `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC           []RXC                  `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION   []RSP_Z82_OBSERVATION  `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RSP_Z82_COMMON_ORDER) MessageTypeSubStructName() string {
	return "RSP_Z82_COMMON_ORDER"
}

//  RSP_Z82 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                    `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                     `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                     `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                     `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP            *RCP                     `hl7:"true,RCP" json:"rcp,omitempty"`
	QUERY_RESPONSE []RSP_Z82_QUERY_RESPONSE `hl7:"true,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_Z82) MessageTypeName() string {
	return "RSP_Z82"
}

//  RSP_Z82_ENCODED_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_ENCODED_ORDER struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	TIMING_ENCODED []RSP_Z82_TIMING_ENCODED `hl7:"false,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_Z82_ENCODED_ORDER) MessageTypeSubStructName() string {
	return "RSP_Z82_ENCODED_ORDER"
}

//  RSP_Z82_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z82_OBSERVATION) MessageTypeSubStructName() string {
	return "RSP_Z82_OBSERVATION"
}

//  RSP_Z82_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_ORDER_DETAIL struct {
	RXO       *RXO               `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE       []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	RXR       []RXR              `hl7:"true,RXR" json:"rxr,omitempty"`
	TREATMENT *RSP_Z82_TREATMENT `hl7:"false,TREATMENT" json:"treatment,omitempty"`
	Other     []interface{}      `json:"other,omitempty"`
}

func (s *RSP_Z82_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RSP_Z82_ORDER_DETAIL"
}

//  RSP_Z82_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_PATIENT struct {
	PID   *PID           `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1           `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE   []NTE          `hl7:"false,NTE" json:"nte,omitempty"`
	VISIT *RSP_Z82_VISIT `hl7:"false,VISIT" json:"visit,omitempty"`
	Other []interface{}  `json:"other,omitempty"`
}

func (s *RSP_Z82_PATIENT) MessageTypeSubStructName() string {
	return "RSP_Z82_PATIENT"
}

//  RSP_Z82_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RSP_Z82_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z82_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "RSP_Z82_PATIENT_VISIT"
}

//  RSP_Z82_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_QUERY_RESPONSE struct {
	PATIENT      *RSP_Z82_PATIENT       `hl7:"false,PATIENT" json:"patient,omitempty"`
	COMMON_ORDER []RSP_Z82_COMMON_ORDER `hl7:"true,COMMON_ORDER" json:"common___order,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *RSP_Z82_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "RSP_Z82_QUERY_RESPONSE"
}

//  RSP_Z82_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z82_TIMING) MessageTypeSubStructName() string {
	return "RSP_Z82_TIMING"
}

//  RSP_Z82_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z82_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RSP_Z82_TIMING_ENCODED"
}

//  RSP_Z82_TREATMENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_TREATMENT struct {
	RXC   []RXC         `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z82_TREATMENT) MessageTypeSubStructName() string {
	return "RSP_Z82_TREATMENT"
}

//  RSP_Z82_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z82_VISIT struct {
	AL1   []AL1         `hl7:"true,AL1" json:"al_1,omitempty"`
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z82_VISIT) MessageTypeSubStructName() string {
	return "RSP_Z82_VISIT"
}

//  RSP_Z86_ADMINISTRATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_ADMINISTRATION struct {
	RXA   *RXA          `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z86_ADMINISTRATION) MessageTypeSubStructName() string {
	return "RSP_Z86_ADMINISTRATION"
}

//  RSP_Z86_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_COMMON_ORDER struct {
	ORC            *ORC                    `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING         []RSP_Z86_TIMING        `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL   *RSP_Z86_ORDER_DETAIL   `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ENCODED_ORDER  *RSP_Z86_ENCODED_ORDER  `hl7:"false,ENCODED_ORDER" json:"encoded___order,omitempty"`
	DISPENSE       *RSP_Z86_DISPENSE       `hl7:"false,DISPENSE" json:"dispense,omitempty"`
	GIVE           *RSP_Z86_GIVE           `hl7:"false,GIVE" json:"give,omitempty"`
	ADMINISTRATION *RSP_Z86_ADMINISTRATION `hl7:"false,ADMINISTRATION" json:"administration,omitempty"`
	OBSERVATION    []RSP_Z86_OBSERVATION   `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RSP_Z86_COMMON_ORDER) MessageTypeSubStructName() string {
	return "RSP_Z86_COMMON_ORDER"
}

//  RSP_Z86 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                    `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                     `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                     `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                     `hl7:"true,QPD" json:"qpd,omitempty"`
	QUERY_RESPONSE []RSP_Z86_QUERY_RESPONSE `hl7:"true,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                     `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_Z86) MessageTypeName() string {
	return "RSP_Z86"
}

//  RSP_Z86_DISPENSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_DISPENSE struct {
	RXD   *RXD          `hl7:"true,RXD" json:"rxd,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z86_DISPENSE) MessageTypeSubStructName() string {
	return "RSP_Z86_DISPENSE"
}

//  RSP_Z86_ENCODED_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_ENCODED_ORDER struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	TIMING_ENCODED []RSP_Z86_TIMING_ENCODED `hl7:"false,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_Z86_ENCODED_ORDER) MessageTypeSubStructName() string {
	return "RSP_Z86_ENCODED_ORDER"
}

//  RSP_Z86_GIVE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_GIVE struct {
	RXG   *RXG          `hl7:"true,RXG" json:"rxg,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z86_GIVE) MessageTypeSubStructName() string {
	return "RSP_Z86_GIVE"
}

//  RSP_Z86_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z86_OBSERVATION) MessageTypeSubStructName() string {
	return "RSP_Z86_OBSERVATION"
}

//  RSP_Z86_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_ORDER_DETAIL struct {
	RXO   *RXO          `hl7:"true,RXO" json:"rxo,omitempty"`
	RXR   []RXR         `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC   []RXC         `hl7:"false,RXC" json:"rxc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z86_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RSP_Z86_ORDER_DETAIL"
}

//  RSP_Z86_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	AL1   []AL1         `hl7:"false,AL1" json:"al_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z86_PATIENT) MessageTypeSubStructName() string {
	return "RSP_Z86_PATIENT"
}

//  RSP_Z86_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_QUERY_RESPONSE struct {
	PATIENT      *RSP_Z86_PATIENT       `hl7:"false,PATIENT" json:"patient,omitempty"`
	COMMON_ORDER []RSP_Z86_COMMON_ORDER `hl7:"true,COMMON_ORDER" json:"common___order,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *RSP_Z86_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "RSP_Z86_QUERY_RESPONSE"
}

//  RSP_Z86_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z86_TIMING) MessageTypeSubStructName() string {
	return "RSP_Z86_TIMING"
}

//  RSP_Z86_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z86_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z86_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RSP_Z86_TIMING_ENCODED"
}

//  RSP_Z88_ALLERGY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_ALLERGY struct {
	AL1   []AL1          `hl7:"true,AL1" json:"al_1,omitempty"`
	VISIT *RSP_Z88_VISIT `hl7:"false,VISIT" json:"visit,omitempty"`
	Other []interface{}  `json:"other,omitempty"`
}

func (s *RSP_Z88_ALLERGY) MessageTypeSubStructName() string {
	return "RSP_Z88_ALLERGY"
}

//  RSP_Z88_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_COMMON_ORDER struct {
	ORC           *ORC                   `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING        []RSP_Z88_TIMING       `hl7:"false,TIMING" json:"timing,omitempty"`
	ORDER_DETAIL  *RSP_Z88_ORDER_DETAIL  `hl7:"false,ORDER_DETAIL" json:"order___detail,omitempty"`
	ORDER_ENCODED *RSP_Z88_ORDER_ENCODED `hl7:"false,ORDER_ENCODED" json:"order___encoded,omitempty"`
	RXD           *RXD                   `hl7:"true,RXD" json:"rxd,omitempty"`
	RXR           []RXR                  `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC           []RXC                  `hl7:"false,RXC" json:"rxc,omitempty"`
	OBSERVATION   []RSP_Z88_OBSERVATION  `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *RSP_Z88_COMMON_ORDER) MessageTypeSubStructName() string {
	return "RSP_Z88_COMMON_ORDER"
}

//  RSP_Z88_COMPONENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_COMPONENT struct {
	RXC   []RXC         `hl7:"true,RXC" json:"rxc,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z88_COMPONENT) MessageTypeSubStructName() string {
	return "RSP_Z88_COMPONENT"
}

//  RSP_Z88 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                    `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                     `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                     `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                     `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP            *RCP                     `hl7:"true,RCP" json:"rcp,omitempty"`
	QUERY_RESPONSE []RSP_Z88_QUERY_RESPONSE `hl7:"true,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                     `hl7:"true,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_Z88) MessageTypeName() string {
	return "RSP_Z88"
}

//  RSP_Z88_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z88_OBSERVATION) MessageTypeSubStructName() string {
	return "RSP_Z88_OBSERVATION"
}

//  RSP_Z88_ORDER_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_ORDER_DETAIL struct {
	RXO       *RXO               `hl7:"true,RXO" json:"rxo,omitempty"`
	NTE       []NTE              `hl7:"false,NTE" json:"nte,omitempty"`
	RXR       []RXR              `hl7:"true,RXR" json:"rxr,omitempty"`
	COMPONENT *RSP_Z88_COMPONENT `hl7:"false,COMPONENT" json:"component,omitempty"`
	Other     []interface{}      `json:"other,omitempty"`
}

func (s *RSP_Z88_ORDER_DETAIL) MessageTypeSubStructName() string {
	return "RSP_Z88_ORDER_DETAIL"
}

//  RSP_Z88_ORDER_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_ORDER_ENCODED struct {
	RXE            *RXE                     `hl7:"true,RXE" json:"rxe,omitempty"`
	TIMING_ENCODED []RSP_Z88_TIMING_ENCODED `hl7:"false,TIMING_ENCODED" json:"timing___encoded,omitempty"`
	RXR            []RXR                    `hl7:"true,RXR" json:"rxr,omitempty"`
	RXC            []RXC                    `hl7:"false,RXC" json:"rxc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_Z88_ORDER_ENCODED) MessageTypeSubStructName() string {
	return "RSP_Z88_ORDER_ENCODED"
}

//  RSP_Z88_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_PATIENT struct {
	PID     *PID             `hl7:"true,PID" json:"pid,omitempty"`
	PD1     *PD1             `hl7:"false,PD1" json:"pd_1,omitempty"`
	NTE     []NTE            `hl7:"false,NTE" json:"nte,omitempty"`
	ALLERGY *RSP_Z88_ALLERGY `hl7:"false,ALLERGY" json:"allergy,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *RSP_Z88_PATIENT) MessageTypeSubStructName() string {
	return "RSP_Z88_PATIENT"
}

//  RSP_Z88_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_QUERY_RESPONSE struct {
	PATIENT      *RSP_Z88_PATIENT       `hl7:"false,PATIENT" json:"patient,omitempty"`
	COMMON_ORDER []RSP_Z88_COMMON_ORDER `hl7:"true,COMMON_ORDER" json:"common___order,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *RSP_Z88_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "RSP_Z88_QUERY_RESPONSE"
}

//  RSP_Z88_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z88_TIMING) MessageTypeSubStructName() string {
	return "RSP_Z88_TIMING"
}

//  RSP_Z88_TIMING_ENCODED represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_TIMING_ENCODED struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z88_TIMING_ENCODED) MessageTypeSubStructName() string {
	return "RSP_Z88_TIMING_ENCODED"
}

//  RSP_Z88_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z88_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z88_VISIT) MessageTypeSubStructName() string {
	return "RSP_Z88_VISIT"
}

//  RSP_Z90_COMMON_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z90_COMMON_ORDER struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING      []RSP_Z90_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	OBR         *OBR                  `hl7:"true,OBR" json:"obr,omitempty"`
	NTE         []NTE                 `hl7:"false,NTE" json:"nte,omitempty"`
	CTD         *CTD                  `hl7:"false,CTD" json:"ctd,omitempty"`
	OBSERVATION []RSP_Z90_OBSERVATION `hl7:"true,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *RSP_Z90_COMMON_ORDER) MessageTypeSubStructName() string {
	return "RSP_Z90_COMMON_ORDER"
}

//  RSP_Z90 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z90 struct {
	MSH            *MSH                     `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                    `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                     `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                     `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                     `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                     `hl7:"true,QPD" json:"qpd,omitempty"`
	RCP            *RCP                     `hl7:"true,RCP" json:"rcp,omitempty"`
	QUERY_RESPONSE []RSP_Z90_QUERY_RESPONSE `hl7:"true,QUERY_RESPONSE" json:"query___response,omitempty"`
	DSC            *DSC                     `hl7:"true,DSC" json:"dsc,omitempty"`
	Other          []interface{}            `json:"other,omitempty"`
}

func (s *RSP_Z90) MessageTypeName() string {
	return "RSP_Z90"
}

//  RSP_Z90_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z90_OBSERVATION struct {
	OBX   *OBX          `hl7:"false,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z90_OBSERVATION) MessageTypeSubStructName() string {
	return "RSP_Z90_OBSERVATION"
}

//  RSP_Z90_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z90_PATIENT struct {
	PID   *PID           `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1           `hl7:"false,PD1" json:"pd_1,omitempty"`
	NK1   []NK1          `hl7:"false,NK1" json:"nk_1,omitempty"`
	NTE   []NTE          `hl7:"false,NTE" json:"nte,omitempty"`
	VISIT *RSP_Z90_VISIT `hl7:"false,VISIT" json:"visit,omitempty"`
	Other []interface{}  `json:"other,omitempty"`
}

func (s *RSP_Z90_PATIENT) MessageTypeSubStructName() string {
	return "RSP_Z90_PATIENT"
}

//  RSP_Z90_QUERY_RESPONSE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z90_QUERY_RESPONSE struct {
	PATIENT      *RSP_Z90_PATIENT       `hl7:"false,PATIENT" json:"patient,omitempty"`
	COMMON_ORDER []RSP_Z90_COMMON_ORDER `hl7:"true,COMMON_ORDER" json:"common___order,omitempty"`
	SPECIMEN     []RSP_Z90_SPECIMEN     `hl7:"false,SPECIMEN" json:"specimen,omitempty"`
	Other        []interface{}          `json:"other,omitempty"`
}

func (s *RSP_Z90_QUERY_RESPONSE) MessageTypeSubStructName() string {
	return "RSP_Z90_QUERY_RESPONSE"
}

//  RSP_Z90_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z90_SPECIMEN struct {
	SPM   *SPM          `hl7:"true,SPM" json:"spm,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z90_SPECIMEN) MessageTypeSubStructName() string {
	return "RSP_Z90_SPECIMEN"
}

//  RSP_Z90_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z90_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z90_TIMING) MessageTypeSubStructName() string {
	return "RSP_Z90_TIMING"
}

//  RSP_Z90_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RSP_Z90_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RSP_Z90_VISIT) MessageTypeSubStructName() string {
	return "RSP_Z90_VISIT"
}

//  RTB_K13 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RTB_K13 struct {
	MSH            *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	SFT            []SFT                   `hl7:"false,SFT" json:"sft,omitempty"`
	MSA            *MSA                    `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                    `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                    `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                    `hl7:"true,QPD" json:"qpd,omitempty"`
	ROW_DEFINITION *RTB_K13_ROW_DEFINITION `hl7:"false,ROW_DEFINITION" json:"row___definition,omitempty"`
	DSC            *DSC                    `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RTB_K13) MessageTypeName() string {
	return "RTB_K13"
}

//  RTB_K13_ROW_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RTB_K13_ROW_DEFINITION struct {
	RDF   *RDF          `hl7:"true,RDF" json:"rdf,omitempty"`
	RDT   []RDT         `hl7:"false,RDT" json:"rdt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RTB_K13_ROW_DEFINITION) MessageTypeSubStructName() string {
	return "RTB_K13_ROW_DEFINITION"
}

//  RTB_Knn represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RTB_Knn struct {
	MSH *MSH  `hl7:"true,MSH" json:"msh,omitempty"`
	SFT []SFT `hl7:"false,SFT" json:"sft,omitempty"`
	MSA *MSA  `hl7:"true,MSA" json:"msa,omitempty"`
	ERR *ERR  `hl7:"false,ERR" json:"err,omitempty"`
	QAK *QAK  `hl7:"true,QAK" json:"qak,omitempty"`
	QPD *QPD  `hl7:"true,QPD" json:"qpd,omitempty"`
	//  Missing: anyHL7Segment
	//  Missing: anyHL7Segment
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RTB_Knn) MessageTypeName() string {
	return "RTB_Knn"
}

//  RTB_Q13 represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RTB_Q13 struct {
	MSH            *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	MSA            *MSA                    `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            *ERR                    `hl7:"false,ERR" json:"err,omitempty"`
	QAK            *QAK                    `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                    `hl7:"true,QPD" json:"qpd,omitempty"`
	ROW_DEFINITION *RTB_Q13_ROW_DEFINITION `hl7:"false,ROW_DEFINITION" json:"row___definition,omitempty"`
	DSC            *DSC                    `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RTB_Q13) MessageTypeName() string {
	return "RTB_Q13"
}

//  RTB_Q13_ROW_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.4
type RTB_Q13_ROW_DEFINITION struct {
	RDF   *RDF          `hl7:"true,RDF" json:"rdf,omitempty"`
	RDT   []RDT         `hl7:"false,RDT" json:"rdt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RTB_Q13_ROW_DEFINITION) MessageTypeSubStructName() string {
	return "RTB_Q13_ROW_DEFINITION"
}

//  RTB_Z74 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RTB_Z74 struct {
	MSH            *MSH                    `hl7:"true,MSH" json:"msh,omitempty"`
	MSA            *MSA                    `hl7:"true,MSA" json:"msa,omitempty"`
	ERR            []ERR                   `hl7:"false,ERR" json:"err,omitempty"`
	SFT            []SFT                   `hl7:"false,SFT" json:"sft,omitempty"`
	QAK            *QAK                    `hl7:"true,QAK" json:"qak,omitempty"`
	QPD            *QPD                    `hl7:"true,QPD" json:"qpd,omitempty"`
	ROW_DEFINITION *RTB_Z74_ROW_DEFINITION `hl7:"false,ROW_DEFINITION" json:"row___definition,omitempty"`
	DSC            *DSC                    `hl7:"false,DSC" json:"dsc,omitempty"`
	Other          []interface{}           `json:"other,omitempty"`
}

func (s *RTB_Z74) MessageTypeName() string {
	return "RTB_Z74"
}

//  RTB_Z74_ROW_DEFINITION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type RTB_Z74_ROW_DEFINITION struct {
	RDF   *RDF          `hl7:"true,RDF" json:"rdf,omitempty"`
	RDT   []RDT         `hl7:"false,RDT" json:"rdt,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *RTB_Z74_ROW_DEFINITION) MessageTypeSubStructName() string {
	return "RTB_Z74_ROW_DEFINITION"
}

//  SIU_S12 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SIU_S12 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SCH       *SCH                `hl7:"true,SCH" json:"sch,omitempty"`
	TQ1       []TQ1               `hl7:"false,TQ1" json:"tq_1,omitempty"`
	NTE       []NTE               `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT   []SIU_S12_PATIENT   `hl7:"false,PATIENT" json:"patient,omitempty"`
	RESOURCES []SIU_S12_RESOURCES `hl7:"true,RESOURCES" json:"resources,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *SIU_S12) MessageTypeName() string {
	return "SIU_S12"
}

//  SIU_S12_GENERAL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SIU_S12_GENERAL_RESOURCE struct {
	AIG   *AIG          `hl7:"true,AIG" json:"aig,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SIU_S12_GENERAL_RESOURCE) MessageTypeSubStructName() string {
	return "SIU_S12_GENERAL_RESOURCE"
}

//  SIU_S12_LOCATION_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SIU_S12_LOCATION_RESOURCE struct {
	AIL   *AIL          `hl7:"true,AIL" json:"ail,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SIU_S12_LOCATION_RESOURCE) MessageTypeSubStructName() string {
	return "SIU_S12_LOCATION_RESOURCE"
}

//  SIU_S12_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SIU_S12_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PD1   *PD1          `hl7:"false,PD1" json:"pd_1,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	DG1   []DG1         `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SIU_S12_PATIENT) MessageTypeSubStructName() string {
	return "SIU_S12_PATIENT"
}

//  SIU_S12_PERSONNEL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SIU_S12_PERSONNEL_RESOURCE struct {
	AIP   *AIP          `hl7:"true,AIP" json:"aip,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SIU_S12_PERSONNEL_RESOURCE) MessageTypeSubStructName() string {
	return "SIU_S12_PERSONNEL_RESOURCE"
}

//  SIU_S12_RESOURCES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SIU_S12_RESOURCES struct {
	RGS                *RGS                         `hl7:"true,RGS" json:"rgs,omitempty"`
	SERVICE            []SIU_S12_SERVICE            `hl7:"false,SERVICE" json:"service,omitempty"`
	GENERAL_RESOURCE   []SIU_S12_GENERAL_RESOURCE   `hl7:"false,GENERAL_RESOURCE" json:"general___resource,omitempty"`
	LOCATION_RESOURCE  []SIU_S12_LOCATION_RESOURCE  `hl7:"false,LOCATION_RESOURCE" json:"location___resource,omitempty"`
	PERSONNEL_RESOURCE []SIU_S12_PERSONNEL_RESOURCE `hl7:"false,PERSONNEL_RESOURCE" json:"personnel___resource,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *SIU_S12_RESOURCES) MessageTypeSubStructName() string {
	return "SIU_S12_RESOURCES"
}

//  SIU_S12_SERVICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SIU_S12_SERVICE struct {
	AIS   *AIS          `hl7:"true,AIS" json:"ais,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SIU_S12_SERVICE) MessageTypeSubStructName() string {
	return "SIU_S12_SERVICE"
}

//  SPQ_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type SPQ_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SPR   *SPR          `hl7:"true,SPR" json:"spr,omitempty"`
	RDF   *RDF          `hl7:"false,RDF" json:"rdf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SPQ_Q01) MessageTypeName() string {
	return "SPQ_Q01"
}

//  SPQ_Q08 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SPQ_Q08 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	SPR   *SPR          `hl7:"true,SPR" json:"spr,omitempty"`
	RDF   *RDF          `hl7:"false,RDF" json:"rdf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SPQ_Q08) MessageTypeName() string {
	return "SPQ_Q08"
}

//  SQM_S25 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQM_S25 struct {
	MSH     *MSH             `hl7:"true,MSH" json:"msh,omitempty"`
	QRD     *QRD             `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF             `hl7:"false,QRF" json:"qrf,omitempty"`
	REQUEST *SQM_S25_REQUEST `hl7:"false,REQUEST" json:"request,omitempty"`
	DSC     *DSC             `hl7:"false,DSC" json:"dsc,omitempty"`
	Other   []interface{}    `json:"other,omitempty"`
}

func (s *SQM_S25) MessageTypeName() string {
	return "SQM_S25"
}

//  SQM_S25_GENERAL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQM_S25_GENERAL_RESOURCE struct {
	AIG   *AIG          `hl7:"true,AIG" json:"aig,omitempty"`
	APR   *APR          `hl7:"false,APR" json:"apr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQM_S25_GENERAL_RESOURCE) MessageTypeSubStructName() string {
	return "SQM_S25_GENERAL_RESOURCE"
}

//  SQM_S25_LOCATION_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQM_S25_LOCATION_RESOURCE struct {
	AIL   *AIL          `hl7:"true,AIL" json:"ail,omitempty"`
	APR   *APR          `hl7:"false,APR" json:"apr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQM_S25_LOCATION_RESOURCE) MessageTypeSubStructName() string {
	return "SQM_S25_LOCATION_RESOURCE"
}

//  SQM_S25_PERSONNEL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQM_S25_PERSONNEL_RESOURCE struct {
	AIP   *AIP          `hl7:"true,AIP" json:"aip,omitempty"`
	APR   *APR          `hl7:"false,APR" json:"apr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQM_S25_PERSONNEL_RESOURCE) MessageTypeSubStructName() string {
	return "SQM_S25_PERSONNEL_RESOURCE"
}

//  SQM_S25_REQUEST represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQM_S25_REQUEST struct {
	ARQ       *ARQ                `hl7:"true,ARQ" json:"arq,omitempty"`
	APR       *APR                `hl7:"false,APR" json:"apr,omitempty"`
	PID       *PID                `hl7:"false,PID" json:"pid,omitempty"`
	RESOURCES []SQM_S25_RESOURCES `hl7:"true,RESOURCES" json:"resources,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *SQM_S25_REQUEST) MessageTypeSubStructName() string {
	return "SQM_S25_REQUEST"
}

//  SQM_S25_RESOURCES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQM_S25_RESOURCES struct {
	RGS                *RGS                         `hl7:"true,RGS" json:"rgs,omitempty"`
	SERVICE            []SQM_S25_SERVICE            `hl7:"false,SERVICE" json:"service,omitempty"`
	GENERAL_RESOURCE   []SQM_S25_GENERAL_RESOURCE   `hl7:"false,GENERAL_RESOURCE" json:"general___resource,omitempty"`
	PERSONNEL_RESOURCE []SQM_S25_PERSONNEL_RESOURCE `hl7:"false,PERSONNEL_RESOURCE" json:"personnel___resource,omitempty"`
	LOCATION_RESOURCE  []SQM_S25_LOCATION_RESOURCE  `hl7:"false,LOCATION_RESOURCE" json:"location___resource,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *SQM_S25_RESOURCES) MessageTypeSubStructName() string {
	return "SQM_S25_RESOURCES"
}

//  SQM_S25_SERVICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQM_S25_SERVICE struct {
	AIS   *AIS          `hl7:"true,AIS" json:"ais,omitempty"`
	APR   *APR          `hl7:"false,APR" json:"apr,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQM_S25_SERVICE) MessageTypeSubStructName() string {
	return "SQM_S25_SERVICE"
}

//  SQR_S25 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQR_S25 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA               `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR              `hl7:"false,ERR" json:"err,omitempty"`
	QAK      *QAK               `hl7:"true,QAK" json:"qak,omitempty"`
	SCHEDULE []SQR_S25_SCHEDULE `hl7:"false,SCHEDULE" json:"schedule,omitempty"`
	DSC      *DSC               `hl7:"false,DSC" json:"dsc,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *SQR_S25) MessageTypeName() string {
	return "SQR_S25"
}

//  SQR_S25_GENERAL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQR_S25_GENERAL_RESOURCE struct {
	AIG   *AIG          `hl7:"true,AIG" json:"aig,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQR_S25_GENERAL_RESOURCE) MessageTypeSubStructName() string {
	return "SQR_S25_GENERAL_RESOURCE"
}

//  SQR_S25_LOCATION_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQR_S25_LOCATION_RESOURCE struct {
	AIL   *AIL          `hl7:"true,AIL" json:"ail,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQR_S25_LOCATION_RESOURCE) MessageTypeSubStructName() string {
	return "SQR_S25_LOCATION_RESOURCE"
}

//  SQR_S25_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQR_S25_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	DG1   *DG1          `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQR_S25_PATIENT) MessageTypeSubStructName() string {
	return "SQR_S25_PATIENT"
}

//  SQR_S25_PERSONNEL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQR_S25_PERSONNEL_RESOURCE struct {
	AIP   *AIP          `hl7:"true,AIP" json:"aip,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQR_S25_PERSONNEL_RESOURCE) MessageTypeSubStructName() string {
	return "SQR_S25_PERSONNEL_RESOURCE"
}

//  SQR_S25_RESOURCES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQR_S25_RESOURCES struct {
	RGS                *RGS                         `hl7:"true,RGS" json:"rgs,omitempty"`
	SERVICE            []SQR_S25_SERVICE            `hl7:"false,SERVICE" json:"service,omitempty"`
	GENERAL_RESOURCE   []SQR_S25_GENERAL_RESOURCE   `hl7:"false,GENERAL_RESOURCE" json:"general___resource,omitempty"`
	PERSONNEL_RESOURCE []SQR_S25_PERSONNEL_RESOURCE `hl7:"false,PERSONNEL_RESOURCE" json:"personnel___resource,omitempty"`
	LOCATION_RESOURCE  []SQR_S25_LOCATION_RESOURCE  `hl7:"false,LOCATION_RESOURCE" json:"location___resource,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *SQR_S25_RESOURCES) MessageTypeSubStructName() string {
	return "SQR_S25_RESOURCES"
}

//  SQR_S25_SCHEDULE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQR_S25_SCHEDULE struct {
	SCH       *SCH                `hl7:"true,SCH" json:"sch,omitempty"`
	TQ1       []TQ1               `hl7:"false,TQ1" json:"tq_1,omitempty"`
	NTE       []NTE               `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT   *SQR_S25_PATIENT    `hl7:"false,PATIENT" json:"patient,omitempty"`
	RESOURCES []SQR_S25_RESOURCES `hl7:"true,RESOURCES" json:"resources,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *SQR_S25_SCHEDULE) MessageTypeSubStructName() string {
	return "SQR_S25_SCHEDULE"
}

//  SQR_S25_SERVICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SQR_S25_SERVICE struct {
	AIS   *AIS          `hl7:"true,AIS" json:"ais,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SQR_S25_SERVICE) MessageTypeSubStructName() string {
	return "SQR_S25_SERVICE"
}

//  SRM_S01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRM_S01 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	ARQ       *ARQ                `hl7:"true,ARQ" json:"arq,omitempty"`
	APR       *APR                `hl7:"false,APR" json:"apr,omitempty"`
	NTE       []NTE               `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT   []SRM_S01_PATIENT   `hl7:"false,PATIENT" json:"patient,omitempty"`
	RESOURCES []SRM_S01_RESOURCES `hl7:"true,RESOURCES" json:"resources,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *SRM_S01) MessageTypeName() string {
	return "SRM_S01"
}

//  SRM_S01_GENERAL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRM_S01_GENERAL_RESOURCE struct {
	AIG   *AIG          `hl7:"true,AIG" json:"aig,omitempty"`
	APR   *APR          `hl7:"false,APR" json:"apr,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRM_S01_GENERAL_RESOURCE) MessageTypeSubStructName() string {
	return "SRM_S01_GENERAL_RESOURCE"
}

//  SRM_S01_LOCATION_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRM_S01_LOCATION_RESOURCE struct {
	AIL   *AIL          `hl7:"true,AIL" json:"ail,omitempty"`
	APR   *APR          `hl7:"false,APR" json:"apr,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRM_S01_LOCATION_RESOURCE) MessageTypeSubStructName() string {
	return "SRM_S01_LOCATION_RESOURCE"
}

//  SRM_S01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRM_S01_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	DG1   []DG1         `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRM_S01_PATIENT) MessageTypeSubStructName() string {
	return "SRM_S01_PATIENT"
}

//  SRM_S01_PERSONNEL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRM_S01_PERSONNEL_RESOURCE struct {
	AIP   *AIP          `hl7:"true,AIP" json:"aip,omitempty"`
	APR   *APR          `hl7:"false,APR" json:"apr,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRM_S01_PERSONNEL_RESOURCE) MessageTypeSubStructName() string {
	return "SRM_S01_PERSONNEL_RESOURCE"
}

//  SRM_S01_RESOURCES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRM_S01_RESOURCES struct {
	RGS                *RGS                         `hl7:"true,RGS" json:"rgs,omitempty"`
	SERVICE            []SRM_S01_SERVICE            `hl7:"false,SERVICE" json:"service,omitempty"`
	GENERAL_RESOURCE   []SRM_S01_GENERAL_RESOURCE   `hl7:"false,GENERAL_RESOURCE" json:"general___resource,omitempty"`
	LOCATION_RESOURCE  []SRM_S01_LOCATION_RESOURCE  `hl7:"false,LOCATION_RESOURCE" json:"location___resource,omitempty"`
	PERSONNEL_RESOURCE []SRM_S01_PERSONNEL_RESOURCE `hl7:"false,PERSONNEL_RESOURCE" json:"personnel___resource,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *SRM_S01_RESOURCES) MessageTypeSubStructName() string {
	return "SRM_S01_RESOURCES"
}

//  SRM_S01_SERVICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRM_S01_SERVICE struct {
	AIS   *AIS          `hl7:"true,AIS" json:"ais,omitempty"`
	APR   *APR          `hl7:"false,APR" json:"apr,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRM_S01_SERVICE) MessageTypeSubStructName() string {
	return "SRM_S01_SERVICE"
}

//  SRR_S01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRR_S01 struct {
	MSH      *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA      *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	ERR      []ERR             `hl7:"false,ERR" json:"err,omitempty"`
	SCHEDULE *SRR_S01_SCHEDULE `hl7:"false,SCHEDULE" json:"schedule,omitempty"`
	Other    []interface{}     `json:"other,omitempty"`
}

func (s *SRR_S01) MessageTypeName() string {
	return "SRR_S01"
}

//  SRR_S01_GENERAL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRR_S01_GENERAL_RESOURCE struct {
	AIG   *AIG          `hl7:"true,AIG" json:"aig,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRR_S01_GENERAL_RESOURCE) MessageTypeSubStructName() string {
	return "SRR_S01_GENERAL_RESOURCE"
}

//  SRR_S01_LOCATION_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRR_S01_LOCATION_RESOURCE struct {
	AIL   *AIL          `hl7:"true,AIL" json:"ail,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRR_S01_LOCATION_RESOURCE) MessageTypeSubStructName() string {
	return "SRR_S01_LOCATION_RESOURCE"
}

//  SRR_S01_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRR_S01_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	PV1   *PV1          `hl7:"false,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	DG1   []DG1         `hl7:"false,DG1" json:"dg_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRR_S01_PATIENT) MessageTypeSubStructName() string {
	return "SRR_S01_PATIENT"
}

//  SRR_S01_PERSONNEL_RESOURCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRR_S01_PERSONNEL_RESOURCE struct {
	AIP   *AIP          `hl7:"true,AIP" json:"aip,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRR_S01_PERSONNEL_RESOURCE) MessageTypeSubStructName() string {
	return "SRR_S01_PERSONNEL_RESOURCE"
}

//  SRR_S01_RESOURCES represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRR_S01_RESOURCES struct {
	RGS                *RGS                         `hl7:"true,RGS" json:"rgs,omitempty"`
	SERVICE            []SRR_S01_SERVICE            `hl7:"false,SERVICE" json:"service,omitempty"`
	GENERAL_RESOURCE   []SRR_S01_GENERAL_RESOURCE   `hl7:"false,GENERAL_RESOURCE" json:"general___resource,omitempty"`
	LOCATION_RESOURCE  []SRR_S01_LOCATION_RESOURCE  `hl7:"false,LOCATION_RESOURCE" json:"location___resource,omitempty"`
	PERSONNEL_RESOURCE []SRR_S01_PERSONNEL_RESOURCE `hl7:"false,PERSONNEL_RESOURCE" json:"personnel___resource,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *SRR_S01_RESOURCES) MessageTypeSubStructName() string {
	return "SRR_S01_RESOURCES"
}

//  SRR_S01_SCHEDULE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRR_S01_SCHEDULE struct {
	SCH       *SCH                `hl7:"true,SCH" json:"sch,omitempty"`
	TQ1       []TQ1               `hl7:"false,TQ1" json:"tq_1,omitempty"`
	NTE       []NTE               `hl7:"false,NTE" json:"nte,omitempty"`
	PATIENT   []SRR_S01_PATIENT   `hl7:"false,PATIENT" json:"patient,omitempty"`
	RESOURCES []SRR_S01_RESOURCES `hl7:"true,RESOURCES" json:"resources,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *SRR_S01_SCHEDULE) MessageTypeSubStructName() string {
	return "SRR_S01_SCHEDULE"
}

//  SRR_S01_SERVICE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SRR_S01_SERVICE struct {
	AIS   *AIS          `hl7:"true,AIS" json:"ais,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SRR_S01_SERVICE) MessageTypeSubStructName() string {
	return "SRR_S01_SERVICE"
}

//  SSR_U04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SSR_U04 struct {
	MSH                *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                []SFT                        `hl7:"false,SFT" json:"sft,omitempty"`
	EQU                *EQU                         `hl7:"true,EQU" json:"equ,omitempty"`
	SPECIMEN_CONTAINER []SSR_U04_SPECIMEN_CONTAINER `hl7:"true,SPECIMEN_CONTAINER" json:"specimen___container,omitempty"`
	ROL                *ROL                         `hl7:"false,ROL" json:"rol,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *SSR_U04) MessageTypeName() string {
	return "SSR_U04"
}

//  SSR_U04_SPECIMEN_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SSR_U04_SPECIMEN_CONTAINER struct {
	SAC   *SAC          `hl7:"true,SAC" json:"sac,omitempty"`
	SPM   []SPM         `hl7:"false,SPM" json:"spm,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SSR_U04_SPECIMEN_CONTAINER) MessageTypeSubStructName() string {
	return "SSR_U04_SPECIMEN_CONTAINER"
}

//  SSU_U03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SSU_U03 struct {
	MSH                *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                []SFT                        `hl7:"false,SFT" json:"sft,omitempty"`
	EQU                *EQU                         `hl7:"true,EQU" json:"equ,omitempty"`
	SPECIMEN_CONTAINER []SSU_U03_SPECIMEN_CONTAINER `hl7:"true,SPECIMEN_CONTAINER" json:"specimen___container,omitempty"`
	ROL                *ROL                         `hl7:"false,ROL" json:"rol,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *SSU_U03) MessageTypeName() string {
	return "SSU_U03"
}

//  SSU_U03_SPECIMEN represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SSU_U03_SPECIMEN struct {
	SPM   *SPM          `hl7:"true,SPM" json:"spm,omitempty"`
	OBX   []OBX         `hl7:"false,OBX" json:"obx,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SSU_U03_SPECIMEN) MessageTypeSubStructName() string {
	return "SSU_U03_SPECIMEN"
}

//  SSU_U03_SPECIMEN_CONTAINER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SSU_U03_SPECIMEN_CONTAINER struct {
	SAC      *SAC               `hl7:"true,SAC" json:"sac,omitempty"`
	OBX      []OBX              `hl7:"false,OBX" json:"obx,omitempty"`
	SPECIMEN []SSU_U03_SPECIMEN `hl7:"false,SPECIMEN" json:"specimen,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *SSU_U03_SPECIMEN_CONTAINER) MessageTypeSubStructName() string {
	return "SSU_U03_SPECIMEN_CONTAINER"
}

//  SUR_P09 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SUR_P09 struct {
	MSH      *MSH               `hl7:"true,MSH" json:"msh,omitempty"`
	FACILITY []SUR_P09_FACILITY `hl7:"true,FACILITY" json:"facility,omitempty"`
	Other    []interface{}      `json:"other,omitempty"`
}

func (s *SUR_P09) MessageTypeName() string {
	return "SUR_P09"
}

//  SUR_P09_FACILITY represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SUR_P09_FACILITY struct {
	FAC             *FAC                      `hl7:"true,FAC" json:"fac,omitempty"`
	PRODUCT         []SUR_P09_PRODUCT         `hl7:"true,PRODUCT" json:"product,omitempty"`
	PSH             *PSH                      `hl7:"true,PSH" json:"psh,omitempty"`
	FACILITY_DETAIL []SUR_P09_FACILITY_DETAIL `hl7:"true,FACILITY_DETAIL" json:"facility___detail,omitempty"`
	//  Missing: ED
	Other []interface{} `json:"other,omitempty"`
}

func (s *SUR_P09_FACILITY) MessageTypeSubStructName() string {
	return "SUR_P09_FACILITY"
}

//  SUR_P09_FACILITY_DETAIL represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SUR_P09_FACILITY_DETAIL struct {
	FAC   *FAC          `hl7:"true,FAC" json:"fac,omitempty"`
	PDC   *PDC          `hl7:"true,PDC" json:"pdc,omitempty"`
	NTE   *NTE          `hl7:"true,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SUR_P09_FACILITY_DETAIL) MessageTypeSubStructName() string {
	return "SUR_P09_FACILITY_DETAIL"
}

//  SUR_P09_PRODUCT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type SUR_P09_PRODUCT struct {
	PSH   *PSH          `hl7:"true,PSH" json:"psh,omitempty"`
	PDC   *PDC          `hl7:"true,PDC" json:"pdc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *SUR_P09_PRODUCT) MessageTypeSubStructName() string {
	return "SUR_P09_PRODUCT"
}

//  TBR_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type TBR_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	RDF   *RDF          `hl7:"true,RDF" json:"rdf,omitempty"`
	RDT   []RDT         `hl7:"true,RDT" json:"rdt,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *TBR_Q01) MessageTypeName() string {
	return "TBR_Q01"
}

//  TBR_R08 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type TBR_R08 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	MSA   *MSA          `hl7:"true,MSA" json:"msa,omitempty"`
	ERR   *ERR          `hl7:"false,ERR" json:"err,omitempty"`
	QAK   *QAK          `hl7:"true,QAK" json:"qak,omitempty"`
	RDF   *RDF          `hl7:"true,RDF" json:"rdf,omitempty"`
	RDT   []RDT         `hl7:"true,RDT" json:"rdt,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *TBR_R08) MessageTypeName() string {
	return "TBR_R08"
}

//  TCU_U10 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type TCU_U10 struct {
	MSH                *MSH                         `hl7:"true,MSH" json:"msh,omitempty"`
	SFT                []SFT                        `hl7:"false,SFT" json:"sft,omitempty"`
	EQU                *EQU                         `hl7:"true,EQU" json:"equ,omitempty"`
	TEST_CONFIGURATION []TCU_U10_TEST_CONFIGURATION `hl7:"true,TEST_CONFIGURATION" json:"test___configuration,omitempty"`
	ROL                *ROL                         `hl7:"false,ROL" json:"rol,omitempty"`
	Other              []interface{}                `json:"other,omitempty"`
}

func (s *TCU_U10) MessageTypeName() string {
	return "TCU_U10"
}

//  TCU_U10_TEST_CONFIGURATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type TCU_U10_TEST_CONFIGURATION struct {
	SPM   *SPM          `hl7:"false,SPM" json:"spm,omitempty"`
	TCC   []TCC         `hl7:"true,TCC" json:"tcc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *TCU_U10_TEST_CONFIGURATION) MessageTypeSubStructName() string {
	return "TCU_U10_TEST_CONFIGURATION"
}

//  UDM_Q05 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type UDM_Q05 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	URD   *URD          `hl7:"true,URD" json:"urd,omitempty"`
	URS   *URS          `hl7:"false,URS" json:"urs,omitempty"`
	DSP   []DSP         `hl7:"true,DSP" json:"dsp,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *UDM_Q05) MessageTypeName() string {
	return "UDM_Q05"
}

//  VQQ_Q01 represents the corresponding HL7 message type.
//  Definition from HL7 2.3
type VQQ_Q01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	VTQ   *VTQ          `hl7:"true,VTQ" json:"vtq,omitempty"`
	RDF   *RDF          `hl7:"false,RDF" json:"rdf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VQQ_Q01) MessageTypeName() string {
	return "VQQ_Q01"
}

//  VQQ_Q07 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VQQ_Q07 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	VTQ   *VTQ          `hl7:"true,VTQ" json:"vtq,omitempty"`
	RDF   *RDF          `hl7:"false,RDF" json:"rdf,omitempty"`
	DSC   *DSC          `hl7:"false,DSC" json:"dsc,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VQQ_Q07) MessageTypeName() string {
	return "VQQ_Q07"
}

//  VXQ_V01 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXQ_V01 struct {
	MSH   *MSH          `hl7:"true,MSH" json:"msh,omitempty"`
	SFT   []SFT         `hl7:"false,SFT" json:"sft,omitempty"`
	QRD   *QRD          `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF   *QRF          `hl7:"false,QRF" json:"qrf,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXQ_V01) MessageTypeName() string {
	return "VXQ_V01"
}

//  VXR_V03 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXR_V03 struct {
	MSH           *MSH                   `hl7:"true,MSH" json:"msh,omitempty"`
	MSA           *MSA                   `hl7:"true,MSA" json:"msa,omitempty"`
	SFT           []SFT                  `hl7:"false,SFT" json:"sft,omitempty"`
	QRD           *QRD                   `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF           *QRF                   `hl7:"false,QRF" json:"qrf,omitempty"`
	PID           *PID                   `hl7:"true,PID" json:"pid,omitempty"`
	PD1           *PD1                   `hl7:"false,PD1" json:"pd_1,omitempty"`
	NK1           []NK1                  `hl7:"false,NK1" json:"nk_1,omitempty"`
	PATIENT_VISIT *VXR_V03_PATIENT_VISIT `hl7:"false,PATIENT_VISIT" json:"patient___visit,omitempty"`
	GT1           []GT1                  `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE     []VXR_V03_INSURANCE    `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ORDER         []VXR_V03_ORDER        `hl7:"false,ORDER" json:"order,omitempty"`
	Other         []interface{}          `json:"other,omitempty"`
}

func (s *VXR_V03) MessageTypeName() string {
	return "VXR_V03"
}

//  VXR_V03_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXR_V03_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXR_V03_INSURANCE) MessageTypeSubStructName() string {
	return "VXR_V03_INSURANCE"
}

//  VXR_V03_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXR_V03_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXR_V03_OBSERVATION) MessageTypeSubStructName() string {
	return "VXR_V03_OBSERVATION"
}

//  VXR_V03_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXR_V03_ORDER struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING      []VXR_V03_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	RXA         *RXA                  `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR         *RXR                  `hl7:"false,RXR" json:"rxr,omitempty"`
	OBSERVATION []VXR_V03_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *VXR_V03_ORDER) MessageTypeSubStructName() string {
	return "VXR_V03_ORDER"
}

//  VXR_V03_PATIENT_VISIT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXR_V03_PATIENT_VISIT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXR_V03_PATIENT_VISIT) MessageTypeSubStructName() string {
	return "VXR_V03_PATIENT_VISIT"
}

//  VXR_V03_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXR_V03_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXR_V03_TIMING) MessageTypeSubStructName() string {
	return "VXR_V03_TIMING"
}

//  VXU_V04 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXU_V04 struct {
	MSH       *MSH                `hl7:"true,MSH" json:"msh,omitempty"`
	SFT       []SFT               `hl7:"false,SFT" json:"sft,omitempty"`
	PID       *PID                `hl7:"true,PID" json:"pid,omitempty"`
	PD1       *PD1                `hl7:"false,PD1" json:"pd_1,omitempty"`
	NK1       []NK1               `hl7:"false,NK1" json:"nk_1,omitempty"`
	PATIENT   *VXU_V04_PATIENT    `hl7:"false,PATIENT" json:"patient,omitempty"`
	GT1       []GT1               `hl7:"false,GT1" json:"gt_1,omitempty"`
	INSURANCE []VXU_V04_INSURANCE `hl7:"false,INSURANCE" json:"insurance,omitempty"`
	ORDER     []VXU_V04_ORDER     `hl7:"false,ORDER" json:"order,omitempty"`
	Other     []interface{}       `json:"other,omitempty"`
}

func (s *VXU_V04) MessageTypeName() string {
	return "VXU_V04"
}

//  VXU_V04_INSURANCE represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXU_V04_INSURANCE struct {
	IN1   *IN1          `hl7:"true,IN1" json:"in_1,omitempty"`
	IN2   *IN2          `hl7:"false,IN2" json:"in_2,omitempty"`
	IN3   *IN3          `hl7:"false,IN3" json:"in_3,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXU_V04_INSURANCE) MessageTypeSubStructName() string {
	return "VXU_V04_INSURANCE"
}

//  VXU_V04_OBSERVATION represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXU_V04_OBSERVATION struct {
	OBX   *OBX          `hl7:"true,OBX" json:"obx,omitempty"`
	NTE   []NTE         `hl7:"false,NTE" json:"nte,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXU_V04_OBSERVATION) MessageTypeSubStructName() string {
	return "VXU_V04_OBSERVATION"
}

//  VXU_V04_ORDER represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXU_V04_ORDER struct {
	ORC         *ORC                  `hl7:"true,ORC" json:"orc,omitempty"`
	TIMING      []VXU_V04_TIMING      `hl7:"false,TIMING" json:"timing,omitempty"`
	RXA         *RXA                  `hl7:"true,RXA" json:"rxa,omitempty"`
	RXR         *RXR                  `hl7:"false,RXR" json:"rxr,omitempty"`
	OBSERVATION []VXU_V04_OBSERVATION `hl7:"false,OBSERVATION" json:"observation,omitempty"`
	Other       []interface{}         `json:"other,omitempty"`
}

func (s *VXU_V04_ORDER) MessageTypeSubStructName() string {
	return "VXU_V04_ORDER"
}

//  VXU_V04_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXU_V04_PATIENT struct {
	PV1   *PV1          `hl7:"true,PV1" json:"pv_1,omitempty"`
	PV2   *PV2          `hl7:"false,PV2" json:"pv_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXU_V04_PATIENT) MessageTypeSubStructName() string {
	return "VXU_V04_PATIENT"
}

//  VXU_V04_TIMING represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXU_V04_TIMING struct {
	TQ1   *TQ1          `hl7:"true,TQ1" json:"tq_1,omitempty"`
	TQ2   []TQ2         `hl7:"false,TQ2" json:"tq_2,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXU_V04_TIMING) MessageTypeSubStructName() string {
	return "VXU_V04_TIMING"
}

//  VXX_V02 represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXX_V02 struct {
	MSH     *MSH              `hl7:"true,MSH" json:"msh,omitempty"`
	MSA     *MSA              `hl7:"true,MSA" json:"msa,omitempty"`
	SFT     []SFT             `hl7:"false,SFT" json:"sft,omitempty"`
	QRD     *QRD              `hl7:"true,QRD" json:"qrd,omitempty"`
	QRF     *QRF              `hl7:"false,QRF" json:"qrf,omitempty"`
	PATIENT []VXX_V02_PATIENT `hl7:"true,PATIENT" json:"patient,omitempty"`
	Other   []interface{}     `json:"other,omitempty"`
}

func (s *VXX_V02) MessageTypeName() string {
	return "VXX_V02"
}

//  VXX_V02_PATIENT represents the corresponding HL7 message type.
//  Definition from HL7 2.5.1
type VXX_V02_PATIENT struct {
	PID   *PID          `hl7:"true,PID" json:"pid,omitempty"`
	NK1   []NK1         `hl7:"false,NK1" json:"nk_1,omitempty"`
	Other []interface{} `json:"other,omitempty"`
}

func (s *VXX_V02_PATIENT) MessageTypeSubStructName() string {
	return "VXX_V02_PATIENT"
}

//  GenericHL7Segment represents the corresponding HL7 segment type.
type GenericHL7Segment struct {
	segment []byte `json:"segment,omitempty"`
}

func (s *GenericHL7Segment) SegmentName() string {
	return "GenericHL7Segment"
}

//  ABS returns the first ABS segment within the message, or nil if there isn't one.
func (m *Message) ABS() (*ABS, error) {
	ps, err := m.Parse("ABS")
	pst, ok := ps.(*ABS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ACC returns the first ACC segment within the message, or nil if there isn't one.
func (m *Message) ACC() (*ACC, error) {
	ps, err := m.Parse("ACC")
	pst, ok := ps.(*ACC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ADD returns the first ADD segment within the message, or nil if there isn't one.
func (m *Message) ADD() (*ADD, error) {
	ps, err := m.Parse("ADD")
	pst, ok := ps.(*ADD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  AFF returns the first AFF segment within the message, or nil if there isn't one.
func (m *Message) AFF() (*AFF, error) {
	ps, err := m.Parse("AFF")
	pst, ok := ps.(*AFF)
	if ok {
		return pst, err
	}
	return nil, err
}

//  AIG returns the first AIG segment within the message, or nil if there isn't one.
func (m *Message) AIG() (*AIG, error) {
	ps, err := m.Parse("AIG")
	pst, ok := ps.(*AIG)
	if ok {
		return pst, err
	}
	return nil, err
}

//  AIL returns the first AIL segment within the message, or nil if there isn't one.
func (m *Message) AIL() (*AIL, error) {
	ps, err := m.Parse("AIL")
	pst, ok := ps.(*AIL)
	if ok {
		return pst, err
	}
	return nil, err
}

//  AIP returns the first AIP segment within the message, or nil if there isn't one.
func (m *Message) AIP() (*AIP, error) {
	ps, err := m.Parse("AIP")
	pst, ok := ps.(*AIP)
	if ok {
		return pst, err
	}
	return nil, err
}

//  AIS returns the first AIS segment within the message, or nil if there isn't one.
func (m *Message) AIS() (*AIS, error) {
	ps, err := m.Parse("AIS")
	pst, ok := ps.(*AIS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  AL1 returns the first AL1 segment within the message, or nil if there isn't one.
func (m *Message) AL1() (*AL1, error) {
	ps, err := m.Parse("AL1")
	pst, ok := ps.(*AL1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  APR returns the first APR segment within the message, or nil if there isn't one.
func (m *Message) APR() (*APR, error) {
	ps, err := m.Parse("APR")
	pst, ok := ps.(*APR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ARQ returns the first ARQ segment within the message, or nil if there isn't one.
func (m *Message) ARQ() (*ARQ, error) {
	ps, err := m.Parse("ARQ")
	pst, ok := ps.(*ARQ)
	if ok {
		return pst, err
	}
	return nil, err
}

//  AUT returns the first AUT segment within the message, or nil if there isn't one.
func (m *Message) AUT() (*AUT, error) {
	ps, err := m.Parse("AUT")
	pst, ok := ps.(*AUT)
	if ok {
		return pst, err
	}
	return nil, err
}

//  BHS returns the first BHS segment within the message, or nil if there isn't one.
func (m *Message) BHS() (*BHS, error) {
	ps, err := m.Parse("BHS")
	pst, ok := ps.(*BHS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  BLC returns the first BLC segment within the message, or nil if there isn't one.
func (m *Message) BLC() (*BLC, error) {
	ps, err := m.Parse("BLC")
	pst, ok := ps.(*BLC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  BLG returns the first BLG segment within the message, or nil if there isn't one.
func (m *Message) BLG() (*BLG, error) {
	ps, err := m.Parse("BLG")
	pst, ok := ps.(*BLG)
	if ok {
		return pst, err
	}
	return nil, err
}

//  BPO returns the first BPO segment within the message, or nil if there isn't one.
func (m *Message) BPO() (*BPO, error) {
	ps, err := m.Parse("BPO")
	pst, ok := ps.(*BPO)
	if ok {
		return pst, err
	}
	return nil, err
}

//  BPX returns the first BPX segment within the message, or nil if there isn't one.
func (m *Message) BPX() (*BPX, error) {
	ps, err := m.Parse("BPX")
	pst, ok := ps.(*BPX)
	if ok {
		return pst, err
	}
	return nil, err
}

//  BTS returns the first BTS segment within the message, or nil if there isn't one.
func (m *Message) BTS() (*BTS, error) {
	ps, err := m.Parse("BTS")
	pst, ok := ps.(*BTS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  BTX returns the first BTX segment within the message, or nil if there isn't one.
func (m *Message) BTX() (*BTX, error) {
	ps, err := m.Parse("BTX")
	pst, ok := ps.(*BTX)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CDM returns the first CDM segment within the message, or nil if there isn't one.
func (m *Message) CDM() (*CDM, error) {
	ps, err := m.Parse("CDM")
	pst, ok := ps.(*CDM)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CER returns the first CER segment within the message, or nil if there isn't one.
func (m *Message) CER() (*CER, error) {
	ps, err := m.Parse("CER")
	pst, ok := ps.(*CER)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CM0 returns the first CM0 segment within the message, or nil if there isn't one.
func (m *Message) CM0() (*CM0, error) {
	ps, err := m.Parse("CM0")
	pst, ok := ps.(*CM0)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CM1 returns the first CM1 segment within the message, or nil if there isn't one.
func (m *Message) CM1() (*CM1, error) {
	ps, err := m.Parse("CM1")
	pst, ok := ps.(*CM1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CM2 returns the first CM2 segment within the message, or nil if there isn't one.
func (m *Message) CM2() (*CM2, error) {
	ps, err := m.Parse("CM2")
	pst, ok := ps.(*CM2)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CNS returns the first CNS segment within the message, or nil if there isn't one.
func (m *Message) CNS() (*CNS, error) {
	ps, err := m.Parse("CNS")
	pst, ok := ps.(*CNS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CON returns the first CON segment within the message, or nil if there isn't one.
func (m *Message) CON() (*CON, error) {
	ps, err := m.Parse("CON")
	pst, ok := ps.(*CON)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CSP returns the first CSP segment within the message, or nil if there isn't one.
func (m *Message) CSP() (*CSP, error) {
	ps, err := m.Parse("CSP")
	pst, ok := ps.(*CSP)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CSR returns the first CSR segment within the message, or nil if there isn't one.
func (m *Message) CSR() (*CSR, error) {
	ps, err := m.Parse("CSR")
	pst, ok := ps.(*CSR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CSS returns the first CSS segment within the message, or nil if there isn't one.
func (m *Message) CSS() (*CSS, error) {
	ps, err := m.Parse("CSS")
	pst, ok := ps.(*CSS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CTD returns the first CTD segment within the message, or nil if there isn't one.
func (m *Message) CTD() (*CTD, error) {
	ps, err := m.Parse("CTD")
	pst, ok := ps.(*CTD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  CTI returns the first CTI segment within the message, or nil if there isn't one.
func (m *Message) CTI() (*CTI, error) {
	ps, err := m.Parse("CTI")
	pst, ok := ps.(*CTI)
	if ok {
		return pst, err
	}
	return nil, err
}

//  DB1 returns the first DB1 segment within the message, or nil if there isn't one.
func (m *Message) DB1() (*DB1, error) {
	ps, err := m.Parse("DB1")
	pst, ok := ps.(*DB1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  DG1 returns the first DG1 segment within the message, or nil if there isn't one.
func (m *Message) DG1() (*DG1, error) {
	ps, err := m.Parse("DG1")
	pst, ok := ps.(*DG1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  DRG returns the first DRG segment within the message, or nil if there isn't one.
func (m *Message) DRG() (*DRG, error) {
	ps, err := m.Parse("DRG")
	pst, ok := ps.(*DRG)
	if ok {
		return pst, err
	}
	return nil, err
}

//  DSC returns the first DSC segment within the message, or nil if there isn't one.
func (m *Message) DSC() (*DSC, error) {
	ps, err := m.Parse("DSC")
	pst, ok := ps.(*DSC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  DSP returns the first DSP segment within the message, or nil if there isn't one.
func (m *Message) DSP() (*DSP, error) {
	ps, err := m.Parse("DSP")
	pst, ok := ps.(*DSP)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ECD returns the first ECD segment within the message, or nil if there isn't one.
func (m *Message) ECD() (*ECD, error) {
	ps, err := m.Parse("ECD")
	pst, ok := ps.(*ECD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ECR returns the first ECR segment within the message, or nil if there isn't one.
func (m *Message) ECR() (*ECR, error) {
	ps, err := m.Parse("ECR")
	pst, ok := ps.(*ECR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  EDU returns the first EDU segment within the message, or nil if there isn't one.
func (m *Message) EDU() (*EDU, error) {
	ps, err := m.Parse("EDU")
	pst, ok := ps.(*EDU)
	if ok {
		return pst, err
	}
	return nil, err
}

//  EQL returns the first EQL segment within the message, or nil if there isn't one.
func (m *Message) EQL() (*EQL, error) {
	ps, err := m.Parse("EQL")
	pst, ok := ps.(*EQL)
	if ok {
		return pst, err
	}
	return nil, err
}

//  EQP returns the first EQP segment within the message, or nil if there isn't one.
func (m *Message) EQP() (*EQP, error) {
	ps, err := m.Parse("EQP")
	pst, ok := ps.(*EQP)
	if ok {
		return pst, err
	}
	return nil, err
}

//  EQU returns the first EQU segment within the message, or nil if there isn't one.
func (m *Message) EQU() (*EQU, error) {
	ps, err := m.Parse("EQU")
	pst, ok := ps.(*EQU)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ERQ returns the first ERQ segment within the message, or nil if there isn't one.
func (m *Message) ERQ() (*ERQ, error) {
	ps, err := m.Parse("ERQ")
	pst, ok := ps.(*ERQ)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ERR returns the first ERR segment within the message, or nil if there isn't one.
func (m *Message) ERR() (*ERR, error) {
	ps, err := m.Parse("ERR")
	pst, ok := ps.(*ERR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  EVN returns the first EVN segment within the message, or nil if there isn't one.
func (m *Message) EVN() (*EVN, error) {
	ps, err := m.Parse("EVN")
	pst, ok := ps.(*EVN)
	if ok {
		return pst, err
	}
	return nil, err
}

//  FAC returns the first FAC segment within the message, or nil if there isn't one.
func (m *Message) FAC() (*FAC, error) {
	ps, err := m.Parse("FAC")
	pst, ok := ps.(*FAC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  FHS returns the first FHS segment within the message, or nil if there isn't one.
func (m *Message) FHS() (*FHS, error) {
	ps, err := m.Parse("FHS")
	pst, ok := ps.(*FHS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  FT1 returns the first FT1 segment within the message, or nil if there isn't one.
func (m *Message) FT1() (*FT1, error) {
	ps, err := m.Parse("FT1")
	pst, ok := ps.(*FT1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  FTS returns the first FTS segment within the message, or nil if there isn't one.
func (m *Message) FTS() (*FTS, error) {
	ps, err := m.Parse("FTS")
	pst, ok := ps.(*FTS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  GOL returns the first GOL segment within the message, or nil if there isn't one.
func (m *Message) GOL() (*GOL, error) {
	ps, err := m.Parse("GOL")
	pst, ok := ps.(*GOL)
	if ok {
		return pst, err
	}
	return nil, err
}

//  GP1 returns the first GP1 segment within the message, or nil if there isn't one.
func (m *Message) GP1() (*GP1, error) {
	ps, err := m.Parse("GP1")
	pst, ok := ps.(*GP1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  GP2 returns the first GP2 segment within the message, or nil if there isn't one.
func (m *Message) GP2() (*GP2, error) {
	ps, err := m.Parse("GP2")
	pst, ok := ps.(*GP2)
	if ok {
		return pst, err
	}
	return nil, err
}

//  GT1 returns the first GT1 segment within the message, or nil if there isn't one.
func (m *Message) GT1() (*GT1, error) {
	ps, err := m.Parse("GT1")
	pst, ok := ps.(*GT1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  IAM returns the first IAM segment within the message, or nil if there isn't one.
func (m *Message) IAM() (*IAM, error) {
	ps, err := m.Parse("IAM")
	pst, ok := ps.(*IAM)
	if ok {
		return pst, err
	}
	return nil, err
}

//  IIM returns the first IIM segment within the message, or nil if there isn't one.
func (m *Message) IIM() (*IIM, error) {
	ps, err := m.Parse("IIM")
	pst, ok := ps.(*IIM)
	if ok {
		return pst, err
	}
	return nil, err
}

//  IN1 returns the first IN1 segment within the message, or nil if there isn't one.
func (m *Message) IN1() (*IN1, error) {
	ps, err := m.Parse("IN1")
	pst, ok := ps.(*IN1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  IN2 returns the first IN2 segment within the message, or nil if there isn't one.
func (m *Message) IN2() (*IN2, error) {
	ps, err := m.Parse("IN2")
	pst, ok := ps.(*IN2)
	if ok {
		return pst, err
	}
	return nil, err
}

//  IN3 returns the first IN3 segment within the message, or nil if there isn't one.
func (m *Message) IN3() (*IN3, error) {
	ps, err := m.Parse("IN3")
	pst, ok := ps.(*IN3)
	if ok {
		return pst, err
	}
	return nil, err
}

//  INV returns the first INV segment within the message, or nil if there isn't one.
func (m *Message) INV() (*INV, error) {
	ps, err := m.Parse("INV")
	pst, ok := ps.(*INV)
	if ok {
		return pst, err
	}
	return nil, err
}

//  IPC returns the first IPC segment within the message, or nil if there isn't one.
func (m *Message) IPC() (*IPC, error) {
	ps, err := m.Parse("IPC")
	pst, ok := ps.(*IPC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ISD returns the first ISD segment within the message, or nil if there isn't one.
func (m *Message) ISD() (*ISD, error) {
	ps, err := m.Parse("ISD")
	pst, ok := ps.(*ISD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  LAN returns the first LAN segment within the message, or nil if there isn't one.
func (m *Message) LAN() (*LAN, error) {
	ps, err := m.Parse("LAN")
	pst, ok := ps.(*LAN)
	if ok {
		return pst, err
	}
	return nil, err
}

//  LCC returns the first LCC segment within the message, or nil if there isn't one.
func (m *Message) LCC() (*LCC, error) {
	ps, err := m.Parse("LCC")
	pst, ok := ps.(*LCC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  LCH returns the first LCH segment within the message, or nil if there isn't one.
func (m *Message) LCH() (*LCH, error) {
	ps, err := m.Parse("LCH")
	pst, ok := ps.(*LCH)
	if ok {
		return pst, err
	}
	return nil, err
}

//  LDP returns the first LDP segment within the message, or nil if there isn't one.
func (m *Message) LDP() (*LDP, error) {
	ps, err := m.Parse("LDP")
	pst, ok := ps.(*LDP)
	if ok {
		return pst, err
	}
	return nil, err
}

//  LOC returns the first LOC segment within the message, or nil if there isn't one.
func (m *Message) LOC() (*LOC, error) {
	ps, err := m.Parse("LOC")
	pst, ok := ps.(*LOC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  LRL returns the first LRL segment within the message, or nil if there isn't one.
func (m *Message) LRL() (*LRL, error) {
	ps, err := m.Parse("LRL")
	pst, ok := ps.(*LRL)
	if ok {
		return pst, err
	}
	return nil, err
}

//  MFA returns the first MFA segment within the message, or nil if there isn't one.
func (m *Message) MFA() (*MFA, error) {
	ps, err := m.Parse("MFA")
	pst, ok := ps.(*MFA)
	if ok {
		return pst, err
	}
	return nil, err
}

//  MFE returns the first MFE segment within the message, or nil if there isn't one.
func (m *Message) MFE() (*MFE, error) {
	ps, err := m.Parse("MFE")
	pst, ok := ps.(*MFE)
	if ok {
		return pst, err
	}
	return nil, err
}

//  MFI returns the first MFI segment within the message, or nil if there isn't one.
func (m *Message) MFI() (*MFI, error) {
	ps, err := m.Parse("MFI")
	pst, ok := ps.(*MFI)
	if ok {
		return pst, err
	}
	return nil, err
}

//  MRG returns the first MRG segment within the message, or nil if there isn't one.
func (m *Message) MRG() (*MRG, error) {
	ps, err := m.Parse("MRG")
	pst, ok := ps.(*MRG)
	if ok {
		return pst, err
	}
	return nil, err
}

//  MSA returns the first MSA segment within the message, or nil if there isn't one.
func (m *Message) MSA() (*MSA, error) {
	ps, err := m.Parse("MSA")
	pst, ok := ps.(*MSA)
	if ok {
		return pst, err
	}
	return nil, err
}

//  MSH returns the first MSH segment within the message, or nil if there isn't one.
func (m *Message) MSH() (*MSH, error) {
	ps, err := m.Parse("MSH")
	pst, ok := ps.(*MSH)
	if ok {
		return pst, err
	}
	return nil, err
}

//  NCK returns the first NCK segment within the message, or nil if there isn't one.
func (m *Message) NCK() (*NCK, error) {
	ps, err := m.Parse("NCK")
	pst, ok := ps.(*NCK)
	if ok {
		return pst, err
	}
	return nil, err
}

//  NDS returns the first NDS segment within the message, or nil if there isn't one.
func (m *Message) NDS() (*NDS, error) {
	ps, err := m.Parse("NDS")
	pst, ok := ps.(*NDS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  NK1 returns the first NK1 segment within the message, or nil if there isn't one.
func (m *Message) NK1() (*NK1, error) {
	ps, err := m.Parse("NK1")
	pst, ok := ps.(*NK1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  NPU returns the first NPU segment within the message, or nil if there isn't one.
func (m *Message) NPU() (*NPU, error) {
	ps, err := m.Parse("NPU")
	pst, ok := ps.(*NPU)
	if ok {
		return pst, err
	}
	return nil, err
}

//  NSC returns the first NSC segment within the message, or nil if there isn't one.
func (m *Message) NSC() (*NSC, error) {
	ps, err := m.Parse("NSC")
	pst, ok := ps.(*NSC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  NST returns the first NST segment within the message, or nil if there isn't one.
func (m *Message) NST() (*NST, error) {
	ps, err := m.Parse("NST")
	pst, ok := ps.(*NST)
	if ok {
		return pst, err
	}
	return nil, err
}

//  NTE returns the first NTE segment within the message, or nil if there isn't one.
func (m *Message) NTE() (*NTE, error) {
	ps, err := m.Parse("NTE")
	pst, ok := ps.(*NTE)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OBR returns the first OBR segment within the message, or nil if there isn't one.
func (m *Message) OBR() (*OBR, error) {
	ps, err := m.Parse("OBR")
	pst, ok := ps.(*OBR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OBX returns the first OBX segment within the message, or nil if there isn't one.
func (m *Message) OBX() (*OBX, error) {
	ps, err := m.Parse("OBX")
	pst, ok := ps.(*OBX)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ODS returns the first ODS segment within the message, or nil if there isn't one.
func (m *Message) ODS() (*ODS, error) {
	ps, err := m.Parse("ODS")
	pst, ok := ps.(*ODS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ODT returns the first ODT segment within the message, or nil if there isn't one.
func (m *Message) ODT() (*ODT, error) {
	ps, err := m.Parse("ODT")
	pst, ok := ps.(*ODT)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OM1 returns the first OM1 segment within the message, or nil if there isn't one.
func (m *Message) OM1() (*OM1, error) {
	ps, err := m.Parse("OM1")
	pst, ok := ps.(*OM1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OM2 returns the first OM2 segment within the message, or nil if there isn't one.
func (m *Message) OM2() (*OM2, error) {
	ps, err := m.Parse("OM2")
	pst, ok := ps.(*OM2)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OM3 returns the first OM3 segment within the message, or nil if there isn't one.
func (m *Message) OM3() (*OM3, error) {
	ps, err := m.Parse("OM3")
	pst, ok := ps.(*OM3)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OM4 returns the first OM4 segment within the message, or nil if there isn't one.
func (m *Message) OM4() (*OM4, error) {
	ps, err := m.Parse("OM4")
	pst, ok := ps.(*OM4)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OM5 returns the first OM5 segment within the message, or nil if there isn't one.
func (m *Message) OM5() (*OM5, error) {
	ps, err := m.Parse("OM5")
	pst, ok := ps.(*OM5)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OM6 returns the first OM6 segment within the message, or nil if there isn't one.
func (m *Message) OM6() (*OM6, error) {
	ps, err := m.Parse("OM6")
	pst, ok := ps.(*OM6)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OM7 returns the first OM7 segment within the message, or nil if there isn't one.
func (m *Message) OM7() (*OM7, error) {
	ps, err := m.Parse("OM7")
	pst, ok := ps.(*OM7)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ORC returns the first ORC segment within the message, or nil if there isn't one.
func (m *Message) ORC() (*ORC, error) {
	ps, err := m.Parse("ORC")
	pst, ok := ps.(*ORC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ORG returns the first ORG segment within the message, or nil if there isn't one.
func (m *Message) ORG() (*ORG, error) {
	ps, err := m.Parse("ORG")
	pst, ok := ps.(*ORG)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ORO returns the first ORO segment within the message, or nil if there isn't one.
func (m *Message) ORO() (*ORO, error) {
	ps, err := m.Parse("ORO")
	pst, ok := ps.(*ORO)
	if ok {
		return pst, err
	}
	return nil, err
}

//  OVR returns the first OVR segment within the message, or nil if there isn't one.
func (m *Message) OVR() (*OVR, error) {
	ps, err := m.Parse("OVR")
	pst, ok := ps.(*OVR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PCR returns the first PCR segment within the message, or nil if there isn't one.
func (m *Message) PCR() (*PCR, error) {
	ps, err := m.Parse("PCR")
	pst, ok := ps.(*PCR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PD1 returns the first PD1 segment within the message, or nil if there isn't one.
func (m *Message) PD1() (*PD1, error) {
	ps, err := m.Parse("PD1")
	pst, ok := ps.(*PD1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PDA returns the first PDA segment within the message, or nil if there isn't one.
func (m *Message) PDA() (*PDA, error) {
	ps, err := m.Parse("PDA")
	pst, ok := ps.(*PDA)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PDC returns the first PDC segment within the message, or nil if there isn't one.
func (m *Message) PDC() (*PDC, error) {
	ps, err := m.Parse("PDC")
	pst, ok := ps.(*PDC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PEO returns the first PEO segment within the message, or nil if there isn't one.
func (m *Message) PEO() (*PEO, error) {
	ps, err := m.Parse("PEO")
	pst, ok := ps.(*PEO)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PES returns the first PES segment within the message, or nil if there isn't one.
func (m *Message) PES() (*PES, error) {
	ps, err := m.Parse("PES")
	pst, ok := ps.(*PES)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PID returns the first PID segment within the message, or nil if there isn't one.
func (m *Message) PID() (*PID, error) {
	ps, err := m.Parse("PID")
	pst, ok := ps.(*PID)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PR1 returns the first PR1 segment within the message, or nil if there isn't one.
func (m *Message) PR1() (*PR1, error) {
	ps, err := m.Parse("PR1")
	pst, ok := ps.(*PR1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PRA returns the first PRA segment within the message, or nil if there isn't one.
func (m *Message) PRA() (*PRA, error) {
	ps, err := m.Parse("PRA")
	pst, ok := ps.(*PRA)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PRB returns the first PRB segment within the message, or nil if there isn't one.
func (m *Message) PRB() (*PRB, error) {
	ps, err := m.Parse("PRB")
	pst, ok := ps.(*PRB)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PRC returns the first PRC segment within the message, or nil if there isn't one.
func (m *Message) PRC() (*PRC, error) {
	ps, err := m.Parse("PRC")
	pst, ok := ps.(*PRC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PRD returns the first PRD segment within the message, or nil if there isn't one.
func (m *Message) PRD() (*PRD, error) {
	ps, err := m.Parse("PRD")
	pst, ok := ps.(*PRD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PSH returns the first PSH segment within the message, or nil if there isn't one.
func (m *Message) PSH() (*PSH, error) {
	ps, err := m.Parse("PSH")
	pst, ok := ps.(*PSH)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PTH returns the first PTH segment within the message, or nil if there isn't one.
func (m *Message) PTH() (*PTH, error) {
	ps, err := m.Parse("PTH")
	pst, ok := ps.(*PTH)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PV1 returns the first PV1 segment within the message, or nil if there isn't one.
func (m *Message) PV1() (*PV1, error) {
	ps, err := m.Parse("PV1")
	pst, ok := ps.(*PV1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  PV2 returns the first PV2 segment within the message, or nil if there isn't one.
func (m *Message) PV2() (*PV2, error) {
	ps, err := m.Parse("PV2")
	pst, ok := ps.(*PV2)
	if ok {
		return pst, err
	}
	return nil, err
}

//  QAK returns the first QAK segment within the message, or nil if there isn't one.
func (m *Message) QAK() (*QAK, error) {
	ps, err := m.Parse("QAK")
	pst, ok := ps.(*QAK)
	if ok {
		return pst, err
	}
	return nil, err
}

//  QID returns the first QID segment within the message, or nil if there isn't one.
func (m *Message) QID() (*QID, error) {
	ps, err := m.Parse("QID")
	pst, ok := ps.(*QID)
	if ok {
		return pst, err
	}
	return nil, err
}

//  QPD returns the first QPD segment within the message, or nil if there isn't one.
func (m *Message) QPD() (*QPD, error) {
	ps, err := m.Parse("QPD")
	pst, ok := ps.(*QPD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  QRD returns the first QRD segment within the message, or nil if there isn't one.
func (m *Message) QRD() (*QRD, error) {
	ps, err := m.Parse("QRD")
	pst, ok := ps.(*QRD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  QRF returns the first QRF segment within the message, or nil if there isn't one.
func (m *Message) QRF() (*QRF, error) {
	ps, err := m.Parse("QRF")
	pst, ok := ps.(*QRF)
	if ok {
		return pst, err
	}
	return nil, err
}

//  QRI returns the first QRI segment within the message, or nil if there isn't one.
func (m *Message) QRI() (*QRI, error) {
	ps, err := m.Parse("QRI")
	pst, ok := ps.(*QRI)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RCP returns the first RCP segment within the message, or nil if there isn't one.
func (m *Message) RCP() (*RCP, error) {
	ps, err := m.Parse("RCP")
	pst, ok := ps.(*RCP)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RDF returns the first RDF segment within the message, or nil if there isn't one.
func (m *Message) RDF() (*RDF, error) {
	ps, err := m.Parse("RDF")
	pst, ok := ps.(*RDF)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RDT returns the first RDT segment within the message, or nil if there isn't one.
func (m *Message) RDT() (*RDT, error) {
	ps, err := m.Parse("RDT")
	pst, ok := ps.(*RDT)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RF1 returns the first RF1 segment within the message, or nil if there isn't one.
func (m *Message) RF1() (*RF1, error) {
	ps, err := m.Parse("RF1")
	pst, ok := ps.(*RF1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RGS returns the first RGS segment within the message, or nil if there isn't one.
func (m *Message) RGS() (*RGS, error) {
	ps, err := m.Parse("RGS")
	pst, ok := ps.(*RGS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RMI returns the first RMI segment within the message, or nil if there isn't one.
func (m *Message) RMI() (*RMI, error) {
	ps, err := m.Parse("RMI")
	pst, ok := ps.(*RMI)
	if ok {
		return pst, err
	}
	return nil, err
}

//  ROL returns the first ROL segment within the message, or nil if there isn't one.
func (m *Message) ROL() (*ROL, error) {
	ps, err := m.Parse("ROL")
	pst, ok := ps.(*ROL)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RQ1 returns the first RQ1 segment within the message, or nil if there isn't one.
func (m *Message) RQ1() (*RQ1, error) {
	ps, err := m.Parse("RQ1")
	pst, ok := ps.(*RQ1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RQD returns the first RQD segment within the message, or nil if there isn't one.
func (m *Message) RQD() (*RQD, error) {
	ps, err := m.Parse("RQD")
	pst, ok := ps.(*RQD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RX1 returns the first RX1 segment within the message, or nil if there isn't one.
func (m *Message) RX1() (*RX1, error) {
	ps, err := m.Parse("RX1")
	pst, ok := ps.(*RX1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RXA returns the first RXA segment within the message, or nil if there isn't one.
func (m *Message) RXA() (*RXA, error) {
	ps, err := m.Parse("RXA")
	pst, ok := ps.(*RXA)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RXC returns the first RXC segment within the message, or nil if there isn't one.
func (m *Message) RXC() (*RXC, error) {
	ps, err := m.Parse("RXC")
	pst, ok := ps.(*RXC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RXD returns the first RXD segment within the message, or nil if there isn't one.
func (m *Message) RXD() (*RXD, error) {
	ps, err := m.Parse("RXD")
	pst, ok := ps.(*RXD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RXE returns the first RXE segment within the message, or nil if there isn't one.
func (m *Message) RXE() (*RXE, error) {
	ps, err := m.Parse("RXE")
	pst, ok := ps.(*RXE)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RXG returns the first RXG segment within the message, or nil if there isn't one.
func (m *Message) RXG() (*RXG, error) {
	ps, err := m.Parse("RXG")
	pst, ok := ps.(*RXG)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RXO returns the first RXO segment within the message, or nil if there isn't one.
func (m *Message) RXO() (*RXO, error) {
	ps, err := m.Parse("RXO")
	pst, ok := ps.(*RXO)
	if ok {
		return pst, err
	}
	return nil, err
}

//  RXR returns the first RXR segment within the message, or nil if there isn't one.
func (m *Message) RXR() (*RXR, error) {
	ps, err := m.Parse("RXR")
	pst, ok := ps.(*RXR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  SAC returns the first SAC segment within the message, or nil if there isn't one.
func (m *Message) SAC() (*SAC, error) {
	ps, err := m.Parse("SAC")
	pst, ok := ps.(*SAC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  SCH returns the first SCH segment within the message, or nil if there isn't one.
func (m *Message) SCH() (*SCH, error) {
	ps, err := m.Parse("SCH")
	pst, ok := ps.(*SCH)
	if ok {
		return pst, err
	}
	return nil, err
}

//  SFT returns the first SFT segment within the message, or nil if there isn't one.
func (m *Message) SFT() (*SFT, error) {
	ps, err := m.Parse("SFT")
	pst, ok := ps.(*SFT)
	if ok {
		return pst, err
	}
	return nil, err
}

//  SID returns the first SID segment within the message, or nil if there isn't one.
func (m *Message) SID() (*SID, error) {
	ps, err := m.Parse("SID")
	pst, ok := ps.(*SID)
	if ok {
		return pst, err
	}
	return nil, err
}

//  SPM returns the first SPM segment within the message, or nil if there isn't one.
func (m *Message) SPM() (*SPM, error) {
	ps, err := m.Parse("SPM")
	pst, ok := ps.(*SPM)
	if ok {
		return pst, err
	}
	return nil, err
}

//  SPR returns the first SPR segment within the message, or nil if there isn't one.
func (m *Message) SPR() (*SPR, error) {
	ps, err := m.Parse("SPR")
	pst, ok := ps.(*SPR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  STF returns the first STF segment within the message, or nil if there isn't one.
func (m *Message) STF() (*STF, error) {
	ps, err := m.Parse("STF")
	pst, ok := ps.(*STF)
	if ok {
		return pst, err
	}
	return nil, err
}

//  TCC returns the first TCC segment within the message, or nil if there isn't one.
func (m *Message) TCC() (*TCC, error) {
	ps, err := m.Parse("TCC")
	pst, ok := ps.(*TCC)
	if ok {
		return pst, err
	}
	return nil, err
}

//  TCD returns the first TCD segment within the message, or nil if there isn't one.
func (m *Message) TCD() (*TCD, error) {
	ps, err := m.Parse("TCD")
	pst, ok := ps.(*TCD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  TQ1 returns the first TQ1 segment within the message, or nil if there isn't one.
func (m *Message) TQ1() (*TQ1, error) {
	ps, err := m.Parse("TQ1")
	pst, ok := ps.(*TQ1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  TQ2 returns the first TQ2 segment within the message, or nil if there isn't one.
func (m *Message) TQ2() (*TQ2, error) {
	ps, err := m.Parse("TQ2")
	pst, ok := ps.(*TQ2)
	if ok {
		return pst, err
	}
	return nil, err
}

//  TXA returns the first TXA segment within the message, or nil if there isn't one.
func (m *Message) TXA() (*TXA, error) {
	ps, err := m.Parse("TXA")
	pst, ok := ps.(*TXA)
	if ok {
		return pst, err
	}
	return nil, err
}

//  UB1 returns the first UB1 segment within the message, or nil if there isn't one.
func (m *Message) UB1() (*UB1, error) {
	ps, err := m.Parse("UB1")
	pst, ok := ps.(*UB1)
	if ok {
		return pst, err
	}
	return nil, err
}

//  UB2 returns the first UB2 segment within the message, or nil if there isn't one.
func (m *Message) UB2() (*UB2, error) {
	ps, err := m.Parse("UB2")
	pst, ok := ps.(*UB2)
	if ok {
		return pst, err
	}
	return nil, err
}

//  URD returns the first URD segment within the message, or nil if there isn't one.
func (m *Message) URD() (*URD, error) {
	ps, err := m.Parse("URD")
	pst, ok := ps.(*URD)
	if ok {
		return pst, err
	}
	return nil, err
}

//  URS returns the first URS segment within the message, or nil if there isn't one.
func (m *Message) URS() (*URS, error) {
	ps, err := m.Parse("URS")
	pst, ok := ps.(*URS)
	if ok {
		return pst, err
	}
	return nil, err
}

//  VAR returns the first VAR segment within the message, or nil if there isn't one.
func (m *Message) VAR() (*VAR, error) {
	ps, err := m.Parse("VAR")
	pst, ok := ps.(*VAR)
	if ok {
		return pst, err
	}
	return nil, err
}

//  VTQ returns the first VTQ segment within the message, or nil if there isn't one.
func (m *Message) VTQ() (*VTQ, error) {
	ps, err := m.Parse("VTQ")
	pst, ok := ps.(*VTQ)
	if ok {
		return pst, err
	}
	return nil, err
}

//  AllABS returns a slice containing all ABS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllABS() ([]*ABS, error) {
	pss, err := m.ParseAll("ABS")
	return pss.([]*ABS), err
}

//  AllACC returns a slice containing all ACC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllACC() ([]*ACC, error) {
	pss, err := m.ParseAll("ACC")
	return pss.([]*ACC), err
}

//  AllADD returns a slice containing all ADD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllADD() ([]*ADD, error) {
	pss, err := m.ParseAll("ADD")
	return pss.([]*ADD), err
}

//  AllAFF returns a slice containing all AFF segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllAFF() ([]*AFF, error) {
	pss, err := m.ParseAll("AFF")
	return pss.([]*AFF), err
}

//  AllAIG returns a slice containing all AIG segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllAIG() ([]*AIG, error) {
	pss, err := m.ParseAll("AIG")
	return pss.([]*AIG), err
}

//  AllAIL returns a slice containing all AIL segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllAIL() ([]*AIL, error) {
	pss, err := m.ParseAll("AIL")
	return pss.([]*AIL), err
}

//  AllAIP returns a slice containing all AIP segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllAIP() ([]*AIP, error) {
	pss, err := m.ParseAll("AIP")
	return pss.([]*AIP), err
}

//  AllAIS returns a slice containing all AIS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllAIS() ([]*AIS, error) {
	pss, err := m.ParseAll("AIS")
	return pss.([]*AIS), err
}

//  AllAL1 returns a slice containing all AL1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllAL1() ([]*AL1, error) {
	pss, err := m.ParseAll("AL1")
	return pss.([]*AL1), err
}

//  AllAPR returns a slice containing all APR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllAPR() ([]*APR, error) {
	pss, err := m.ParseAll("APR")
	return pss.([]*APR), err
}

//  AllARQ returns a slice containing all ARQ segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllARQ() ([]*ARQ, error) {
	pss, err := m.ParseAll("ARQ")
	return pss.([]*ARQ), err
}

//  AllAUT returns a slice containing all AUT segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllAUT() ([]*AUT, error) {
	pss, err := m.ParseAll("AUT")
	return pss.([]*AUT), err
}

//  AllBHS returns a slice containing all BHS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllBHS() ([]*BHS, error) {
	pss, err := m.ParseAll("BHS")
	return pss.([]*BHS), err
}

//  AllBLC returns a slice containing all BLC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllBLC() ([]*BLC, error) {
	pss, err := m.ParseAll("BLC")
	return pss.([]*BLC), err
}

//  AllBLG returns a slice containing all BLG segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllBLG() ([]*BLG, error) {
	pss, err := m.ParseAll("BLG")
	return pss.([]*BLG), err
}

//  AllBPO returns a slice containing all BPO segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllBPO() ([]*BPO, error) {
	pss, err := m.ParseAll("BPO")
	return pss.([]*BPO), err
}

//  AllBPX returns a slice containing all BPX segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllBPX() ([]*BPX, error) {
	pss, err := m.ParseAll("BPX")
	return pss.([]*BPX), err
}

//  AllBTS returns a slice containing all BTS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllBTS() ([]*BTS, error) {
	pss, err := m.ParseAll("BTS")
	return pss.([]*BTS), err
}

//  AllBTX returns a slice containing all BTX segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllBTX() ([]*BTX, error) {
	pss, err := m.ParseAll("BTX")
	return pss.([]*BTX), err
}

//  AllCDM returns a slice containing all CDM segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCDM() ([]*CDM, error) {
	pss, err := m.ParseAll("CDM")
	return pss.([]*CDM), err
}

//  AllCER returns a slice containing all CER segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCER() ([]*CER, error) {
	pss, err := m.ParseAll("CER")
	return pss.([]*CER), err
}

//  AllCM0 returns a slice containing all CM0 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCM0() ([]*CM0, error) {
	pss, err := m.ParseAll("CM0")
	return pss.([]*CM0), err
}

//  AllCM1 returns a slice containing all CM1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCM1() ([]*CM1, error) {
	pss, err := m.ParseAll("CM1")
	return pss.([]*CM1), err
}

//  AllCM2 returns a slice containing all CM2 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCM2() ([]*CM2, error) {
	pss, err := m.ParseAll("CM2")
	return pss.([]*CM2), err
}

//  AllCNS returns a slice containing all CNS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCNS() ([]*CNS, error) {
	pss, err := m.ParseAll("CNS")
	return pss.([]*CNS), err
}

//  AllCON returns a slice containing all CON segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCON() ([]*CON, error) {
	pss, err := m.ParseAll("CON")
	return pss.([]*CON), err
}

//  AllCSP returns a slice containing all CSP segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCSP() ([]*CSP, error) {
	pss, err := m.ParseAll("CSP")
	return pss.([]*CSP), err
}

//  AllCSR returns a slice containing all CSR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCSR() ([]*CSR, error) {
	pss, err := m.ParseAll("CSR")
	return pss.([]*CSR), err
}

//  AllCSS returns a slice containing all CSS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCSS() ([]*CSS, error) {
	pss, err := m.ParseAll("CSS")
	return pss.([]*CSS), err
}

//  AllCTD returns a slice containing all CTD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCTD() ([]*CTD, error) {
	pss, err := m.ParseAll("CTD")
	return pss.([]*CTD), err
}

//  AllCTI returns a slice containing all CTI segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllCTI() ([]*CTI, error) {
	pss, err := m.ParseAll("CTI")
	return pss.([]*CTI), err
}

//  AllDB1 returns a slice containing all DB1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllDB1() ([]*DB1, error) {
	pss, err := m.ParseAll("DB1")
	return pss.([]*DB1), err
}

//  AllDG1 returns a slice containing all DG1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllDG1() ([]*DG1, error) {
	pss, err := m.ParseAll("DG1")
	return pss.([]*DG1), err
}

//  AllDRG returns a slice containing all DRG segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllDRG() ([]*DRG, error) {
	pss, err := m.ParseAll("DRG")
	return pss.([]*DRG), err
}

//  AllDSC returns a slice containing all DSC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllDSC() ([]*DSC, error) {
	pss, err := m.ParseAll("DSC")
	return pss.([]*DSC), err
}

//  AllDSP returns a slice containing all DSP segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllDSP() ([]*DSP, error) {
	pss, err := m.ParseAll("DSP")
	return pss.([]*DSP), err
}

//  AllECD returns a slice containing all ECD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllECD() ([]*ECD, error) {
	pss, err := m.ParseAll("ECD")
	return pss.([]*ECD), err
}

//  AllECR returns a slice containing all ECR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllECR() ([]*ECR, error) {
	pss, err := m.ParseAll("ECR")
	return pss.([]*ECR), err
}

//  AllEDU returns a slice containing all EDU segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllEDU() ([]*EDU, error) {
	pss, err := m.ParseAll("EDU")
	return pss.([]*EDU), err
}

//  AllEQL returns a slice containing all EQL segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllEQL() ([]*EQL, error) {
	pss, err := m.ParseAll("EQL")
	return pss.([]*EQL), err
}

//  AllEQP returns a slice containing all EQP segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllEQP() ([]*EQP, error) {
	pss, err := m.ParseAll("EQP")
	return pss.([]*EQP), err
}

//  AllEQU returns a slice containing all EQU segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllEQU() ([]*EQU, error) {
	pss, err := m.ParseAll("EQU")
	return pss.([]*EQU), err
}

//  AllERQ returns a slice containing all ERQ segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllERQ() ([]*ERQ, error) {
	pss, err := m.ParseAll("ERQ")
	return pss.([]*ERQ), err
}

//  AllERR returns a slice containing all ERR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllERR() ([]*ERR, error) {
	pss, err := m.ParseAll("ERR")
	return pss.([]*ERR), err
}

//  AllEVN returns a slice containing all EVN segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllEVN() ([]*EVN, error) {
	pss, err := m.ParseAll("EVN")
	return pss.([]*EVN), err
}

//  AllFAC returns a slice containing all FAC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllFAC() ([]*FAC, error) {
	pss, err := m.ParseAll("FAC")
	return pss.([]*FAC), err
}

//  AllFHS returns a slice containing all FHS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllFHS() ([]*FHS, error) {
	pss, err := m.ParseAll("FHS")
	return pss.([]*FHS), err
}

//  AllFT1 returns a slice containing all FT1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllFT1() ([]*FT1, error) {
	pss, err := m.ParseAll("FT1")
	return pss.([]*FT1), err
}

//  AllFTS returns a slice containing all FTS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllFTS() ([]*FTS, error) {
	pss, err := m.ParseAll("FTS")
	return pss.([]*FTS), err
}

//  AllGOL returns a slice containing all GOL segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllGOL() ([]*GOL, error) {
	pss, err := m.ParseAll("GOL")
	return pss.([]*GOL), err
}

//  AllGP1 returns a slice containing all GP1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllGP1() ([]*GP1, error) {
	pss, err := m.ParseAll("GP1")
	return pss.([]*GP1), err
}

//  AllGP2 returns a slice containing all GP2 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllGP2() ([]*GP2, error) {
	pss, err := m.ParseAll("GP2")
	return pss.([]*GP2), err
}

//  AllGT1 returns a slice containing all GT1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllGT1() ([]*GT1, error) {
	pss, err := m.ParseAll("GT1")
	return pss.([]*GT1), err
}

//  AllIAM returns a slice containing all IAM segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllIAM() ([]*IAM, error) {
	pss, err := m.ParseAll("IAM")
	return pss.([]*IAM), err
}

//  AllIIM returns a slice containing all IIM segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllIIM() ([]*IIM, error) {
	pss, err := m.ParseAll("IIM")
	return pss.([]*IIM), err
}

//  AllIN1 returns a slice containing all IN1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllIN1() ([]*IN1, error) {
	pss, err := m.ParseAll("IN1")
	return pss.([]*IN1), err
}

//  AllIN2 returns a slice containing all IN2 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllIN2() ([]*IN2, error) {
	pss, err := m.ParseAll("IN2")
	return pss.([]*IN2), err
}

//  AllIN3 returns a slice containing all IN3 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllIN3() ([]*IN3, error) {
	pss, err := m.ParseAll("IN3")
	return pss.([]*IN3), err
}

//  AllINV returns a slice containing all INV segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllINV() ([]*INV, error) {
	pss, err := m.ParseAll("INV")
	return pss.([]*INV), err
}

//  AllIPC returns a slice containing all IPC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllIPC() ([]*IPC, error) {
	pss, err := m.ParseAll("IPC")
	return pss.([]*IPC), err
}

//  AllISD returns a slice containing all ISD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllISD() ([]*ISD, error) {
	pss, err := m.ParseAll("ISD")
	return pss.([]*ISD), err
}

//  AllLAN returns a slice containing all LAN segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllLAN() ([]*LAN, error) {
	pss, err := m.ParseAll("LAN")
	return pss.([]*LAN), err
}

//  AllLCC returns a slice containing all LCC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllLCC() ([]*LCC, error) {
	pss, err := m.ParseAll("LCC")
	return pss.([]*LCC), err
}

//  AllLCH returns a slice containing all LCH segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllLCH() ([]*LCH, error) {
	pss, err := m.ParseAll("LCH")
	return pss.([]*LCH), err
}

//  AllLDP returns a slice containing all LDP segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllLDP() ([]*LDP, error) {
	pss, err := m.ParseAll("LDP")
	return pss.([]*LDP), err
}

//  AllLOC returns a slice containing all LOC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllLOC() ([]*LOC, error) {
	pss, err := m.ParseAll("LOC")
	return pss.([]*LOC), err
}

//  AllLRL returns a slice containing all LRL segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllLRL() ([]*LRL, error) {
	pss, err := m.ParseAll("LRL")
	return pss.([]*LRL), err
}

//  AllMFA returns a slice containing all MFA segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllMFA() ([]*MFA, error) {
	pss, err := m.ParseAll("MFA")
	return pss.([]*MFA), err
}

//  AllMFE returns a slice containing all MFE segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllMFE() ([]*MFE, error) {
	pss, err := m.ParseAll("MFE")
	return pss.([]*MFE), err
}

//  AllMFI returns a slice containing all MFI segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllMFI() ([]*MFI, error) {
	pss, err := m.ParseAll("MFI")
	return pss.([]*MFI), err
}

//  AllMRG returns a slice containing all MRG segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllMRG() ([]*MRG, error) {
	pss, err := m.ParseAll("MRG")
	return pss.([]*MRG), err
}

//  AllMSA returns a slice containing all MSA segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllMSA() ([]*MSA, error) {
	pss, err := m.ParseAll("MSA")
	return pss.([]*MSA), err
}

//  AllMSH returns a slice containing all MSH segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllMSH() ([]*MSH, error) {
	pss, err := m.ParseAll("MSH")
	return pss.([]*MSH), err
}

//  AllNCK returns a slice containing all NCK segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllNCK() ([]*NCK, error) {
	pss, err := m.ParseAll("NCK")
	return pss.([]*NCK), err
}

//  AllNDS returns a slice containing all NDS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllNDS() ([]*NDS, error) {
	pss, err := m.ParseAll("NDS")
	return pss.([]*NDS), err
}

//  AllNK1 returns a slice containing all NK1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllNK1() ([]*NK1, error) {
	pss, err := m.ParseAll("NK1")
	return pss.([]*NK1), err
}

//  AllNPU returns a slice containing all NPU segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllNPU() ([]*NPU, error) {
	pss, err := m.ParseAll("NPU")
	return pss.([]*NPU), err
}

//  AllNSC returns a slice containing all NSC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllNSC() ([]*NSC, error) {
	pss, err := m.ParseAll("NSC")
	return pss.([]*NSC), err
}

//  AllNST returns a slice containing all NST segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllNST() ([]*NST, error) {
	pss, err := m.ParseAll("NST")
	return pss.([]*NST), err
}

//  AllNTE returns a slice containing all NTE segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllNTE() ([]*NTE, error) {
	pss, err := m.ParseAll("NTE")
	return pss.([]*NTE), err
}

//  AllOBR returns a slice containing all OBR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOBR() ([]*OBR, error) {
	pss, err := m.ParseAll("OBR")
	return pss.([]*OBR), err
}

//  AllOBX returns a slice containing all OBX segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOBX() ([]*OBX, error) {
	pss, err := m.ParseAll("OBX")
	return pss.([]*OBX), err
}

//  AllODS returns a slice containing all ODS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllODS() ([]*ODS, error) {
	pss, err := m.ParseAll("ODS")
	return pss.([]*ODS), err
}

//  AllODT returns a slice containing all ODT segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllODT() ([]*ODT, error) {
	pss, err := m.ParseAll("ODT")
	return pss.([]*ODT), err
}

//  AllOM1 returns a slice containing all OM1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOM1() ([]*OM1, error) {
	pss, err := m.ParseAll("OM1")
	return pss.([]*OM1), err
}

//  AllOM2 returns a slice containing all OM2 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOM2() ([]*OM2, error) {
	pss, err := m.ParseAll("OM2")
	return pss.([]*OM2), err
}

//  AllOM3 returns a slice containing all OM3 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOM3() ([]*OM3, error) {
	pss, err := m.ParseAll("OM3")
	return pss.([]*OM3), err
}

//  AllOM4 returns a slice containing all OM4 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOM4() ([]*OM4, error) {
	pss, err := m.ParseAll("OM4")
	return pss.([]*OM4), err
}

//  AllOM5 returns a slice containing all OM5 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOM5() ([]*OM5, error) {
	pss, err := m.ParseAll("OM5")
	return pss.([]*OM5), err
}

//  AllOM6 returns a slice containing all OM6 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOM6() ([]*OM6, error) {
	pss, err := m.ParseAll("OM6")
	return pss.([]*OM6), err
}

//  AllOM7 returns a slice containing all OM7 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOM7() ([]*OM7, error) {
	pss, err := m.ParseAll("OM7")
	return pss.([]*OM7), err
}

//  AllORC returns a slice containing all ORC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllORC() ([]*ORC, error) {
	pss, err := m.ParseAll("ORC")
	return pss.([]*ORC), err
}

//  AllORG returns a slice containing all ORG segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllORG() ([]*ORG, error) {
	pss, err := m.ParseAll("ORG")
	return pss.([]*ORG), err
}

//  AllORO returns a slice containing all ORO segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllORO() ([]*ORO, error) {
	pss, err := m.ParseAll("ORO")
	return pss.([]*ORO), err
}

//  AllOVR returns a slice containing all OVR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllOVR() ([]*OVR, error) {
	pss, err := m.ParseAll("OVR")
	return pss.([]*OVR), err
}

//  AllPCR returns a slice containing all PCR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPCR() ([]*PCR, error) {
	pss, err := m.ParseAll("PCR")
	return pss.([]*PCR), err
}

//  AllPD1 returns a slice containing all PD1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPD1() ([]*PD1, error) {
	pss, err := m.ParseAll("PD1")
	return pss.([]*PD1), err
}

//  AllPDA returns a slice containing all PDA segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPDA() ([]*PDA, error) {
	pss, err := m.ParseAll("PDA")
	return pss.([]*PDA), err
}

//  AllPDC returns a slice containing all PDC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPDC() ([]*PDC, error) {
	pss, err := m.ParseAll("PDC")
	return pss.([]*PDC), err
}

//  AllPEO returns a slice containing all PEO segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPEO() ([]*PEO, error) {
	pss, err := m.ParseAll("PEO")
	return pss.([]*PEO), err
}

//  AllPES returns a slice containing all PES segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPES() ([]*PES, error) {
	pss, err := m.ParseAll("PES")
	return pss.([]*PES), err
}

//  AllPID returns a slice containing all PID segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPID() ([]*PID, error) {
	pss, err := m.ParseAll("PID")
	return pss.([]*PID), err
}

//  AllPR1 returns a slice containing all PR1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPR1() ([]*PR1, error) {
	pss, err := m.ParseAll("PR1")
	return pss.([]*PR1), err
}

//  AllPRA returns a slice containing all PRA segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPRA() ([]*PRA, error) {
	pss, err := m.ParseAll("PRA")
	return pss.([]*PRA), err
}

//  AllPRB returns a slice containing all PRB segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPRB() ([]*PRB, error) {
	pss, err := m.ParseAll("PRB")
	return pss.([]*PRB), err
}

//  AllPRC returns a slice containing all PRC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPRC() ([]*PRC, error) {
	pss, err := m.ParseAll("PRC")
	return pss.([]*PRC), err
}

//  AllPRD returns a slice containing all PRD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPRD() ([]*PRD, error) {
	pss, err := m.ParseAll("PRD")
	return pss.([]*PRD), err
}

//  AllPSH returns a slice containing all PSH segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPSH() ([]*PSH, error) {
	pss, err := m.ParseAll("PSH")
	return pss.([]*PSH), err
}

//  AllPTH returns a slice containing all PTH segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPTH() ([]*PTH, error) {
	pss, err := m.ParseAll("PTH")
	return pss.([]*PTH), err
}

//  AllPV1 returns a slice containing all PV1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPV1() ([]*PV1, error) {
	pss, err := m.ParseAll("PV1")
	return pss.([]*PV1), err
}

//  AllPV2 returns a slice containing all PV2 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllPV2() ([]*PV2, error) {
	pss, err := m.ParseAll("PV2")
	return pss.([]*PV2), err
}

//  AllQAK returns a slice containing all QAK segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllQAK() ([]*QAK, error) {
	pss, err := m.ParseAll("QAK")
	return pss.([]*QAK), err
}

//  AllQID returns a slice containing all QID segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllQID() ([]*QID, error) {
	pss, err := m.ParseAll("QID")
	return pss.([]*QID), err
}

//  AllQPD returns a slice containing all QPD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllQPD() ([]*QPD, error) {
	pss, err := m.ParseAll("QPD")
	return pss.([]*QPD), err
}

//  AllQRD returns a slice containing all QRD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllQRD() ([]*QRD, error) {
	pss, err := m.ParseAll("QRD")
	return pss.([]*QRD), err
}

//  AllQRF returns a slice containing all QRF segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllQRF() ([]*QRF, error) {
	pss, err := m.ParseAll("QRF")
	return pss.([]*QRF), err
}

//  AllQRI returns a slice containing all QRI segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllQRI() ([]*QRI, error) {
	pss, err := m.ParseAll("QRI")
	return pss.([]*QRI), err
}

//  AllRCP returns a slice containing all RCP segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRCP() ([]*RCP, error) {
	pss, err := m.ParseAll("RCP")
	return pss.([]*RCP), err
}

//  AllRDF returns a slice containing all RDF segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRDF() ([]*RDF, error) {
	pss, err := m.ParseAll("RDF")
	return pss.([]*RDF), err
}

//  AllRDT returns a slice containing all RDT segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRDT() ([]*RDT, error) {
	pss, err := m.ParseAll("RDT")
	return pss.([]*RDT), err
}

//  AllRF1 returns a slice containing all RF1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRF1() ([]*RF1, error) {
	pss, err := m.ParseAll("RF1")
	return pss.([]*RF1), err
}

//  AllRGS returns a slice containing all RGS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRGS() ([]*RGS, error) {
	pss, err := m.ParseAll("RGS")
	return pss.([]*RGS), err
}

//  AllRMI returns a slice containing all RMI segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRMI() ([]*RMI, error) {
	pss, err := m.ParseAll("RMI")
	return pss.([]*RMI), err
}

//  AllROL returns a slice containing all ROL segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllROL() ([]*ROL, error) {
	pss, err := m.ParseAll("ROL")
	return pss.([]*ROL), err
}

//  AllRQ1 returns a slice containing all RQ1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRQ1() ([]*RQ1, error) {
	pss, err := m.ParseAll("RQ1")
	return pss.([]*RQ1), err
}

//  AllRQD returns a slice containing all RQD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRQD() ([]*RQD, error) {
	pss, err := m.ParseAll("RQD")
	return pss.([]*RQD), err
}

//  AllRX1 returns a slice containing all RX1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRX1() ([]*RX1, error) {
	pss, err := m.ParseAll("RX1")
	return pss.([]*RX1), err
}

//  AllRXA returns a slice containing all RXA segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRXA() ([]*RXA, error) {
	pss, err := m.ParseAll("RXA")
	return pss.([]*RXA), err
}

//  AllRXC returns a slice containing all RXC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRXC() ([]*RXC, error) {
	pss, err := m.ParseAll("RXC")
	return pss.([]*RXC), err
}

//  AllRXD returns a slice containing all RXD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRXD() ([]*RXD, error) {
	pss, err := m.ParseAll("RXD")
	return pss.([]*RXD), err
}

//  AllRXE returns a slice containing all RXE segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRXE() ([]*RXE, error) {
	pss, err := m.ParseAll("RXE")
	return pss.([]*RXE), err
}

//  AllRXG returns a slice containing all RXG segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRXG() ([]*RXG, error) {
	pss, err := m.ParseAll("RXG")
	return pss.([]*RXG), err
}

//  AllRXO returns a slice containing all RXO segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRXO() ([]*RXO, error) {
	pss, err := m.ParseAll("RXO")
	return pss.([]*RXO), err
}

//  AllRXR returns a slice containing all RXR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllRXR() ([]*RXR, error) {
	pss, err := m.ParseAll("RXR")
	return pss.([]*RXR), err
}

//  AllSAC returns a slice containing all SAC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllSAC() ([]*SAC, error) {
	pss, err := m.ParseAll("SAC")
	return pss.([]*SAC), err
}

//  AllSCH returns a slice containing all SCH segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllSCH() ([]*SCH, error) {
	pss, err := m.ParseAll("SCH")
	return pss.([]*SCH), err
}

//  AllSFT returns a slice containing all SFT segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllSFT() ([]*SFT, error) {
	pss, err := m.ParseAll("SFT")
	return pss.([]*SFT), err
}

//  AllSID returns a slice containing all SID segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllSID() ([]*SID, error) {
	pss, err := m.ParseAll("SID")
	return pss.([]*SID), err
}

//  AllSPM returns a slice containing all SPM segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllSPM() ([]*SPM, error) {
	pss, err := m.ParseAll("SPM")
	return pss.([]*SPM), err
}

//  AllSPR returns a slice containing all SPR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllSPR() ([]*SPR, error) {
	pss, err := m.ParseAll("SPR")
	return pss.([]*SPR), err
}

//  AllSTF returns a slice containing all STF segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllSTF() ([]*STF, error) {
	pss, err := m.ParseAll("STF")
	return pss.([]*STF), err
}

//  AllTCC returns a slice containing all TCC segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllTCC() ([]*TCC, error) {
	pss, err := m.ParseAll("TCC")
	return pss.([]*TCC), err
}

//  AllTCD returns a slice containing all TCD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllTCD() ([]*TCD, error) {
	pss, err := m.ParseAll("TCD")
	return pss.([]*TCD), err
}

//  AllTQ1 returns a slice containing all TQ1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllTQ1() ([]*TQ1, error) {
	pss, err := m.ParseAll("TQ1")
	return pss.([]*TQ1), err
}

//  AllTQ2 returns a slice containing all TQ2 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllTQ2() ([]*TQ2, error) {
	pss, err := m.ParseAll("TQ2")
	return pss.([]*TQ2), err
}

//  AllTXA returns a slice containing all TXA segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllTXA() ([]*TXA, error) {
	pss, err := m.ParseAll("TXA")
	return pss.([]*TXA), err
}

//  AllUB1 returns a slice containing all UB1 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllUB1() ([]*UB1, error) {
	pss, err := m.ParseAll("UB1")
	return pss.([]*UB1), err
}

//  AllUB2 returns a slice containing all UB2 segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllUB2() ([]*UB2, error) {
	pss, err := m.ParseAll("UB2")
	return pss.([]*UB2), err
}

//  AllURD returns a slice containing all URD segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllURD() ([]*URD, error) {
	pss, err := m.ParseAll("URD")
	return pss.([]*URD), err
}

//  AllURS returns a slice containing all URS segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllURS() ([]*URS, error) {
	pss, err := m.ParseAll("URS")
	return pss.([]*URS), err
}

//  AllVAR returns a slice containing all VAR segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllVAR() ([]*VAR, error) {
	pss, err := m.ParseAll("VAR")
	return pss.([]*VAR), err
}

//  AllVTQ returns a slice containing all VTQ segments within the message,
//  or an empty slice if there aren't any.
func (m *Message) AllVTQ() ([]*VTQ, error) {
	pss, err := m.ParseAll("VTQ")
	return pss.([]*VTQ), err
}

//  v2 API
type ACKv2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err []*ERR `json:"err,omitempty"`
}

func (m *ACKv2) MSH() *MSH {
	return m.msh
}

func (m *ACKv2) AllSFT() []*SFT {
	return m.sft
}

func (m *ACKv2) MSA() *MSA {
	return m.msa
}

func (m *ACKv2) AllERR() []*ERR {
	return m.err
}

func (m ACKv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
	}, nil
}

type ACK_N02v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	msa *MSA `json:"msa,omitempty"` // Required
}

func (m *ACK_N02v2) MSH() *MSH {
	return m.msh
}

func (m *ACK_N02v2) MSA() *MSA {
	return m.msa
}

func (m ACK_N02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
	}, nil
}

type ADR_A19v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	pid []*ADR_A19_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *ADR_A19v2) MSH() *MSH {
	return m.msh
}

func (m *ADR_A19v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADR_A19v2) MSA() *MSA {
	return m.msa
}

func (m *ADR_A19v2) ERR() *ERR {
	return m.err
}

func (m *ADR_A19v2) QAK() *QAK {
	return m.qak
}

func (m *ADR_A19v2) QRD() *QRD {
	return m.qrd
}

func (m *ADR_A19v2) QRF() *QRF {
	return m.qrf
}

func (m *ADR_A19v2) GroupByPID() []*ADR_A19_PIDv2 {
	return m.pid
}

func (m *ADR_A19v2) DSC() *DSC {
	return m.dsc
}

func (m ADR_A19v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type ADR_A19_PIDv2 struct {
	evn  *EVN                 `json:"evn,omitempty"`
	pid  *PID                 `json:"pid,omitempty"` // Required
	pd1  *PD1                 `json:"pd_1,omitempty"`
	rol1 []*ROL               `json:"rol_1,omitempty"`
	nk1  []*NK1               `json:"nk_1,omitempty"`
	pv1  *PV1                 `json:"pv_1,omitempty"` // Required
	pv2  *PV2                 `json:"pv_2,omitempty"`
	rol2 []*ROL               `json:"rol_2,omitempty"`
	db1  []*DB1               `json:"db_1,omitempty"`
	obx  []*OBX               `json:"obx,omitempty"`
	al1  []*AL1               `json:"al_1,omitempty"`
	dg1  []*DG1               `json:"dg_1,omitempty"`
	drg  *DRG                 `json:"drg,omitempty"`
	pr1  []*ADR_A19_PID_PR1v2 `json:"pr_1,omitempty"`
	gt1  []*GT1               `json:"gt_1,omitempty"`
	in1  []*ADR_A19_PID_IN1v2 `json:"in_1,omitempty"`
	acc  *ACC                 `json:"acc,omitempty"`
	ub1  *UB1                 `json:"ub_1,omitempty"`
	ub2  *UB2                 `json:"ub_2,omitempty"`
}

func (m *ADR_A19_PIDv2) EVN() *EVN {
	return m.evn
}

func (m *ADR_A19_PIDv2) PID() *PID {
	return m.pid
}

func (m *ADR_A19_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ADR_A19_PIDv2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADR_A19_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADR_A19_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *ADR_A19_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *ADR_A19_PIDv2) AllROL2() []*ROL {
	return m.rol2
}

func (m *ADR_A19_PIDv2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADR_A19_PIDv2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADR_A19_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADR_A19_PIDv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADR_A19_PIDv2) DRG() *DRG {
	return m.drg
}

func (m *ADR_A19_PIDv2) GroupByPR1() []*ADR_A19_PID_PR1v2 {
	return m.pr1
}

func (m *ADR_A19_PIDv2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADR_A19_PIDv2) GroupByIN1() []*ADR_A19_PID_IN1v2 {
	return m.in1
}

func (m *ADR_A19_PIDv2) ACC() *ACC {
	return m.acc
}

func (m *ADR_A19_PIDv2) UB1() *UB1 {
	return m.ub1
}

func (m *ADR_A19_PIDv2) UB2() *UB2 {
	return m.ub2
}

func (m ADR_A19_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"nk1":  m.nk1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obx":  m.obx,
		"al1":  m.al1,
		"dg1":  m.dg1,
		"drg":  m.drg,
		"pr1":  m.pr1,
		"gt1":  m.gt1,
		"in1":  m.in1,
		"acc":  m.acc,
		"ub1":  m.ub1,
		"ub2":  m.ub2,
	}, nil
}

type ADR_A19_PID_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADR_A19_PID_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *ADR_A19_PID_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADR_A19_PID_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type ADR_A19_PID_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADR_A19_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADR_A19_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADR_A19_PID_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *ADR_A19_PID_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADR_A19_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type ADT_A01v2 struct {
	msh  *MSH             `json:"msh,omitempty"` // Required
	sft  []*SFT           `json:"sft,omitempty"`
	evn  *EVN             `json:"evn,omitempty"` // Required
	pid  *PID             `json:"pid,omitempty"` // Required
	pd1  *PD1             `json:"pd_1,omitempty"`
	rol1 []*ROL           `json:"rol_1,omitempty"`
	nk1  []*NK1           `json:"nk_1,omitempty"`
	pv1  *PV1             `json:"pv_1,omitempty"` // Required
	pv2  *PV2             `json:"pv_2,omitempty"`
	rol2 []*ROL           `json:"rol_2,omitempty"`
	db1  []*DB1           `json:"db_1,omitempty"`
	obx  []*OBX           `json:"obx,omitempty"`
	al1  []*AL1           `json:"al_1,omitempty"`
	dg1  []*DG1           `json:"dg_1,omitempty"`
	drg  *DRG             `json:"drg,omitempty"`
	pr1  []*ADT_A01_PR1v2 `json:"pr_1,omitempty"`
	gt1  []*GT1           `json:"gt_1,omitempty"`
	in1  []*ADT_A01_IN1v2 `json:"in_1,omitempty"`
	acc  *ACC             `json:"acc,omitempty"`
	ub1  *UB1             `json:"ub_1,omitempty"`
	ub2  *UB2             `json:"ub_2,omitempty"`
	pda  *PDA             `json:"pda,omitempty"`
}

func (m *ADT_A01v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A01v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A01v2) PID() *PID {
	return m.pid
}

func (m *ADT_A01v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A01v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADT_A01v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A01v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A01v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A01v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *ADT_A01v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A01v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A01v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A01v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A01v2) DRG() *DRG {
	return m.drg
}

func (m *ADT_A01v2) GroupByPR1() []*ADT_A01_PR1v2 {
	return m.pr1
}

func (m *ADT_A01v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A01v2) GroupByIN1() []*ADT_A01_IN1v2 {
	return m.in1
}

func (m *ADT_A01v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A01v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A01v2) UB2() *UB2 {
	return m.ub2
}

func (m *ADT_A01v2) PDA() *PDA {
	return m.pda
}

func (m ADT_A01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"nk1":  m.nk1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obx":  m.obx,
		"al1":  m.al1,
		"dg1":  m.dg1,
		"drg":  m.drg,
		"pr1":  m.pr1,
		"gt1":  m.gt1,
		"in1":  m.in1,
		"acc":  m.acc,
		"ub1":  m.ub1,
		"ub2":  m.ub2,
		"pda":  m.pda,
	}, nil
}

type ADT_A01_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A01_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *ADT_A01_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A01_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type ADT_A01_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A01_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A01_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A01_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *ADT_A01_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A01_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type ADT_A02v2 struct {
	msh  *MSH   `json:"msh,omitempty"` // Required
	sft  []*SFT `json:"sft,omitempty"`
	evn  *EVN   `json:"evn,omitempty"` // Required
	pid  *PID   `json:"pid,omitempty"` // Required
	pd1  *PD1   `json:"pd_1,omitempty"`
	rol1 []*ROL `json:"rol_1,omitempty"`
	pv1  *PV1   `json:"pv_1,omitempty"` // Required
	pv2  *PV2   `json:"pv_2,omitempty"`
	rol2 []*ROL `json:"rol_2,omitempty"`
	db1  []*DB1 `json:"db_1,omitempty"`
	obx  []*OBX `json:"obx,omitempty"`
	pda  *PDA   `json:"pda,omitempty"`
}

func (m *ADT_A02v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A02v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A02v2) PID() *PID {
	return m.pid
}

func (m *ADT_A02v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A02v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADT_A02v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A02v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A02v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *ADT_A02v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A02v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A02v2) PDA() *PDA {
	return m.pda
}

func (m ADT_A02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obx":  m.obx,
		"pda":  m.pda,
	}, nil
}

type ADT_A03v2 struct {
	msh  *MSH             `json:"msh,omitempty"` // Required
	sft  []*SFT           `json:"sft,omitempty"`
	evn  *EVN             `json:"evn,omitempty"` // Required
	pid  *PID             `json:"pid,omitempty"` // Required
	pd1  *PD1             `json:"pd_1,omitempty"`
	rol1 []*ROL           `json:"rol_1,omitempty"`
	nk1  []*NK1           `json:"nk_1,omitempty"`
	pv1  *PV1             `json:"pv_1,omitempty"` // Required
	pv2  *PV2             `json:"pv_2,omitempty"`
	rol2 []*ROL           `json:"rol_2,omitempty"`
	db1  []*DB1           `json:"db_1,omitempty"`
	al1  []*AL1           `json:"al_1,omitempty"`
	dg1  []*DG1           `json:"dg_1,omitempty"`
	drg  *DRG             `json:"drg,omitempty"`
	pr1  []*ADT_A03_PR1v2 `json:"pr_1,omitempty"`
	obx  []*OBX           `json:"obx,omitempty"`
	gt1  []*GT1           `json:"gt_1,omitempty"`
	in1  []*ADT_A03_IN1v2 `json:"in_1,omitempty"`
	acc  *ACC             `json:"acc,omitempty"`
	pda  *PDA             `json:"pda,omitempty"`
}

func (m *ADT_A03v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A03v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A03v2) PID() *PID {
	return m.pid
}

func (m *ADT_A03v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A03v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADT_A03v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A03v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A03v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A03v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *ADT_A03v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A03v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A03v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A03v2) DRG() *DRG {
	return m.drg
}

func (m *ADT_A03v2) GroupByPR1() []*ADT_A03_PR1v2 {
	return m.pr1
}

func (m *ADT_A03v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A03v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A03v2) GroupByIN1() []*ADT_A03_IN1v2 {
	return m.in1
}

func (m *ADT_A03v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A03v2) PDA() *PDA {
	return m.pda
}

func (m ADT_A03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"nk1":  m.nk1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"al1":  m.al1,
		"dg1":  m.dg1,
		"drg":  m.drg,
		"pr1":  m.pr1,
		"obx":  m.obx,
		"gt1":  m.gt1,
		"in1":  m.in1,
		"acc":  m.acc,
		"pda":  m.pda,
	}, nil
}

type ADT_A03_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A03_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *ADT_A03_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A03_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type ADT_A03_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A03_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A03_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A03_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *ADT_A03_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A03_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type ADT_A04v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	obx []*OBX           `json:"obx,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	pr1 []*PR1           `json:"pr_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*ADT_A04_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	ub1 *UB1             `json:"ub_1,omitempty"`
	ub2 *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A04v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A04v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A04v2) PID() *PID {
	return m.pid
}

func (m *ADT_A04v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A04v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A04v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A04v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A04v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A04v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A04v2) AllPR1() []*PR1 {
	return m.pr1
}

func (m *ADT_A04v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A04v2) GroupByIN1() []*ADT_A04_IN1v2 {
	return m.in1
}

func (m *ADT_A04v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A04v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A04v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type ADT_A04_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ADT_A04_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A04_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A04_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ADT_A04_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type ADT_A05v2 struct {
	msh  *MSH             `json:"msh,omitempty"` // Required
	sft  []*SFT           `json:"sft,omitempty"`
	evn  *EVN             `json:"evn,omitempty"` // Required
	pid  *PID             `json:"pid,omitempty"` // Required
	pd1  *PD1             `json:"pd_1,omitempty"`
	rol1 []*ROL           `json:"rol_1,omitempty"`
	nk1  []*NK1           `json:"nk_1,omitempty"`
	pv1  *PV1             `json:"pv_1,omitempty"` // Required
	pv2  *PV2             `json:"pv_2,omitempty"`
	rol2 []*ROL           `json:"rol_2,omitempty"`
	db1  []*DB1           `json:"db_1,omitempty"`
	obx  []*OBX           `json:"obx,omitempty"`
	al1  []*AL1           `json:"al_1,omitempty"`
	dg1  []*DG1           `json:"dg_1,omitempty"`
	drg  *DRG             `json:"drg,omitempty"`
	pr1  []*ADT_A05_PR1v2 `json:"pr_1,omitempty"`
	gt1  []*GT1           `json:"gt_1,omitempty"`
	in1  []*ADT_A05_IN1v2 `json:"in_1,omitempty"`
	acc  *ACC             `json:"acc,omitempty"`
	ub1  *UB1             `json:"ub_1,omitempty"`
	ub2  *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A05v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A05v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A05v2) PID() *PID {
	return m.pid
}

func (m *ADT_A05v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A05v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADT_A05v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A05v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A05v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A05v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *ADT_A05v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A05v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A05v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A05v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A05v2) DRG() *DRG {
	return m.drg
}

func (m *ADT_A05v2) GroupByPR1() []*ADT_A05_PR1v2 {
	return m.pr1
}

func (m *ADT_A05v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A05v2) GroupByIN1() []*ADT_A05_IN1v2 {
	return m.in1
}

func (m *ADT_A05v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A05v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A05v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"nk1":  m.nk1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obx":  m.obx,
		"al1":  m.al1,
		"dg1":  m.dg1,
		"drg":  m.drg,
		"pr1":  m.pr1,
		"gt1":  m.gt1,
		"in1":  m.in1,
		"acc":  m.acc,
		"ub1":  m.ub1,
		"ub2":  m.ub2,
	}, nil
}

type ADT_A05_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A05_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *ADT_A05_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A05_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type ADT_A05_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A05_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A05_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A05_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *ADT_A05_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A05_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type ADT_A06v2 struct {
	msh  *MSH             `json:"msh,omitempty"` // Required
	sft  []*SFT           `json:"sft,omitempty"`
	evn  *EVN             `json:"evn,omitempty"` // Required
	pid  *PID             `json:"pid,omitempty"` // Required
	pd1  *PD1             `json:"pd_1,omitempty"`
	rol1 []*ROL           `json:"rol_1,omitempty"`
	mrg  *MRG             `json:"mrg,omitempty"`
	nk1  []*NK1           `json:"nk_1,omitempty"`
	pv1  *PV1             `json:"pv_1,omitempty"` // Required
	pv2  *PV2             `json:"pv_2,omitempty"`
	rol2 []*ROL           `json:"rol_2,omitempty"`
	db1  []*DB1           `json:"db_1,omitempty"`
	obx  []*OBX           `json:"obx,omitempty"`
	al1  []*AL1           `json:"al_1,omitempty"`
	dg1  []*DG1           `json:"dg_1,omitempty"`
	drg  *DRG             `json:"drg,omitempty"`
	pr1  []*ADT_A06_PR1v2 `json:"pr_1,omitempty"`
	gt1  []*GT1           `json:"gt_1,omitempty"`
	in1  []*ADT_A06_IN1v2 `json:"in_1,omitempty"`
	acc  *ACC             `json:"acc,omitempty"`
	ub1  *UB1             `json:"ub_1,omitempty"`
	ub2  *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A06v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A06v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A06v2) PID() *PID {
	return m.pid
}

func (m *ADT_A06v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A06v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADT_A06v2) MRG() *MRG {
	return m.mrg
}

func (m *ADT_A06v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A06v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A06v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A06v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *ADT_A06v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A06v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A06v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A06v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A06v2) DRG() *DRG {
	return m.drg
}

func (m *ADT_A06v2) GroupByPR1() []*ADT_A06_PR1v2 {
	return m.pr1
}

func (m *ADT_A06v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A06v2) GroupByIN1() []*ADT_A06_IN1v2 {
	return m.in1
}

func (m *ADT_A06v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A06v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A06v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"mrg":  m.mrg,
		"nk1":  m.nk1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obx":  m.obx,
		"al1":  m.al1,
		"dg1":  m.dg1,
		"drg":  m.drg,
		"pr1":  m.pr1,
		"gt1":  m.gt1,
		"in1":  m.in1,
		"acc":  m.acc,
		"ub1":  m.ub1,
		"ub2":  m.ub2,
	}, nil
}

type ADT_A06_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A06_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *ADT_A06_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A06_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type ADT_A06_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A06_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A06_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A06_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *ADT_A06_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A06_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type ADT_A07v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	mrg *MRG             `json:"mrg,omitempty"`
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	obx []*OBX           `json:"obx,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	pr1 []*PR1           `json:"pr_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*ADT_A07_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	ub1 *UB1             `json:"ub_1,omitempty"`
	ub2 *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A07v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A07v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A07v2) PID() *PID {
	return m.pid
}

func (m *ADT_A07v2) MRG() *MRG {
	return m.mrg
}

func (m *ADT_A07v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A07v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A07v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A07v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A07v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A07v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A07v2) AllPR1() []*PR1 {
	return m.pr1
}

func (m *ADT_A07v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A07v2) GroupByIN1() []*ADT_A07_IN1v2 {
	return m.in1
}

func (m *ADT_A07v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A07v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A07v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"mrg": m.mrg,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type ADT_A07_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ADT_A07_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A07_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A07_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ADT_A07_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type ADT_A08v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	obx []*OBX           `json:"obx,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	pr1 []*PR1           `json:"pr_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*ADT_A08_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	ub1 *UB1             `json:"ub_1,omitempty"`
	ub2 *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A08v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A08v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A08v2) PID() *PID {
	return m.pid
}

func (m *ADT_A08v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A08v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A08v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A08v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A08v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A08v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A08v2) AllPR1() []*PR1 {
	return m.pr1
}

func (m *ADT_A08v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A08v2) GroupByIN1() []*ADT_A08_IN1v2 {
	return m.in1
}

func (m *ADT_A08v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A08v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A08v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type ADT_A08_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ADT_A08_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A08_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A08_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ADT_A08_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type ADT_A09v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	db1 []*DB1 `json:"db_1,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
	dg1 []*DG1 `json:"dg_1,omitempty"`
}

func (m *ADT_A09v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A09v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A09v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A09v2) PID() *PID {
	return m.pid
}

func (m *ADT_A09v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A09v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A09v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A09v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A09v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A09v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m ADT_A09v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"db1": m.db1,
		"obx": m.obx,
		"dg1": m.dg1,
	}, nil
}

type ADT_A10v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
	dg1 []*DG1 `json:"dg_1,omitempty"`
}

func (m *ADT_A10v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A10v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A10v2) PID() *PID {
	return m.pid
}

func (m *ADT_A10v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A10v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A10v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A10v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m ADT_A10v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"dg1": m.dg1,
	}, nil
}

type ADT_A11v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
	dg1 []*DG1 `json:"dg_1,omitempty"`
}

func (m *ADT_A11v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A11v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A11v2) PID() *PID {
	return m.pid
}

func (m *ADT_A11v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A11v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A11v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A11v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m ADT_A11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"dg1": m.dg1,
	}, nil
}

type ADT_A12v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	db1 []*DB1 `json:"db_1,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
	dg1 *DG1   `json:"dg_1,omitempty"`
}

func (m *ADT_A12v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A12v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A12v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A12v2) PID() *PID {
	return m.pid
}

func (m *ADT_A12v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A12v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A12v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A12v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A12v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A12v2) DG1() *DG1 {
	return m.dg1
}

func (m ADT_A12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"db1": m.db1,
		"obx": m.obx,
		"dg1": m.dg1,
	}, nil
}

type ADT_A13v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	obx []*OBX           `json:"obx,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	pr1 []*PR1           `json:"pr_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*ADT_A13_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	ub1 *UB1             `json:"ub_1,omitempty"`
	ub2 *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A13v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A13v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A13v2) PID() *PID {
	return m.pid
}

func (m *ADT_A13v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A13v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A13v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A13v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A13v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A13v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A13v2) AllPR1() []*PR1 {
	return m.pr1
}

func (m *ADT_A13v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A13v2) GroupByIN1() []*ADT_A13_IN1v2 {
	return m.in1
}

func (m *ADT_A13v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A13v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A13v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A13v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type ADT_A13_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ADT_A13_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A13_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A13_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ADT_A13_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type ADT_A14v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	obx []*OBX           `json:"obx,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	pr1 []*PR1           `json:"pr_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*ADT_A14_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	ub1 *UB1             `json:"ub_1,omitempty"`
	ub2 *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A14v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A14v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A14v2) PID() *PID {
	return m.pid
}

func (m *ADT_A14v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A14v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A14v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A14v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A14v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A14v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A14v2) AllPR1() []*PR1 {
	return m.pr1
}

func (m *ADT_A14v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A14v2) GroupByIN1() []*ADT_A14_IN1v2 {
	return m.in1
}

func (m *ADT_A14v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A14v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A14v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A14v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type ADT_A14_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ADT_A14_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A14_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A14_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ADT_A14_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type ADT_A15v2 struct {
	msh  *MSH   `json:"msh,omitempty"` // Required
	sft  []*SFT `json:"sft,omitempty"`
	evn  *EVN   `json:"evn,omitempty"` // Required
	pid  *PID   `json:"pid,omitempty"` // Required
	pd1  *PD1   `json:"pd_1,omitempty"`
	rol1 []*ROL `json:"rol_1,omitempty"`
	pv1  *PV1   `json:"pv_1,omitempty"` // Required
	pv2  *PV2   `json:"pv_2,omitempty"`
	rol2 []*ROL `json:"rol_2,omitempty"`
	db1  []*DB1 `json:"db_1,omitempty"`
	obx  []*OBX `json:"obx,omitempty"`
	dg1  []*DG1 `json:"dg_1,omitempty"`
}

func (m *ADT_A15v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A15v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A15v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A15v2) PID() *PID {
	return m.pid
}

func (m *ADT_A15v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A15v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADT_A15v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A15v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A15v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *ADT_A15v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A15v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A15v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m ADT_A15v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obx":  m.obx,
		"dg1":  m.dg1,
	}, nil
}

type ADT_A16v2 struct {
	msh  *MSH             `json:"msh,omitempty"` // Required
	sft  []*SFT           `json:"sft,omitempty"`
	evn  *EVN             `json:"evn,omitempty"` // Required
	pid  *PID             `json:"pid,omitempty"` // Required
	pd1  *PD1             `json:"pd_1,omitempty"`
	rol1 []*ROL           `json:"rol_1,omitempty"`
	nk1  []*NK1           `json:"nk_1,omitempty"`
	pv1  *PV1             `json:"pv_1,omitempty"` // Required
	pv2  *PV2             `json:"pv_2,omitempty"`
	rol2 []*ROL           `json:"rol_2,omitempty"`
	db1  []*DB1           `json:"db_1,omitempty"`
	obx  []*OBX           `json:"obx,omitempty"`
	al1  []*AL1           `json:"al_1,omitempty"`
	dg1  []*DG1           `json:"dg_1,omitempty"`
	drg  *DRG             `json:"drg,omitempty"`
	pr1  []*ADT_A16_PR1v2 `json:"pr_1,omitempty"`
	gt1  []*GT1           `json:"gt_1,omitempty"`
	in1  []*ADT_A16_IN1v2 `json:"in_1,omitempty"`
	acc  *ACC             `json:"acc,omitempty"`
}

func (m *ADT_A16v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A16v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A16v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A16v2) PID() *PID {
	return m.pid
}

func (m *ADT_A16v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A16v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADT_A16v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A16v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A16v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A16v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *ADT_A16v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A16v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A16v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A16v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A16v2) DRG() *DRG {
	return m.drg
}

func (m *ADT_A16v2) GroupByPR1() []*ADT_A16_PR1v2 {
	return m.pr1
}

func (m *ADT_A16v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A16v2) GroupByIN1() []*ADT_A16_IN1v2 {
	return m.in1
}

func (m *ADT_A16v2) ACC() *ACC {
	return m.acc
}

func (m ADT_A16v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"nk1":  m.nk1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obx":  m.obx,
		"al1":  m.al1,
		"dg1":  m.dg1,
		"drg":  m.drg,
		"pr1":  m.pr1,
		"gt1":  m.gt1,
		"in1":  m.in1,
		"acc":  m.acc,
	}, nil
}

type ADT_A16_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A16_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *ADT_A16_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A16_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type ADT_A16_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ADT_A16_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A16_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A16_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *ADT_A16_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m ADT_A16_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type ADT_A17v2 struct {
	msh  *MSH   `json:"msh,omitempty"` // Required
	sft  []*SFT `json:"sft,omitempty"`
	evn  *EVN   `json:"evn,omitempty"`   // Required
	pid1 *PID   `json:"pid_1,omitempty"` // Required
	pd11 *PD1   `json:"pd_11,omitempty"`
	pv11 *PV1   `json:"pv_11,omitempty"` // Required
	pv21 *PV2   `json:"pv_21,omitempty"`
	db11 []*DB1 `json:"db_11,omitempty"`
	obx1 []*OBX `json:"obx_1,omitempty"`
	pid2 *PID   `json:"pid_2,omitempty"` // Required
	pd12 *PD1   `json:"pd_12,omitempty"`
	pv12 *PV1   `json:"pv_12,omitempty"` // Required
	pv22 *PV2   `json:"pv_22,omitempty"`
	db12 []*DB1 `json:"db_12,omitempty"`
	obx2 []*OBX `json:"obx_2,omitempty"`
}

func (m *ADT_A17v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A17v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A17v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A17v2) PID1() *PID {
	return m.pid1
}

func (m *ADT_A17v2) PD11() *PD1 {
	return m.pd11
}

func (m *ADT_A17v2) PV11() *PV1 {
	return m.pv11
}

func (m *ADT_A17v2) PV21() *PV2 {
	return m.pv21
}

func (m *ADT_A17v2) AllDB11() []*DB1 {
	return m.db11
}

func (m *ADT_A17v2) AllOBX1() []*OBX {
	return m.obx1
}

func (m *ADT_A17v2) PID2() *PID {
	return m.pid2
}

func (m *ADT_A17v2) PD12() *PD1 {
	return m.pd12
}

func (m *ADT_A17v2) PV12() *PV1 {
	return m.pv12
}

func (m *ADT_A17v2) PV22() *PV2 {
	return m.pv22
}

func (m *ADT_A17v2) AllDB12() []*DB1 {
	return m.db12
}

func (m *ADT_A17v2) AllOBX2() []*OBX {
	return m.obx2
}

func (m ADT_A17v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid1": m.pid1,
		"pd11": m.pd11,
		"pv11": m.pv11,
		"pv21": m.pv21,
		"db11": m.db11,
		"obx1": m.obx1,
		"pid2": m.pid2,
		"pd12": m.pd12,
		"pv12": m.pv12,
		"pv22": m.pv22,
		"db12": m.db12,
		"obx2": m.obx2,
	}, nil
}

type ADT_A18v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	mrg *MRG   `json:"mrg,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
}

func (m *ADT_A18v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A18v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A18v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A18v2) PID() *PID {
	return m.pid
}

func (m *ADT_A18v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A18v2) MRG() *MRG {
	return m.mrg
}

func (m *ADT_A18v2) PV1() *PV1 {
	return m.pv1
}

func (m ADT_A18v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"mrg": m.mrg,
		"pv1": m.pv1,
	}, nil
}

type ADT_A20v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	npu *NPU   `json:"npu,omitempty"` // Required
}

func (m *ADT_A20v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A20v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A20v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A20v2) NPU() *NPU {
	return m.npu
}

func (m ADT_A20v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"npu": m.npu,
	}, nil
}

type ADT_A21v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	db1 []*DB1 `json:"db_1,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A21v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A21v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A21v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A21v2) PID() *PID {
	return m.pid
}

func (m *ADT_A21v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A21v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A21v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A21v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A21v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A21v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"db1": m.db1,
		"obx": m.obx,
	}, nil
}

type ADT_A22v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A22v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A22v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A22v2) PID() *PID {
	return m.pid
}

func (m *ADT_A22v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A22v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A22v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A22v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
	}, nil
}

type ADT_A23v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A23v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A23v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A23v2) PID() *PID {
	return m.pid
}

func (m *ADT_A23v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A23v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A23v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A23v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
	}, nil
}

type ADT_A24v2 struct {
	msh  *MSH   `json:"msh,omitempty"` // Required
	sft  []*SFT `json:"sft,omitempty"`
	evn  *EVN   `json:"evn,omitempty"`   // Required
	pid1 *PID   `json:"pid_1,omitempty"` // Required
	pd11 *PD1   `json:"pd_11,omitempty"`
	pv11 *PV1   `json:"pv_11,omitempty"`
	db11 []*DB1 `json:"db_11,omitempty"`
	pid2 *PID   `json:"pid_2,omitempty"` // Required
	pd12 *PD1   `json:"pd_12,omitempty"`
	pv12 *PV1   `json:"pv_12,omitempty"`
	db12 []*DB1 `json:"db_12,omitempty"`
}

func (m *ADT_A24v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A24v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A24v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A24v2) PID1() *PID {
	return m.pid1
}

func (m *ADT_A24v2) PD11() *PD1 {
	return m.pd11
}

func (m *ADT_A24v2) PV11() *PV1 {
	return m.pv11
}

func (m *ADT_A24v2) AllDB11() []*DB1 {
	return m.db11
}

func (m *ADT_A24v2) PID2() *PID {
	return m.pid2
}

func (m *ADT_A24v2) PD12() *PD1 {
	return m.pd12
}

func (m *ADT_A24v2) PV12() *PV1 {
	return m.pv12
}

func (m *ADT_A24v2) AllDB12() []*DB1 {
	return m.db12
}

func (m ADT_A24v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid1": m.pid1,
		"pd11": m.pd11,
		"pv11": m.pv11,
		"db11": m.db11,
		"pid2": m.pid2,
		"pd12": m.pd12,
		"pv12": m.pv12,
		"db12": m.db12,
	}, nil
}

type ADT_A25v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A25v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A25v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A25v2) PID() *PID {
	return m.pid
}

func (m *ADT_A25v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A25v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A25v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A25v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
	}, nil
}

type ADT_A26v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A26v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A26v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A26v2) PID() *PID {
	return m.pid
}

func (m *ADT_A26v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A26v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A26v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A26v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
	}, nil
}

type ADT_A27v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A27v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A27v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A27v2) PID() *PID {
	return m.pid
}

func (m *ADT_A27v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A27v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A27v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A27v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
	}, nil
}

type ADT_A28v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	obx []*OBX           `json:"obx,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	pr1 []*PR1           `json:"pr_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*ADT_A28_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	ub1 *UB1             `json:"ub_1,omitempty"`
	ub2 *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A28v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A28v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A28v2) PID() *PID {
	return m.pid
}

func (m *ADT_A28v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A28v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A28v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A28v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A28v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A28v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A28v2) AllPR1() []*PR1 {
	return m.pr1
}

func (m *ADT_A28v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A28v2) GroupByIN1() []*ADT_A28_IN1v2 {
	return m.in1
}

func (m *ADT_A28v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A28v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A28v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A28v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type ADT_A28_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ADT_A28_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A28_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A28_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ADT_A28_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type ADT_A29v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A29v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A29v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A29v2) PID() *PID {
	return m.pid
}

func (m *ADT_A29v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A29v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A29v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A29v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
	}, nil
}

type ADT_A30v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	mrg *MRG   `json:"mrg,omitempty"` // Required
}

func (m *ADT_A30v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A30v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A30v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A30v2) PID() *PID {
	return m.pid
}

func (m *ADT_A30v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A30v2) MRG() *MRG {
	return m.mrg
}

func (m ADT_A30v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"mrg": m.mrg,
	}, nil
}

type ADT_A31v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	obx []*OBX           `json:"obx,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	pr1 []*PR1           `json:"pr_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*ADT_A31_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	ub1 *UB1             `json:"ub_1,omitempty"`
	ub2 *UB2             `json:"ub_2,omitempty"`
}

func (m *ADT_A31v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A31v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A31v2) PID() *PID {
	return m.pid
}

func (m *ADT_A31v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ADT_A31v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A31v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A31v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A31v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ADT_A31v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A31v2) AllPR1() []*PR1 {
	return m.pr1
}

func (m *ADT_A31v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ADT_A31v2) GroupByIN1() []*ADT_A31_IN1v2 {
	return m.in1
}

func (m *ADT_A31v2) ACC() *ACC {
	return m.acc
}

func (m *ADT_A31v2) UB1() *UB1 {
	return m.ub1
}

func (m *ADT_A31v2) UB2() *UB2 {
	return m.ub2
}

func (m ADT_A31v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type ADT_A31_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ADT_A31_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ADT_A31_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ADT_A31_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ADT_A31_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type ADT_A32v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A32v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A32v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A32v2) PID() *PID {
	return m.pid
}

func (m *ADT_A32v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A32v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A32v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A32v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
	}, nil
}

type ADT_A33v2 struct {
	msh *MSH   `json:"msh,omitempty"`  // Required
	evn *EVN   `json:"evn,omitempty"`  // Required
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ADT_A33v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A33v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A33v2) PID() *PID {
	return m.pid
}

func (m *ADT_A33v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A33v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A33v2) AllOBX() []*OBX {
	return m.obx
}

func (m ADT_A33v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
	}, nil
}

type ADT_A34v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	evn *EVN `json:"evn,omitempty"` // Required
	pid *PID `json:"pid,omitempty"` // Required
	mrg *MRG `json:"mrg,omitempty"` // Required
}

func (m *ADT_A34v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A34v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A34v2) PID() *PID {
	return m.pid
}

func (m *ADT_A34v2) MRG() *MRG {
	return m.mrg
}

func (m ADT_A34v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"mrg": m.mrg,
	}, nil
}

type ADT_A35v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	evn *EVN `json:"evn,omitempty"` // Required
	pid *PID `json:"pid,omitempty"` // Required
	mrg *MRG `json:"mrg,omitempty"` // Required
}

func (m *ADT_A35v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A35v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A35v2) PID() *PID {
	return m.pid
}

func (m *ADT_A35v2) MRG() *MRG {
	return m.mrg
}

func (m ADT_A35v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"mrg": m.mrg,
	}, nil
}

type ADT_A36v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	evn *EVN `json:"evn,omitempty"` // Required
	pid *PID `json:"pid,omitempty"` // Required
	mrg *MRG `json:"mrg,omitempty"` // Required
}

func (m *ADT_A36v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A36v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A36v2) PID() *PID {
	return m.pid
}

func (m *ADT_A36v2) MRG() *MRG {
	return m.mrg
}

func (m ADT_A36v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
		"mrg": m.mrg,
	}, nil
}

type ADT_A37v2 struct {
	msh  *MSH   `json:"msh,omitempty"` // Required
	sft  []*SFT `json:"sft,omitempty"`
	evn  *EVN   `json:"evn,omitempty"`   // Required
	pid1 *PID   `json:"pid_1,omitempty"` // Required
	pd11 *PD1   `json:"pd_11,omitempty"`
	pv11 *PV1   `json:"pv_11,omitempty"`
	db11 []*DB1 `json:"db_11,omitempty"`
	pid2 *PID   `json:"pid_2,omitempty"` // Required
	pd12 *PD1   `json:"pd_12,omitempty"`
	pv12 *PV1   `json:"pv_12,omitempty"`
	db12 []*DB1 `json:"db_12,omitempty"`
}

func (m *ADT_A37v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A37v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A37v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A37v2) PID1() *PID {
	return m.pid1
}

func (m *ADT_A37v2) PD11() *PD1 {
	return m.pd11
}

func (m *ADT_A37v2) PV11() *PV1 {
	return m.pv11
}

func (m *ADT_A37v2) AllDB11() []*DB1 {
	return m.db11
}

func (m *ADT_A37v2) PID2() *PID {
	return m.pid2
}

func (m *ADT_A37v2) PD12() *PD1 {
	return m.pd12
}

func (m *ADT_A37v2) PV12() *PV1 {
	return m.pv12
}

func (m *ADT_A37v2) AllDB12() []*DB1 {
	return m.db12
}

func (m ADT_A37v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid1": m.pid1,
		"pd11": m.pd11,
		"pv11": m.pv11,
		"db11": m.db11,
		"pid2": m.pid2,
		"pd12": m.pd12,
		"pv12": m.pv12,
		"db12": m.db12,
	}, nil
}

type ADT_A38v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
	db1 []*DB1 `json:"db_1,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
	dg1 []*DG1 `json:"dg_1,omitempty"`
	drg *DRG   `json:"drg,omitempty"`
}

func (m *ADT_A38v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A38v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A38v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A38v2) PID() *PID {
	return m.pid
}

func (m *ADT_A38v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A38v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A38v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A38v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ADT_A38v2) AllOBX() []*OBX {
	return m.obx
}

func (m *ADT_A38v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ADT_A38v2) DRG() *DRG {
	return m.drg
}

func (m ADT_A38v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"db1": m.db1,
		"obx": m.obx,
		"dg1": m.dg1,
		"drg": m.drg,
	}, nil
}

type ADT_A39v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	pid []*ADT_A39_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *ADT_A39v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A39v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A39v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A39v2) GroupByPID() []*ADT_A39_PIDv2 {
	return m.pid
}

func (m ADT_A39v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
	}, nil
}

type ADT_A39_PIDv2 struct {
	pid *PID `json:"pid,omitempty"` // Required
	pd1 *PD1 `json:"pd_1,omitempty"`
	mrg *MRG `json:"mrg,omitempty"` // Required
	pv1 *PV1 `json:"pv_1,omitempty"`
}

func (m *ADT_A39_PIDv2) PID() *PID {
	return m.pid
}

func (m *ADT_A39_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A39_PIDv2) MRG() *MRG {
	return m.mrg
}

func (m *ADT_A39_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m ADT_A39_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"mrg": m.mrg,
		"pv1": m.pv1,
	}, nil
}

type ADT_A40v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid []*ADT_A40_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *ADT_A40v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A40v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A40v2) GroupByPID() []*ADT_A40_PIDv2 {
	return m.pid
}

func (m ADT_A40v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
	}, nil
}

type ADT_A40_PIDv2 struct {
	pid *PID `json:"pid,omitempty"` // Required
	pd1 *PD1 `json:"pd_1,omitempty"`
	mrg *MRG `json:"mrg,omitempty"` // Required
	pv1 *PV1 `json:"pv_1,omitempty"`
}

func (m *ADT_A40_PIDv2) PID() *PID {
	return m.pid
}

func (m *ADT_A40_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A40_PIDv2) MRG() *MRG {
	return m.mrg
}

func (m *ADT_A40_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m ADT_A40_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"mrg": m.mrg,
		"pv1": m.pv1,
	}, nil
}

type ADT_A43v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	pid []*ADT_A43_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *ADT_A43v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A43v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A43v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A43v2) GroupByPID() []*ADT_A43_PIDv2 {
	return m.pid
}

func (m ADT_A43v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
	}, nil
}

type ADT_A43_PIDv2 struct {
	pid *PID `json:"pid,omitempty"` // Required
	pd1 *PD1 `json:"pd_1,omitempty"`
	mrg *MRG `json:"mrg,omitempty"` // Required
}

func (m *ADT_A43_PIDv2) PID() *PID {
	return m.pid
}

func (m *ADT_A43_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A43_PIDv2) MRG() *MRG {
	return m.mrg
}

func (m ADT_A43_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"mrg": m.mrg,
	}, nil
}

type ADT_A44v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	evn *EVN             `json:"evn,omitempty"` // Required
	pid []*ADT_A44_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *ADT_A44v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A44v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A44v2) GroupByPID() []*ADT_A44_PIDv2 {
	return m.pid
}

func (m ADT_A44v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"evn": m.evn,
		"pid": m.pid,
	}, nil
}

type ADT_A44_PIDv2 struct {
	pid *PID `json:"pid,omitempty"` // Required
	pd1 *PD1 `json:"pd_1,omitempty"`
	mrg *MRG `json:"mrg,omitempty"` // Required
}

func (m *ADT_A44_PIDv2) PID() *PID {
	return m.pid
}

func (m *ADT_A44_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A44_PIDv2) MRG() *MRG {
	return m.mrg
}

func (m ADT_A44_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"mrg": m.mrg,
	}, nil
}

type ADT_A45v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	pd1 *PD1             `json:"pd_1,omitempty"`
	mrg []*ADT_A45_MRGv2 `json:"mrg,omitempty"` // Required
}

func (m *ADT_A45v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A45v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A45v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A45v2) PID() *PID {
	return m.pid
}

func (m *ADT_A45v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A45v2) GroupByMRG() []*ADT_A45_MRGv2 {
	return m.mrg
}

func (m ADT_A45v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"mrg": m.mrg,
	}, nil
}

type ADT_A45_MRGv2 struct {
	mrg *MRG `json:"mrg,omitempty"`  // Required
	pv1 *PV1 `json:"pv_1,omitempty"` // Required
}

func (m *ADT_A45_MRGv2) MRG() *MRG {
	return m.mrg
}

func (m *ADT_A45_MRGv2) PV1() *PV1 {
	return m.pv1
}

func (m ADT_A45_MRGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mrg": m.mrg,
		"pv1": m.pv1,
	}, nil
}

type ADT_A50v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	mrg *MRG   `json:"mrg,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
}

func (m *ADT_A50v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A50v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A50v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A50v2) PID() *PID {
	return m.pid
}

func (m *ADT_A50v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A50v2) MRG() *MRG {
	return m.mrg
}

func (m *ADT_A50v2) PV1() *PV1 {
	return m.pv1
}

func (m ADT_A50v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"mrg": m.mrg,
		"pv1": m.pv1,
	}, nil
}

type ADT_A52v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *ADT_A52v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A52v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A52v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A52v2) PID() *PID {
	return m.pid
}

func (m *ADT_A52v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A52v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A52v2) PV2() *PV2 {
	return m.pv2
}

func (m ADT_A52v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type ADT_A54v2 struct {
	msh  *MSH   `json:"msh,omitempty"` // Required
	sft  []*SFT `json:"sft,omitempty"`
	evn  *EVN   `json:"evn,omitempty"` // Required
	pid  *PID   `json:"pid,omitempty"` // Required
	pd1  *PD1   `json:"pd_1,omitempty"`
	rol1 []*ROL `json:"rol_1,omitempty"`
	pv1  *PV1   `json:"pv_1,omitempty"` // Required
	pv2  *PV2   `json:"pv_2,omitempty"`
	rol2 []*ROL `json:"rol_2,omitempty"`
}

func (m *ADT_A54v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A54v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A54v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A54v2) PID() *PID {
	return m.pid
}

func (m *ADT_A54v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A54v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *ADT_A54v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A54v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A54v2) AllROL2() []*ROL {
	return m.rol2
}

func (m ADT_A54v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
	}, nil
}

type ADT_A60v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pv1 *PV1   `json:"pv_1,omitempty"`
	pv2 *PV2   `json:"pv_2,omitempty"`
	iam []*IAM `json:"iam,omitempty"`
}

func (m *ADT_A60v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A60v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A60v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A60v2) PID() *PID {
	return m.pid
}

func (m *ADT_A60v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A60v2) PV2() *PV2 {
	return m.pv2
}

func (m *ADT_A60v2) AllIAM() []*IAM {
	return m.iam
}

func (m ADT_A60v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"iam": m.iam,
	}, nil
}

type ADT_A61v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *ADT_A61v2) MSH() *MSH {
	return m.msh
}

func (m *ADT_A61v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ADT_A61v2) EVN() *EVN {
	return m.evn
}

func (m *ADT_A61v2) PID() *PID {
	return m.pid
}

func (m *ADT_A61v2) PD1() *PD1 {
	return m.pd1
}

func (m *ADT_A61v2) PV1() *PV1 {
	return m.pv1
}

func (m *ADT_A61v2) AllROL() []*ROL {
	return m.rol
}

func (m *ADT_A61v2) PV2() *PV2 {
	return m.pv2
}

func (m ADT_A61v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"rol": m.rol,
		"pv2": m.pv2,
	}, nil
}

type ARD_A19v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	pid []*ARD_A19_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *ARD_A19v2) MSH() *MSH {
	return m.msh
}

func (m *ARD_A19v2) MSA() *MSA {
	return m.msa
}

func (m *ARD_A19v2) ERR() *ERR {
	return m.err
}

func (m *ARD_A19v2) QRD() *QRD {
	return m.qrd
}

func (m *ARD_A19v2) QRF() *QRF {
	return m.qrf
}

func (m *ARD_A19v2) GroupByPID() []*ARD_A19_PIDv2 {
	return m.pid
}

func (m *ARD_A19v2) DSC() *DSC {
	return m.dsc
}

func (m ARD_A19v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type ARD_A19_PIDv2 struct {
	evn *EVN                 `json:"evn,omitempty"`
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	db1 []*DB1               `json:"db_1,omitempty"`
	obx []*OBX               `json:"obx,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	drg *DRG                 `json:"drg,omitempty"`
	pr1 []*ARD_A19_PID_PR1v2 `json:"pr_1,omitempty"`
	gt1 []*GT1               `json:"gt_1,omitempty"`
	in1 []*ARD_A19_PID_IN1v2 `json:"in_1,omitempty"`
	acc *ACC                 `json:"acc,omitempty"`
	ub1 *UB1                 `json:"ub_1,omitempty"`
	ub2 *UB2                 `json:"ub_2,omitempty"`
}

func (m *ARD_A19_PIDv2) EVN() *EVN {
	return m.evn
}

func (m *ARD_A19_PIDv2) PID() *PID {
	return m.pid
}

func (m *ARD_A19_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ARD_A19_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ARD_A19_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *ARD_A19_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *ARD_A19_PIDv2) AllDB1() []*DB1 {
	return m.db1
}

func (m *ARD_A19_PIDv2) AllOBX() []*OBX {
	return m.obx
}

func (m *ARD_A19_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *ARD_A19_PIDv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ARD_A19_PIDv2) DRG() *DRG {
	return m.drg
}

func (m *ARD_A19_PIDv2) GroupByPR1() []*ARD_A19_PID_PR1v2 {
	return m.pr1
}

func (m *ARD_A19_PIDv2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *ARD_A19_PIDv2) GroupByIN1() []*ARD_A19_PID_IN1v2 {
	return m.in1
}

func (m *ARD_A19_PIDv2) ACC() *ACC {
	return m.acc
}

func (m *ARD_A19_PIDv2) UB1() *UB1 {
	return m.ub1
}

func (m *ARD_A19_PIDv2) UB2() *UB2 {
	return m.ub2
}

func (m ARD_A19_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"db1": m.db1,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"drg": m.drg,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type ARD_A19_PID_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *ARD_A19_PID_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *ARD_A19_PID_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m ARD_A19_PID_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type ARD_A19_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ARD_A19_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ARD_A19_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ARD_A19_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ARD_A19_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type BAR_P01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	pd1 *PD1             `json:"pd_1,omitempty"`
	rol []*ROL           `json:"rol,omitempty"`
	pv1 []*BAR_P01_PV1v2 `json:"pv_1,omitempty"` // Required
}

func (m *BAR_P01v2) MSH() *MSH {
	return m.msh
}

func (m *BAR_P01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BAR_P01v2) EVN() *EVN {
	return m.evn
}

func (m *BAR_P01v2) PID() *PID {
	return m.pid
}

func (m *BAR_P01v2) PD1() *PD1 {
	return m.pd1
}

func (m *BAR_P01v2) AllROL() []*ROL {
	return m.rol
}

func (m *BAR_P01v2) GroupByPV1() []*BAR_P01_PV1v2 {
	return m.pv1
}

func (m BAR_P01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"rol": m.rol,
		"pv1": m.pv1,
	}, nil
}

type BAR_P01_PV1v2 struct {
	pv1 *PV1                 `json:"pv_1,omitempty"`
	pv2 *PV2                 `json:"pv_2,omitempty"`
	rol []*ROL               `json:"rol,omitempty"`
	db1 []*DB1               `json:"db_1,omitempty"`
	obx []*OBX               `json:"obx,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	drg *DRG                 `json:"drg,omitempty"`
	pr1 []*BAR_P01_PV1_PR1v2 `json:"pr_1,omitempty"`
	gt1 []*GT1               `json:"gt_1,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	in1 []*BAR_P01_PV1_IN1v2 `json:"in_1,omitempty"`
	acc *ACC                 `json:"acc,omitempty"`
	ub1 *UB1                 `json:"ub_1,omitempty"`
	ub2 *UB2                 `json:"ub_2,omitempty"`
}

func (m *BAR_P01_PV1v2) PV1() *PV1 {
	return m.pv1
}

func (m *BAR_P01_PV1v2) PV2() *PV2 {
	return m.pv2
}

func (m *BAR_P01_PV1v2) AllROL() []*ROL {
	return m.rol
}

func (m *BAR_P01_PV1v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *BAR_P01_PV1v2) AllOBX() []*OBX {
	return m.obx
}

func (m *BAR_P01_PV1v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *BAR_P01_PV1v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *BAR_P01_PV1v2) DRG() *DRG {
	return m.drg
}

func (m *BAR_P01_PV1v2) GroupByPR1() []*BAR_P01_PV1_PR1v2 {
	return m.pr1
}

func (m *BAR_P01_PV1v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *BAR_P01_PV1v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *BAR_P01_PV1v2) GroupByIN1() []*BAR_P01_PV1_IN1v2 {
	return m.in1
}

func (m *BAR_P01_PV1v2) ACC() *ACC {
	return m.acc
}

func (m *BAR_P01_PV1v2) UB1() *UB1 {
	return m.ub1
}

func (m *BAR_P01_PV1v2) UB2() *UB2 {
	return m.ub2
}

func (m BAR_P01_PV1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pv1": m.pv1,
		"pv2": m.pv2,
		"rol": m.rol,
		"db1": m.db1,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"drg": m.drg,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"nk1": m.nk1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
	}, nil
}

type BAR_P01_PV1_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *BAR_P01_PV1_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *BAR_P01_PV1_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m BAR_P01_PV1_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type BAR_P01_PV1_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *BAR_P01_PV1_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *BAR_P01_PV1_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *BAR_P01_PV1_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *BAR_P01_PV1_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m BAR_P01_PV1_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type BAR_P02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	pid []*BAR_P02_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *BAR_P02v2) MSH() *MSH {
	return m.msh
}

func (m *BAR_P02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BAR_P02v2) EVN() *EVN {
	return m.evn
}

func (m *BAR_P02v2) GroupByPID() []*BAR_P02_PIDv2 {
	return m.pid
}

func (m BAR_P02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
	}, nil
}

type BAR_P02_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"`
	db1 []*DB1 `json:"db_1,omitempty"`
}

func (m *BAR_P02_PIDv2) PID() *PID {
	return m.pid
}

func (m *BAR_P02_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *BAR_P02_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *BAR_P02_PIDv2) AllDB1() []*DB1 {
	return m.db1
}

func (m BAR_P02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"db1": m.db1,
	}, nil
}

type BAR_P05v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	pd1 *PD1             `json:"pd_1,omitempty"`
	rol []*ROL           `json:"rol,omitempty"`
	pv1 []*BAR_P05_PV1v2 `json:"pv_1,omitempty"` // Required
}

func (m *BAR_P05v2) MSH() *MSH {
	return m.msh
}

func (m *BAR_P05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BAR_P05v2) EVN() *EVN {
	return m.evn
}

func (m *BAR_P05v2) PID() *PID {
	return m.pid
}

func (m *BAR_P05v2) PD1() *PD1 {
	return m.pd1
}

func (m *BAR_P05v2) AllROL() []*ROL {
	return m.rol
}

func (m *BAR_P05v2) GroupByPV1() []*BAR_P05_PV1v2 {
	return m.pv1
}

func (m BAR_P05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"rol": m.rol,
		"pv1": m.pv1,
	}, nil
}

type BAR_P05_PV1v2 struct {
	pv1 *PV1                 `json:"pv_1,omitempty"`
	pv2 *PV2                 `json:"pv_2,omitempty"`
	rol []*ROL               `json:"rol,omitempty"`
	db1 []*DB1               `json:"db_1,omitempty"`
	obx []*OBX               `json:"obx,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	drg *DRG                 `json:"drg,omitempty"`
	pr1 []*BAR_P05_PV1_PR1v2 `json:"pr_1,omitempty"`
	gt1 []*GT1               `json:"gt_1,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	in1 []*BAR_P05_PV1_IN1v2 `json:"in_1,omitempty"`
	acc *ACC                 `json:"acc,omitempty"`
	ub1 *UB1                 `json:"ub_1,omitempty"`
	ub2 *UB2                 `json:"ub_2,omitempty"`
	abs *ABS                 `json:"abs,omitempty"`
	blc []*BLC               `json:"blc,omitempty"`
	rmi *RMI                 `json:"rmi,omitempty"`
}

func (m *BAR_P05_PV1v2) PV1() *PV1 {
	return m.pv1
}

func (m *BAR_P05_PV1v2) PV2() *PV2 {
	return m.pv2
}

func (m *BAR_P05_PV1v2) AllROL() []*ROL {
	return m.rol
}

func (m *BAR_P05_PV1v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *BAR_P05_PV1v2) AllOBX() []*OBX {
	return m.obx
}

func (m *BAR_P05_PV1v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *BAR_P05_PV1v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *BAR_P05_PV1v2) DRG() *DRG {
	return m.drg
}

func (m *BAR_P05_PV1v2) GroupByPR1() []*BAR_P05_PV1_PR1v2 {
	return m.pr1
}

func (m *BAR_P05_PV1v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *BAR_P05_PV1v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *BAR_P05_PV1v2) GroupByIN1() []*BAR_P05_PV1_IN1v2 {
	return m.in1
}

func (m *BAR_P05_PV1v2) ACC() *ACC {
	return m.acc
}

func (m *BAR_P05_PV1v2) UB1() *UB1 {
	return m.ub1
}

func (m *BAR_P05_PV1v2) UB2() *UB2 {
	return m.ub2
}

func (m *BAR_P05_PV1v2) ABS() *ABS {
	return m.abs
}

func (m *BAR_P05_PV1v2) AllBLC() []*BLC {
	return m.blc
}

func (m *BAR_P05_PV1v2) RMI() *RMI {
	return m.rmi
}

func (m BAR_P05_PV1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pv1": m.pv1,
		"pv2": m.pv2,
		"rol": m.rol,
		"db1": m.db1,
		"obx": m.obx,
		"al1": m.al1,
		"dg1": m.dg1,
		"drg": m.drg,
		"pr1": m.pr1,
		"gt1": m.gt1,
		"nk1": m.nk1,
		"in1": m.in1,
		"acc": m.acc,
		"ub1": m.ub1,
		"ub2": m.ub2,
		"abs": m.abs,
		"blc": m.blc,
		"rmi": m.rmi,
	}, nil
}

type BAR_P05_PV1_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *BAR_P05_PV1_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *BAR_P05_PV1_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m BAR_P05_PV1_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type BAR_P05_PV1_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *BAR_P05_PV1_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *BAR_P05_PV1_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *BAR_P05_PV1_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *BAR_P05_PV1_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m BAR_P05_PV1_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type BAR_P06v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	pid []*BAR_P06_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *BAR_P06v2) MSH() *MSH {
	return m.msh
}

func (m *BAR_P06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BAR_P06v2) EVN() *EVN {
	return m.evn
}

func (m *BAR_P06v2) GroupByPID() []*BAR_P06_PIDv2 {
	return m.pid
}

func (m BAR_P06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
	}, nil
}

type BAR_P06_PIDv2 struct {
	pid *PID `json:"pid,omitempty"` // Required
	pv1 *PV1 `json:"pv_1,omitempty"`
}

func (m *BAR_P06_PIDv2) PID() *PID {
	return m.pid
}

func (m *BAR_P06_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m BAR_P06_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pv1": m.pv1,
	}, nil
}

type BAR_P10v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"`  // Required
	pid *PID             `json:"pid,omitempty"`  // Required
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	dg1 []*DG1           `json:"dg_1,omitempty"`
	gp1 *GP1             `json:"gp_1,omitempty"` // Required
	pr1 []*BAR_P10_PR1v2 `json:"pr_1,omitempty"`
}

func (m *BAR_P10v2) MSH() *MSH {
	return m.msh
}

func (m *BAR_P10v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BAR_P10v2) EVN() *EVN {
	return m.evn
}

func (m *BAR_P10v2) PID() *PID {
	return m.pid
}

func (m *BAR_P10v2) PV1() *PV1 {
	return m.pv1
}

func (m *BAR_P10v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *BAR_P10v2) GP1() *GP1 {
	return m.gp1
}

func (m *BAR_P10v2) GroupByPR1() []*BAR_P10_PR1v2 {
	return m.pr1
}

func (m BAR_P10v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"dg1": m.dg1,
		"gp1": m.gp1,
		"pr1": m.pr1,
	}, nil
}

type BAR_P10_PR1v2 struct {
	pr1 *PR1 `json:"pr_1,omitempty"` // Required
	gp2 *GP2 `json:"gp_2,omitempty"`
}

func (m *BAR_P10_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *BAR_P10_PR1v2) GP2() *GP2 {
	return m.gp2
}

func (m BAR_P10_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"gp2": m.gp2,
	}, nil
}

type BAR_P12v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"`  // Required
	pid *PID             `json:"pid,omitempty"`  // Required
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	dg1 []*DG1           `json:"dg_1,omitempty"`
	drg *DRG             `json:"drg,omitempty"`
	pr1 []*BAR_P12_PR1v2 `json:"pr_1,omitempty"`
}

func (m *BAR_P12v2) MSH() *MSH {
	return m.msh
}

func (m *BAR_P12v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BAR_P12v2) EVN() *EVN {
	return m.evn
}

func (m *BAR_P12v2) PID() *PID {
	return m.pid
}

func (m *BAR_P12v2) PV1() *PV1 {
	return m.pv1
}

func (m *BAR_P12v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *BAR_P12v2) DRG() *DRG {
	return m.drg
}

func (m *BAR_P12v2) GroupByPR1() []*BAR_P12_PR1v2 {
	return m.pr1
}

func (m BAR_P12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"dg1": m.dg1,
		"drg": m.drg,
		"pr1": m.pr1,
	}, nil
}

type BAR_P12_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *BAR_P12_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *BAR_P12_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m BAR_P12_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type BPS_O29v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *BPS_O29_PIDv2   `json:"pid,omitempty"`
	orc []*BPS_O29_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *BPS_O29v2) MSH() *MSH {
	return m.msh
}

func (m *BPS_O29v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BPS_O29v2) AllNTE() []*NTE {
	return m.nte
}

func (m *BPS_O29v2) GroupByPID() *BPS_O29_PIDv2 {
	return m.pid
}

func (m *BPS_O29v2) GroupByORC() []*BPS_O29_ORCv2 {
	return m.orc
}

func (m BPS_O29v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type BPS_O29_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *BPS_O29_PIDv2) PID() *PID {
	return m.pid
}

func (m *BPS_O29_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *BPS_O29_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *BPS_O29_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *BPS_O29_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m BPS_O29_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type BPS_O29_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*BPS_O29_ORC_TQ1v2 `json:"tq_1,omitempty"`
	bpo *BPO                 `json:"bpo,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	bpx []*BPS_O29_ORC_BPXv2 `json:"bpx,omitempty"`
}

func (m *BPS_O29_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *BPS_O29_ORCv2) GroupByTQ1() []*BPS_O29_ORC_TQ1v2 {
	return m.tq1
}

func (m *BPS_O29_ORCv2) BPO() *BPO {
	return m.bpo
}

func (m *BPS_O29_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *BPS_O29_ORCv2) GroupByBPX() []*BPS_O29_ORC_BPXv2 {
	return m.bpx
}

func (m BPS_O29_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"bpo": m.bpo,
		"nte": m.nte,
		"bpx": m.bpx,
	}, nil
}

type BPS_O29_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *BPS_O29_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *BPS_O29_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m BPS_O29_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type BPS_O29_ORC_BPXv2 struct {
	bpx *BPX   `json:"bpx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *BPS_O29_ORC_BPXv2) BPX() *BPX {
	return m.bpx
}

func (m *BPS_O29_ORC_BPXv2) AllNTE() []*NTE {
	return m.nte
}

func (m BPS_O29_ORC_BPXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"bpx": m.bpx,
		"nte": m.nte,
	}, nil
}

type BRP_O30v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *PID             `json:"pid,omitempty"` // Required
	orc []*BRP_O30_ORCv2 `json:"orc,omitempty"`
}

func (m *BRP_O30v2) MSH() *MSH {
	return m.msh
}

func (m *BRP_O30v2) MSA() *MSA {
	return m.msa
}

func (m *BRP_O30v2) AllERR() []*ERR {
	return m.err
}

func (m *BRP_O30v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BRP_O30v2) AllNTE() []*NTE {
	return m.nte
}

func (m *BRP_O30v2) PID() *PID {
	return m.pid
}

func (m *BRP_O30v2) GroupByORC() []*BRP_O30_ORCv2 {
	return m.orc
}

func (m BRP_O30v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type BRP_O30_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*BRP_O30_ORC_TQ1v2 `json:"tq_1,omitempty"`
	bpo *BPO                 `json:"bpo,omitempty"`
	bpx []*BPX               `json:"bpx,omitempty"`
}

func (m *BRP_O30_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *BRP_O30_ORCv2) GroupByTQ1() []*BRP_O30_ORC_TQ1v2 {
	return m.tq1
}

func (m *BRP_O30_ORCv2) BPO() *BPO {
	return m.bpo
}

func (m *BRP_O30_ORCv2) AllBPX() []*BPX {
	return m.bpx
}

func (m BRP_O30_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"bpo": m.bpo,
		"bpx": m.bpx,
	}, nil
}

type BRP_O30_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *BRP_O30_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *BRP_O30_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m BRP_O30_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type BRT_O32v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *PID             `json:"pid,omitempty"`
	orc []*BRT_O32_ORCv2 `json:"orc,omitempty"`
}

func (m *BRT_O32v2) MSH() *MSH {
	return m.msh
}

func (m *BRT_O32v2) MSA() *MSA {
	return m.msa
}

func (m *BRT_O32v2) AllERR() []*ERR {
	return m.err
}

func (m *BRT_O32v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BRT_O32v2) AllNTE() []*NTE {
	return m.nte
}

func (m *BRT_O32v2) PID() *PID {
	return m.pid
}

func (m *BRT_O32v2) GroupByORC() []*BRT_O32_ORCv2 {
	return m.orc
}

func (m BRT_O32v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type BRT_O32_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*BRT_O32_ORC_TQ1v2 `json:"tq_1,omitempty"`
	bpo *BPO                 `json:"bpo,omitempty"`
	btx []*BTX               `json:"btx,omitempty"`
}

func (m *BRT_O32_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *BRT_O32_ORCv2) GroupByTQ1() []*BRT_O32_ORC_TQ1v2 {
	return m.tq1
}

func (m *BRT_O32_ORCv2) BPO() *BPO {
	return m.bpo
}

func (m *BRT_O32_ORCv2) AllBTX() []*BTX {
	return m.btx
}

func (m BRT_O32_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"bpo": m.bpo,
		"btx": m.btx,
	}, nil
}

type BRT_O32_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *BRT_O32_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *BRT_O32_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m BRT_O32_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type BTS_O31v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *BTS_O31_PIDv2   `json:"pid,omitempty"`
	orc []*BTS_O31_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *BTS_O31v2) MSH() *MSH {
	return m.msh
}

func (m *BTS_O31v2) AllSFT() []*SFT {
	return m.sft
}

func (m *BTS_O31v2) AllNTE() []*NTE {
	return m.nte
}

func (m *BTS_O31v2) GroupByPID() *BTS_O31_PIDv2 {
	return m.pid
}

func (m *BTS_O31v2) GroupByORC() []*BTS_O31_ORCv2 {
	return m.orc
}

func (m BTS_O31v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type BTS_O31_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *BTS_O31_PIDv2) PID() *PID {
	return m.pid
}

func (m *BTS_O31_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *BTS_O31_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *BTS_O31_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *BTS_O31_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m BTS_O31_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type BTS_O31_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*BTS_O31_ORC_TQ1v2 `json:"tq_1,omitempty"`
	bpo *BPO                 `json:"bpo,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	btx []*BTS_O31_ORC_BTXv2 `json:"btx,omitempty"`
}

func (m *BTS_O31_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *BTS_O31_ORCv2) GroupByTQ1() []*BTS_O31_ORC_TQ1v2 {
	return m.tq1
}

func (m *BTS_O31_ORCv2) BPO() *BPO {
	return m.bpo
}

func (m *BTS_O31_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *BTS_O31_ORCv2) GroupByBTX() []*BTS_O31_ORC_BTXv2 {
	return m.btx
}

func (m BTS_O31_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"bpo": m.bpo,
		"nte": m.nte,
		"btx": m.btx,
	}, nil
}

type BTS_O31_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *BTS_O31_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *BTS_O31_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m BTS_O31_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type BTS_O31_ORC_BTXv2 struct {
	btx *BTX   `json:"btx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *BTS_O31_ORC_BTXv2) BTX() *BTX {
	return m.btx
}

func (m *BTS_O31_ORC_BTXv2) AllNTE() []*NTE {
	return m.nte
}

func (m BTS_O31_ORC_BTXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"btx": m.btx,
		"nte": m.nte,
	}, nil
}

type CRM_C01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid []*CRM_C01_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *CRM_C01v2) MSH() *MSH {
	return m.msh
}

func (m *CRM_C01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *CRM_C01v2) GroupByPID() []*CRM_C01_PIDv2 {
	return m.pid
}

func (m CRM_C01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
	}, nil
}

type CRM_C01_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pv1 *PV1   `json:"pv_1,omitempty"`
	csr *CSR   `json:"csr,omitempty"` // Required
	csp []*CSP `json:"csp,omitempty"`
}

func (m *CRM_C01_PIDv2) PID() *PID {
	return m.pid
}

func (m *CRM_C01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *CRM_C01_PIDv2) CSR() *CSR {
	return m.csr
}

func (m *CRM_C01_PIDv2) AllCSP() []*CSP {
	return m.csp
}

func (m CRM_C01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pv1": m.pv1,
		"csr": m.csr,
		"csp": m.csp,
	}, nil
}

type CSU_C09v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid []*CSU_C09_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *CSU_C09v2) MSH() *MSH {
	return m.msh
}

func (m *CSU_C09v2) AllSFT() []*SFT {
	return m.sft
}

func (m *CSU_C09v2) GroupByPID() []*CSU_C09_PIDv2 {
	return m.pid
}

func (m CSU_C09v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
	}, nil
}

type CSU_C09_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	csr *CSR                 `json:"csr,omitempty"` // Required
	csp []*CSU_C09_PID_CSPv2 `json:"csp,omitempty"` // Required
}

func (m *CSU_C09_PIDv2) PID() *PID {
	return m.pid
}

func (m *CSU_C09_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *CSU_C09_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *CSU_C09_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *CSU_C09_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *CSU_C09_PIDv2) CSR() *CSR {
	return m.csr
}

func (m *CSU_C09_PIDv2) GroupByCSP() []*CSU_C09_PID_CSPv2 {
	return m.csp
}

func (m CSU_C09_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"csr": m.csr,
		"csp": m.csp,
	}, nil
}

type CSU_C09_PID_CSPv2 struct {
	csp *CSP                     `json:"csp,omitempty"`
	css []*CSU_C09_PID_CSP_CSSv2 `json:"css,omitempty"` // Required
}

func (m *CSU_C09_PID_CSPv2) CSP() *CSP {
	return m.csp
}

func (m *CSU_C09_PID_CSPv2) GroupByCSS() []*CSU_C09_PID_CSP_CSSv2 {
	return m.css
}

func (m CSU_C09_PID_CSPv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"csp": m.csp,
		"css": m.css,
	}, nil
}

type CSU_C09_PID_CSP_CSSv2 struct {
	css *CSS                         `json:"css,omitempty"`
	obr []*CSU_C09_PID_CSP_CSS_OBRv2 `json:"obr,omitempty"` // Required
	orc []*CSU_C09_PID_CSP_CSS_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *CSU_C09_PID_CSP_CSSv2) CSS() *CSS {
	return m.css
}

func (m *CSU_C09_PID_CSP_CSSv2) GroupByOBR() []*CSU_C09_PID_CSP_CSS_OBRv2 {
	return m.obr
}

func (m *CSU_C09_PID_CSP_CSSv2) GroupByORC() []*CSU_C09_PID_CSP_CSS_ORCv2 {
	return m.orc
}

func (m CSU_C09_PID_CSP_CSSv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"css": m.css,
		"obr": m.obr,
		"orc": m.orc,
	}, nil
}

type CSU_C09_PID_CSP_CSS_OBRv2 struct {
	orc *ORC                             `json:"orc,omitempty"`
	obr *OBR                             `json:"obr,omitempty"` // Required
	tq1 []*CSU_C09_PID_CSP_CSS_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obx []*OBX                           `json:"obx,omitempty"` // Required
}

func (m *CSU_C09_PID_CSP_CSS_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *CSU_C09_PID_CSP_CSS_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *CSU_C09_PID_CSP_CSS_OBRv2) GroupByTQ1() []*CSU_C09_PID_CSP_CSS_OBR_TQ1v2 {
	return m.tq1
}

func (m *CSU_C09_PID_CSP_CSS_OBRv2) AllOBX() []*OBX {
	return m.obx
}

func (m CSU_C09_PID_CSP_CSS_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"tq1": m.tq1,
		"obx": m.obx,
	}, nil
}

type CSU_C09_PID_CSP_CSS_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *CSU_C09_PID_CSP_CSS_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *CSU_C09_PID_CSP_CSS_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m CSU_C09_PID_CSP_CSS_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type CSU_C09_PID_CSP_CSS_ORCv2 struct {
	orc *ORC                             `json:"orc,omitempty"`
	rxa []*CSU_C09_PID_CSP_CSS_ORC_RXAv2 `json:"rxa,omitempty"` // Required
}

func (m *CSU_C09_PID_CSP_CSS_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *CSU_C09_PID_CSP_CSS_ORCv2) GroupByRXA() []*CSU_C09_PID_CSP_CSS_ORC_RXAv2 {
	return m.rxa
}

func (m CSU_C09_PID_CSP_CSS_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxa": m.rxa,
	}, nil
}

type CSU_C09_PID_CSP_CSS_ORC_RXAv2 struct {
	rxa *RXA `json:"rxa,omitempty"` // Required
	rxr *RXR `json:"rxr,omitempty"` // Required
}

func (m *CSU_C09_PID_CSP_CSS_ORC_RXAv2) RXA() *RXA {
	return m.rxa
}

func (m *CSU_C09_PID_CSP_CSS_ORC_RXAv2) RXR() *RXR {
	return m.rxr
}

func (m CSU_C09_PID_CSP_CSS_ORC_RXAv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxa": m.rxa,
		"rxr": m.rxr,
	}, nil
}

type DFT_P03v2 struct {
	msh  *MSH             `json:"msh,omitempty"` // Required
	sft  []*SFT           `json:"sft,omitempty"`
	evn  *EVN             `json:"evn,omitempty"` // Required
	pid  *PID             `json:"pid,omitempty"` // Required
	pd1  *PD1             `json:"pd_1,omitempty"`
	rol1 []*ROL           `json:"rol_1,omitempty"`
	pv1  *PV1             `json:"pv_1,omitempty"`
	pv2  *PV2             `json:"pv_2,omitempty"`
	rol2 []*ROL           `json:"rol_2,omitempty"`
	db1  []*DB1           `json:"db_1,omitempty"`
	obr  []*DFT_P03_OBRv2 `json:"obr,omitempty"`
	ft1  []*DFT_P03_FT1v2 `json:"ft_1,omitempty"` // Required
	dg1  []*DG1           `json:"dg_1,omitempty"`
	drg  *DRG             `json:"drg,omitempty"`
	gt1  []*GT1           `json:"gt_1,omitempty"`
	in1  []*DFT_P03_IN1v2 `json:"in_1,omitempty"`
	acc  *ACC             `json:"acc,omitempty"`
}

func (m *DFT_P03v2) MSH() *MSH {
	return m.msh
}

func (m *DFT_P03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *DFT_P03v2) EVN() *EVN {
	return m.evn
}

func (m *DFT_P03v2) PID() *PID {
	return m.pid
}

func (m *DFT_P03v2) PD1() *PD1 {
	return m.pd1
}

func (m *DFT_P03v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *DFT_P03v2) PV1() *PV1 {
	return m.pv1
}

func (m *DFT_P03v2) PV2() *PV2 {
	return m.pv2
}

func (m *DFT_P03v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *DFT_P03v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *DFT_P03v2) GroupByOBR() []*DFT_P03_OBRv2 {
	return m.obr
}

func (m *DFT_P03v2) GroupByFT1() []*DFT_P03_FT1v2 {
	return m.ft1
}

func (m *DFT_P03v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *DFT_P03v2) DRG() *DRG {
	return m.drg
}

func (m *DFT_P03v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *DFT_P03v2) GroupByIN1() []*DFT_P03_IN1v2 {
	return m.in1
}

func (m *DFT_P03v2) ACC() *ACC {
	return m.acc
}

func (m DFT_P03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obr":  m.obr,
		"ft1":  m.ft1,
		"dg1":  m.dg1,
		"drg":  m.drg,
		"gt1":  m.gt1,
		"in1":  m.in1,
		"acc":  m.acc,
	}, nil
}

type DFT_P03_OBRv2 struct {
	orc *ORC                 `json:"orc,omitempty"`
	tq1 []*DFT_P03_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obx []*DFT_P03_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *DFT_P03_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *DFT_P03_OBRv2) GroupByTQ1() []*DFT_P03_OBR_TQ1v2 {
	return m.tq1
}

func (m *DFT_P03_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *DFT_P03_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *DFT_P03_OBRv2) GroupByOBX() []*DFT_P03_OBR_OBXv2 {
	return m.obx
}

func (m DFT_P03_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type DFT_P03_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *DFT_P03_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *DFT_P03_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m DFT_P03_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type DFT_P03_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *DFT_P03_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *DFT_P03_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m DFT_P03_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type DFT_P03_FT1v2 struct {
	ft1 *FT1                 `json:"ft_1,omitempty"` // Required
	nte *NTE                 `json:"nte,omitempty"`
	pr1 []*DFT_P03_FT1_PR1v2 `json:"pr_1,omitempty"`
	obr []*DFT_P03_FT1_OBRv2 `json:"obr,omitempty"`
}

func (m *DFT_P03_FT1v2) FT1() *FT1 {
	return m.ft1
}

func (m *DFT_P03_FT1v2) NTE() *NTE {
	return m.nte
}

func (m *DFT_P03_FT1v2) GroupByPR1() []*DFT_P03_FT1_PR1v2 {
	return m.pr1
}

func (m *DFT_P03_FT1v2) GroupByOBR() []*DFT_P03_FT1_OBRv2 {
	return m.obr
}

func (m DFT_P03_FT1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ft1": m.ft1,
		"nte": m.nte,
		"pr1": m.pr1,
		"obr": m.obr,
	}, nil
}

type DFT_P03_FT1_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *DFT_P03_FT1_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *DFT_P03_FT1_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m DFT_P03_FT1_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type DFT_P03_FT1_OBRv2 struct {
	orc *ORC                     `json:"orc,omitempty"`
	tq1 []*DFT_P03_FT1_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	obx []*DFT_P03_FT1_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *DFT_P03_FT1_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *DFT_P03_FT1_OBRv2) GroupByTQ1() []*DFT_P03_FT1_OBR_TQ1v2 {
	return m.tq1
}

func (m *DFT_P03_FT1_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *DFT_P03_FT1_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *DFT_P03_FT1_OBRv2) GroupByOBX() []*DFT_P03_FT1_OBR_OBXv2 {
	return m.obx
}

func (m DFT_P03_FT1_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type DFT_P03_FT1_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *DFT_P03_FT1_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *DFT_P03_FT1_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m DFT_P03_FT1_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type DFT_P03_FT1_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *DFT_P03_FT1_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *DFT_P03_FT1_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m DFT_P03_FT1_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type DFT_P03_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *DFT_P03_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *DFT_P03_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *DFT_P03_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *DFT_P03_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m DFT_P03_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type DFT_P11v2 struct {
	msh  *MSH             `json:"msh,omitempty"` // Required
	sft  []*SFT           `json:"sft,omitempty"`
	evn  *EVN             `json:"evn,omitempty"` // Required
	pid  *PID             `json:"pid,omitempty"` // Required
	pd1  *PD1             `json:"pd_1,omitempty"`
	rol1 []*ROL           `json:"rol_1,omitempty"`
	pv1  *PV1             `json:"pv_1,omitempty"`
	pv2  *PV2             `json:"pv_2,omitempty"`
	rol2 []*ROL           `json:"rol_2,omitempty"`
	db1  []*DB1           `json:"db_1,omitempty"`
	obr  []*DFT_P11_OBRv2 `json:"obr,omitempty"`
	dg1  []*DG1           `json:"dg_1,omitempty"`
	drg  *DRG             `json:"drg,omitempty"`
	gt1  []*GT1           `json:"gt_1,omitempty"`
	in1  []*DFT_P11_IN1v2 `json:"in_1,omitempty"`
	acc  *ACC             `json:"acc,omitempty"`
	ft1  []*DFT_P11_FT1v2 `json:"ft_1,omitempty"` // Required
}

func (m *DFT_P11v2) MSH() *MSH {
	return m.msh
}

func (m *DFT_P11v2) AllSFT() []*SFT {
	return m.sft
}

func (m *DFT_P11v2) EVN() *EVN {
	return m.evn
}

func (m *DFT_P11v2) PID() *PID {
	return m.pid
}

func (m *DFT_P11v2) PD1() *PD1 {
	return m.pd1
}

func (m *DFT_P11v2) AllROL1() []*ROL {
	return m.rol1
}

func (m *DFT_P11v2) PV1() *PV1 {
	return m.pv1
}

func (m *DFT_P11v2) PV2() *PV2 {
	return m.pv2
}

func (m *DFT_P11v2) AllROL2() []*ROL {
	return m.rol2
}

func (m *DFT_P11v2) AllDB1() []*DB1 {
	return m.db1
}

func (m *DFT_P11v2) GroupByOBR() []*DFT_P11_OBRv2 {
	return m.obr
}

func (m *DFT_P11v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *DFT_P11v2) DRG() *DRG {
	return m.drg
}

func (m *DFT_P11v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *DFT_P11v2) GroupByIN1() []*DFT_P11_IN1v2 {
	return m.in1
}

func (m *DFT_P11v2) ACC() *ACC {
	return m.acc
}

func (m *DFT_P11v2) GroupByFT1() []*DFT_P11_FT1v2 {
	return m.ft1
}

func (m DFT_P11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"evn":  m.evn,
		"pid":  m.pid,
		"pd1":  m.pd1,
		"rol1": m.rol1,
		"pv1":  m.pv1,
		"pv2":  m.pv2,
		"rol2": m.rol2,
		"db1":  m.db1,
		"obr":  m.obr,
		"dg1":  m.dg1,
		"drg":  m.drg,
		"gt1":  m.gt1,
		"in1":  m.in1,
		"acc":  m.acc,
		"ft1":  m.ft1,
	}, nil
}

type DFT_P11_OBRv2 struct {
	orc *ORC                 `json:"orc,omitempty"`
	tq1 []*DFT_P11_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obx []*DFT_P11_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *DFT_P11_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *DFT_P11_OBRv2) GroupByTQ1() []*DFT_P11_OBR_TQ1v2 {
	return m.tq1
}

func (m *DFT_P11_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *DFT_P11_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *DFT_P11_OBRv2) GroupByOBX() []*DFT_P11_OBR_OBXv2 {
	return m.obx
}

func (m DFT_P11_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type DFT_P11_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *DFT_P11_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *DFT_P11_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m DFT_P11_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type DFT_P11_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *DFT_P11_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *DFT_P11_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m DFT_P11_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type DFT_P11_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *DFT_P11_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *DFT_P11_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *DFT_P11_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *DFT_P11_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m DFT_P11_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type DFT_P11_FT1v2 struct {
	ft1 *FT1                 `json:"ft_1,omitempty"` // Required
	pr1 []*DFT_P11_FT1_PR1v2 `json:"pr_1,omitempty"`
	obr []*DFT_P11_FT1_OBRv2 `json:"obr,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	drg *DRG                 `json:"drg,omitempty"`
	gt1 []*GT1               `json:"gt_1,omitempty"`
	in1 []*DFT_P11_FT1_IN1v2 `json:"in_1,omitempty"`
}

func (m *DFT_P11_FT1v2) FT1() *FT1 {
	return m.ft1
}

func (m *DFT_P11_FT1v2) GroupByPR1() []*DFT_P11_FT1_PR1v2 {
	return m.pr1
}

func (m *DFT_P11_FT1v2) GroupByOBR() []*DFT_P11_FT1_OBRv2 {
	return m.obr
}

func (m *DFT_P11_FT1v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *DFT_P11_FT1v2) DRG() *DRG {
	return m.drg
}

func (m *DFT_P11_FT1v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *DFT_P11_FT1v2) GroupByIN1() []*DFT_P11_FT1_IN1v2 {
	return m.in1
}

func (m DFT_P11_FT1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ft1": m.ft1,
		"pr1": m.pr1,
		"obr": m.obr,
		"dg1": m.dg1,
		"drg": m.drg,
		"gt1": m.gt1,
		"in1": m.in1,
	}, nil
}

type DFT_P11_FT1_PR1v2 struct {
	pr1 *PR1   `json:"pr_1,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *DFT_P11_FT1_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *DFT_P11_FT1_PR1v2) AllROL() []*ROL {
	return m.rol
}

func (m DFT_P11_FT1_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"rol": m.rol,
	}, nil
}

type DFT_P11_FT1_OBRv2 struct {
	orc *ORC                     `json:"orc,omitempty"`
	tq1 []*DFT_P11_FT1_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	obx []*DFT_P11_FT1_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *DFT_P11_FT1_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *DFT_P11_FT1_OBRv2) GroupByTQ1() []*DFT_P11_FT1_OBR_TQ1v2 {
	return m.tq1
}

func (m *DFT_P11_FT1_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *DFT_P11_FT1_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *DFT_P11_FT1_OBRv2) GroupByOBX() []*DFT_P11_FT1_OBR_OBXv2 {
	return m.obx
}

func (m DFT_P11_FT1_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type DFT_P11_FT1_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *DFT_P11_FT1_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *DFT_P11_FT1_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m DFT_P11_FT1_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type DFT_P11_FT1_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *DFT_P11_FT1_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *DFT_P11_FT1_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m DFT_P11_FT1_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type DFT_P11_FT1_IN1v2 struct {
	in1 *IN1   `json:"in_1,omitempty"` // Required
	in2 *IN2   `json:"in_2,omitempty"`
	in3 []*IN3 `json:"in_3,omitempty"`
	rol []*ROL `json:"rol,omitempty"`
}

func (m *DFT_P11_FT1_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *DFT_P11_FT1_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *DFT_P11_FT1_IN1v2) AllIN3() []*IN3 {
	return m.in3
}

func (m *DFT_P11_FT1_IN1v2) AllROL() []*ROL {
	return m.rol
}

func (m DFT_P11_FT1_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
		"rol": m.rol,
	}, nil
}

type DOC_T12v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	pid []*DOC_T12_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *DOC_T12v2) MSH() *MSH {
	return m.msh
}

func (m *DOC_T12v2) MSA() *MSA {
	return m.msa
}

func (m *DOC_T12v2) ERR() *ERR {
	return m.err
}

func (m *DOC_T12v2) QAK() *QAK {
	return m.qak
}

func (m *DOC_T12v2) QRD() *QRD {
	return m.qrd
}

func (m *DOC_T12v2) GroupByPID() []*DOC_T12_PIDv2 {
	return m.pid
}

func (m *DOC_T12v2) DSC() *DSC {
	return m.dsc
}

func (m DOC_T12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type DOC_T12_PIDv2 struct {
	evn *EVN   `json:"evn,omitempty"`
	pid *PID   `json:"pid,omitempty"`  // Required
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	txa *TXA   `json:"txa,omitempty"`  // Required
	obx []*OBX `json:"obx,omitempty"`
}

func (m *DOC_T12_PIDv2) EVN() *EVN {
	return m.evn
}

func (m *DOC_T12_PIDv2) PID() *PID {
	return m.pid
}

func (m *DOC_T12_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *DOC_T12_PIDv2) TXA() *TXA {
	return m.txa
}

func (m *DOC_T12_PIDv2) AllOBX() []*OBX {
	return m.obx
}

func (m DOC_T12_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"txa": m.txa,
		"obx": m.obx,
	}, nil
}

type DSR_P04v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
	dsp []*DSP `json:"dsp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *DSR_P04v2) MSH() *MSH {
	return m.msh
}

func (m *DSR_P04v2) MSA() *MSA {
	return m.msa
}

func (m *DSR_P04v2) ERR() *ERR {
	return m.err
}

func (m *DSR_P04v2) QRD() *QRD {
	return m.qrd
}

func (m *DSR_P04v2) QRF() *QRF {
	return m.qrf
}

func (m *DSR_P04v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *DSR_P04v2) DSC() *DSC {
	return m.dsc
}

func (m DSR_P04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type DSR_Q01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
	dsp []*DSP `json:"dsp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *DSR_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *DSR_Q01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *DSR_Q01v2) MSA() *MSA {
	return m.msa
}

func (m *DSR_Q01v2) ERR() *ERR {
	return m.err
}

func (m *DSR_Q01v2) QAK() *QAK {
	return m.qak
}

func (m *DSR_Q01v2) QRD() *QRD {
	return m.qrd
}

func (m *DSR_Q01v2) QRF() *QRF {
	return m.qrf
}

func (m *DSR_Q01v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *DSR_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m DSR_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type DSR_Q03v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"`
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
	dsp []*DSP `json:"dsp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *DSR_Q03v2) MSH() *MSH {
	return m.msh
}

func (m *DSR_Q03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *DSR_Q03v2) MSA() *MSA {
	return m.msa
}

func (m *DSR_Q03v2) ERR() *ERR {
	return m.err
}

func (m *DSR_Q03v2) QAK() *QAK {
	return m.qak
}

func (m *DSR_Q03v2) QRD() *QRD {
	return m.qrd
}

func (m *DSR_Q03v2) QRF() *QRF {
	return m.qrf
}

func (m *DSR_Q03v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *DSR_Q03v2) DSC() *DSC {
	return m.dsc
}

func (m DSR_Q03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type DSR_R03v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
	dsp []*DSP `json:"dsp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *DSR_R03v2) MSH() *MSH {
	return m.msh
}

func (m *DSR_R03v2) MSA() *MSA {
	return m.msa
}

func (m *DSR_R03v2) QRD() *QRD {
	return m.qrd
}

func (m *DSR_R03v2) QRF() *QRF {
	return m.qrf
}

func (m *DSR_R03v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *DSR_R03v2) DSC() *DSC {
	return m.dsc
}

func (m DSR_R03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type EAC_U07v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	equ *EQU             `json:"equ,omitempty"` // Required
	ecd []*EAC_U07_ECDv2 `json:"ecd,omitempty"` // Required
	rol *ROL             `json:"rol,omitempty"`
}

func (m *EAC_U07v2) MSH() *MSH {
	return m.msh
}

func (m *EAC_U07v2) AllSFT() []*SFT {
	return m.sft
}

func (m *EAC_U07v2) EQU() *EQU {
	return m.equ
}

func (m *EAC_U07v2) GroupByECD() []*EAC_U07_ECDv2 {
	return m.ecd
}

func (m *EAC_U07v2) ROL() *ROL {
	return m.rol
}

func (m EAC_U07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"ecd": m.ecd,
		"rol": m.rol,
	}, nil
}

type EAC_U07_ECDv2 struct {
	ecd *ECD   `json:"ecd,omitempty"` // Required
	tq1 *TQ1   `json:"tq_1,omitempty"`
	sac *SAC   `json:"sac,omitempty"` // Required
	spm []*SPM `json:"spm,omitempty"`
	cns *CNS   `json:"cns,omitempty"`
}

func (m *EAC_U07_ECDv2) ECD() *ECD {
	return m.ecd
}

func (m *EAC_U07_ECDv2) TQ1() *TQ1 {
	return m.tq1
}

func (m *EAC_U07_ECDv2) SAC() *SAC {
	return m.sac
}

func (m *EAC_U07_ECDv2) AllSPM() []*SPM {
	return m.spm
}

func (m *EAC_U07_ECDv2) CNS() *CNS {
	return m.cns
}

func (m EAC_U07_ECDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ecd": m.ecd,
		"tq1": m.tq1,
		"sac": m.sac,
		"spm": m.spm,
		"cns": m.cns,
	}, nil
}

type EAN_U09v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	equ *EQU             `json:"equ,omitempty"` // Required
	nds []*EAN_U09_NDSv2 `json:"nds,omitempty"` // Required
	rol *ROL             `json:"rol,omitempty"`
}

func (m *EAN_U09v2) MSH() *MSH {
	return m.msh
}

func (m *EAN_U09v2) AllSFT() []*SFT {
	return m.sft
}

func (m *EAN_U09v2) EQU() *EQU {
	return m.equ
}

func (m *EAN_U09v2) GroupByNDS() []*EAN_U09_NDSv2 {
	return m.nds
}

func (m *EAN_U09v2) ROL() *ROL {
	return m.rol
}

func (m EAN_U09v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"nds": m.nds,
		"rol": m.rol,
	}, nil
}

type EAN_U09_NDSv2 struct {
	nds *NDS `json:"nds,omitempty"` // Required
	nte *NTE `json:"nte,omitempty"`
}

func (m *EAN_U09_NDSv2) NDS() *NDS {
	return m.nds
}

func (m *EAN_U09_NDSv2) NTE() *NTE {
	return m.nte
}

func (m EAN_U09_NDSv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nds": m.nds,
		"nte": m.nte,
	}, nil
}

type EAR_U08v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	equ *EQU             `json:"equ,omitempty"` // Required
	ecd []*EAR_U08_ECDv2 `json:"ecd,omitempty"` // Required
	rol *ROL             `json:"rol,omitempty"`
}

func (m *EAR_U08v2) MSH() *MSH {
	return m.msh
}

func (m *EAR_U08v2) AllSFT() []*SFT {
	return m.sft
}

func (m *EAR_U08v2) EQU() *EQU {
	return m.equ
}

func (m *EAR_U08v2) GroupByECD() []*EAR_U08_ECDv2 {
	return m.ecd
}

func (m *EAR_U08v2) ROL() *ROL {
	return m.rol
}

func (m EAR_U08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"ecd": m.ecd,
		"rol": m.rol,
	}, nil
}

type EAR_U08_ECDv2 struct {
	ecd *ECD   `json:"ecd,omitempty"` // Required
	sac *SAC   `json:"sac,omitempty"` // Required
	spm []*SPM `json:"spm,omitempty"`
	ecr *ECR   `json:"ecr,omitempty"` // Required
}

func (m *EAR_U08_ECDv2) ECD() *ECD {
	return m.ecd
}

func (m *EAR_U08_ECDv2) SAC() *SAC {
	return m.sac
}

func (m *EAR_U08_ECDv2) AllSPM() []*SPM {
	return m.spm
}

func (m *EAR_U08_ECDv2) ECR() *ECR {
	return m.ecr
}

func (m EAR_U08_ECDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ecd": m.ecd,
		"sac": m.sac,
		"spm": m.spm,
		"ecr": m.ecr,
	}, nil
}

type EDR_Q01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	dsp []*DSP `json:"dsp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *EDR_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *EDR_Q01v2) MSA() *MSA {
	return m.msa
}

func (m *EDR_Q01v2) ERR() *ERR {
	return m.err
}

func (m *EDR_Q01v2) QAK() *QAK {
	return m.qak
}

func (m *EDR_Q01v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *EDR_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m EDR_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type EDR_R07v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	dsp []*DSP `json:"dsp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *EDR_R07v2) MSH() *MSH {
	return m.msh
}

func (m *EDR_R07v2) AllSFT() []*SFT {
	return m.sft
}

func (m *EDR_R07v2) MSA() *MSA {
	return m.msa
}

func (m *EDR_R07v2) ERR() *ERR {
	return m.err
}

func (m *EDR_R07v2) QAK() *QAK {
	return m.qak
}

func (m *EDR_R07v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *EDR_R07v2) DSC() *DSC {
	return m.dsc
}

func (m EDR_R07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type EQQ_Q01v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	eql *EQL `json:"eql,omitempty"` // Required
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *EQQ_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *EQQ_Q01v2) EQL() *EQL {
	return m.eql
}

func (m *EQQ_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m EQQ_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"eql": m.eql,
		"dsc": m.dsc,
	}, nil
}

type EQQ_Q04v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	eql *EQL   `json:"eql,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *EQQ_Q04v2) MSH() *MSH {
	return m.msh
}

func (m *EQQ_Q04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *EQQ_Q04v2) EQL() *EQL {
	return m.eql
}

func (m *EQQ_Q04v2) DSC() *DSC {
	return m.dsc
}

func (m EQQ_Q04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"eql": m.eql,
		"dsc": m.dsc,
	}, nil
}

type ERP_Q01v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	msa *MSA `json:"msa,omitempty"` // Required
	err *ERR `json:"err,omitempty"`
	qak *QAK `json:"qak,omitempty"` // Required
	erq *ERQ `json:"erq,omitempty"` // Required
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *ERP_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *ERP_Q01v2) MSA() *MSA {
	return m.msa
}

func (m *ERP_Q01v2) ERR() *ERR {
	return m.err
}

func (m *ERP_Q01v2) QAK() *QAK {
	return m.qak
}

func (m *ERP_Q01v2) ERQ() *ERQ {
	return m.erq
}

func (m *ERP_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m ERP_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"erq": m.erq,
		"dsc": m.dsc,
	}, nil
}

type ERP_R09v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	erq *ERQ   `json:"erq,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *ERP_R09v2) MSH() *MSH {
	return m.msh
}

func (m *ERP_R09v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ERP_R09v2) MSA() *MSA {
	return m.msa
}

func (m *ERP_R09v2) ERR() *ERR {
	return m.err
}

func (m *ERP_R09v2) QAK() *QAK {
	return m.qak
}

func (m *ERP_R09v2) ERQ() *ERQ {
	return m.erq
}

func (m *ERP_R09v2) DSC() *DSC {
	return m.dsc
}

func (m ERP_R09v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"erq": m.erq,
		"dsc": m.dsc,
	}, nil
}

type ESR_U02v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	equ *EQU   `json:"equ,omitempty"` // Required
	rol *ROL   `json:"rol,omitempty"`
}

func (m *ESR_U02v2) MSH() *MSH {
	return m.msh
}

func (m *ESR_U02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ESR_U02v2) EQU() *EQU {
	return m.equ
}

func (m *ESR_U02v2) ROL() *ROL {
	return m.rol
}

func (m ESR_U02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"rol": m.rol,
	}, nil
}

type ESU_U01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	equ *EQU   `json:"equ,omitempty"` // Required
	isd []*ISD `json:"isd,omitempty"`
	rol *ROL   `json:"rol,omitempty"`
}

func (m *ESU_U01v2) MSH() *MSH {
	return m.msh
}

func (m *ESU_U01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ESU_U01v2) EQU() *EQU {
	return m.equ
}

func (m *ESU_U01v2) AllISD() []*ISD {
	return m.isd
}

func (m *ESU_U01v2) ROL() *ROL {
	return m.rol
}

func (m ESU_U01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"isd": m.isd,
		"rol": m.rol,
	}, nil
}

type INR_U06v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	equ *EQU   `json:"equ,omitempty"` // Required
	inv []*INV `json:"inv,omitempty"` // Required
	rol *ROL   `json:"rol,omitempty"`
}

func (m *INR_U06v2) MSH() *MSH {
	return m.msh
}

func (m *INR_U06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *INR_U06v2) EQU() *EQU {
	return m.equ
}

func (m *INR_U06v2) AllINV() []*INV {
	return m.inv
}

func (m *INR_U06v2) ROL() *ROL {
	return m.rol
}

func (m INR_U06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"inv": m.inv,
		"rol": m.rol,
	}, nil
}

type INU_U05v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	equ *EQU   `json:"equ,omitempty"` // Required
	inv []*INV `json:"inv,omitempty"` // Required
	rol *ROL   `json:"rol,omitempty"`
}

func (m *INU_U05v2) MSH() *MSH {
	return m.msh
}

func (m *INU_U05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *INU_U05v2) EQU() *EQU {
	return m.equ
}

func (m *INU_U05v2) AllINV() []*INV {
	return m.inv
}

func (m *INU_U05v2) ROL() *ROL {
	return m.rol
}

func (m INU_U05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"inv": m.inv,
		"rol": m.rol,
	}, nil
}

type LSU_U12v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	equ *EQU   `json:"equ,omitempty"` // Required
	eqp []*EQP `json:"eqp,omitempty"` // Required
	rol *ROL   `json:"rol,omitempty"`
}

func (m *LSU_U12v2) MSH() *MSH {
	return m.msh
}

func (m *LSU_U12v2) AllSFT() []*SFT {
	return m.sft
}

func (m *LSU_U12v2) EQU() *EQU {
	return m.equ
}

func (m *LSU_U12v2) AllEQP() []*EQP {
	return m.eqp
}

func (m *LSU_U12v2) ROL() *ROL {
	return m.rol
}

func (m LSU_U12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"eqp": m.eqp,
		"rol": m.rol,
	}, nil
}

type MCF_Q02v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	msa *MSA `json:"msa,omitempty"` // Required
}

func (m *MCF_Q02v2) MSH() *MSH {
	return m.msh
}

func (m *MCF_Q02v2) MSA() *MSA {
	return m.msa
}

func (m MCF_Q02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
	}, nil
}

type MDM_T01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"`  // Required
	pid *PID             `json:"pid,omitempty"`  // Required
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	orc []*MDM_T01_ORCv2 `json:"orc,omitempty"`
	txa *TXA             `json:"txa,omitempty"` // Required
}

func (m *MDM_T01v2) MSH() *MSH {
	return m.msh
}

func (m *MDM_T01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MDM_T01v2) EVN() *EVN {
	return m.evn
}

func (m *MDM_T01v2) PID() *PID {
	return m.pid
}

func (m *MDM_T01v2) PV1() *PV1 {
	return m.pv1
}

func (m *MDM_T01v2) GroupByORC() []*MDM_T01_ORCv2 {
	return m.orc
}

func (m *MDM_T01v2) TXA() *TXA {
	return m.txa
}

func (m MDM_T01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"orc": m.orc,
		"txa": m.txa,
	}, nil
}

type MDM_T01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*MDM_T01_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
}

func (m *MDM_T01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *MDM_T01_ORCv2) GroupByTQ1() []*MDM_T01_ORC_TQ1v2 {
	return m.tq1
}

func (m *MDM_T01_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *MDM_T01_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m MDM_T01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
	}, nil
}

type MDM_T01_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *MDM_T01_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *MDM_T01_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m MDM_T01_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type MDM_T02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"`  // Required
	pid *PID             `json:"pid,omitempty"`  // Required
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	orc []*MDM_T02_ORCv2 `json:"orc,omitempty"`
	txa *TXA             `json:"txa,omitempty"` // Required
	obx []*MDM_T02_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *MDM_T02v2) MSH() *MSH {
	return m.msh
}

func (m *MDM_T02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MDM_T02v2) EVN() *EVN {
	return m.evn
}

func (m *MDM_T02v2) PID() *PID {
	return m.pid
}

func (m *MDM_T02v2) PV1() *PV1 {
	return m.pv1
}

func (m *MDM_T02v2) GroupByORC() []*MDM_T02_ORCv2 {
	return m.orc
}

func (m *MDM_T02v2) TXA() *TXA {
	return m.txa
}

func (m *MDM_T02v2) GroupByOBX() []*MDM_T02_OBXv2 {
	return m.obx
}

func (m MDM_T02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pv1": m.pv1,
		"orc": m.orc,
		"txa": m.txa,
		"obx": m.obx,
	}, nil
}

type MDM_T02_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*MDM_T02_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
}

func (m *MDM_T02_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *MDM_T02_ORCv2) GroupByTQ1() []*MDM_T02_ORC_TQ1v2 {
	return m.tq1
}

func (m *MDM_T02_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *MDM_T02_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m MDM_T02_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
	}, nil
}

type MDM_T02_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *MDM_T02_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *MDM_T02_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m MDM_T02_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type MDM_T02_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *MDM_T02_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *MDM_T02_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m MDM_T02_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type MFD_M01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	mfi *MFI   `json:"mfi,omitempty"` // Required
	mfa []*MFA `json:"mfa,omitempty"`
}

func (m *MFD_M01v2) MSH() *MSH {
	return m.msh
}

func (m *MFD_M01v2) MFI() *MFI {
	return m.mfi
}

func (m *MFD_M01v2) AllMFA() []*MFA {
	return m.mfa
}

func (m MFD_M01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"mfi": m.mfi,
		"mfa": m.mfa,
	}, nil
}

type MFD_M02v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	mfi *MFI   `json:"mfi,omitempty"` // Required
	mfa []*MFA `json:"mfa,omitempty"`
}

func (m *MFD_M02v2) MSH() *MSH {
	return m.msh
}

func (m *MFD_M02v2) MFI() *MFI {
	return m.mfi
}

func (m *MFD_M02v2) AllMFA() []*MFA {
	return m.mfa
}

func (m MFD_M02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"mfi": m.mfi,
		"mfa": m.mfa,
	}, nil
}

type MFD_M03v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	mfi *MFI   `json:"mfi,omitempty"` // Required
	mfa []*MFA `json:"mfa,omitempty"`
}

func (m *MFD_M03v2) MSH() *MSH {
	return m.msh
}

func (m *MFD_M03v2) MFI() *MFI {
	return m.mfi
}

func (m *MFD_M03v2) AllMFA() []*MFA {
	return m.mfa
}

func (m MFD_M03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"mfi": m.mfi,
		"mfa": m.mfa,
	}, nil
}

type MFK_M01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err []*ERR `json:"err,omitempty"`
	mfi *MFI   `json:"mfi,omitempty"` // Required
	mfa []*MFA `json:"mfa,omitempty"`
}

func (m *MFK_M01v2) MSH() *MSH {
	return m.msh
}

func (m *MFK_M01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFK_M01v2) MSA() *MSA {
	return m.msa
}

func (m *MFK_M01v2) AllERR() []*ERR {
	return m.err
}

func (m *MFK_M01v2) MFI() *MFI {
	return m.mfi
}

func (m *MFK_M01v2) AllMFA() []*MFA {
	return m.mfa
}

func (m MFK_M01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"mfi": m.mfi,
		"mfa": m.mfa,
	}, nil
}

type MFK_M02v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	mfi *MFI   `json:"mfi,omitempty"` // Required
	mfa []*MFA `json:"mfa,omitempty"`
}

func (m *MFK_M02v2) MSH() *MSH {
	return m.msh
}

func (m *MFK_M02v2) MSA() *MSA {
	return m.msa
}

func (m *MFK_M02v2) MFI() *MFI {
	return m.mfi
}

func (m *MFK_M02v2) AllMFA() []*MFA {
	return m.mfa
}

func (m MFK_M02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"mfi": m.mfi,
		"mfa": m.mfa,
	}, nil
}

type MFK_M03v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	mfi *MFI   `json:"mfi,omitempty"` // Required
	mfa []*MFA `json:"mfa,omitempty"`
}

func (m *MFK_M03v2) MSH() *MSH {
	return m.msh
}

func (m *MFK_M03v2) MSA() *MSA {
	return m.msa
}

func (m *MFK_M03v2) ERR() *ERR {
	return m.err
}

func (m *MFK_M03v2) MFI() *MFI {
	return m.mfi
}

func (m *MFK_M03v2) AllMFA() []*MFA {
	return m.mfa
}

func (m MFK_M03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"mfi": m.mfi,
		"mfa": m.mfa,
	}, nil
}

type MFN_M01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M01_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M01v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M01v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M01v2) GroupByMFE() []*MFN_M01_MFEv2 {
	return m.mfe
}

func (m MFN_M01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M01_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"` // Required
}

func (m *MFN_M01_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m MFN_M01_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
	}, nil
}

type MFN_M02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M02_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M02v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M02v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M02v2) GroupByMFE() []*MFN_M02_MFEv2 {
	return m.mfe
}

func (m MFN_M02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M02_MFEv2 struct {
	mfe *MFE   `json:"mfe,omitempty"` // Required
	stf *STF   `json:"stf,omitempty"` // Required
	pra []*PRA `json:"pra,omitempty"`
	org []*ORG `json:"org,omitempty"`
	aff []*AFF `json:"aff,omitempty"`
	lan []*LAN `json:"lan,omitempty"`
	edu []*EDU `json:"edu,omitempty"`
	cer []*CER `json:"cer,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *MFN_M02_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M02_MFEv2) STF() *STF {
	return m.stf
}

func (m *MFN_M02_MFEv2) AllPRA() []*PRA {
	return m.pra
}

func (m *MFN_M02_MFEv2) AllORG() []*ORG {
	return m.org
}

func (m *MFN_M02_MFEv2) AllAFF() []*AFF {
	return m.aff
}

func (m *MFN_M02_MFEv2) AllLAN() []*LAN {
	return m.lan
}

func (m *MFN_M02_MFEv2) AllEDU() []*EDU {
	return m.edu
}

func (m *MFN_M02_MFEv2) AllCER() []*CER {
	return m.cer
}

func (m *MFN_M02_MFEv2) AllNTE() []*NTE {
	return m.nte
}

func (m MFN_M02_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"stf": m.stf,
		"pra": m.pra,
		"org": m.org,
		"aff": m.aff,
		"lan": m.lan,
		"edu": m.edu,
		"cer": m.cer,
		"nte": m.nte,
	}, nil
}

type MFN_M03v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M03_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M03v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M03v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M03v2) GroupByMFE() []*MFN_M03_MFEv2 {
	return m.mfe
}

func (m MFN_M03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M03_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"`  // Required
	om1 *OM1 `json:"om_1,omitempty"` // Required
}

func (m *MFN_M03_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M03_MFEv2) OM1() *OM1 {
	return m.om1
}

func (m MFN_M03_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"om1": m.om1,
	}, nil
}

type MFN_M04v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M04_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M04v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M04v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M04v2) GroupByMFE() []*MFN_M04_MFEv2 {
	return m.mfe
}

func (m MFN_M04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M04_MFEv2 struct {
	mfe *MFE   `json:"mfe,omitempty"` // Required
	cdm *CDM   `json:"cdm,omitempty"` // Required
	prc []*PRC `json:"prc,omitempty"`
}

func (m *MFN_M04_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M04_MFEv2) CDM() *CDM {
	return m.cdm
}

func (m *MFN_M04_MFEv2) AllPRC() []*PRC {
	return m.prc
}

func (m MFN_M04_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"cdm": m.cdm,
		"prc": m.prc,
	}, nil
}

type MFN_M05v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M05_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M05v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M05v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M05v2) GroupByMFE() []*MFN_M05_MFEv2 {
	return m.mfe
}

func (m MFN_M05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M05_MFEv2 struct {
	mfe *MFE                 `json:"mfe,omitempty"` // Required
	loc *LOC                 `json:"loc,omitempty"` // Required
	lch []*LCH               `json:"lch,omitempty"`
	lrl []*LRL               `json:"lrl,omitempty"`
	ldp []*MFN_M05_MFE_LDPv2 `json:"ldp,omitempty"` // Required
}

func (m *MFN_M05_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M05_MFEv2) LOC() *LOC {
	return m.loc
}

func (m *MFN_M05_MFEv2) AllLCH() []*LCH {
	return m.lch
}

func (m *MFN_M05_MFEv2) AllLRL() []*LRL {
	return m.lrl
}

func (m *MFN_M05_MFEv2) GroupByLDP() []*MFN_M05_MFE_LDPv2 {
	return m.ldp
}

func (m MFN_M05_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"loc": m.loc,
		"lch": m.lch,
		"lrl": m.lrl,
		"ldp": m.ldp,
	}, nil
}

type MFN_M05_MFE_LDPv2 struct {
	ldp *LDP   `json:"ldp,omitempty"` // Required
	lch []*LCH `json:"lch,omitempty"`
	lcc []*LCC `json:"lcc,omitempty"`
}

func (m *MFN_M05_MFE_LDPv2) LDP() *LDP {
	return m.ldp
}

func (m *MFN_M05_MFE_LDPv2) AllLCH() []*LCH {
	return m.lch
}

func (m *MFN_M05_MFE_LDPv2) AllLCC() []*LCC {
	return m.lcc
}

func (m MFN_M05_MFE_LDPv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ldp": m.ldp,
		"lch": m.lch,
		"lcc": m.lcc,
	}, nil
}

type MFN_M06v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M06_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M06v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M06v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M06v2) GroupByMFE() []*MFN_M06_MFEv2 {
	return m.mfe
}

func (m MFN_M06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M06_MFEv2 struct {
	mfe *MFE                 `json:"mfe,omitempty"`  // Required
	cm0 *CM0                 `json:"cm_0,omitempty"` // Required
	cm1 []*MFN_M06_MFE_CM1v2 `json:"cm_1,omitempty"`
}

func (m *MFN_M06_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M06_MFEv2) CM0() *CM0 {
	return m.cm0
}

func (m *MFN_M06_MFEv2) GroupByCM1() []*MFN_M06_MFE_CM1v2 {
	return m.cm1
}

func (m MFN_M06_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"cm0": m.cm0,
		"cm1": m.cm1,
	}, nil
}

type MFN_M06_MFE_CM1v2 struct {
	cm1 *CM1   `json:"cm_1,omitempty"` // Required
	cm2 []*CM2 `json:"cm_2,omitempty"`
}

func (m *MFN_M06_MFE_CM1v2) CM1() *CM1 {
	return m.cm1
}

func (m *MFN_M06_MFE_CM1v2) AllCM2() []*CM2 {
	return m.cm2
}

func (m MFN_M06_MFE_CM1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"cm1": m.cm1,
		"cm2": m.cm2,
	}, nil
}

type MFN_M07v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M07_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M07v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M07v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M07v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M07v2) GroupByMFE() []*MFN_M07_MFEv2 {
	return m.mfe
}

func (m MFN_M07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M07_MFEv2 struct {
	mfe *MFE   `json:"mfe,omitempty"`  // Required
	cm0 *CM0   `json:"cm_0,omitempty"` // Required
	cm2 []*CM2 `json:"cm_2,omitempty"`
}

func (m *MFN_M07_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M07_MFEv2) CM0() *CM0 {
	return m.cm0
}

func (m *MFN_M07_MFEv2) AllCM2() []*CM2 {
	return m.cm2
}

func (m MFN_M07_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"cm0": m.cm0,
		"cm2": m.cm2,
	}, nil
}

type MFN_M08v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M08_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M08v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M08v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M08v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M08v2) GroupByMFE() []*MFN_M08_MFEv2 {
	return m.mfe
}

func (m MFN_M08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M08_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"`  // Required
	om1 *OM1 `json:"om_1,omitempty"` // Required
	om2 *OM2 `json:"om_2,omitempty"`
	om3 *OM3 `json:"om_3,omitempty"`
	om4 *OM4 `json:"om_4,omitempty"`
}

func (m *MFN_M08_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M08_MFEv2) OM1() *OM1 {
	return m.om1
}

func (m *MFN_M08_MFEv2) OM2() *OM2 {
	return m.om2
}

func (m *MFN_M08_MFEv2) OM3() *OM3 {
	return m.om3
}

func (m *MFN_M08_MFEv2) OM4() *OM4 {
	return m.om4
}

func (m MFN_M08_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"om1": m.om1,
		"om2": m.om2,
		"om3": m.om3,
		"om4": m.om4,
	}, nil
}

type MFN_M09v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M09_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M09v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M09v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M09v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M09v2) GroupByMFE() []*MFN_M09_MFEv2 {
	return m.mfe
}

func (m MFN_M09v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M09_MFEv2 struct {
	mfe *MFE   `json:"mfe,omitempty"`  // Required
	om1 *OM1   `json:"om_1,omitempty"` // Required
	om3 *OM3   `json:"om_3,omitempty"` // Required
	om4 []*OM4 `json:"om_4,omitempty"`
}

func (m *MFN_M09_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M09_MFEv2) OM1() *OM1 {
	return m.om1
}

func (m *MFN_M09_MFEv2) OM3() *OM3 {
	return m.om3
}

func (m *MFN_M09_MFEv2) AllOM4() []*OM4 {
	return m.om4
}

func (m MFN_M09_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"om1": m.om1,
		"om3": m.om3,
		"om4": m.om4,
	}, nil
}

type MFN_M10v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M10_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M10v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M10v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M10v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M10v2) GroupByMFE() []*MFN_M10_MFEv2 {
	return m.mfe
}

func (m MFN_M10v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M10_MFEv2 struct {
	mfe *MFE   `json:"mfe,omitempty"`  // Required
	om1 *OM1   `json:"om_1,omitempty"` // Required
	om5 *OM5   `json:"om_5,omitempty"` // Required
	om4 []*OM4 `json:"om_4,omitempty"`
}

func (m *MFN_M10_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M10_MFEv2) OM1() *OM1 {
	return m.om1
}

func (m *MFN_M10_MFEv2) OM5() *OM5 {
	return m.om5
}

func (m *MFN_M10_MFEv2) AllOM4() []*OM4 {
	return m.om4
}

func (m MFN_M10_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"om1": m.om1,
		"om5": m.om5,
		"om4": m.om4,
	}, nil
}

type MFN_M11v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M11_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M11v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M11v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M11v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M11v2) GroupByMFE() []*MFN_M11_MFEv2 {
	return m.mfe
}

func (m MFN_M11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M11_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"`  // Required
	om1 *OM1 `json:"om_1,omitempty"` // Required
	om6 *OM6 `json:"om_6,omitempty"` // Required
	om2 *OM2 `json:"om_2,omitempty"` // Required
}

func (m *MFN_M11_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M11_MFEv2) OM1() *OM1 {
	return m.om1
}

func (m *MFN_M11_MFEv2) OM6() *OM6 {
	return m.om6
}

func (m *MFN_M11_MFEv2) OM2() *OM2 {
	return m.om2
}

func (m MFN_M11_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"om1": m.om1,
		"om6": m.om6,
		"om2": m.om2,
	}, nil
}

type MFN_M12v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M12_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M12v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M12v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M12v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M12v2) GroupByMFE() []*MFN_M12_MFEv2 {
	return m.mfe
}

func (m MFN_M12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M12_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"`  // Required
	om1 *OM1 `json:"om_1,omitempty"` // Required
	om7 *OM7 `json:"om_7,omitempty"`
}

func (m *MFN_M12_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M12_MFEv2) OM1() *OM1 {
	return m.om1
}

func (m *MFN_M12_MFEv2) OM7() *OM7 {
	return m.om7
}

func (m MFN_M12_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"om1": m.om1,
		"om7": m.om7,
	}, nil
}

type MFN_M13v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	mfi *MFI   `json:"mfi,omitempty"` // Required
	mfe []*MFE `json:"mfe,omitempty"` // Required
}

func (m *MFN_M13v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M13v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M13v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M13v2) AllMFE() []*MFE {
	return m.mfe
}

func (m MFN_M13v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M15v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_M15_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_M15v2) MSH() *MSH {
	return m.msh
}

func (m *MFN_M15v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_M15v2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_M15v2) GroupByMFE() []*MFN_M15_MFEv2 {
	return m.mfe
}

func (m MFN_M15v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_M15_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"` // Required
	iim *IIM `json:"iim,omitempty"` // Required
}

func (m *MFN_M15_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFN_M15_MFEv2) IIM() *IIM {
	return m.iim
}

func (m MFN_M15_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"iim": m.iim,
	}, nil
}

type MFN_Znnv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFN_Znn_MFEv2 `json:"mfe,omitempty"` // Required
}

func (m *MFN_Znnv2) MSH() *MSH {
	return m.msh
}

func (m *MFN_Znnv2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFN_Znnv2) MFI() *MFI {
	return m.mfi
}

func (m *MFN_Znnv2) GroupByMFE() []*MFN_Znn_MFEv2 {
	return m.mfe
}

func (m MFN_Znnv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"mfi": m.mfi,
		"mfe": m.mfe,
	}, nil
}

type MFN_Znn_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"` // Required
}

func (m *MFN_Znn_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m MFN_Znn_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
	}, nil
}

type MFQ_M01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *MFQ_M01v2) MSH() *MSH {
	return m.msh
}

func (m *MFQ_M01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFQ_M01v2) QRD() *QRD {
	return m.qrd
}

func (m *MFQ_M01v2) QRF() *QRF {
	return m.qrf
}

func (m *MFQ_M01v2) DSC() *DSC {
	return m.dsc
}

func (m MFQ_M01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsc": m.dsc,
	}, nil
}

type MFQ_M02v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	qrd *QRD `json:"qrd,omitempty"` // Required
	qrf *QRF `json:"qrf,omitempty"`
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *MFQ_M02v2) MSH() *MSH {
	return m.msh
}

func (m *MFQ_M02v2) QRD() *QRD {
	return m.qrd
}

func (m *MFQ_M02v2) QRF() *QRF {
	return m.qrf
}

func (m *MFQ_M02v2) DSC() *DSC {
	return m.dsc
}

func (m MFQ_M02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsc": m.dsc,
	}, nil
}

type MFQ_M03v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	qrd *QRD `json:"qrd,omitempty"` // Required
	qrf *QRF `json:"qrf,omitempty"`
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *MFQ_M03v2) MSH() *MSH {
	return m.msh
}

func (m *MFQ_M03v2) QRD() *QRD {
	return m.qrd
}

func (m *MFQ_M03v2) QRF() *QRF {
	return m.qrf
}

func (m *MFQ_M03v2) DSC() *DSC {
	return m.dsc
}

func (m MFQ_M03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsc": m.dsc,
	}, nil
}

type MFR_M01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFR_M01_MFEv2 `json:"mfe,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *MFR_M01v2) MSH() *MSH {
	return m.msh
}

func (m *MFR_M01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFR_M01v2) MSA() *MSA {
	return m.msa
}

func (m *MFR_M01v2) AllERR() []*ERR {
	return m.err
}

func (m *MFR_M01v2) QAK() *QAK {
	return m.qak
}

func (m *MFR_M01v2) QRD() *QRD {
	return m.qrd
}

func (m *MFR_M01v2) QRF() *QRF {
	return m.qrf
}

func (m *MFR_M01v2) MFI() *MFI {
	return m.mfi
}

func (m *MFR_M01v2) GroupByMFE() []*MFR_M01_MFEv2 {
	return m.mfe
}

func (m *MFR_M01v2) DSC() *DSC {
	return m.dsc
}

func (m MFR_M01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"mfi": m.mfi,
		"mfe": m.mfe,
		"dsc": m.dsc,
	}, nil
}

type MFR_M01_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"` // Required
}

func (m *MFR_M01_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m MFR_M01_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
	}, nil
}

type MFR_M02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFR_M02_MFEv2 `json:"mfe,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *MFR_M02v2) MSH() *MSH {
	return m.msh
}

func (m *MFR_M02v2) MSA() *MSA {
	return m.msa
}

func (m *MFR_M02v2) ERR() *ERR {
	return m.err
}

func (m *MFR_M02v2) QRD() *QRD {
	return m.qrd
}

func (m *MFR_M02v2) QRF() *QRF {
	return m.qrf
}

func (m *MFR_M02v2) MFI() *MFI {
	return m.mfi
}

func (m *MFR_M02v2) GroupByMFE() []*MFR_M02_MFEv2 {
	return m.mfe
}

func (m *MFR_M02v2) DSC() *DSC {
	return m.dsc
}

func (m MFR_M02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"mfi": m.mfi,
		"mfe": m.mfe,
		"dsc": m.dsc,
	}, nil
}

type MFR_M02_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"` // Required
}

func (m *MFR_M02_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m MFR_M02_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
	}, nil
}

type MFR_M03v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFR_M03_MFEv2 `json:"mfe,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *MFR_M03v2) MSH() *MSH {
	return m.msh
}

func (m *MFR_M03v2) MSA() *MSA {
	return m.msa
}

func (m *MFR_M03v2) ERR() *ERR {
	return m.err
}

func (m *MFR_M03v2) QRD() *QRD {
	return m.qrd
}

func (m *MFR_M03v2) QRF() *QRF {
	return m.qrf
}

func (m *MFR_M03v2) MFI() *MFI {
	return m.mfi
}

func (m *MFR_M03v2) GroupByMFE() []*MFR_M03_MFEv2 {
	return m.mfe
}

func (m *MFR_M03v2) DSC() *DSC {
	return m.dsc
}

func (m MFR_M03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"mfi": m.mfi,
		"mfe": m.mfe,
		"dsc": m.dsc,
	}, nil
}

type MFR_M03_MFEv2 struct {
	mfe *MFE `json:"mfe,omitempty"` // Required
}

func (m *MFR_M03_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m MFR_M03_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
	}, nil
}

type MFR_M04v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFR_M04_MFEv2 `json:"mfe,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *MFR_M04v2) MSH() *MSH {
	return m.msh
}

func (m *MFR_M04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFR_M04v2) MSA() *MSA {
	return m.msa
}

func (m *MFR_M04v2) AllERR() []*ERR {
	return m.err
}

func (m *MFR_M04v2) QAK() *QAK {
	return m.qak
}

func (m *MFR_M04v2) QRD() *QRD {
	return m.qrd
}

func (m *MFR_M04v2) QRF() *QRF {
	return m.qrf
}

func (m *MFR_M04v2) MFI() *MFI {
	return m.mfi
}

func (m *MFR_M04v2) GroupByMFE() []*MFR_M04_MFEv2 {
	return m.mfe
}

func (m *MFR_M04v2) DSC() *DSC {
	return m.dsc
}

func (m MFR_M04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"mfi": m.mfi,
		"mfe": m.mfe,
		"dsc": m.dsc,
	}, nil
}

type MFR_M04_MFEv2 struct {
	mfe *MFE   `json:"mfe,omitempty"` // Required
	cdm *CDM   `json:"cdm,omitempty"` // Required
	prc []*PRC `json:"prc,omitempty"`
}

func (m *MFR_M04_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFR_M04_MFEv2) CDM() *CDM {
	return m.cdm
}

func (m *MFR_M04_MFEv2) AllPRC() []*PRC {
	return m.prc
}

func (m MFR_M04_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"cdm": m.cdm,
		"prc": m.prc,
	}, nil
}

type MFR_M05v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFR_M05_MFEv2 `json:"mfe,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *MFR_M05v2) MSH() *MSH {
	return m.msh
}

func (m *MFR_M05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFR_M05v2) MSA() *MSA {
	return m.msa
}

func (m *MFR_M05v2) AllERR() []*ERR {
	return m.err
}

func (m *MFR_M05v2) QAK() *QAK {
	return m.qak
}

func (m *MFR_M05v2) QRD() *QRD {
	return m.qrd
}

func (m *MFR_M05v2) QRF() *QRF {
	return m.qrf
}

func (m *MFR_M05v2) MFI() *MFI {
	return m.mfi
}

func (m *MFR_M05v2) GroupByMFE() []*MFR_M05_MFEv2 {
	return m.mfe
}

func (m *MFR_M05v2) DSC() *DSC {
	return m.dsc
}

func (m MFR_M05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"mfi": m.mfi,
		"mfe": m.mfe,
		"dsc": m.dsc,
	}, nil
}

type MFR_M05_MFEv2 struct {
	mfe  *MFE   `json:"mfe,omitempty"` // Required
	loc  *LOC   `json:"loc,omitempty"` // Required
	lch1 []*LCH `json:"lch_1,omitempty"`
	lrl  []*LRL `json:"lrl,omitempty"`
	ldp  []*LDP `json:"ldp,omitempty"` // Required
	lch2 []*LCH `json:"lch_2,omitempty"`
	lcc  []*LCC `json:"lcc,omitempty"`
}

func (m *MFR_M05_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFR_M05_MFEv2) LOC() *LOC {
	return m.loc
}

func (m *MFR_M05_MFEv2) AllLCH1() []*LCH {
	return m.lch1
}

func (m *MFR_M05_MFEv2) AllLRL() []*LRL {
	return m.lrl
}

func (m *MFR_M05_MFEv2) AllLDP() []*LDP {
	return m.ldp
}

func (m *MFR_M05_MFEv2) AllLCH2() []*LCH {
	return m.lch2
}

func (m *MFR_M05_MFEv2) AllLCC() []*LCC {
	return m.lcc
}

func (m MFR_M05_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe":  m.mfe,
		"loc":  m.loc,
		"lch1": m.lch1,
		"lrl":  m.lrl,
		"ldp":  m.ldp,
		"lch2": m.lch2,
		"lcc":  m.lcc,
	}, nil
}

type MFR_M06v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFR_M06_MFEv2 `json:"mfe,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *MFR_M06v2) MSH() *MSH {
	return m.msh
}

func (m *MFR_M06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFR_M06v2) MSA() *MSA {
	return m.msa
}

func (m *MFR_M06v2) AllERR() []*ERR {
	return m.err
}

func (m *MFR_M06v2) QAK() *QAK {
	return m.qak
}

func (m *MFR_M06v2) QRD() *QRD {
	return m.qrd
}

func (m *MFR_M06v2) QRF() *QRF {
	return m.qrf
}

func (m *MFR_M06v2) MFI() *MFI {
	return m.mfi
}

func (m *MFR_M06v2) GroupByMFE() []*MFR_M06_MFEv2 {
	return m.mfe
}

func (m *MFR_M06v2) DSC() *DSC {
	return m.dsc
}

func (m MFR_M06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"mfi": m.mfi,
		"mfe": m.mfe,
		"dsc": m.dsc,
	}, nil
}

type MFR_M06_MFEv2 struct {
	mfe *MFE   `json:"mfe,omitempty"`  // Required
	cm0 *CM0   `json:"cm_0,omitempty"` // Required
	cm1 []*CM1 `json:"cm_1,omitempty"`
	cm2 []*CM2 `json:"cm_2,omitempty"`
}

func (m *MFR_M06_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFR_M06_MFEv2) CM0() *CM0 {
	return m.cm0
}

func (m *MFR_M06_MFEv2) AllCM1() []*CM1 {
	return m.cm1
}

func (m *MFR_M06_MFEv2) AllCM2() []*CM2 {
	return m.cm2
}

func (m MFR_M06_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"cm0": m.cm0,
		"cm1": m.cm1,
		"cm2": m.cm2,
	}, nil
}

type MFR_M07v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	mfi *MFI             `json:"mfi,omitempty"` // Required
	mfe []*MFR_M07_MFEv2 `json:"mfe,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *MFR_M07v2) MSH() *MSH {
	return m.msh
}

func (m *MFR_M07v2) AllSFT() []*SFT {
	return m.sft
}

func (m *MFR_M07v2) MSA() *MSA {
	return m.msa
}

func (m *MFR_M07v2) AllERR() []*ERR {
	return m.err
}

func (m *MFR_M07v2) QAK() *QAK {
	return m.qak
}

func (m *MFR_M07v2) QRD() *QRD {
	return m.qrd
}

func (m *MFR_M07v2) QRF() *QRF {
	return m.qrf
}

func (m *MFR_M07v2) MFI() *MFI {
	return m.mfi
}

func (m *MFR_M07v2) GroupByMFE() []*MFR_M07_MFEv2 {
	return m.mfe
}

func (m *MFR_M07v2) DSC() *DSC {
	return m.dsc
}

func (m MFR_M07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"mfi": m.mfi,
		"mfe": m.mfe,
		"dsc": m.dsc,
	}, nil
}

type MFR_M07_MFEv2 struct {
	mfe *MFE   `json:"mfe,omitempty"`  // Required
	cm0 *CM0   `json:"cm_0,omitempty"` // Required
	cm2 []*CM2 `json:"cm_2,omitempty"`
}

func (m *MFR_M07_MFEv2) MFE() *MFE {
	return m.mfe
}

func (m *MFR_M07_MFEv2) CM0() *CM0 {
	return m.cm0
}

func (m *MFR_M07_MFEv2) AllCM2() []*CM2 {
	return m.cm2
}

func (m MFR_M07_MFEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"mfe": m.mfe,
		"cm0": m.cm0,
		"cm2": m.cm2,
	}, nil
}

type NMD_N01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nck []*NMD_N01_NCKv2 `json:"nck,omitempty"` // Required
}

func (m *NMD_N01v2) MSH() *MSH {
	return m.msh
}

func (m *NMD_N01v2) GroupByNCK() []*NMD_N01_NCKv2 {
	return m.nck
}

func (m NMD_N01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nck": m.nck,
	}, nil
}

type NMD_N01_NCKv2 struct {
	nck *NCK               `json:"nck,omitempty"` // Required
	nte []*NTE             `json:"nte,omitempty"`
	nst *NMD_N01_NCK_NSTv2 `json:"nst,omitempty"`
	nsc *NMD_N01_NCK_NSCv2 `json:"nsc,omitempty"`
}

func (m *NMD_N01_NCKv2) NCK() *NCK {
	return m.nck
}

func (m *NMD_N01_NCKv2) AllNTE() []*NTE {
	return m.nte
}

func (m *NMD_N01_NCKv2) GroupByNST() *NMD_N01_NCK_NSTv2 {
	return m.nst
}

func (m *NMD_N01_NCKv2) GroupByNSC() *NMD_N01_NCK_NSCv2 {
	return m.nsc
}

func (m NMD_N01_NCKv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nck": m.nck,
		"nte": m.nte,
		"nst": m.nst,
		"nsc": m.nsc,
	}, nil
}

type NMD_N01_NCK_NSTv2 struct {
	nst *NST   `json:"nst,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *NMD_N01_NCK_NSTv2) NST() *NST {
	return m.nst
}

func (m *NMD_N01_NCK_NSTv2) AllNTE() []*NTE {
	return m.nte
}

func (m NMD_N01_NCK_NSTv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nst": m.nst,
		"nte": m.nte,
	}, nil
}

type NMD_N01_NCK_NSCv2 struct {
	nsc *NSC   `json:"nsc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *NMD_N01_NCK_NSCv2) NSC() *NSC {
	return m.nsc
}

func (m *NMD_N01_NCK_NSCv2) AllNTE() []*NTE {
	return m.nte
}

func (m NMD_N01_NCK_NSCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nsc": m.nsc,
		"nte": m.nte,
	}, nil
}

type NMD_N02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nck []*NMD_N02_NCKv2 `json:"nck,omitempty"` // Required
}

func (m *NMD_N02v2) MSH() *MSH {
	return m.msh
}

func (m *NMD_N02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *NMD_N02v2) GroupByNCK() []*NMD_N02_NCKv2 {
	return m.nck
}

func (m NMD_N02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nck": m.nck,
	}, nil
}

type NMD_N02_NCKv2 struct {
	nck *NCK               `json:"nck,omitempty"` // Required
	nte []*NTE             `json:"nte,omitempty"`
	nst *NMD_N02_NCK_NSTv2 `json:"nst,omitempty"`
	nsc *NMD_N02_NCK_NSCv2 `json:"nsc,omitempty"`
}

func (m *NMD_N02_NCKv2) NCK() *NCK {
	return m.nck
}

func (m *NMD_N02_NCKv2) AllNTE() []*NTE {
	return m.nte
}

func (m *NMD_N02_NCKv2) GroupByNST() *NMD_N02_NCK_NSTv2 {
	return m.nst
}

func (m *NMD_N02_NCKv2) GroupByNSC() *NMD_N02_NCK_NSCv2 {
	return m.nsc
}

func (m NMD_N02_NCKv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nck": m.nck,
		"nte": m.nte,
		"nst": m.nst,
		"nsc": m.nsc,
	}, nil
}

type NMD_N02_NCK_NSTv2 struct {
	nst *NST   `json:"nst,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *NMD_N02_NCK_NSTv2) NST() *NST {
	return m.nst
}

func (m *NMD_N02_NCK_NSTv2) AllNTE() []*NTE {
	return m.nte
}

func (m NMD_N02_NCK_NSTv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nst": m.nst,
		"nte": m.nte,
	}, nil
}

type NMD_N02_NCK_NSCv2 struct {
	nsc *NSC   `json:"nsc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *NMD_N02_NCK_NSCv2) NSC() *NSC {
	return m.nsc
}

func (m *NMD_N02_NCK_NSCv2) AllNTE() []*NTE {
	return m.nte
}

func (m NMD_N02_NCK_NSCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nsc": m.nsc,
		"nte": m.nte,
	}, nil
}

type NMQ_N01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	nck []*NMQ_N01_NCKv2 `json:"nck,omitempty"` // Required
}

func (m *NMQ_N01v2) MSH() *MSH {
	return m.msh
}

func (m *NMQ_N01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *NMQ_N01v2) QRD() *QRD {
	return m.qrd
}

func (m *NMQ_N01v2) QRF() *QRF {
	return m.qrf
}

func (m *NMQ_N01v2) GroupByNCK() []*NMQ_N01_NCKv2 {
	return m.nck
}

func (m NMQ_N01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"nck": m.nck,
	}, nil
}

type NMQ_N01_NCKv2 struct {
	nck *NCK `json:"nck,omitempty"`
	nst *NST `json:"nst,omitempty"`
	nsc *NSC `json:"nsc,omitempty"`
}

func (m *NMQ_N01_NCKv2) NCK() *NCK {
	return m.nck
}

func (m *NMQ_N01_NCKv2) NST() *NST {
	return m.nst
}

func (m *NMQ_N01_NCKv2) NSC() *NSC {
	return m.nsc
}

func (m NMQ_N01_NCKv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nck": m.nck,
		"nst": m.nst,
		"nsc": m.nsc,
	}, nil
}

type NMQ_N02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	nck []*NMQ_N02_NCKv2 `json:"nck,omitempty"` // Required
}

func (m *NMQ_N02v2) MSH() *MSH {
	return m.msh
}

func (m *NMQ_N02v2) QRD() *QRD {
	return m.qrd
}

func (m *NMQ_N02v2) QRF() *QRF {
	return m.qrf
}

func (m *NMQ_N02v2) GroupByNCK() []*NMQ_N02_NCKv2 {
	return m.nck
}

func (m NMQ_N02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"nck": m.nck,
	}, nil
}

type NMQ_N02_NCKv2 struct {
	nck *NCK `json:"nck,omitempty"`
	nst *NST `json:"nst,omitempty"`
	nsc *NSC `json:"nsc,omitempty"`
}

func (m *NMQ_N02_NCKv2) NCK() *NCK {
	return m.nck
}

func (m *NMQ_N02_NCKv2) NST() *NST {
	return m.nst
}

func (m *NMQ_N02_NCKv2) NSC() *NSC {
	return m.nsc
}

func (m NMQ_N02_NCKv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nck": m.nck,
		"nst": m.nst,
		"nsc": m.nsc,
	}, nil
}

type NMR_N01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"`
	nck []*NMR_N01_NCKv2 `json:"nck,omitempty"` // Required
}

func (m *NMR_N01v2) MSH() *MSH {
	return m.msh
}

func (m *NMR_N01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *NMR_N01v2) MSA() *MSA {
	return m.msa
}

func (m *NMR_N01v2) AllERR() []*ERR {
	return m.err
}

func (m *NMR_N01v2) QRD() *QRD {
	return m.qrd
}

func (m *NMR_N01v2) GroupByNCK() []*NMR_N01_NCKv2 {
	return m.nck
}

func (m NMR_N01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qrd": m.qrd,
		"nck": m.nck,
	}, nil
}

type NMR_N01_NCKv2 struct {
	nck  *NCK   `json:"nck,omitempty"`
	nte1 []*NTE `json:"nte_1,omitempty"`
	nst  *NST   `json:"nst,omitempty"`
	nte2 []*NTE `json:"nte_2,omitempty"`
	nsc  *NSC   `json:"nsc,omitempty"`
	nte3 []*NTE `json:"nte_3,omitempty"`
}

func (m *NMR_N01_NCKv2) NCK() *NCK {
	return m.nck
}

func (m *NMR_N01_NCKv2) AllNTE1() []*NTE {
	return m.nte1
}

func (m *NMR_N01_NCKv2) NST() *NST {
	return m.nst
}

func (m *NMR_N01_NCKv2) AllNTE2() []*NTE {
	return m.nte2
}

func (m *NMR_N01_NCKv2) NSC() *NSC {
	return m.nsc
}

func (m *NMR_N01_NCKv2) AllNTE3() []*NTE {
	return m.nte3
}

func (m NMR_N01_NCKv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nck":  m.nck,
		"nte1": m.nte1,
		"nst":  m.nst,
		"nte2": m.nte2,
		"nsc":  m.nsc,
		"nte3": m.nte3,
	}, nil
}

type NMR_N02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"`
	nck []*NMR_N02_NCKv2 `json:"nck,omitempty"` // Required
}

func (m *NMR_N02v2) MSH() *MSH {
	return m.msh
}

func (m *NMR_N02v2) MSA() *MSA {
	return m.msa
}

func (m *NMR_N02v2) ERR() *ERR {
	return m.err
}

func (m *NMR_N02v2) QRD() *QRD {
	return m.qrd
}

func (m *NMR_N02v2) GroupByNCK() []*NMR_N02_NCKv2 {
	return m.nck
}

func (m NMR_N02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qrd": m.qrd,
		"nck": m.nck,
	}, nil
}

type NMR_N02_NCKv2 struct {
	nck  *NCK   `json:"nck,omitempty"`
	nte1 []*NTE `json:"nte_1,omitempty"`
	nst  *NST   `json:"nst,omitempty"`
	nte2 []*NTE `json:"nte_2,omitempty"`
	nsc  *NSC   `json:"nsc,omitempty"`
	nte3 []*NTE `json:"nte_3,omitempty"`
}

func (m *NMR_N02_NCKv2) NCK() *NCK {
	return m.nck
}

func (m *NMR_N02_NCKv2) AllNTE1() []*NTE {
	return m.nte1
}

func (m *NMR_N02_NCKv2) NST() *NST {
	return m.nst
}

func (m *NMR_N02_NCKv2) AllNTE2() []*NTE {
	return m.nte2
}

func (m *NMR_N02_NCKv2) NSC() *NSC {
	return m.nsc
}

func (m *NMR_N02_NCKv2) AllNTE3() []*NTE {
	return m.nte3
}

func (m NMR_N02_NCKv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nck":  m.nck,
		"nte1": m.nte1,
		"nst":  m.nst,
		"nte2": m.nte2,
		"nsc":  m.nsc,
		"nte3": m.nte3,
	}, nil
}

type OMB_O27v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OMB_O27_PIDv2   `json:"pid,omitempty"`
	orc []*OMB_O27_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OMB_O27v2) MSH() *MSH {
	return m.msh
}

func (m *OMB_O27v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OMB_O27v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMB_O27v2) GroupByPID() *OMB_O27_PIDv2 {
	return m.pid
}

func (m *OMB_O27v2) GroupByORC() []*OMB_O27_ORCv2 {
	return m.orc
}

func (m OMB_O27v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OMB_O27_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMB_O27_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMB_O27_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMB_O27_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMB_O27_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMB_O27_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMB_O27_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMB_O27_PIDv2) GroupByIN1() []*OMB_O27_PID_IN1v2 {
	return m.in1
}

func (m *OMB_O27_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMB_O27_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMB_O27_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMB_O27_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMB_O27_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMB_O27_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMB_O27_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMB_O27_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMB_O27_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*OMB_O27_ORC_TQ1v2 `json:"tq_1,omitempty"`
	bpo *BPO                 `json:"bpo,omitempty"` // Required
	spm *SPM                 `json:"spm,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	obx []*OMB_O27_ORC_OBXv2 `json:"obx,omitempty"`
	ft1 []*FT1               `json:"ft_1,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *OMB_O27_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OMB_O27_ORCv2) GroupByTQ1() []*OMB_O27_ORC_TQ1v2 {
	return m.tq1
}

func (m *OMB_O27_ORCv2) BPO() *BPO {
	return m.bpo
}

func (m *OMB_O27_ORCv2) SPM() *SPM {
	return m.spm
}

func (m *OMB_O27_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMB_O27_ORCv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *OMB_O27_ORCv2) GroupByOBX() []*OMB_O27_ORC_OBXv2 {
	return m.obx
}

func (m *OMB_O27_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *OMB_O27_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OMB_O27_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"bpo": m.bpo,
		"spm": m.spm,
		"nte": m.nte,
		"dg1": m.dg1,
		"obx": m.obx,
		"ft1": m.ft1,
		"blg": m.blg,
	}, nil
}

type OMB_O27_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMB_O27_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMB_O27_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMB_O27_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMB_O27_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMB_O27_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMB_O27_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMB_O27_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMD_O01v2 struct {
	msh  *MSH              `json:"msh,omitempty"` // Required
	nte  []*NTE            `json:"nte,omitempty"`
	pid  *OMD_O01_PIDv2    `json:"pid,omitempty"`
	orc1 []*OMD_O01_ORC1v2 `json:"orc_1,omitempty"` // Required
	orc2 []*OMD_O01_ORC2v2 `json:"orc_2,omitempty"`
}

func (m *OMD_O01v2) MSH() *MSH {
	return m.msh
}

func (m *OMD_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMD_O01v2) GroupByPID() *OMD_O01_PIDv2 {
	return m.pid
}

func (m *OMD_O01v2) GroupByORC1() []*OMD_O01_ORC1v2 {
	return m.orc1
}

func (m *OMD_O01v2) GroupByORC2() []*OMD_O01_ORC2v2 {
	return m.orc2
}

func (m OMD_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"nte":  m.nte,
		"pid":  m.pid,
		"orc1": m.orc1,
		"orc2": m.orc2,
	}, nil
}

type OMD_O01_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMD_O01_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMD_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMD_O01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMD_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMD_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMD_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMD_O01_PIDv2) GroupByIN1() []*OMD_O01_PID_IN1v2 {
	return m.in1
}

func (m *OMD_O01_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMD_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMD_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMD_O01_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMD_O01_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMD_O01_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMD_O01_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMD_O01_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMD_O01_ORC1v2 struct {
	orc *ORC                  `json:"orc,omitempty"` // Required
	ods []*ODS                `json:"ods,omitempty"` // Required
	nte []*NTE                `json:"nte,omitempty"`
	obx []*OMD_O01_ORC1_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *OMD_O01_ORC1v2) ORC() *ORC {
	return m.orc
}

func (m *OMD_O01_ORC1v2) AllODS() []*ODS {
	return m.ods
}

func (m *OMD_O01_ORC1v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMD_O01_ORC1v2) GroupByOBX() []*OMD_O01_ORC1_OBXv2 {
	return m.obx
}

func (m OMD_O01_ORC1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"ods": m.ods,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type OMD_O01_ORC1_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMD_O01_ORC1_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMD_O01_ORC1_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMD_O01_ORC1_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMD_O01_ORC2v2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	odt []*ODT `json:"odt,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMD_O01_ORC2v2) ORC() *ORC {
	return m.orc
}

func (m *OMD_O01_ORC2v2) AllODT() []*ODT {
	return m.odt
}

func (m *OMD_O01_ORC2v2) AllNTE() []*NTE {
	return m.nte
}

func (m OMD_O01_ORC2v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"odt": m.odt,
		"nte": m.nte,
	}, nil
}

type OMD_O03v2 struct {
	msh  *MSH              `json:"msh,omitempty"` // Required
	sft  []*SFT            `json:"sft,omitempty"`
	nte  []*NTE            `json:"nte,omitempty"`
	pid  *OMD_O03_PIDv2    `json:"pid,omitempty"`
	orc1 []*OMD_O03_ORC1v2 `json:"orc_1,omitempty"` // Required
	orc2 []*OMD_O03_ORC2v2 `json:"orc_2,omitempty"`
}

func (m *OMD_O03v2) MSH() *MSH {
	return m.msh
}

func (m *OMD_O03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OMD_O03v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMD_O03v2) GroupByPID() *OMD_O03_PIDv2 {
	return m.pid
}

func (m *OMD_O03v2) GroupByORC1() []*OMD_O03_ORC1v2 {
	return m.orc1
}

func (m *OMD_O03v2) GroupByORC2() []*OMD_O03_ORC2v2 {
	return m.orc2
}

func (m OMD_O03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh":  m.msh,
		"sft":  m.sft,
		"nte":  m.nte,
		"pid":  m.pid,
		"orc1": m.orc1,
		"orc2": m.orc2,
	}, nil
}

type OMD_O03_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMD_O03_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMD_O03_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMD_O03_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMD_O03_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMD_O03_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMD_O03_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMD_O03_PIDv2) GroupByIN1() []*OMD_O03_PID_IN1v2 {
	return m.in1
}

func (m *OMD_O03_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMD_O03_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMD_O03_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMD_O03_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMD_O03_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMD_O03_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMD_O03_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMD_O03_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMD_O03_ORC1v2 struct {
	orc *ORC                  `json:"orc,omitempty"` // Required
	tq1 []*OMD_O03_ORC1_TQ1v2 `json:"tq_1,omitempty"`
	ods []*ODS                `json:"ods,omitempty"` // Required
	nte []*NTE                `json:"nte,omitempty"`
	obx []*OMD_O03_ORC1_OBXv2 `json:"obx,omitempty"`
}

func (m *OMD_O03_ORC1v2) ORC() *ORC {
	return m.orc
}

func (m *OMD_O03_ORC1v2) GroupByTQ1() []*OMD_O03_ORC1_TQ1v2 {
	return m.tq1
}

func (m *OMD_O03_ORC1v2) AllODS() []*ODS {
	return m.ods
}

func (m *OMD_O03_ORC1v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMD_O03_ORC1v2) GroupByOBX() []*OMD_O03_ORC1_OBXv2 {
	return m.obx
}

func (m OMD_O03_ORC1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"ods": m.ods,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type OMD_O03_ORC1_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMD_O03_ORC1_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMD_O03_ORC1_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMD_O03_ORC1_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMD_O03_ORC1_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMD_O03_ORC1_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMD_O03_ORC1_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMD_O03_ORC1_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMD_O03_ORC2v2 struct {
	orc *ORC                  `json:"orc,omitempty"` // Required
	tq1 []*OMD_O03_ORC2_TQ1v2 `json:"tq_1,omitempty"`
	odt []*ODT                `json:"odt,omitempty"` // Required
	nte []*NTE                `json:"nte,omitempty"`
}

func (m *OMD_O03_ORC2v2) ORC() *ORC {
	return m.orc
}

func (m *OMD_O03_ORC2v2) GroupByTQ1() []*OMD_O03_ORC2_TQ1v2 {
	return m.tq1
}

func (m *OMD_O03_ORC2v2) AllODT() []*ODT {
	return m.odt
}

func (m *OMD_O03_ORC2v2) AllNTE() []*NTE {
	return m.nte
}

func (m OMD_O03_ORC2v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"odt": m.odt,
		"nte": m.nte,
	}, nil
}

type OMD_O03_ORC2_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMD_O03_ORC2_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMD_O03_ORC2_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMD_O03_ORC2_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMG_O19v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OMG_O19_PIDv2   `json:"pid,omitempty"`
	orc []*OMG_O19_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OMG_O19v2) MSH() *MSH {
	return m.msh
}

func (m *OMG_O19v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OMG_O19v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMG_O19v2) GroupByPID() *OMG_O19_PIDv2 {
	return m.pid
}

func (m *OMG_O19v2) GroupByORC() []*OMG_O19_ORCv2 {
	return m.orc
}

func (m OMG_O19v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OMG_O19_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMG_O19_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMG_O19_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMG_O19_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMG_O19_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMG_O19_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *OMG_O19_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMG_O19_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMG_O19_PIDv2) GroupByIN1() []*OMG_O19_PID_IN1v2 {
	return m.in1
}

func (m *OMG_O19_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMG_O19_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMG_O19_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMG_O19_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMG_O19_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMG_O19_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMG_O19_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMG_O19_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMG_O19_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*OMG_O19_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	ctd *CTD                 `json:"ctd,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	obx []*OMG_O19_ORC_OBXv2 `json:"obx,omitempty"`
	spm []*OMG_O19_ORC_SPMv2 `json:"spm,omitempty"`
	pid []*OMG_O19_ORC_PIDv2 `json:"pid,omitempty"`
	ft1 []*FT1               `json:"ft_1,omitempty"`
	cti []*CTI               `json:"cti,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *OMG_O19_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OMG_O19_ORCv2) GroupByTQ1() []*OMG_O19_ORC_TQ1v2 {
	return m.tq1
}

func (m *OMG_O19_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *OMG_O19_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMG_O19_ORCv2) CTD() *CTD {
	return m.ctd
}

func (m *OMG_O19_ORCv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *OMG_O19_ORCv2) GroupByOBX() []*OMG_O19_ORC_OBXv2 {
	return m.obx
}

func (m *OMG_O19_ORCv2) GroupBySPM() []*OMG_O19_ORC_SPMv2 {
	return m.spm
}

func (m *OMG_O19_ORCv2) GroupByPID() []*OMG_O19_ORC_PIDv2 {
	return m.pid
}

func (m *OMG_O19_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *OMG_O19_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m *OMG_O19_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OMG_O19_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"ctd": m.ctd,
		"dg1": m.dg1,
		"obx": m.obx,
		"spm": m.spm,
		"pid": m.pid,
		"ft1": m.ft1,
		"cti": m.cti,
		"blg": m.blg,
	}, nil
}

type OMG_O19_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMG_O19_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMG_O19_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMG_O19_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMG_O19_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMG_O19_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMG_O19_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMG_O19_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMG_O19_ORC_SPMv2 struct {
	spm *SPM                     `json:"spm,omitempty"` // Required
	obx []*OBX                   `json:"obx,omitempty"`
	sac []*OMG_O19_ORC_SPM_SACv2 `json:"sac,omitempty"`
}

func (m *OMG_O19_ORC_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *OMG_O19_ORC_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *OMG_O19_ORC_SPMv2) GroupBySAC() []*OMG_O19_ORC_SPM_SACv2 {
	return m.sac
}

func (m OMG_O19_ORC_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
	}, nil
}

type OMG_O19_ORC_SPM_SACv2 struct {
	sac *SAC   `json:"sac,omitempty"` // Required
	obx []*OBX `json:"obx,omitempty"`
}

func (m *OMG_O19_ORC_SPM_SACv2) SAC() *SAC {
	return m.sac
}

func (m *OMG_O19_ORC_SPM_SACv2) AllOBX() []*OBX {
	return m.obx
}

func (m OMG_O19_ORC_SPM_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"obx": m.obx,
	}, nil
}

type OMG_O19_ORC_PIDv2 struct {
	pid *PID                     `json:"pid,omitempty"` // Required
	pd1 *PD1                     `json:"pd_1,omitempty"`
	pv1 *PV1                     `json:"pv_1,omitempty"` // Required
	pv2 *PV2                     `json:"pv_2,omitempty"`
	al1 []*AL1                   `json:"al_1,omitempty"`
	obr []*OMG_O19_ORC_PID_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *OMG_O19_ORC_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMG_O19_ORC_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMG_O19_ORC_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMG_O19_ORC_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMG_O19_ORC_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *OMG_O19_ORC_PIDv2) GroupByOBR() []*OMG_O19_ORC_PID_OBRv2 {
	return m.obr
}

func (m OMG_O19_ORC_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"al1": m.al1,
		"obr": m.obr,
	}, nil
}

type OMG_O19_ORC_PID_OBRv2 struct {
	orc *ORC                         `json:"orc,omitempty"`
	obr *OBR                         `json:"obr,omitempty"` // Required
	tq1 []*OMG_O19_ORC_PID_OBR_TQ1v2 `json:"tq_1,omitempty"`
	nte []*NTE                       `json:"nte,omitempty"`
	ctd *CTD                         `json:"ctd,omitempty"`
	obx []*OMG_O19_ORC_PID_OBR_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *OMG_O19_ORC_PID_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *OMG_O19_ORC_PID_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *OMG_O19_ORC_PID_OBRv2) GroupByTQ1() []*OMG_O19_ORC_PID_OBR_TQ1v2 {
	return m.tq1
}

func (m *OMG_O19_ORC_PID_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMG_O19_ORC_PID_OBRv2) CTD() *CTD {
	return m.ctd
}

func (m *OMG_O19_ORC_PID_OBRv2) GroupByOBX() []*OMG_O19_ORC_PID_OBR_OBXv2 {
	return m.obx
}

func (m OMG_O19_ORC_PID_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"tq1": m.tq1,
		"nte": m.nte,
		"ctd": m.ctd,
		"obx": m.obx,
	}, nil
}

type OMG_O19_ORC_PID_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMG_O19_ORC_PID_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMG_O19_ORC_PID_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMG_O19_ORC_PID_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMG_O19_ORC_PID_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMG_O19_ORC_PID_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMG_O19_ORC_PID_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMG_O19_ORC_PID_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMI_O23v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OMI_O23_PIDv2   `json:"pid,omitempty"`
	orc []*OMI_O23_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OMI_O23v2) MSH() *MSH {
	return m.msh
}

func (m *OMI_O23v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OMI_O23v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMI_O23v2) GroupByPID() *OMI_O23_PIDv2 {
	return m.pid
}

func (m *OMI_O23v2) GroupByORC() []*OMI_O23_ORCv2 {
	return m.orc
}

func (m OMI_O23v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OMI_O23_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMI_O23_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMI_O23_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMI_O23_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMI_O23_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMI_O23_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMI_O23_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMI_O23_PIDv2) GroupByIN1() []*OMI_O23_PID_IN1v2 {
	return m.in1
}

func (m *OMI_O23_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMI_O23_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMI_O23_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMI_O23_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMI_O23_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMI_O23_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMI_O23_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMI_O23_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMI_O23_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*OMI_O23_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	ctd *CTD                 `json:"ctd,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	obx []*OMI_O23_ORC_OBXv2 `json:"obx,omitempty"`
	ipc []*IPC               `json:"ipc,omitempty"` // Required
}

func (m *OMI_O23_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OMI_O23_ORCv2) GroupByTQ1() []*OMI_O23_ORC_TQ1v2 {
	return m.tq1
}

func (m *OMI_O23_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *OMI_O23_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMI_O23_ORCv2) CTD() *CTD {
	return m.ctd
}

func (m *OMI_O23_ORCv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *OMI_O23_ORCv2) GroupByOBX() []*OMI_O23_ORC_OBXv2 {
	return m.obx
}

func (m *OMI_O23_ORCv2) AllIPC() []*IPC {
	return m.ipc
}

func (m OMI_O23_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"ctd": m.ctd,
		"dg1": m.dg1,
		"obx": m.obx,
		"ipc": m.ipc,
	}, nil
}

type OMI_O23_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMI_O23_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMI_O23_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMI_O23_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMI_O23_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMI_O23_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMI_O23_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMI_O23_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OML_O21v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OML_O21_PIDv2   `json:"pid,omitempty"`
	orc []*OML_O21_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OML_O21v2) MSH() *MSH {
	return m.msh
}

func (m *OML_O21v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OML_O21v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O21v2) GroupByPID() *OML_O21_PIDv2 {
	return m.pid
}

func (m *OML_O21v2) GroupByORC() []*OML_O21_ORCv2 {
	return m.orc
}

func (m OML_O21v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OML_O21_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OML_O21_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OML_O21_PIDv2) PID() *PID {
	return m.pid
}

func (m *OML_O21_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OML_O21_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O21_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *OML_O21_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OML_O21_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OML_O21_PIDv2) GroupByIN1() []*OML_O21_PID_IN1v2 {
	return m.in1
}

func (m *OML_O21_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OML_O21_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OML_O21_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OML_O21_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OML_O21_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OML_O21_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OML_O21_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OML_O21_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OML_O21_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*OML_O21_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	tcd *TCD                 `json:"tcd,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	ctd *CTD                 `json:"ctd,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	obx []*OML_O21_ORC_OBXv2 `json:"obx,omitempty"`
	spm []*OML_O21_ORC_SPMv2 `json:"spm,omitempty"`
	pid []*OML_O21_ORC_PIDv2 `json:"pid,omitempty"`
	ft1 []*FT1               `json:"ft_1,omitempty"`
	cti []*CTI               `json:"cti,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *OML_O21_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OML_O21_ORCv2) GroupByTQ1() []*OML_O21_ORC_TQ1v2 {
	return m.tq1
}

func (m *OML_O21_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *OML_O21_ORCv2) TCD() *TCD {
	return m.tcd
}

func (m *OML_O21_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O21_ORCv2) CTD() *CTD {
	return m.ctd
}

func (m *OML_O21_ORCv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *OML_O21_ORCv2) GroupByOBX() []*OML_O21_ORC_OBXv2 {
	return m.obx
}

func (m *OML_O21_ORCv2) GroupBySPM() []*OML_O21_ORC_SPMv2 {
	return m.spm
}

func (m *OML_O21_ORCv2) GroupByPID() []*OML_O21_ORC_PIDv2 {
	return m.pid
}

func (m *OML_O21_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *OML_O21_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m *OML_O21_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OML_O21_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"tcd": m.tcd,
		"nte": m.nte,
		"ctd": m.ctd,
		"dg1": m.dg1,
		"obx": m.obx,
		"spm": m.spm,
		"pid": m.pid,
		"ft1": m.ft1,
		"cti": m.cti,
		"blg": m.blg,
	}, nil
}

type OML_O21_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OML_O21_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OML_O21_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OML_O21_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OML_O21_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	tcd *TCD   `json:"tcd,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OML_O21_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OML_O21_ORC_OBXv2) TCD() *TCD {
	return m.tcd
}

func (m *OML_O21_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OML_O21_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"tcd": m.tcd,
		"nte": m.nte,
	}, nil
}

type OML_O21_ORC_SPMv2 struct {
	spm *SPM                     `json:"spm,omitempty"` // Required
	obx []*OBX                   `json:"obx,omitempty"`
	sac []*OML_O21_ORC_SPM_SACv2 `json:"sac,omitempty"`
}

func (m *OML_O21_ORC_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *OML_O21_ORC_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *OML_O21_ORC_SPMv2) GroupBySAC() []*OML_O21_ORC_SPM_SACv2 {
	return m.sac
}

func (m OML_O21_ORC_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
	}, nil
}

type OML_O21_ORC_SPM_SACv2 struct {
	sac *SAC   `json:"sac,omitempty"` // Required
	obx []*OBX `json:"obx,omitempty"`
}

func (m *OML_O21_ORC_SPM_SACv2) SAC() *SAC {
	return m.sac
}

func (m *OML_O21_ORC_SPM_SACv2) AllOBX() []*OBX {
	return m.obx
}

func (m OML_O21_ORC_SPM_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"obx": m.obx,
	}, nil
}

type OML_O21_ORC_PIDv2 struct {
	pid *PID                     `json:"pid,omitempty"` // Required
	pd1 *PD1                     `json:"pd_1,omitempty"`
	pv1 *PV1                     `json:"pv_1,omitempty"` // Required
	pv2 *PV2                     `json:"pv_2,omitempty"`
	al1 []*AL1                   `json:"al_1,omitempty"`
	obr []*OML_O21_ORC_PID_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *OML_O21_ORC_PIDv2) PID() *PID {
	return m.pid
}

func (m *OML_O21_ORC_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OML_O21_ORC_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OML_O21_ORC_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OML_O21_ORC_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *OML_O21_ORC_PIDv2) GroupByOBR() []*OML_O21_ORC_PID_OBRv2 {
	return m.obr
}

func (m OML_O21_ORC_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"al1": m.al1,
		"obr": m.obr,
	}, nil
}

type OML_O21_ORC_PID_OBRv2 struct {
	orc *ORC                         `json:"orc,omitempty"`
	obr *OBR                         `json:"obr,omitempty"` // Required
	nte []*NTE                       `json:"nte,omitempty"`
	tq1 []*OML_O21_ORC_PID_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obx []*OML_O21_ORC_PID_OBR_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *OML_O21_ORC_PID_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *OML_O21_ORC_PID_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *OML_O21_ORC_PID_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O21_ORC_PID_OBRv2) GroupByTQ1() []*OML_O21_ORC_PID_OBR_TQ1v2 {
	return m.tq1
}

func (m *OML_O21_ORC_PID_OBRv2) GroupByOBX() []*OML_O21_ORC_PID_OBR_OBXv2 {
	return m.obx
}

func (m OML_O21_ORC_PID_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"tq1": m.tq1,
		"obx": m.obx,
	}, nil
}

type OML_O21_ORC_PID_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OML_O21_ORC_PID_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OML_O21_ORC_PID_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OML_O21_ORC_PID_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OML_O21_ORC_PID_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OML_O21_ORC_PID_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OML_O21_ORC_PID_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OML_O21_ORC_PID_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OML_O33v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OML_O33_PIDv2   `json:"pid,omitempty"`
	spm []*OML_O33_SPMv2 `json:"spm,omitempty"` // Required
}

func (m *OML_O33v2) MSH() *MSH {
	return m.msh
}

func (m *OML_O33v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OML_O33v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O33v2) GroupByPID() *OML_O33_PIDv2 {
	return m.pid
}

func (m *OML_O33v2) GroupBySPM() []*OML_O33_SPMv2 {
	return m.spm
}

func (m OML_O33v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"spm": m.spm,
	}, nil
}

type OML_O33_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OML_O33_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OML_O33_PIDv2) PID() *PID {
	return m.pid
}

func (m *OML_O33_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OML_O33_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O33_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *OML_O33_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OML_O33_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OML_O33_PIDv2) GroupByIN1() []*OML_O33_PID_IN1v2 {
	return m.in1
}

func (m *OML_O33_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OML_O33_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OML_O33_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OML_O33_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OML_O33_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OML_O33_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OML_O33_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OML_O33_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OML_O33_SPMv2 struct {
	spm *SPM                 `json:"spm,omitempty"` // Required
	obx []*OBX               `json:"obx,omitempty"`
	sac []*SAC               `json:"sac,omitempty"`
	orc []*OML_O33_SPM_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OML_O33_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *OML_O33_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *OML_O33_SPMv2) AllSAC() []*SAC {
	return m.sac
}

func (m *OML_O33_SPMv2) GroupByORC() []*OML_O33_SPM_ORCv2 {
	return m.orc
}

func (m OML_O33_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
		"orc": m.orc,
	}, nil
}

type OML_O33_SPM_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*OML_O33_SPM_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	tcd *TCD                     `json:"tcd,omitempty"`
	nte []*NTE                   `json:"nte,omitempty"`
	dg1 []*DG1                   `json:"dg_1,omitempty"`
	obx []*OML_O33_SPM_ORC_OBXv2 `json:"obx,omitempty"`
	pid []*OML_O33_SPM_ORC_PIDv2 `json:"pid,omitempty"`
	ft1 []*FT1                   `json:"ft_1,omitempty"`
	cti []*CTI                   `json:"cti,omitempty"`
	blg *BLG                     `json:"blg,omitempty"`
}

func (m *OML_O33_SPM_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OML_O33_SPM_ORCv2) GroupByTQ1() []*OML_O33_SPM_ORC_TQ1v2 {
	return m.tq1
}

func (m *OML_O33_SPM_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *OML_O33_SPM_ORCv2) TCD() *TCD {
	return m.tcd
}

func (m *OML_O33_SPM_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O33_SPM_ORCv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *OML_O33_SPM_ORCv2) GroupByOBX() []*OML_O33_SPM_ORC_OBXv2 {
	return m.obx
}

func (m *OML_O33_SPM_ORCv2) GroupByPID() []*OML_O33_SPM_ORC_PIDv2 {
	return m.pid
}

func (m *OML_O33_SPM_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *OML_O33_SPM_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m *OML_O33_SPM_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OML_O33_SPM_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"tcd": m.tcd,
		"nte": m.nte,
		"dg1": m.dg1,
		"obx": m.obx,
		"pid": m.pid,
		"ft1": m.ft1,
		"cti": m.cti,
		"blg": m.blg,
	}, nil
}

type OML_O33_SPM_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OML_O33_SPM_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OML_O33_SPM_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OML_O33_SPM_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OML_O33_SPM_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	tcd *TCD   `json:"tcd,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OML_O33_SPM_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OML_O33_SPM_ORC_OBXv2) TCD() *TCD {
	return m.tcd
}

func (m *OML_O33_SPM_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OML_O33_SPM_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"tcd": m.tcd,
		"nte": m.nte,
	}, nil
}

type OML_O33_SPM_ORC_PIDv2 struct {
	pid *PID                         `json:"pid,omitempty"` // Required
	pd1 *PD1                         `json:"pd_1,omitempty"`
	pv1 *PV1                         `json:"pv_1,omitempty"` // Required
	pv2 *PV2                         `json:"pv_2,omitempty"`
	al1 []*AL1                       `json:"al_1,omitempty"`
	obr []*OML_O33_SPM_ORC_PID_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *OML_O33_SPM_ORC_PIDv2) PID() *PID {
	return m.pid
}

func (m *OML_O33_SPM_ORC_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OML_O33_SPM_ORC_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OML_O33_SPM_ORC_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OML_O33_SPM_ORC_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *OML_O33_SPM_ORC_PIDv2) GroupByOBR() []*OML_O33_SPM_ORC_PID_OBRv2 {
	return m.obr
}

func (m OML_O33_SPM_ORC_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"al1": m.al1,
		"obr": m.obr,
	}, nil
}

type OML_O33_SPM_ORC_PID_OBRv2 struct {
	orc *ORC                             `json:"orc,omitempty"`
	obr *OBR                             `json:"obr,omitempty"` // Required
	nte []*NTE                           `json:"nte,omitempty"`
	tq1 []*OML_O33_SPM_ORC_PID_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obx []*OML_O33_SPM_ORC_PID_OBR_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *OML_O33_SPM_ORC_PID_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *OML_O33_SPM_ORC_PID_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *OML_O33_SPM_ORC_PID_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O33_SPM_ORC_PID_OBRv2) GroupByTQ1() []*OML_O33_SPM_ORC_PID_OBR_TQ1v2 {
	return m.tq1
}

func (m *OML_O33_SPM_ORC_PID_OBRv2) GroupByOBX() []*OML_O33_SPM_ORC_PID_OBR_OBXv2 {
	return m.obx
}

func (m OML_O33_SPM_ORC_PID_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"tq1": m.tq1,
		"obx": m.obx,
	}, nil
}

type OML_O33_SPM_ORC_PID_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OML_O33_SPM_ORC_PID_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OML_O33_SPM_ORC_PID_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OML_O33_SPM_ORC_PID_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OML_O33_SPM_ORC_PID_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OML_O33_SPM_ORC_PID_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OML_O33_SPM_ORC_PID_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OML_O33_SPM_ORC_PID_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OML_O35v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OML_O35_PIDv2   `json:"pid,omitempty"`
	spm []*OML_O35_SPMv2 `json:"spm,omitempty"` // Required
}

func (m *OML_O35v2) MSH() *MSH {
	return m.msh
}

func (m *OML_O35v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OML_O35v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O35v2) GroupByPID() *OML_O35_PIDv2 {
	return m.pid
}

func (m *OML_O35v2) GroupBySPM() []*OML_O35_SPMv2 {
	return m.spm
}

func (m OML_O35v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"spm": m.spm,
	}, nil
}

type OML_O35_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OML_O35_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OML_O35_PIDv2) PID() *PID {
	return m.pid
}

func (m *OML_O35_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OML_O35_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O35_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *OML_O35_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OML_O35_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OML_O35_PIDv2) GroupByIN1() []*OML_O35_PID_IN1v2 {
	return m.in1
}

func (m *OML_O35_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OML_O35_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OML_O35_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OML_O35_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OML_O35_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OML_O35_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OML_O35_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OML_O35_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OML_O35_SPMv2 struct {
	spm *SPM                 `json:"spm,omitempty"` // Required
	obx []*OBX               `json:"obx,omitempty"`
	sac []*OML_O35_SPM_SACv2 `json:"sac,omitempty"` // Required
}

func (m *OML_O35_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *OML_O35_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *OML_O35_SPMv2) GroupBySAC() []*OML_O35_SPM_SACv2 {
	return m.sac
}

func (m OML_O35_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
	}, nil
}

type OML_O35_SPM_SACv2 struct {
	sac *SAC                     `json:"sac,omitempty"` // Required
	orc []*OML_O35_SPM_SAC_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OML_O35_SPM_SACv2) SAC() *SAC {
	return m.sac
}

func (m *OML_O35_SPM_SACv2) GroupByORC() []*OML_O35_SPM_SAC_ORCv2 {
	return m.orc
}

func (m OML_O35_SPM_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"orc": m.orc,
	}, nil
}

type OML_O35_SPM_SAC_ORCv2 struct {
	orc *ORC                         `json:"orc,omitempty"` // Required
	tq1 []*OML_O35_SPM_SAC_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                         `json:"obr,omitempty"` // Required
	tcd *TCD                         `json:"tcd,omitempty"`
	nte []*NTE                       `json:"nte,omitempty"`
	dg1 []*DG1                       `json:"dg_1,omitempty"`
	obx []*OML_O35_SPM_SAC_ORC_OBXv2 `json:"obx,omitempty"`
	pid []*OML_O35_SPM_SAC_ORC_PIDv2 `json:"pid,omitempty"`
	ft1 []*FT1                       `json:"ft_1,omitempty"`
	cti []*CTI                       `json:"cti,omitempty"`
	blg *BLG                         `json:"blg,omitempty"`
}

func (m *OML_O35_SPM_SAC_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OML_O35_SPM_SAC_ORCv2) GroupByTQ1() []*OML_O35_SPM_SAC_ORC_TQ1v2 {
	return m.tq1
}

func (m *OML_O35_SPM_SAC_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *OML_O35_SPM_SAC_ORCv2) TCD() *TCD {
	return m.tcd
}

func (m *OML_O35_SPM_SAC_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O35_SPM_SAC_ORCv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *OML_O35_SPM_SAC_ORCv2) GroupByOBX() []*OML_O35_SPM_SAC_ORC_OBXv2 {
	return m.obx
}

func (m *OML_O35_SPM_SAC_ORCv2) GroupByPID() []*OML_O35_SPM_SAC_ORC_PIDv2 {
	return m.pid
}

func (m *OML_O35_SPM_SAC_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *OML_O35_SPM_SAC_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m *OML_O35_SPM_SAC_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OML_O35_SPM_SAC_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"tcd": m.tcd,
		"nte": m.nte,
		"dg1": m.dg1,
		"obx": m.obx,
		"pid": m.pid,
		"ft1": m.ft1,
		"cti": m.cti,
		"blg": m.blg,
	}, nil
}

type OML_O35_SPM_SAC_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OML_O35_SPM_SAC_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OML_O35_SPM_SAC_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OML_O35_SPM_SAC_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OML_O35_SPM_SAC_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	tcd *TCD   `json:"tcd,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OML_O35_SPM_SAC_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OML_O35_SPM_SAC_ORC_OBXv2) TCD() *TCD {
	return m.tcd
}

func (m *OML_O35_SPM_SAC_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OML_O35_SPM_SAC_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"tcd": m.tcd,
		"nte": m.nte,
	}, nil
}

type OML_O35_SPM_SAC_ORC_PIDv2 struct {
	pid *PID                             `json:"pid,omitempty"` // Required
	pd1 *PD1                             `json:"pd_1,omitempty"`
	pv1 *PV1                             `json:"pv_1,omitempty"` // Required
	pv2 *PV2                             `json:"pv_2,omitempty"`
	al1 []*AL1                           `json:"al_1,omitempty"`
	obr []*OML_O35_SPM_SAC_ORC_PID_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *OML_O35_SPM_SAC_ORC_PIDv2) PID() *PID {
	return m.pid
}

func (m *OML_O35_SPM_SAC_ORC_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OML_O35_SPM_SAC_ORC_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OML_O35_SPM_SAC_ORC_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OML_O35_SPM_SAC_ORC_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *OML_O35_SPM_SAC_ORC_PIDv2) GroupByOBR() []*OML_O35_SPM_SAC_ORC_PID_OBRv2 {
	return m.obr
}

func (m OML_O35_SPM_SAC_ORC_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"al1": m.al1,
		"obr": m.obr,
	}, nil
}

type OML_O35_SPM_SAC_ORC_PID_OBRv2 struct {
	orc *ORC                                 `json:"orc,omitempty"`
	obr *OBR                                 `json:"obr,omitempty"` // Required
	nte []*NTE                               `json:"nte,omitempty"`
	tq1 []*OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obx []*OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBRv2) GroupByTQ1() []*OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2 {
	return m.tq1
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBRv2) GroupByOBX() []*OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2 {
	return m.obx
}

func (m OML_O35_SPM_SAC_ORC_PID_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"tq1": m.tq1,
		"obx": m.obx,
	}, nil
}

type OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMN_O01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	pid *OMN_O01_PIDv2   `json:"pid,omitempty"`
	orc []*OMN_O01_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OMN_O01v2) MSH() *MSH {
	return m.msh
}

func (m *OMN_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMN_O01v2) GroupByPID() *OMN_O01_PIDv2 {
	return m.pid
}

func (m *OMN_O01v2) GroupByORC() []*OMN_O01_ORCv2 {
	return m.orc
}

func (m OMN_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OMN_O01_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMN_O01_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMN_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMN_O01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMN_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMN_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMN_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMN_O01_PIDv2) GroupByIN1() []*OMN_O01_PID_IN1v2 {
	return m.in1
}

func (m *OMN_O01_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMN_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMN_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMN_O01_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMN_O01_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMN_O01_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMN_O01_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMN_O01_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMN_O01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	rqd *RQD                 `json:"rqd,omitempty"` // Required
	rq1 *RQ1                 `json:"rq_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	obx []*OMN_O01_ORC_OBXv2 `json:"obx,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *OMN_O01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OMN_O01_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *OMN_O01_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *OMN_O01_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMN_O01_ORCv2) GroupByOBX() []*OMN_O01_ORC_OBXv2 {
	return m.obx
}

func (m *OMN_O01_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OMN_O01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"nte": m.nte,
		"obx": m.obx,
		"blg": m.blg,
	}, nil
}

type OMN_O01_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMN_O01_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMN_O01_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMN_O01_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMN_O07v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OMN_O07_PIDv2   `json:"pid,omitempty"`
	orc []*OMN_O07_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OMN_O07v2) MSH() *MSH {
	return m.msh
}

func (m *OMN_O07v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OMN_O07v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMN_O07v2) GroupByPID() *OMN_O07_PIDv2 {
	return m.pid
}

func (m *OMN_O07v2) GroupByORC() []*OMN_O07_ORCv2 {
	return m.orc
}

func (m OMN_O07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OMN_O07_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMN_O07_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMN_O07_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMN_O07_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMN_O07_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMN_O07_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMN_O07_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMN_O07_PIDv2) GroupByIN1() []*OMN_O07_PID_IN1v2 {
	return m.in1
}

func (m *OMN_O07_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMN_O07_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMN_O07_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMN_O07_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMN_O07_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMN_O07_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMN_O07_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMN_O07_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMN_O07_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*OMN_O07_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rqd *RQD                 `json:"rqd,omitempty"` // Required
	rq1 *RQ1                 `json:"rq_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	obx []*OMN_O07_ORC_OBXv2 `json:"obx,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *OMN_O07_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OMN_O07_ORCv2) GroupByTQ1() []*OMN_O07_ORC_TQ1v2 {
	return m.tq1
}

func (m *OMN_O07_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *OMN_O07_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *OMN_O07_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMN_O07_ORCv2) GroupByOBX() []*OMN_O07_ORC_OBXv2 {
	return m.obx
}

func (m *OMN_O07_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OMN_O07_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"nte": m.nte,
		"obx": m.obx,
		"blg": m.blg,
	}, nil
}

type OMN_O07_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMN_O07_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMN_O07_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMN_O07_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMN_O07_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMN_O07_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMN_O07_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMN_O07_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMP_O09v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OMP_O09_PIDv2   `json:"pid,omitempty"`
	orc []*OMP_O09_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OMP_O09v2) MSH() *MSH {
	return m.msh
}

func (m *OMP_O09v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OMP_O09v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMP_O09v2) GroupByPID() *OMP_O09_PIDv2 {
	return m.pid
}

func (m *OMP_O09v2) GroupByORC() []*OMP_O09_ORCv2 {
	return m.orc
}

func (m OMP_O09v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OMP_O09_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMP_O09_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMP_O09_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMP_O09_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMP_O09_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMP_O09_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMP_O09_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMP_O09_PIDv2) GroupByIN1() []*OMP_O09_PID_IN1v2 {
	return m.in1
}

func (m *OMP_O09_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMP_O09_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMP_O09_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMP_O09_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMP_O09_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMP_O09_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMP_O09_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMP_O09_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMP_O09_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*OMP_O09_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RXO                 `json:"rxo,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	rxr []*RXR               `json:"rxr,omitempty"` // Required
	rxc []*OMP_O09_ORC_RXCv2 `json:"rxc,omitempty"`
	obx []*OMP_O09_ORC_OBXv2 `json:"obx,omitempty"`
	ft1 []*FT1               `json:"ft_1,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *OMP_O09_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OMP_O09_ORCv2) GroupByTQ1() []*OMP_O09_ORC_TQ1v2 {
	return m.tq1
}

func (m *OMP_O09_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *OMP_O09_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMP_O09_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *OMP_O09_ORCv2) GroupByRXC() []*OMP_O09_ORC_RXCv2 {
	return m.rxc
}

func (m *OMP_O09_ORCv2) GroupByOBX() []*OMP_O09_ORC_OBXv2 {
	return m.obx
}

func (m *OMP_O09_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *OMP_O09_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OMP_O09_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
		"ft1": m.ft1,
		"blg": m.blg,
	}, nil
}

type OMP_O09_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMP_O09_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMP_O09_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMP_O09_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMP_O09_ORC_RXCv2 struct {
	rxc *RXC   `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMP_O09_ORC_RXCv2) RXC() *RXC {
	return m.rxc
}

func (m *OMP_O09_ORC_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMP_O09_ORC_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type OMP_O09_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMP_O09_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMP_O09_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMP_O09_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMS_O01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	pid *OMS_O01_PIDv2   `json:"pid,omitempty"`
	orc []*OMS_O01_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OMS_O01v2) MSH() *MSH {
	return m.msh
}

func (m *OMS_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMS_O01v2) GroupByPID() *OMS_O01_PIDv2 {
	return m.pid
}

func (m *OMS_O01v2) GroupByORC() []*OMS_O01_ORCv2 {
	return m.orc
}

func (m OMS_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OMS_O01_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMS_O01_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMS_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMS_O01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMS_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMS_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMS_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMS_O01_PIDv2) GroupByIN1() []*OMS_O01_PID_IN1v2 {
	return m.in1
}

func (m *OMS_O01_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMS_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMS_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMS_O01_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMS_O01_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMS_O01_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMS_O01_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMS_O01_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMS_O01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	rqd *RQD                 `json:"rqd,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obx []*OMS_O01_ORC_OBXv2 `json:"obx,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *OMS_O01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OMS_O01_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *OMS_O01_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMS_O01_ORCv2) GroupByOBX() []*OMS_O01_ORC_OBXv2 {
	return m.obx
}

func (m *OMS_O01_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OMS_O01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rqd": m.rqd,
		"nte": m.nte,
		"obx": m.obx,
		"blg": m.blg,
	}, nil
}

type OMS_O01_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMS_O01_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMS_O01_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMS_O01_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OMS_O05v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *OMS_O05_PIDv2   `json:"pid,omitempty"`
	orc []*OMS_O05_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OMS_O05v2) MSH() *MSH {
	return m.msh
}

func (m *OMS_O05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OMS_O05v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMS_O05v2) GroupByPID() *OMS_O05_PIDv2 {
	return m.pid
}

func (m *OMS_O05v2) GroupByORC() []*OMS_O05_ORCv2 {
	return m.orc
}

func (m OMS_O05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type OMS_O05_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*OMS_O05_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *OMS_O05_PIDv2) PID() *PID {
	return m.pid
}

func (m *OMS_O05_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OMS_O05_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMS_O05_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *OMS_O05_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *OMS_O05_PIDv2) GroupByIN1() []*OMS_O05_PID_IN1v2 {
	return m.in1
}

func (m *OMS_O05_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *OMS_O05_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m OMS_O05_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type OMS_O05_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *OMS_O05_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *OMS_O05_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *OMS_O05_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m OMS_O05_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type OMS_O05_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*OMS_O05_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rqd *RQD                 `json:"rqd,omitempty"` // Required
	rq1 *RQ1                 `json:"rq_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	obx []*OMS_O05_ORC_OBXv2 `json:"obx,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *OMS_O05_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OMS_O05_ORCv2) GroupByTQ1() []*OMS_O05_ORC_TQ1v2 {
	return m.tq1
}

func (m *OMS_O05_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *OMS_O05_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *OMS_O05_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OMS_O05_ORCv2) GroupByOBX() []*OMS_O05_ORC_OBXv2 {
	return m.obx
}

func (m *OMS_O05_ORCv2) BLG() *BLG {
	return m.blg
}

func (m OMS_O05_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"nte": m.nte,
		"obx": m.obx,
		"blg": m.blg,
	}, nil
}

type OMS_O05_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OMS_O05_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OMS_O05_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OMS_O05_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OMS_O05_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OMS_O05_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OMS_O05_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OMS_O05_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type ORB_O28v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *PID             `json:"pid,omitempty"` // Required
	orc []*ORB_O28_ORCv2 `json:"orc,omitempty"`
}

func (m *ORB_O28v2) MSH() *MSH {
	return m.msh
}

func (m *ORB_O28v2) MSA() *MSA {
	return m.msa
}

func (m *ORB_O28v2) AllERR() []*ERR {
	return m.err
}

func (m *ORB_O28v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORB_O28v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORB_O28v2) PID() *PID {
	return m.pid
}

func (m *ORB_O28v2) GroupByORC() []*ORB_O28_ORCv2 {
	return m.orc
}

func (m ORB_O28v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type ORB_O28_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*ORB_O28_ORC_TQ1v2 `json:"tq_1,omitempty"`
	bpo *BPO                 `json:"bpo,omitempty"`
}

func (m *ORB_O28_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORB_O28_ORCv2) GroupByTQ1() []*ORB_O28_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORB_O28_ORCv2) BPO() *BPO {
	return m.bpo
}

func (m ORB_O28_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"bpo": m.bpo,
	}, nil
}

type ORB_O28_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORB_O28_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORB_O28_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORB_O28_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORD_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err *ERR           `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORD_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *ORD_O02v2) MSH() *MSH {
	return m.msh
}

func (m *ORD_O02v2) MSA() *MSA {
	return m.msa
}

func (m *ORD_O02v2) ERR() *ERR {
	return m.err
}

func (m *ORD_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORD_O02v2) GroupByPID() *ORD_O02_PIDv2 {
	return m.pid
}

func (m ORD_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORD_O02_PIDv2 struct {
	pid  *PID                  `json:"pid,omitempty"` // Required
	nte  []*NTE                `json:"nte,omitempty"`
	orc1 []*ORD_O02_PID_ORC1v2 `json:"orc_1,omitempty"` // Required
	orc2 []*ORD_O02_PID_ORC2v2 `json:"orc_2,omitempty"`
}

func (m *ORD_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORD_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORD_O02_PIDv2) GroupByORC1() []*ORD_O02_PID_ORC1v2 {
	return m.orc1
}

func (m *ORD_O02_PIDv2) GroupByORC2() []*ORD_O02_PID_ORC2v2 {
	return m.orc2
}

func (m ORD_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid":  m.pid,
		"nte":  m.nte,
		"orc1": m.orc1,
		"orc2": m.orc2,
	}, nil
}

type ORD_O02_PID_ORC1v2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	ods []*ODS `json:"ods,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORD_O02_PID_ORC1v2) ORC() *ORC {
	return m.orc
}

func (m *ORD_O02_PID_ORC1v2) AllODS() []*ODS {
	return m.ods
}

func (m *ORD_O02_PID_ORC1v2) AllNTE() []*NTE {
	return m.nte
}

func (m ORD_O02_PID_ORC1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"ods": m.ods,
		"nte": m.nte,
	}, nil
}

type ORD_O02_PID_ORC2v2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	odt []*ODT `json:"odt,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORD_O02_PID_ORC2v2) ORC() *ORC {
	return m.orc
}

func (m *ORD_O02_PID_ORC2v2) AllODT() []*ODT {
	return m.odt
}

func (m *ORD_O02_PID_ORC2v2) AllNTE() []*NTE {
	return m.nte
}

func (m ORD_O02_PID_ORC2v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"odt": m.odt,
		"nte": m.nte,
	}, nil
}

type ORD_O04v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORD_O04_PIDv2 `json:"pid,omitempty"`
}

func (m *ORD_O04v2) MSH() *MSH {
	return m.msh
}

func (m *ORD_O04v2) MSA() *MSA {
	return m.msa
}

func (m *ORD_O04v2) AllERR() []*ERR {
	return m.err
}

func (m *ORD_O04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORD_O04v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORD_O04v2) GroupByPID() *ORD_O04_PIDv2 {
	return m.pid
}

func (m ORD_O04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORD_O04_PIDv2 struct {
	pid  *PID                  `json:"pid,omitempty"` // Required
	nte  []*NTE                `json:"nte,omitempty"`
	orc1 []*ORD_O04_PID_ORC1v2 `json:"orc_1,omitempty"` // Required
	orc2 []*ORD_O04_PID_ORC2v2 `json:"orc_2,omitempty"`
}

func (m *ORD_O04_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORD_O04_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORD_O04_PIDv2) GroupByORC1() []*ORD_O04_PID_ORC1v2 {
	return m.orc1
}

func (m *ORD_O04_PIDv2) GroupByORC2() []*ORD_O04_PID_ORC2v2 {
	return m.orc2
}

func (m ORD_O04_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid":  m.pid,
		"nte":  m.nte,
		"orc1": m.orc1,
		"orc2": m.orc2,
	}, nil
}

type ORD_O04_PID_ORC1v2 struct {
	orc *ORC                      `json:"orc,omitempty"` // Required
	tq1 []*ORD_O04_PID_ORC1_TQ1v2 `json:"tq_1,omitempty"`
	ods []*ODS                    `json:"ods,omitempty"`
	nte []*NTE                    `json:"nte,omitempty"`
}

func (m *ORD_O04_PID_ORC1v2) ORC() *ORC {
	return m.orc
}

func (m *ORD_O04_PID_ORC1v2) GroupByTQ1() []*ORD_O04_PID_ORC1_TQ1v2 {
	return m.tq1
}

func (m *ORD_O04_PID_ORC1v2) AllODS() []*ODS {
	return m.ods
}

func (m *ORD_O04_PID_ORC1v2) AllNTE() []*NTE {
	return m.nte
}

func (m ORD_O04_PID_ORC1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"ods": m.ods,
		"nte": m.nte,
	}, nil
}

type ORD_O04_PID_ORC1_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORD_O04_PID_ORC1_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORD_O04_PID_ORC1_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORD_O04_PID_ORC1_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORD_O04_PID_ORC2v2 struct {
	orc *ORC                      `json:"orc,omitempty"` // Required
	tq1 []*ORD_O04_PID_ORC2_TQ1v2 `json:"tq_1,omitempty"`
	odt []*ODT                    `json:"odt,omitempty"`
	nte []*NTE                    `json:"nte,omitempty"`
}

func (m *ORD_O04_PID_ORC2v2) ORC() *ORC {
	return m.orc
}

func (m *ORD_O04_PID_ORC2v2) GroupByTQ1() []*ORD_O04_PID_ORC2_TQ1v2 {
	return m.tq1
}

func (m *ORD_O04_PID_ORC2v2) AllODT() []*ODT {
	return m.odt
}

func (m *ORD_O04_PID_ORC2v2) AllNTE() []*NTE {
	return m.nte
}

func (m ORD_O04_PID_ORC2v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"odt": m.odt,
		"nte": m.nte,
	}, nil
}

type ORD_O04_PID_ORC2_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORD_O04_PID_ORC2_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORD_O04_PID_ORC2_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORD_O04_PID_ORC2_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORF_R04v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	pid []*ORF_R04_PIDv2 `json:"pid,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *ORF_R04v2) MSH() *MSH {
	return m.msh
}

func (m *ORF_R04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORF_R04v2) MSA() *MSA {
	return m.msa
}

func (m *ORF_R04v2) QRD() *QRD {
	return m.qrd
}

func (m *ORF_R04v2) QRF() *QRF {
	return m.qrf
}

func (m *ORF_R04v2) GroupByPID() []*ORF_R04_PIDv2 {
	return m.pid
}

func (m *ORF_R04v2) AllERR() []*ERR {
	return m.err
}

func (m *ORF_R04v2) QAK() *QAK {
	return m.qak
}

func (m *ORF_R04v2) DSC() *DSC {
	return m.dsc
}

func (m ORF_R04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"err": m.err,
		"qak": m.qak,
		"dsc": m.dsc,
	}, nil
}

type ORF_R04_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obr []*ORF_R04_PID_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *ORF_R04_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORF_R04_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORF_R04_PIDv2) GroupByOBR() []*ORF_R04_PID_OBRv2 {
	return m.obr
}

func (m ORF_R04_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"obr": m.obr,
	}, nil
}

type ORF_R04_PID_OBRv2 struct {
	orc *ORC                     `json:"orc,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	tq1 []*ORF_R04_PID_OBR_TQ1v2 `json:"tq_1,omitempty"`
	ctd *CTD                     `json:"ctd,omitempty"`
	obx []*ORF_R04_PID_OBR_OBXv2 `json:"obx,omitempty"` // Required
	cti []*CTI                   `json:"cti,omitempty"`
}

func (m *ORF_R04_PID_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *ORF_R04_PID_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *ORF_R04_PID_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORF_R04_PID_OBRv2) GroupByTQ1() []*ORF_R04_PID_OBR_TQ1v2 {
	return m.tq1
}

func (m *ORF_R04_PID_OBRv2) CTD() *CTD {
	return m.ctd
}

func (m *ORF_R04_PID_OBRv2) GroupByOBX() []*ORF_R04_PID_OBR_OBXv2 {
	return m.obx
}

func (m *ORF_R04_PID_OBRv2) AllCTI() []*CTI {
	return m.cti
}

func (m ORF_R04_PID_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"tq1": m.tq1,
		"ctd": m.ctd,
		"obx": m.obx,
		"cti": m.cti,
	}, nil
}

type ORF_R04_PID_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORF_R04_PID_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORF_R04_PID_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORF_R04_PID_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORF_R04_PID_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORF_R04_PID_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *ORF_R04_PID_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORF_R04_PID_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type ORG_O20v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORG_O20_PIDv2 `json:"pid,omitempty"`
}

func (m *ORG_O20v2) MSH() *MSH {
	return m.msh
}

func (m *ORG_O20v2) MSA() *MSA {
	return m.msa
}

func (m *ORG_O20v2) AllERR() []*ERR {
	return m.err
}

func (m *ORG_O20v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORG_O20v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORG_O20v2) GroupByPID() *ORG_O20_PIDv2 {
	return m.pid
}

func (m ORG_O20v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORG_O20_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ORG_O20_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORG_O20_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORG_O20_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORG_O20_PIDv2) GroupByORC() []*ORG_O20_PID_ORCv2 {
	return m.orc
}

func (m ORG_O20_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ORG_O20_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*ORG_O20_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                     `json:"obr,omitempty"`
	nte []*NTE                   `json:"nte,omitempty"`
	cti []*CTI                   `json:"cti,omitempty"`
	spm []*ORG_O20_PID_ORC_SPMv2 `json:"spm,omitempty"`
}

func (m *ORG_O20_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORG_O20_PID_ORCv2) GroupByTQ1() []*ORG_O20_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORG_O20_PID_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *ORG_O20_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORG_O20_PID_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m *ORG_O20_PID_ORCv2) GroupBySPM() []*ORG_O20_PID_ORC_SPMv2 {
	return m.spm
}

func (m ORG_O20_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"cti": m.cti,
		"spm": m.spm,
	}, nil
}

type ORG_O20_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORG_O20_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORG_O20_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORG_O20_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORG_O20_PID_ORC_SPMv2 struct {
	spm *SPM   `json:"spm,omitempty"` // Required
	sac []*SAC `json:"sac,omitempty"`
}

func (m *ORG_O20_PID_ORC_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *ORG_O20_PID_ORC_SPMv2) AllSAC() []*SAC {
	return m.sac
}

func (m ORG_O20_PID_ORC_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"sac": m.sac,
	}, nil
}

type ORI_O24v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORI_O24_PIDv2 `json:"pid,omitempty"`
}

func (m *ORI_O24v2) MSH() *MSH {
	return m.msh
}

func (m *ORI_O24v2) MSA() *MSA {
	return m.msa
}

func (m *ORI_O24v2) AllERR() []*ERR {
	return m.err
}

func (m *ORI_O24v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORI_O24v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORI_O24v2) GroupByPID() *ORI_O24_PIDv2 {
	return m.pid
}

func (m ORI_O24v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORI_O24_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ORI_O24_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORI_O24_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORI_O24_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORI_O24_PIDv2) GroupByORC() []*ORI_O24_PID_ORCv2 {
	return m.orc
}

func (m ORI_O24_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ORI_O24_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*ORI_O24_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	ipc []*IPC                   `json:"ipc,omitempty"` // Required
}

func (m *ORI_O24_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORI_O24_PID_ORCv2) GroupByTQ1() []*ORI_O24_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORI_O24_PID_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *ORI_O24_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORI_O24_PID_ORCv2) AllIPC() []*IPC {
	return m.ipc
}

func (m ORI_O24_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"ipc": m.ipc,
	}, nil
}

type ORI_O24_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORI_O24_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORI_O24_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORI_O24_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORL_O22v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *PID             `json:"pid,omitempty"` // Required
	orc []*ORL_O22_ORCv2 `json:"orc,omitempty"`
}

func (m *ORL_O22v2) MSH() *MSH {
	return m.msh
}

func (m *ORL_O22v2) MSA() *MSA {
	return m.msa
}

func (m *ORL_O22v2) AllERR() []*ERR {
	return m.err
}

func (m *ORL_O22v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORL_O22v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORL_O22v2) PID() *PID {
	return m.pid
}

func (m *ORL_O22v2) GroupByORC() []*ORL_O22_ORCv2 {
	return m.orc
}

func (m ORL_O22v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type ORL_O22_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*ORL_O22_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	spm []*ORL_O22_ORC_SPMv2 `json:"spm,omitempty"`
}

func (m *ORL_O22_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORL_O22_ORCv2) GroupByTQ1() []*ORL_O22_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORL_O22_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *ORL_O22_ORCv2) GroupBySPM() []*ORL_O22_ORC_SPMv2 {
	return m.spm
}

func (m ORL_O22_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"spm": m.spm,
	}, nil
}

type ORL_O22_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORL_O22_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORL_O22_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORL_O22_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORL_O22_ORC_SPMv2 struct {
	spm *SPM   `json:"spm,omitempty"` // Required
	sac []*SAC `json:"sac,omitempty"`
}

func (m *ORL_O22_ORC_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *ORL_O22_ORC_SPMv2) AllSAC() []*SAC {
	return m.sac
}

func (m ORL_O22_ORC_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"sac": m.sac,
	}, nil
}

type ORL_O34v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *PID             `json:"pid,omitempty"` // Required
	spm []*ORL_O34_SPMv2 `json:"spm,omitempty"` // Required
}

func (m *ORL_O34v2) MSH() *MSH {
	return m.msh
}

func (m *ORL_O34v2) MSA() *MSA {
	return m.msa
}

func (m *ORL_O34v2) AllERR() []*ERR {
	return m.err
}

func (m *ORL_O34v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORL_O34v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORL_O34v2) PID() *PID {
	return m.pid
}

func (m *ORL_O34v2) GroupBySPM() []*ORL_O34_SPMv2 {
	return m.spm
}

func (m ORL_O34v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"spm": m.spm,
	}, nil
}

type ORL_O34_SPMv2 struct {
	spm *SPM                 `json:"spm,omitempty"` // Required
	obx []*OBX               `json:"obx,omitempty"`
	sac []*SAC               `json:"sac,omitempty"`
	orc []*ORL_O34_SPM_ORCv2 `json:"orc,omitempty"`
}

func (m *ORL_O34_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *ORL_O34_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *ORL_O34_SPMv2) AllSAC() []*SAC {
	return m.sac
}

func (m *ORL_O34_SPMv2) GroupByORC() []*ORL_O34_SPM_ORCv2 {
	return m.orc
}

func (m ORL_O34_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
		"orc": m.orc,
	}, nil
}

type ORL_O34_SPM_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*ORL_O34_SPM_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	spm []*ORL_O34_SPM_ORC_SPMv2 `json:"spm,omitempty"`
}

func (m *ORL_O34_SPM_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORL_O34_SPM_ORCv2) GroupByTQ1() []*ORL_O34_SPM_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORL_O34_SPM_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *ORL_O34_SPM_ORCv2) GroupBySPM() []*ORL_O34_SPM_ORC_SPMv2 {
	return m.spm
}

func (m ORL_O34_SPM_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"spm": m.spm,
	}, nil
}

type ORL_O34_SPM_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORL_O34_SPM_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORL_O34_SPM_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORL_O34_SPM_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORL_O34_SPM_ORC_SPMv2 struct {
	spm *SPM   `json:"spm,omitempty"` // Required
	sac []*SAC `json:"sac,omitempty"`
}

func (m *ORL_O34_SPM_ORC_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *ORL_O34_SPM_ORC_SPMv2) AllSAC() []*SAC {
	return m.sac
}

func (m ORL_O34_SPM_ORC_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"sac": m.sac,
	}, nil
}

type ORL_O36v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *PID             `json:"pid,omitempty"` // Required
	spm []*ORL_O36_SPMv2 `json:"spm,omitempty"` // Required
}

func (m *ORL_O36v2) MSH() *MSH {
	return m.msh
}

func (m *ORL_O36v2) MSA() *MSA {
	return m.msa
}

func (m *ORL_O36v2) AllERR() []*ERR {
	return m.err
}

func (m *ORL_O36v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORL_O36v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORL_O36v2) PID() *PID {
	return m.pid
}

func (m *ORL_O36v2) GroupBySPM() []*ORL_O36_SPMv2 {
	return m.spm
}

func (m ORL_O36v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"spm": m.spm,
	}, nil
}

type ORL_O36_SPMv2 struct {
	spm *SPM                 `json:"spm,omitempty"` // Required
	obx []*OBX               `json:"obx,omitempty"`
	sac []*ORL_O36_SPM_SACv2 `json:"sac,omitempty"` // Required
}

func (m *ORL_O36_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *ORL_O36_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *ORL_O36_SPMv2) GroupBySAC() []*ORL_O36_SPM_SACv2 {
	return m.sac
}

func (m ORL_O36_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
	}, nil
}

type ORL_O36_SPM_SACv2 struct {
	sac *SAC                     `json:"sac,omitempty"` // Required
	orc []*ORL_O36_SPM_SAC_ORCv2 `json:"orc,omitempty"`
}

func (m *ORL_O36_SPM_SACv2) SAC() *SAC {
	return m.sac
}

func (m *ORL_O36_SPM_SACv2) GroupByORC() []*ORL_O36_SPM_SAC_ORCv2 {
	return m.orc
}

func (m ORL_O36_SPM_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"orc": m.orc,
	}, nil
}

type ORL_O36_SPM_SAC_ORCv2 struct {
	orc *ORC                         `json:"orc,omitempty"` // Required
	tq1 []*ORL_O36_SPM_SAC_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                         `json:"obr,omitempty"` // Required
}

func (m *ORL_O36_SPM_SAC_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORL_O36_SPM_SAC_ORCv2) GroupByTQ1() []*ORL_O36_SPM_SAC_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORL_O36_SPM_SAC_ORCv2) OBR() *OBR {
	return m.obr
}

func (m ORL_O36_SPM_SAC_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
	}, nil
}

type ORL_O36_SPM_SAC_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORL_O36_SPM_SAC_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORL_O36_SPM_SAC_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORL_O36_SPM_SAC_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORM_O01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	pid *ORM_O01_PIDv2   `json:"pid,omitempty"`
	orc []*ORM_O01_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORM_O01v2) MSH() *MSH {
	return m.msh
}

func (m *ORM_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORM_O01v2) GroupByPID() *ORM_O01_PIDv2 {
	return m.pid
}

func (m *ORM_O01v2) GroupByORC() []*ORM_O01_ORCv2 {
	return m.orc
}

func (m ORM_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type ORM_O01_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*ORM_O01_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *ORM_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORM_O01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ORM_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORM_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *ORM_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *ORM_O01_PIDv2) GroupByIN1() []*ORM_O01_PID_IN1v2 {
	return m.in1
}

func (m *ORM_O01_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *ORM_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m ORM_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type ORM_O01_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *ORM_O01_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *ORM_O01_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *ORM_O01_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m ORM_O01_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type ORM_O01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"`  // Required
	obr *OBR                 `json:"obr,omitempty"`  // Required
	rqd *RQD                 `json:"rqd,omitempty"`  // Required
	rq1 *RQ1                 `json:"rq_1,omitempty"` // Required
	rxo *RXO                 `json:"rxo,omitempty"`  // Required
	ods *ODS                 `json:"ods,omitempty"`  // Required
	odt *ODT                 `json:"odt,omitempty"`  // Required
	nte []*NTE               `json:"nte,omitempty"`
	ctd *CTD                 `json:"ctd,omitempty"`
	dg1 []*DG1               `json:"dg_1,omitempty"`
	obx []*ORM_O01_ORC_OBXv2 `json:"obx,omitempty"`
	ft1 []*FT1               `json:"ft_1,omitempty"`
	cti []*CTI               `json:"cti,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *ORM_O01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORM_O01_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *ORM_O01_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *ORM_O01_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *ORM_O01_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *ORM_O01_ORCv2) ODS() *ODS {
	return m.ods
}

func (m *ORM_O01_ORCv2) ODT() *ODT {
	return m.odt
}

func (m *ORM_O01_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORM_O01_ORCv2) CTD() *CTD {
	return m.ctd
}

func (m *ORM_O01_ORCv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *ORM_O01_ORCv2) GroupByOBX() []*ORM_O01_ORC_OBXv2 {
	return m.obx
}

func (m *ORM_O01_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *ORM_O01_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m *ORM_O01_ORCv2) BLG() *BLG {
	return m.blg
}

func (m ORM_O01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"rxo": m.rxo,
		"ods": m.ods,
		"odt": m.odt,
		"nte": m.nte,
		"ctd": m.ctd,
		"dg1": m.dg1,
		"obx": m.obx,
		"ft1": m.ft1,
		"cti": m.cti,
		"blg": m.blg,
	}, nil
}

type ORM_O01_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORM_O01_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *ORM_O01_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORM_O01_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type ORN_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err *ERR           `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORN_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *ORN_O02v2) MSH() *MSH {
	return m.msh
}

func (m *ORN_O02v2) MSA() *MSA {
	return m.msa
}

func (m *ORN_O02v2) ERR() *ERR {
	return m.err
}

func (m *ORN_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORN_O02v2) GroupByPID() *ORN_O02_PIDv2 {
	return m.pid
}

func (m ORN_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORN_O02_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ORN_O02_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORN_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORN_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORN_O02_PIDv2) GroupByORC() []*ORN_O02_PID_ORCv2 {
	return m.orc
}

func (m ORN_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ORN_O02_PID_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	rqd *RQD   `json:"rqd,omitempty"` // Required
	rq1 *RQ1   `json:"rq_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORN_O02_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORN_O02_PID_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *ORN_O02_PID_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *ORN_O02_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORN_O02_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"nte": m.nte,
	}, nil
}

type ORN_O08v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORN_O08_PIDv2 `json:"pid,omitempty"`
}

func (m *ORN_O08v2) MSH() *MSH {
	return m.msh
}

func (m *ORN_O08v2) MSA() *MSA {
	return m.msa
}

func (m *ORN_O08v2) AllERR() []*ERR {
	return m.err
}

func (m *ORN_O08v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORN_O08v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORN_O08v2) GroupByPID() *ORN_O08_PIDv2 {
	return m.pid
}

func (m ORN_O08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORN_O08_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ORN_O08_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORN_O08_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORN_O08_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORN_O08_PIDv2) GroupByORC() []*ORN_O08_PID_ORCv2 {
	return m.orc
}

func (m ORN_O08_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ORN_O08_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*ORN_O08_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rqd *RQD                     `json:"rqd,omitempty"` // Required
	rq1 *RQ1                     `json:"rq_1,omitempty"`
	nte []*NTE                   `json:"nte,omitempty"`
}

func (m *ORN_O08_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORN_O08_PID_ORCv2) GroupByTQ1() []*ORN_O08_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORN_O08_PID_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *ORN_O08_PID_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *ORN_O08_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORN_O08_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"nte": m.nte,
	}, nil
}

type ORN_O08_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORN_O08_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORN_O08_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORN_O08_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORP_O10v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORP_O10_PIDv2 `json:"pid,omitempty"`
}

func (m *ORP_O10v2) MSH() *MSH {
	return m.msh
}

func (m *ORP_O10v2) MSA() *MSA {
	return m.msa
}

func (m *ORP_O10v2) AllERR() []*ERR {
	return m.err
}

func (m *ORP_O10v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORP_O10v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORP_O10v2) GroupByPID() *ORP_O10_PIDv2 {
	return m.pid
}

func (m ORP_O10v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORP_O10_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ORP_O10_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORP_O10_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORP_O10_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORP_O10_PIDv2) GroupByORC() []*ORP_O10_PID_ORCv2 {
	return m.orc
}

func (m ORP_O10_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ORP_O10_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*ORP_O10_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RXO                     `json:"rxo,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*ORP_O10_PID_ORC_RXCv2 `json:"rxc,omitempty"`
}

func (m *ORP_O10_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORP_O10_PID_ORCv2) GroupByTQ1() []*ORP_O10_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORP_O10_PID_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *ORP_O10_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORP_O10_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *ORP_O10_PID_ORCv2) GroupByRXC() []*ORP_O10_PID_ORC_RXCv2 {
	return m.rxc
}

func (m ORP_O10_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type ORP_O10_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORP_O10_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORP_O10_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORP_O10_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORP_O10_PID_ORC_RXCv2 struct {
	rxc *RXC   `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORP_O10_PID_ORC_RXCv2) RXC() *RXC {
	return m.rxc
}

func (m *ORP_O10_PID_ORC_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORP_O10_PID_ORC_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type ORR_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORR_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *ORR_O02v2) MSH() *MSH {
	return m.msh
}

func (m *ORR_O02v2) MSA() *MSA {
	return m.msa
}

func (m *ORR_O02v2) AllERR() []*ERR {
	return m.err
}

func (m *ORR_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORR_O02v2) GroupByPID() *ORR_O02_PIDv2 {
	return m.pid
}

func (m ORR_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORR_O02_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ORR_O02_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORR_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORR_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORR_O02_PIDv2) GroupByORC() []*ORR_O02_PID_ORCv2 {
	return m.orc
}

func (m ORR_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ORR_O02_PID_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"`  // Required
	obr *OBR   `json:"obr,omitempty"`  // Required
	rqd *RQD   `json:"rqd,omitempty"`  // Required
	rq1 *RQ1   `json:"rq_1,omitempty"` // Required
	rxo *RXO   `json:"rxo,omitempty"`  // Required
	ods *ODS   `json:"ods,omitempty"`  // Required
	odt *ODT   `json:"odt,omitempty"`  // Required
	nte []*NTE `json:"nte,omitempty"`
	cti []*CTI `json:"cti,omitempty"`
}

func (m *ORR_O02_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORR_O02_PID_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *ORR_O02_PID_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *ORR_O02_PID_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *ORR_O02_PID_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *ORR_O02_PID_ORCv2) ODS() *ODS {
	return m.ods
}

func (m *ORR_O02_PID_ORCv2) ODT() *ODT {
	return m.odt
}

func (m *ORR_O02_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORR_O02_PID_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m ORR_O02_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"rxo": m.rxo,
		"ods": m.ods,
		"odt": m.odt,
		"nte": m.nte,
		"cti": m.cti,
	}, nil
}

type ORS_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err *ERR           `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORS_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *ORS_O02v2) MSH() *MSH {
	return m.msh
}

func (m *ORS_O02v2) MSA() *MSA {
	return m.msa
}

func (m *ORS_O02v2) ERR() *ERR {
	return m.err
}

func (m *ORS_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORS_O02v2) GroupByPID() *ORS_O02_PIDv2 {
	return m.pid
}

func (m ORS_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORS_O02_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ORS_O02_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORS_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORS_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORS_O02_PIDv2) GroupByORC() []*ORS_O02_PID_ORCv2 {
	return m.orc
}

func (m ORS_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ORS_O02_PID_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	rqd *RQD   `json:"rqd,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORS_O02_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORS_O02_PID_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *ORS_O02_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORS_O02_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rqd": m.rqd,
		"nte": m.nte,
	}, nil
}

type ORS_O06v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *ORS_O06_PIDv2 `json:"pid,omitempty"`
}

func (m *ORS_O06v2) MSH() *MSH {
	return m.msh
}

func (m *ORS_O06v2) MSA() *MSA {
	return m.msa
}

func (m *ORS_O06v2) AllERR() []*ERR {
	return m.err
}

func (m *ORS_O06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORS_O06v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORS_O06v2) GroupByPID() *ORS_O06_PIDv2 {
	return m.pid
}

func (m ORS_O06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type ORS_O06_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ORS_O06_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ORS_O06_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORS_O06_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORS_O06_PIDv2) GroupByORC() []*ORS_O06_PID_ORCv2 {
	return m.orc
}

func (m ORS_O06_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ORS_O06_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*ORS_O06_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rqd *RQD                     `json:"rqd,omitempty"` // Required
	rq1 *RQ1                     `json:"rq_1,omitempty"`
	nte []*NTE                   `json:"nte,omitempty"`
}

func (m *ORS_O06_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ORS_O06_PID_ORCv2) GroupByTQ1() []*ORS_O06_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *ORS_O06_PID_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *ORS_O06_PID_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *ORS_O06_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORS_O06_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"nte": m.nte,
	}, nil
}

type ORS_O06_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORS_O06_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORS_O06_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORS_O06_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORU_R01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid []*ORU_R01_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *ORU_R01v2) MSH() *MSH {
	return m.msh
}

func (m *ORU_R01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORU_R01v2) GroupByPID() []*ORU_R01_PIDv2 {
	return m.pid
}

func (m *ORU_R01v2) DSC() *DSC {
	return m.dsc
}

func (m ORU_R01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type ORU_R01_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	obr []*ORU_R01_PID_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *ORU_R01_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORU_R01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ORU_R01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORU_R01_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ORU_R01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *ORU_R01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *ORU_R01_PIDv2) GroupByOBR() []*ORU_R01_PID_OBRv2 {
	return m.obr
}

func (m ORU_R01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obr": m.obr,
	}, nil
}

type ORU_R01_PID_OBRv2 struct {
	orc *ORC                     `json:"orc,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	tq1 []*ORU_R01_PID_OBR_TQ1v2 `json:"tq_1,omitempty"`
	ctd *CTD                     `json:"ctd,omitempty"`
	obx []*ORU_R01_PID_OBR_OBXv2 `json:"obx,omitempty"`
	ft1 []*FT1                   `json:"ft_1,omitempty"`
	cti []*CTI                   `json:"cti,omitempty"`
	spm []*ORU_R01_PID_OBR_SPMv2 `json:"spm,omitempty"`
}

func (m *ORU_R01_PID_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *ORU_R01_PID_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *ORU_R01_PID_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORU_R01_PID_OBRv2) GroupByTQ1() []*ORU_R01_PID_OBR_TQ1v2 {
	return m.tq1
}

func (m *ORU_R01_PID_OBRv2) CTD() *CTD {
	return m.ctd
}

func (m *ORU_R01_PID_OBRv2) GroupByOBX() []*ORU_R01_PID_OBR_OBXv2 {
	return m.obx
}

func (m *ORU_R01_PID_OBRv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *ORU_R01_PID_OBRv2) AllCTI() []*CTI {
	return m.cti
}

func (m *ORU_R01_PID_OBRv2) GroupBySPM() []*ORU_R01_PID_OBR_SPMv2 {
	return m.spm
}

func (m ORU_R01_PID_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"tq1": m.tq1,
		"ctd": m.ctd,
		"obx": m.obx,
		"ft1": m.ft1,
		"cti": m.cti,
		"spm": m.spm,
	}, nil
}

type ORU_R01_PID_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORU_R01_PID_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORU_R01_PID_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORU_R01_PID_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORU_R01_PID_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORU_R01_PID_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *ORU_R01_PID_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORU_R01_PID_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type ORU_R01_PID_OBR_SPMv2 struct {
	spm *SPM   `json:"spm,omitempty"` // Required
	obx []*OBX `json:"obx,omitempty"`
}

func (m *ORU_R01_PID_OBR_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *ORU_R01_PID_OBR_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m ORU_R01_PID_OBR_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
	}, nil
}

type ORU_R03v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	pid []*ORU_R03_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *ORU_R03v2) MSH() *MSH {
	return m.msh
}

func (m *ORU_R03v2) GroupByPID() []*ORU_R03_PIDv2 {
	return m.pid
}

func (m *ORU_R03v2) DSC() *DSC {
	return m.dsc
}

func (m ORU_R03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type ORU_R03_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"`
	obr []*ORU_R03_PID_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *ORU_R03_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORU_R03_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORU_R03_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *ORU_R03_PIDv2) GroupByOBR() []*ORU_R03_PID_OBRv2 {
	return m.obr
}

func (m ORU_R03_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"pv1": m.pv1,
		"obr": m.obr,
	}, nil
}

type ORU_R03_PID_OBRv2 struct {
	orc *ORC                     `json:"orc,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	obx []*ORU_R03_PID_OBR_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *ORU_R03_PID_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *ORU_R03_PID_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *ORU_R03_PID_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORU_R03_PID_OBRv2) GroupByOBX() []*ORU_R03_PID_OBR_OBXv2 {
	return m.obx
}

func (m ORU_R03_PID_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type ORU_R03_PID_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORU_R03_PID_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *ORU_R03_PID_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORU_R03_PID_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type ORU_R30v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid *PID             `json:"pid,omitempty"` // Required
	pd1 *PD1             `json:"pd_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	orc *ORC             `json:"orc,omitempty"` // Required
	obr *OBR             `json:"obr,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	tq1 []*ORU_R30_TQ1v2 `json:"tq_1,omitempty"`
	obx []*ORU_R30_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *ORU_R30v2) MSH() *MSH {
	return m.msh
}

func (m *ORU_R30v2) AllSFT() []*SFT {
	return m.sft
}

func (m *ORU_R30v2) PID() *PID {
	return m.pid
}

func (m *ORU_R30v2) PD1() *PD1 {
	return m.pd1
}

func (m *ORU_R30v2) PV1() *PV1 {
	return m.pv1
}

func (m *ORU_R30v2) PV2() *PV2 {
	return m.pv2
}

func (m *ORU_R30v2) ORC() *ORC {
	return m.orc
}

func (m *ORU_R30v2) OBR() *OBR {
	return m.obr
}

func (m *ORU_R30v2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORU_R30v2) GroupByTQ1() []*ORU_R30_TQ1v2 {
	return m.tq1
}

func (m *ORU_R30v2) GroupByOBX() []*ORU_R30_OBXv2 {
	return m.obx
}

func (m ORU_R30v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"tq1": m.tq1,
		"obx": m.obx,
	}, nil
}

type ORU_R30_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *ORU_R30_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *ORU_R30_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m ORU_R30_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type ORU_R30_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORU_R30_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *ORU_R30_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORU_R30_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type ORU_R32v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	pid []*ORU_R32_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *ORU_R32v2) MSH() *MSH {
	return m.msh
}

func (m *ORU_R32v2) GroupByPID() []*ORU_R32_PIDv2 {
	return m.pid
}

func (m *ORU_R32v2) DSC() *DSC {
	return m.dsc
}

func (m ORU_R32v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type ORU_R32_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	obr []*ORU_R32_PID_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *ORU_R32_PIDv2) PID() *PID {
	return m.pid
}

func (m *ORU_R32_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *ORU_R32_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *ORU_R32_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORU_R32_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *ORU_R32_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *ORU_R32_PIDv2) GroupByOBR() []*ORU_R32_PID_OBRv2 {
	return m.obr
}

func (m ORU_R32_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nk1": m.nk1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obr": m.obr,
	}, nil
}

type ORU_R32_PID_OBRv2 struct {
	orc *ORC                     `json:"orc,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	obx []*ORU_R32_PID_OBR_OBXv2 `json:"obx,omitempty"` // Required
	cti []*CTI                   `json:"cti,omitempty"`
}

func (m *ORU_R32_PID_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *ORU_R32_PID_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *ORU_R32_PID_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ORU_R32_PID_OBRv2) GroupByOBX() []*ORU_R32_PID_OBR_OBXv2 {
	return m.obx
}

func (m *ORU_R32_PID_OBRv2) AllCTI() []*CTI {
	return m.cti
}

func (m ORU_R32_PID_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
		"cti": m.cti,
	}, nil
}

type ORU_R32_PID_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *ORU_R32_PID_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *ORU_R32_PID_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m ORU_R32_PID_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type OSQ_Q06v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *OSQ_Q06v2) MSH() *MSH {
	return m.msh
}

func (m *OSQ_Q06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OSQ_Q06v2) QRD() *QRD {
	return m.qrd
}

func (m *OSQ_Q06v2) QRF() *QRF {
	return m.qrf
}

func (m *OSQ_Q06v2) DSC() *DSC {
	return m.dsc
}

func (m OSQ_Q06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsc": m.dsc,
	}, nil
}

type OSR_Q06v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	qrd *QRD           `json:"qrd,omitempty"` // Required
	qrf *QRF           `json:"qrf,omitempty"`
	pid *OSR_Q06_PIDv2 `json:"pid,omitempty"`
	dsc *DSC           `json:"dsc,omitempty"`
}

func (m *OSR_Q06v2) MSH() *MSH {
	return m.msh
}

func (m *OSR_Q06v2) MSA() *MSA {
	return m.msa
}

func (m *OSR_Q06v2) AllERR() []*ERR {
	return m.err
}

func (m *OSR_Q06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OSR_Q06v2) AllNTE() []*NTE {
	return m.nte
}

func (m *OSR_Q06v2) QRD() *QRD {
	return m.qrd
}

func (m *OSR_Q06v2) QRF() *QRF {
	return m.qrf
}

func (m *OSR_Q06v2) GroupByPID() *OSR_Q06_PIDv2 {
	return m.pid
}

func (m *OSR_Q06v2) DSC() *DSC {
	return m.dsc
}

func (m OSR_Q06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type OSR_Q06_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*OSR_Q06_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *OSR_Q06_PIDv2) PID() *PID {
	return m.pid
}

func (m *OSR_Q06_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OSR_Q06_PIDv2) GroupByORC() []*OSR_Q06_PID_ORCv2 {
	return m.orc
}

func (m OSR_Q06_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type OSR_Q06_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*OSR_Q06_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                     `json:"obr,omitempty"`  // Required
	rqd *RQD                     `json:"rqd,omitempty"`  // Required
	rq1 *RQ1                     `json:"rq_1,omitempty"` // Required
	rxo *RXO                     `json:"rxo,omitempty"`  // Required
	ods *ODS                     `json:"ods,omitempty"`  // Required
	odt *ODT                     `json:"odt,omitempty"`  // Required
	nte []*NTE                   `json:"nte,omitempty"`
	cti []*CTI                   `json:"cti,omitempty"`
}

func (m *OSR_Q06_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *OSR_Q06_PID_ORCv2) GroupByTQ1() []*OSR_Q06_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *OSR_Q06_PID_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *OSR_Q06_PID_ORCv2) RQD() *RQD {
	return m.rqd
}

func (m *OSR_Q06_PID_ORCv2) RQ1() *RQ1 {
	return m.rq1
}

func (m *OSR_Q06_PID_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *OSR_Q06_PID_ORCv2) ODS() *ODS {
	return m.ods
}

func (m *OSR_Q06_PID_ORCv2) ODT() *ODT {
	return m.odt
}

func (m *OSR_Q06_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OSR_Q06_PID_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m OSR_Q06_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"rqd": m.rqd,
		"rq1": m.rq1,
		"rxo": m.rxo,
		"ods": m.ods,
		"odt": m.odt,
		"nte": m.nte,
		"cti": m.cti,
	}, nil
}

type OSR_Q06_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OSR_Q06_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OSR_Q06_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OSR_Q06_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OUL_R21v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte *NTE             `json:"nte,omitempty"`
	pid *OUL_R21_PIDv2   `json:"pid,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	sac []*OUL_R21_SACv2 `json:"sac,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *OUL_R21v2) MSH() *MSH {
	return m.msh
}

func (m *OUL_R21v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OUL_R21v2) NTE() *NTE {
	return m.nte
}

func (m *OUL_R21v2) GroupByPID() *OUL_R21_PIDv2 {
	return m.pid
}

func (m *OUL_R21v2) PV1() *PV1 {
	return m.pv1
}

func (m *OUL_R21v2) PV2() *PV2 {
	return m.pv2
}

func (m *OUL_R21v2) GroupBySAC() []*OUL_R21_SACv2 {
	return m.sac
}

func (m *OUL_R21v2) DSC() *DSC {
	return m.dsc
}

func (m OUL_R21v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"sac": m.sac,
		"dsc": m.dsc,
	}, nil
}

type OUL_R21_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OUL_R21_PIDv2) PID() *PID {
	return m.pid
}

func (m *OUL_R21_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OUL_R21_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m OUL_R21_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
	}, nil
}

type OUL_R21_SACv2 struct {
	sac *SAC                 `json:"sac,omitempty"` // Required
	sid *SID                 `json:"sid,omitempty"`
	orc *ORC                 `json:"orc,omitempty"`
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	tq1 []*OUL_R21_SAC_TQ1v2 `json:"tq_1,omitempty"`
	obx []*OUL_R21_SAC_OBXv2 `json:"obx,omitempty"` // Required
	cti []*CTI               `json:"cti,omitempty"`
}

func (m *OUL_R21_SACv2) SAC() *SAC {
	return m.sac
}

func (m *OUL_R21_SACv2) SID() *SID {
	return m.sid
}

func (m *OUL_R21_SACv2) ORC() *ORC {
	return m.orc
}

func (m *OUL_R21_SACv2) OBR() *OBR {
	return m.obr
}

func (m *OUL_R21_SACv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OUL_R21_SACv2) GroupByTQ1() []*OUL_R21_SAC_TQ1v2 {
	return m.tq1
}

func (m *OUL_R21_SACv2) GroupByOBX() []*OUL_R21_SAC_OBXv2 {
	return m.obx
}

func (m *OUL_R21_SACv2) AllCTI() []*CTI {
	return m.cti
}

func (m OUL_R21_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"sid": m.sid,
		"orc": m.orc,
		"obr": m.obr,
		"nte": m.nte,
		"tq1": m.tq1,
		"obx": m.obx,
		"cti": m.cti,
	}, nil
}

type OUL_R21_SAC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OUL_R21_SAC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OUL_R21_SAC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OUL_R21_SAC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OUL_R21_SAC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	tcd *TCD   `json:"tcd,omitempty"`
	sid []*SID `json:"sid,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OUL_R21_SAC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OUL_R21_SAC_OBXv2) TCD() *TCD {
	return m.tcd
}

func (m *OUL_R21_SAC_OBXv2) AllSID() []*SID {
	return m.sid
}

func (m *OUL_R21_SAC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OUL_R21_SAC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"tcd": m.tcd,
		"sid": m.sid,
		"nte": m.nte,
	}, nil
}

type OUL_R22v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte *NTE             `json:"nte,omitempty"`
	pid *OUL_R22_PIDv2   `json:"pid,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	spm []*OUL_R22_SPMv2 `json:"spm,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *OUL_R22v2) MSH() *MSH {
	return m.msh
}

func (m *OUL_R22v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OUL_R22v2) NTE() *NTE {
	return m.nte
}

func (m *OUL_R22v2) GroupByPID() *OUL_R22_PIDv2 {
	return m.pid
}

func (m *OUL_R22v2) PV1() *PV1 {
	return m.pv1
}

func (m *OUL_R22v2) PV2() *PV2 {
	return m.pv2
}

func (m *OUL_R22v2) GroupBySPM() []*OUL_R22_SPMv2 {
	return m.spm
}

func (m *OUL_R22v2) DSC() *DSC {
	return m.dsc
}

func (m OUL_R22v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"spm": m.spm,
		"dsc": m.dsc,
	}, nil
}

type OUL_R22_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OUL_R22_PIDv2) PID() *PID {
	return m.pid
}

func (m *OUL_R22_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OUL_R22_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m OUL_R22_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
	}, nil
}

type OUL_R22_SPMv2 struct {
	spm *SPM                 `json:"spm,omitempty"` // Required
	obx []*OBX               `json:"obx,omitempty"`
	sac []*OUL_R22_SPM_SACv2 `json:"sac,omitempty"`
	obr []*OUL_R22_SPM_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *OUL_R22_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *OUL_R22_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *OUL_R22_SPMv2) GroupBySAC() []*OUL_R22_SPM_SACv2 {
	return m.sac
}

func (m *OUL_R22_SPMv2) GroupByOBR() []*OUL_R22_SPM_OBRv2 {
	return m.obr
}

func (m OUL_R22_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
		"obr": m.obr,
	}, nil
}

type OUL_R22_SPM_SACv2 struct {
	sac *SAC `json:"sac,omitempty"` // Required
	inv *INV `json:"inv,omitempty"`
}

func (m *OUL_R22_SPM_SACv2) SAC() *SAC {
	return m.sac
}

func (m *OUL_R22_SPM_SACv2) INV() *INV {
	return m.inv
}

func (m OUL_R22_SPM_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"inv": m.inv,
	}, nil
}

type OUL_R22_SPM_OBRv2 struct {
	obr *OBR                     `json:"obr,omitempty"` // Required
	orc *ORC                     `json:"orc,omitempty"`
	nte []*NTE                   `json:"nte,omitempty"`
	tq1 []*OUL_R22_SPM_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obx []*OUL_R22_SPM_OBR_OBXv2 `json:"obx,omitempty"`
	cti []*CTI                   `json:"cti,omitempty"`
}

func (m *OUL_R22_SPM_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *OUL_R22_SPM_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *OUL_R22_SPM_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OUL_R22_SPM_OBRv2) GroupByTQ1() []*OUL_R22_SPM_OBR_TQ1v2 {
	return m.tq1
}

func (m *OUL_R22_SPM_OBRv2) GroupByOBX() []*OUL_R22_SPM_OBR_OBXv2 {
	return m.obx
}

func (m *OUL_R22_SPM_OBRv2) AllCTI() []*CTI {
	return m.cti
}

func (m OUL_R22_SPM_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obr": m.obr,
		"orc": m.orc,
		"nte": m.nte,
		"tq1": m.tq1,
		"obx": m.obx,
		"cti": m.cti,
	}, nil
}

type OUL_R22_SPM_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OUL_R22_SPM_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OUL_R22_SPM_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OUL_R22_SPM_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OUL_R22_SPM_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	tcd *TCD   `json:"tcd,omitempty"`
	sid []*SID `json:"sid,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OUL_R22_SPM_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OUL_R22_SPM_OBR_OBXv2) TCD() *TCD {
	return m.tcd
}

func (m *OUL_R22_SPM_OBR_OBXv2) AllSID() []*SID {
	return m.sid
}

func (m *OUL_R22_SPM_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OUL_R22_SPM_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"tcd": m.tcd,
		"sid": m.sid,
		"nte": m.nte,
	}, nil
}

type OUL_R23v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte *NTE             `json:"nte,omitempty"`
	pid *OUL_R23_PIDv2   `json:"pid,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	spm []*OUL_R23_SPMv2 `json:"spm,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *OUL_R23v2) MSH() *MSH {
	return m.msh
}

func (m *OUL_R23v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OUL_R23v2) NTE() *NTE {
	return m.nte
}

func (m *OUL_R23v2) GroupByPID() *OUL_R23_PIDv2 {
	return m.pid
}

func (m *OUL_R23v2) PV1() *PV1 {
	return m.pv1
}

func (m *OUL_R23v2) PV2() *PV2 {
	return m.pv2
}

func (m *OUL_R23v2) GroupBySPM() []*OUL_R23_SPMv2 {
	return m.spm
}

func (m *OUL_R23v2) DSC() *DSC {
	return m.dsc
}

func (m OUL_R23v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"spm": m.spm,
		"dsc": m.dsc,
	}, nil
}

type OUL_R23_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OUL_R23_PIDv2) PID() *PID {
	return m.pid
}

func (m *OUL_R23_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OUL_R23_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m OUL_R23_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
	}, nil
}

type OUL_R23_SPMv2 struct {
	spm *SPM                 `json:"spm,omitempty"` // Required
	obx []*OBX               `json:"obx,omitempty"`
	sac []*OUL_R23_SPM_SACv2 `json:"sac,omitempty"` // Required
}

func (m *OUL_R23_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *OUL_R23_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *OUL_R23_SPMv2) GroupBySAC() []*OUL_R23_SPM_SACv2 {
	return m.sac
}

func (m OUL_R23_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
	}, nil
}

type OUL_R23_SPM_SACv2 struct {
	sac *SAC                     `json:"sac,omitempty"` // Required
	inv *INV                     `json:"inv,omitempty"`
	obr []*OUL_R23_SPM_SAC_OBRv2 `json:"obr,omitempty"` // Required
}

func (m *OUL_R23_SPM_SACv2) SAC() *SAC {
	return m.sac
}

func (m *OUL_R23_SPM_SACv2) INV() *INV {
	return m.inv
}

func (m *OUL_R23_SPM_SACv2) GroupByOBR() []*OUL_R23_SPM_SAC_OBRv2 {
	return m.obr
}

func (m OUL_R23_SPM_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"inv": m.inv,
		"obr": m.obr,
	}, nil
}

type OUL_R23_SPM_SAC_OBRv2 struct {
	obr *OBR                         `json:"obr,omitempty"` // Required
	orc *ORC                         `json:"orc,omitempty"`
	nte []*NTE                       `json:"nte,omitempty"`
	tq1 []*OUL_R23_SPM_SAC_OBR_TQ1v2 `json:"tq_1,omitempty"`
	obx []*OUL_R23_SPM_SAC_OBR_OBXv2 `json:"obx,omitempty"`
	cti []*CTI                       `json:"cti,omitempty"`
}

func (m *OUL_R23_SPM_SAC_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *OUL_R23_SPM_SAC_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *OUL_R23_SPM_SAC_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OUL_R23_SPM_SAC_OBRv2) GroupByTQ1() []*OUL_R23_SPM_SAC_OBR_TQ1v2 {
	return m.tq1
}

func (m *OUL_R23_SPM_SAC_OBRv2) GroupByOBX() []*OUL_R23_SPM_SAC_OBR_OBXv2 {
	return m.obx
}

func (m *OUL_R23_SPM_SAC_OBRv2) AllCTI() []*CTI {
	return m.cti
}

func (m OUL_R23_SPM_SAC_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obr": m.obr,
		"orc": m.orc,
		"nte": m.nte,
		"tq1": m.tq1,
		"obx": m.obx,
		"cti": m.cti,
	}, nil
}

type OUL_R23_SPM_SAC_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OUL_R23_SPM_SAC_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OUL_R23_SPM_SAC_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OUL_R23_SPM_SAC_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OUL_R23_SPM_SAC_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	tcd *TCD   `json:"tcd,omitempty"`
	sid []*SID `json:"sid,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OUL_R23_SPM_SAC_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OUL_R23_SPM_SAC_OBR_OBXv2) TCD() *TCD {
	return m.tcd
}

func (m *OUL_R23_SPM_SAC_OBR_OBXv2) AllSID() []*SID {
	return m.sid
}

func (m *OUL_R23_SPM_SAC_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OUL_R23_SPM_SAC_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"tcd": m.tcd,
		"sid": m.sid,
		"nte": m.nte,
	}, nil
}

type OUL_R24v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte *NTE             `json:"nte,omitempty"`
	pid *OUL_R24_PIDv2   `json:"pid,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	obr []*OUL_R24_OBRv2 `json:"obr,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *OUL_R24v2) MSH() *MSH {
	return m.msh
}

func (m *OUL_R24v2) AllSFT() []*SFT {
	return m.sft
}

func (m *OUL_R24v2) NTE() *NTE {
	return m.nte
}

func (m *OUL_R24v2) GroupByPID() *OUL_R24_PIDv2 {
	return m.pid
}

func (m *OUL_R24v2) PV1() *PV1 {
	return m.pv1
}

func (m *OUL_R24v2) PV2() *PV2 {
	return m.pv2
}

func (m *OUL_R24v2) GroupByOBR() []*OUL_R24_OBRv2 {
	return m.obr
}

func (m *OUL_R24v2) DSC() *DSC {
	return m.dsc
}

func (m OUL_R24v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obr": m.obr,
		"dsc": m.dsc,
	}, nil
}

type OUL_R24_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OUL_R24_PIDv2) PID() *PID {
	return m.pid
}

func (m *OUL_R24_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *OUL_R24_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m OUL_R24_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
	}, nil
}

type OUL_R24_OBRv2 struct {
	obr *OBR                 `json:"obr,omitempty"` // Required
	orc *ORC                 `json:"orc,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	tq1 []*OUL_R24_OBR_TQ1v2 `json:"tq_1,omitempty"`
	spm []*OUL_R24_OBR_SPMv2 `json:"spm,omitempty"`
	obx []*OUL_R24_OBR_OBXv2 `json:"obx,omitempty"`
	cti []*CTI               `json:"cti,omitempty"`
}

func (m *OUL_R24_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *OUL_R24_OBRv2) ORC() *ORC {
	return m.orc
}

func (m *OUL_R24_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *OUL_R24_OBRv2) GroupByTQ1() []*OUL_R24_OBR_TQ1v2 {
	return m.tq1
}

func (m *OUL_R24_OBRv2) GroupBySPM() []*OUL_R24_OBR_SPMv2 {
	return m.spm
}

func (m *OUL_R24_OBRv2) GroupByOBX() []*OUL_R24_OBR_OBXv2 {
	return m.obx
}

func (m *OUL_R24_OBRv2) AllCTI() []*CTI {
	return m.cti
}

func (m OUL_R24_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obr": m.obr,
		"orc": m.orc,
		"nte": m.nte,
		"tq1": m.tq1,
		"spm": m.spm,
		"obx": m.obx,
		"cti": m.cti,
	}, nil
}

type OUL_R24_OBR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *OUL_R24_OBR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *OUL_R24_OBR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m OUL_R24_OBR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type OUL_R24_OBR_SPMv2 struct {
	spm *SPM                     `json:"spm,omitempty"` // Required
	obx []*OBX                   `json:"obx,omitempty"`
	sac []*OUL_R24_OBR_SPM_SACv2 `json:"sac,omitempty"`
}

func (m *OUL_R24_OBR_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *OUL_R24_OBR_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m *OUL_R24_OBR_SPMv2) GroupBySAC() []*OUL_R24_OBR_SPM_SACv2 {
	return m.sac
}

func (m OUL_R24_OBR_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
		"sac": m.sac,
	}, nil
}

type OUL_R24_OBR_SPM_SACv2 struct {
	sac *SAC `json:"sac,omitempty"` // Required
	inv *INV `json:"inv,omitempty"`
}

func (m *OUL_R24_OBR_SPM_SACv2) SAC() *SAC {
	return m.sac
}

func (m *OUL_R24_OBR_SPM_SACv2) INV() *INV {
	return m.inv
}

func (m OUL_R24_OBR_SPM_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"inv": m.inv,
	}, nil
}

type OUL_R24_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	tcd *TCD   `json:"tcd,omitempty"`
	sid []*SID `json:"sid,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *OUL_R24_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *OUL_R24_OBR_OBXv2) TCD() *TCD {
	return m.tcd
}

func (m *OUL_R24_OBR_OBXv2) AllSID() []*SID {
	return m.sid
}

func (m *OUL_R24_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m OUL_R24_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"tcd": m.tcd,
		"sid": m.sid,
		"nte": m.nte,
	}, nil
}

type PEX_P07v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	pd1 *PD1             `json:"pd_1,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	pes []*PEX_P07_PESv2 `json:"pes,omitempty"` // Required
}

func (m *PEX_P07v2) MSH() *MSH {
	return m.msh
}

func (m *PEX_P07v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PEX_P07v2) EVN() *EVN {
	return m.evn
}

func (m *PEX_P07v2) PID() *PID {
	return m.pid
}

func (m *PEX_P07v2) PD1() *PD1 {
	return m.pd1
}

func (m *PEX_P07v2) AllNTE() []*NTE {
	return m.nte
}

func (m *PEX_P07v2) PV1() *PV1 {
	return m.pv1
}

func (m *PEX_P07v2) PV2() *PV2 {
	return m.pv2
}

func (m *PEX_P07v2) GroupByPES() []*PEX_P07_PESv2 {
	return m.pes
}

func (m PEX_P07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"pes": m.pes,
	}, nil
}

type PEX_P07_PESv2 struct {
	pes *PES                 `json:"pes,omitempty"` // Required
	peo []*PEX_P07_PES_PEOv2 `json:"peo,omitempty"` // Required
}

func (m *PEX_P07_PESv2) PES() *PES {
	return m.pes
}

func (m *PEX_P07_PESv2) GroupByPEO() []*PEX_P07_PES_PEOv2 {
	return m.peo
}

func (m PEX_P07_PESv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pes": m.pes,
		"peo": m.peo,
	}, nil
}

type PEX_P07_PES_PEOv2 struct {
	peo *PEO                     `json:"peo,omitempty"` // Required
	pcr []*PEX_P07_PES_PEO_PCRv2 `json:"pcr,omitempty"` // Required
}

func (m *PEX_P07_PES_PEOv2) PEO() *PEO {
	return m.peo
}

func (m *PEX_P07_PES_PEOv2) GroupByPCR() []*PEX_P07_PES_PEO_PCRv2 {
	return m.pcr
}

func (m PEX_P07_PES_PEOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"peo": m.peo,
		"pcr": m.pcr,
	}, nil
}

type PEX_P07_PES_PEO_PCRv2 struct {
	pcr *PCR                         `json:"pcr,omitempty"`  // Required
	rxe *RXE                         `json:"rxe,omitempty"`  // Required
	tq1 []*PEX_P07_PES_PEO_PCR_TQ1v2 `json:"tq_1,omitempty"` // Required
	rxr []*RXR                       `json:"rxr,omitempty"`
	rxa []*PEX_P07_PES_PEO_PCR_RXAv2 `json:"rxa,omitempty"`
	prb []*PRB                       `json:"prb,omitempty"`
	obx []*OBX                       `json:"obx,omitempty"`
	nte []*NTE                       `json:"nte,omitempty"`
	nk1 *PEX_P07_PES_PEO_PCR_NK1v2   `json:"nk_1,omitempty"`
	csr []*PEX_P07_PES_PEO_PCR_CSRv2 `json:"csr,omitempty"`
}

func (m *PEX_P07_PES_PEO_PCRv2) PCR() *PCR {
	return m.pcr
}

func (m *PEX_P07_PES_PEO_PCRv2) RXE() *RXE {
	return m.rxe
}

func (m *PEX_P07_PES_PEO_PCRv2) GroupByTQ1() []*PEX_P07_PES_PEO_PCR_TQ1v2 {
	return m.tq1
}

func (m *PEX_P07_PES_PEO_PCRv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *PEX_P07_PES_PEO_PCRv2) GroupByRXA() []*PEX_P07_PES_PEO_PCR_RXAv2 {
	return m.rxa
}

func (m *PEX_P07_PES_PEO_PCRv2) AllPRB() []*PRB {
	return m.prb
}

func (m *PEX_P07_PES_PEO_PCRv2) AllOBX() []*OBX {
	return m.obx
}

func (m *PEX_P07_PES_PEO_PCRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PEX_P07_PES_PEO_PCRv2) GroupByNK1() *PEX_P07_PES_PEO_PCR_NK1v2 {
	return m.nk1
}

func (m *PEX_P07_PES_PEO_PCRv2) GroupByCSR() []*PEX_P07_PES_PEO_PCR_CSRv2 {
	return m.csr
}

func (m PEX_P07_PES_PEO_PCRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pcr": m.pcr,
		"rxe": m.rxe,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxa": m.rxa,
		"prb": m.prb,
		"obx": m.obx,
		"nte": m.nte,
		"nk1": m.nk1,
		"csr": m.csr,
	}, nil
}

type PEX_P07_PES_PEO_PCR_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *PEX_P07_PES_PEO_PCR_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *PEX_P07_PES_PEO_PCR_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m PEX_P07_PES_PEO_PCR_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type PEX_P07_PES_PEO_PCR_RXAv2 struct {
	rxa *RXA `json:"rxa,omitempty"` // Required
	rxr *RXR `json:"rxr,omitempty"`
}

func (m *PEX_P07_PES_PEO_PCR_RXAv2) RXA() *RXA {
	return m.rxa
}

func (m *PEX_P07_PES_PEO_PCR_RXAv2) RXR() *RXR {
	return m.rxr
}

func (m PEX_P07_PES_PEO_PCR_RXAv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxa": m.rxa,
		"rxr": m.rxr,
	}, nil
}

type PEX_P07_PES_PEO_PCR_NK1v2 struct {
	nk1 *NK1                             `json:"nk_1,omitempty"` // Required
	rxe *RXE                             `json:"rxe,omitempty"`  // Required
	tq1 []*PEX_P07_PES_PEO_PCR_NK1_TQ1v2 `json:"tq_1,omitempty"` // Required
	rxr []*RXR                           `json:"rxr,omitempty"`
	rxa []*PEX_P07_PES_PEO_PCR_NK1_RXAv2 `json:"rxa,omitempty"`
	prb []*PRB                           `json:"prb,omitempty"`
	obx []*OBX                           `json:"obx,omitempty"`
}

func (m *PEX_P07_PES_PEO_PCR_NK1v2) NK1() *NK1 {
	return m.nk1
}

func (m *PEX_P07_PES_PEO_PCR_NK1v2) RXE() *RXE {
	return m.rxe
}

func (m *PEX_P07_PES_PEO_PCR_NK1v2) GroupByTQ1() []*PEX_P07_PES_PEO_PCR_NK1_TQ1v2 {
	return m.tq1
}

func (m *PEX_P07_PES_PEO_PCR_NK1v2) AllRXR() []*RXR {
	return m.rxr
}

func (m *PEX_P07_PES_PEO_PCR_NK1v2) GroupByRXA() []*PEX_P07_PES_PEO_PCR_NK1_RXAv2 {
	return m.rxa
}

func (m *PEX_P07_PES_PEO_PCR_NK1v2) AllPRB() []*PRB {
	return m.prb
}

func (m *PEX_P07_PES_PEO_PCR_NK1v2) AllOBX() []*OBX {
	return m.obx
}

func (m PEX_P07_PES_PEO_PCR_NK1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"nk1": m.nk1,
		"rxe": m.rxe,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxa": m.rxa,
		"prb": m.prb,
		"obx": m.obx,
	}, nil
}

type PEX_P07_PES_PEO_PCR_NK1_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *PEX_P07_PES_PEO_PCR_NK1_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *PEX_P07_PES_PEO_PCR_NK1_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m PEX_P07_PES_PEO_PCR_NK1_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type PEX_P07_PES_PEO_PCR_NK1_RXAv2 struct {
	rxa *RXA `json:"rxa,omitempty"` // Required
	rxr *RXR `json:"rxr,omitempty"`
}

func (m *PEX_P07_PES_PEO_PCR_NK1_RXAv2) RXA() *RXA {
	return m.rxa
}

func (m *PEX_P07_PES_PEO_PCR_NK1_RXAv2) RXR() *RXR {
	return m.rxr
}

func (m PEX_P07_PES_PEO_PCR_NK1_RXAv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxa": m.rxa,
		"rxr": m.rxr,
	}, nil
}

type PEX_P07_PES_PEO_PCR_CSRv2 struct {
	csr *CSR   `json:"csr,omitempty"` // Required
	csp []*CSP `json:"csp,omitempty"`
}

func (m *PEX_P07_PES_PEO_PCR_CSRv2) CSR() *CSR {
	return m.csr
}

func (m *PEX_P07_PES_PEO_PCR_CSRv2) AllCSP() []*CSP {
	return m.csp
}

func (m PEX_P07_PES_PEO_PCR_CSRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"csr": m.csr,
		"csp": m.csp,
	}, nil
}

type PGL_PC6v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid *PID             `json:"pid,omitempty"`  // Required
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	gol []*PGL_PC6_GOLv2 `json:"gol,omitempty"` // Required
}

func (m *PGL_PC6v2) MSH() *MSH {
	return m.msh
}

func (m *PGL_PC6v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PGL_PC6v2) PID() *PID {
	return m.pid
}

func (m *PGL_PC6v2) PV1() *PV1 {
	return m.pv1
}

func (m *PGL_PC6v2) PV2() *PV2 {
	return m.pv2
}

func (m *PGL_PC6v2) GroupByGOL() []*PGL_PC6_GOLv2 {
	return m.gol
}

func (m PGL_PC6v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"gol": m.gol,
	}, nil
}

type PGL_PC6_GOLv2 struct {
	gol  *GOL                 `json:"gol,omitempty"` // Required
	nte  []*NTE               `json:"nte,omitempty"`
	var_ []*VAR               `json:"var__,omitempty"`
	rol  []*PGL_PC6_GOL_ROLv2 `json:"rol,omitempty"`
	pth  []*PGL_PC6_GOL_PTHv2 `json:"pth,omitempty"`
	obx  []*PGL_PC6_GOL_OBXv2 `json:"obx,omitempty"`
	prb  []*PGL_PC6_GOL_PRBv2 `json:"prb,omitempty"`
	orc  []*PGL_PC6_GOL_ORCv2 `json:"orc,omitempty"`
}

func (m *PGL_PC6_GOLv2) GOL() *GOL {
	return m.gol
}

func (m *PGL_PC6_GOLv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PGL_PC6_GOLv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PGL_PC6_GOLv2) GroupByROL() []*PGL_PC6_GOL_ROLv2 {
	return m.rol
}

func (m *PGL_PC6_GOLv2) GroupByPTH() []*PGL_PC6_GOL_PTHv2 {
	return m.pth
}

func (m *PGL_PC6_GOLv2) GroupByOBX() []*PGL_PC6_GOL_OBXv2 {
	return m.obx
}

func (m *PGL_PC6_GOLv2) GroupByPRB() []*PGL_PC6_GOL_PRBv2 {
	return m.prb
}

func (m *PGL_PC6_GOLv2) GroupByORC() []*PGL_PC6_GOL_ORCv2 {
	return m.orc
}

func (m PGL_PC6_GOLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"gol":  m.gol,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"pth":  m.pth,
		"obx":  m.obx,
		"prb":  m.prb,
		"orc":  m.orc,
	}, nil
}

type PGL_PC6_GOL_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PGL_PC6_GOL_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PGL_PC6_GOL_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PGL_PC6_GOL_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PGL_PC6_GOL_PTHv2 struct {
	pth  *PTH   `json:"pth,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PGL_PC6_GOL_PTHv2) PTH() *PTH {
	return m.pth
}

func (m *PGL_PC6_GOL_PTHv2) AllVAR() []*VAR {
	return m.var_
}

func (m PGL_PC6_GOL_PTHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pth":  m.pth,
		"var_": m.var_,
	}, nil
}

type PGL_PC6_GOL_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PGL_PC6_GOL_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PGL_PC6_GOL_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PGL_PC6_GOL_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PGL_PC6_GOL_PRBv2 struct {
	prb  *PRB                     `json:"prb,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	rol  []*PGL_PC6_GOL_PRB_ROLv2 `json:"rol,omitempty"`
	obx  []*PGL_PC6_GOL_PRB_OBXv2 `json:"obx,omitempty"`
}

func (m *PGL_PC6_GOL_PRBv2) PRB() *PRB {
	return m.prb
}

func (m *PGL_PC6_GOL_PRBv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PGL_PC6_GOL_PRBv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PGL_PC6_GOL_PRBv2) GroupByROL() []*PGL_PC6_GOL_PRB_ROLv2 {
	return m.rol
}

func (m *PGL_PC6_GOL_PRBv2) GroupByOBX() []*PGL_PC6_GOL_PRB_OBXv2 {
	return m.obx
}

func (m PGL_PC6_GOL_PRBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prb":  m.prb,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
	}, nil
}

type PGL_PC6_GOL_PRB_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PGL_PC6_GOL_PRB_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PGL_PC6_GOL_PRB_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PGL_PC6_GOL_PRB_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PGL_PC6_GOL_PRB_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PGL_PC6_GOL_PRB_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PGL_PC6_GOL_PRB_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PGL_PC6_GOL_PRB_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PGL_PC6_GOL_ORCv2 struct {
	orc  *ORC                     `json:"orc,omitempty"` // Required
	obr  *OBR                     `json:"obr,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	obx  []*PGL_PC6_GOL_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *PGL_PC6_GOL_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *PGL_PC6_GOL_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *PGL_PC6_GOL_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PGL_PC6_GOL_ORCv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PGL_PC6_GOL_ORCv2) GroupByOBX() []*PGL_PC6_GOL_ORC_OBXv2 {
	return m.obx
}

func (m PGL_PC6_GOL_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"obr":  m.obr,
		"nte":  m.nte,
		"var_": m.var_,
		"obx":  m.obx,
	}, nil
}

type PGL_PC6_GOL_ORC_OBXv2 struct {
	obx  *OBX   `json:"obx,omitempty"` // Required
	nte  []*NTE `json:"nte,omitempty"`
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PGL_PC6_GOL_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PGL_PC6_GOL_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PGL_PC6_GOL_ORC_OBXv2) AllVAR() []*VAR {
	return m.var_
}

func (m PGL_PC6_GOL_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx":  m.obx,
		"nte":  m.nte,
		"var_": m.var_,
	}, nil
}

type PIN_I07v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	prd []*PIN_I07_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*PIN_I07_IN1v2 `json:"in_1,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *PIN_I07v2) MSH() *MSH {
	return m.msh
}

func (m *PIN_I07v2) GroupByPRD() []*PIN_I07_PRDv2 {
	return m.prd
}

func (m *PIN_I07v2) PID() *PID {
	return m.pid
}

func (m *PIN_I07v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *PIN_I07v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *PIN_I07v2) GroupByIN1() []*PIN_I07_IN1v2 {
	return m.in1
}

func (m *PIN_I07v2) AllNTE() []*NTE {
	return m.nte
}

func (m PIN_I07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"in1": m.in1,
		"nte": m.nte,
	}, nil
}

type PIN_I07_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *PIN_I07_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *PIN_I07_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m PIN_I07_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type PIN_I07_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *PIN_I07_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *PIN_I07_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *PIN_I07_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m PIN_I07_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type PMU_B01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	stf *STF   `json:"stf,omitempty"` // Required
	pra []*PRA `json:"pra,omitempty"`
	org []*ORG `json:"org,omitempty"`
	aff []*AFF `json:"aff,omitempty"`
	lan []*LAN `json:"lan,omitempty"`
	edu []*EDU `json:"edu,omitempty"`
	cer []*CER `json:"cer,omitempty"`
}

func (m *PMU_B01v2) MSH() *MSH {
	return m.msh
}

func (m *PMU_B01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PMU_B01v2) EVN() *EVN {
	return m.evn
}

func (m *PMU_B01v2) STF() *STF {
	return m.stf
}

func (m *PMU_B01v2) AllPRA() []*PRA {
	return m.pra
}

func (m *PMU_B01v2) AllORG() []*ORG {
	return m.org
}

func (m *PMU_B01v2) AllAFF() []*AFF {
	return m.aff
}

func (m *PMU_B01v2) AllLAN() []*LAN {
	return m.lan
}

func (m *PMU_B01v2) AllEDU() []*EDU {
	return m.edu
}

func (m *PMU_B01v2) AllCER() []*CER {
	return m.cer
}

func (m PMU_B01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"stf": m.stf,
		"pra": m.pra,
		"org": m.org,
		"aff": m.aff,
		"lan": m.lan,
		"edu": m.edu,
		"cer": m.cer,
	}, nil
}

type PMU_B03v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	stf *STF   `json:"stf,omitempty"` // Required
}

func (m *PMU_B03v2) MSH() *MSH {
	return m.msh
}

func (m *PMU_B03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PMU_B03v2) EVN() *EVN {
	return m.evn
}

func (m *PMU_B03v2) STF() *STF {
	return m.stf
}

func (m PMU_B03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"stf": m.stf,
	}, nil
}

type PMU_B04v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	stf *STF   `json:"stf,omitempty"` // Required
	pra []*PRA `json:"pra,omitempty"`
	org []*ORG `json:"org,omitempty"`
}

func (m *PMU_B04v2) MSH() *MSH {
	return m.msh
}

func (m *PMU_B04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PMU_B04v2) EVN() *EVN {
	return m.evn
}

func (m *PMU_B04v2) STF() *STF {
	return m.stf
}

func (m *PMU_B04v2) AllPRA() []*PRA {
	return m.pra
}

func (m *PMU_B04v2) AllORG() []*ORG {
	return m.org
}

func (m PMU_B04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"stf": m.stf,
		"pra": m.pra,
		"org": m.org,
	}, nil
}

type PMU_B07v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	evn *EVN             `json:"evn,omitempty"` // Required
	stf *STF             `json:"stf,omitempty"` // Required
	pra *PRA             `json:"pra,omitempty"`
	cer []*PMU_B07_CERv2 `json:"cer,omitempty"`
}

func (m *PMU_B07v2) MSH() *MSH {
	return m.msh
}

func (m *PMU_B07v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PMU_B07v2) EVN() *EVN {
	return m.evn
}

func (m *PMU_B07v2) STF() *STF {
	return m.stf
}

func (m *PMU_B07v2) PRA() *PRA {
	return m.pra
}

func (m *PMU_B07v2) GroupByCER() []*PMU_B07_CERv2 {
	return m.cer
}

func (m PMU_B07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"stf": m.stf,
		"pra": m.pra,
		"cer": m.cer,
	}, nil
}

type PMU_B07_CERv2 struct {
	cer *CER   `json:"cer,omitempty"` // Required
	rol []*ROL `json:"rol,omitempty"`
}

func (m *PMU_B07_CERv2) CER() *CER {
	return m.cer
}

func (m *PMU_B07_CERv2) AllROL() []*ROL {
	return m.rol
}

func (m PMU_B07_CERv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"cer": m.cer,
		"rol": m.rol,
	}, nil
}

type PMU_B08v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	evn *EVN   `json:"evn,omitempty"` // Required
	stf *STF   `json:"stf,omitempty"` // Required
	pra *PRA   `json:"pra,omitempty"`
	cer []*CER `json:"cer,omitempty"`
}

func (m *PMU_B08v2) MSH() *MSH {
	return m.msh
}

func (m *PMU_B08v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PMU_B08v2) EVN() *EVN {
	return m.evn
}

func (m *PMU_B08v2) STF() *STF {
	return m.stf
}

func (m *PMU_B08v2) PRA() *PRA {
	return m.pra
}

func (m *PMU_B08v2) AllCER() []*CER {
	return m.cer
}

func (m PMU_B08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"evn": m.evn,
		"stf": m.stf,
		"pra": m.pra,
		"cer": m.cer,
	}, nil
}

type PPG_PCGv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid *PID             `json:"pid,omitempty"`  // Required
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	pth []*PPG_PCG_PTHv2 `json:"pth,omitempty"` // Required
}

func (m *PPG_PCGv2) MSH() *MSH {
	return m.msh
}

func (m *PPG_PCGv2) AllSFT() []*SFT {
	return m.sft
}

func (m *PPG_PCGv2) PID() *PID {
	return m.pid
}

func (m *PPG_PCGv2) PV1() *PV1 {
	return m.pv1
}

func (m *PPG_PCGv2) PV2() *PV2 {
	return m.pv2
}

func (m *PPG_PCGv2) GroupByPTH() []*PPG_PCG_PTHv2 {
	return m.pth
}

func (m PPG_PCGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"pth": m.pth,
	}, nil
}

type PPG_PCG_PTHv2 struct {
	pth  *PTH                 `json:"pth,omitempty"` // Required
	nte  []*NTE               `json:"nte,omitempty"`
	var_ []*VAR               `json:"var__,omitempty"`
	rol  []*PPG_PCG_PTH_ROLv2 `json:"rol,omitempty"`
	gol  []*PPG_PCG_PTH_GOLv2 `json:"gol,omitempty"`
}

func (m *PPG_PCG_PTHv2) PTH() *PTH {
	return m.pth
}

func (m *PPG_PCG_PTHv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPG_PCG_PTHv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPG_PCG_PTHv2) GroupByROL() []*PPG_PCG_PTH_ROLv2 {
	return m.rol
}

func (m *PPG_PCG_PTHv2) GroupByGOL() []*PPG_PCG_PTH_GOLv2 {
	return m.gol
}

func (m PPG_PCG_PTHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pth":  m.pth,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"gol":  m.gol,
	}, nil
}

type PPG_PCG_PTH_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPG_PCG_PTH_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPG_PCG_PTH_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPG_PCG_PTH_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPG_PCG_PTH_GOLv2 struct {
	gol  *GOL                     `json:"gol,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	rol  []*PPG_PCG_PTH_GOL_ROLv2 `json:"rol,omitempty"`
	obx  []*PPG_PCG_PTH_GOL_OBXv2 `json:"obx,omitempty"`
	prb  []*PPG_PCG_PTH_GOL_PRBv2 `json:"prb,omitempty"`
	orc  []*PPG_PCG_PTH_GOL_ORCv2 `json:"orc,omitempty"`
}

func (m *PPG_PCG_PTH_GOLv2) GOL() *GOL {
	return m.gol
}

func (m *PPG_PCG_PTH_GOLv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPG_PCG_PTH_GOLv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPG_PCG_PTH_GOLv2) GroupByROL() []*PPG_PCG_PTH_GOL_ROLv2 {
	return m.rol
}

func (m *PPG_PCG_PTH_GOLv2) GroupByOBX() []*PPG_PCG_PTH_GOL_OBXv2 {
	return m.obx
}

func (m *PPG_PCG_PTH_GOLv2) GroupByPRB() []*PPG_PCG_PTH_GOL_PRBv2 {
	return m.prb
}

func (m *PPG_PCG_PTH_GOLv2) GroupByORC() []*PPG_PCG_PTH_GOL_ORCv2 {
	return m.orc
}

func (m PPG_PCG_PTH_GOLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"gol":  m.gol,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
		"prb":  m.prb,
		"orc":  m.orc,
	}, nil
}

type PPG_PCG_PTH_GOL_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPG_PCG_PTH_GOL_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPG_PCG_PTH_GOL_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPG_PCG_PTH_GOL_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPG_PCG_PTH_GOL_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPG_PCG_PTH_GOL_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPG_PCG_PTH_GOL_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPG_PCG_PTH_GOL_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPG_PCG_PTH_GOL_PRBv2 struct {
	prb  *PRB                         `json:"prb,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	rol  []*PPG_PCG_PTH_GOL_PRB_ROLv2 `json:"rol,omitempty"`
	obx  []*PPG_PCG_PTH_GOL_PRB_OBXv2 `json:"obx,omitempty"`
}

func (m *PPG_PCG_PTH_GOL_PRBv2) PRB() *PRB {
	return m.prb
}

func (m *PPG_PCG_PTH_GOL_PRBv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPG_PCG_PTH_GOL_PRBv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPG_PCG_PTH_GOL_PRBv2) GroupByROL() []*PPG_PCG_PTH_GOL_PRB_ROLv2 {
	return m.rol
}

func (m *PPG_PCG_PTH_GOL_PRBv2) GroupByOBX() []*PPG_PCG_PTH_GOL_PRB_OBXv2 {
	return m.obx
}

func (m PPG_PCG_PTH_GOL_PRBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prb":  m.prb,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
	}, nil
}

type PPG_PCG_PTH_GOL_PRB_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPG_PCG_PTH_GOL_PRB_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPG_PCG_PTH_GOL_PRB_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPG_PCG_PTH_GOL_PRB_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPG_PCG_PTH_GOL_PRB_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPG_PCG_PTH_GOL_PRB_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPG_PCG_PTH_GOL_PRB_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPG_PCG_PTH_GOL_PRB_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPG_PCG_PTH_GOL_ORCv2 struct {
	orc  *ORC                         `json:"orc,omitempty"` // Required
	obr  *OBR                         `json:"obr,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	obx  []*PPG_PCG_PTH_GOL_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *PPG_PCG_PTH_GOL_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *PPG_PCG_PTH_GOL_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *PPG_PCG_PTH_GOL_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPG_PCG_PTH_GOL_ORCv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPG_PCG_PTH_GOL_ORCv2) GroupByOBX() []*PPG_PCG_PTH_GOL_ORC_OBXv2 {
	return m.obx
}

func (m PPG_PCG_PTH_GOL_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"obr":  m.obr,
		"nte":  m.nte,
		"var_": m.var_,
		"obx":  m.obx,
	}, nil
}

type PPG_PCG_PTH_GOL_ORC_OBXv2 struct {
	obx  *OBX   `json:"obx,omitempty"` // Required
	nte  []*NTE `json:"nte,omitempty"`
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPG_PCG_PTH_GOL_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPG_PCG_PTH_GOL_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPG_PCG_PTH_GOL_ORC_OBXv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPG_PCG_PTH_GOL_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx":  m.obx,
		"nte":  m.nte,
		"var_": m.var_,
	}, nil
}

type PPP_PCBv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid *PID             `json:"pid,omitempty"`  // Required
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	pth []*PPP_PCB_PTHv2 `json:"pth,omitempty"` // Required
}

func (m *PPP_PCBv2) MSH() *MSH {
	return m.msh
}

func (m *PPP_PCBv2) AllSFT() []*SFT {
	return m.sft
}

func (m *PPP_PCBv2) PID() *PID {
	return m.pid
}

func (m *PPP_PCBv2) PV1() *PV1 {
	return m.pv1
}

func (m *PPP_PCBv2) PV2() *PV2 {
	return m.pv2
}

func (m *PPP_PCBv2) GroupByPTH() []*PPP_PCB_PTHv2 {
	return m.pth
}

func (m PPP_PCBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"pth": m.pth,
	}, nil
}

type PPP_PCB_PTHv2 struct {
	pth  *PTH                 `json:"pth,omitempty"` // Required
	nte  []*NTE               `json:"nte,omitempty"`
	var_ []*VAR               `json:"var__,omitempty"`
	rol  []*PPP_PCB_PTH_ROLv2 `json:"rol,omitempty"`
	prb  []*PPP_PCB_PTH_PRBv2 `json:"prb,omitempty"`
}

func (m *PPP_PCB_PTHv2) PTH() *PTH {
	return m.pth
}

func (m *PPP_PCB_PTHv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPP_PCB_PTHv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPP_PCB_PTHv2) GroupByROL() []*PPP_PCB_PTH_ROLv2 {
	return m.rol
}

func (m *PPP_PCB_PTHv2) GroupByPRB() []*PPP_PCB_PTH_PRBv2 {
	return m.prb
}

func (m PPP_PCB_PTHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pth":  m.pth,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"prb":  m.prb,
	}, nil
}

type PPP_PCB_PTH_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPP_PCB_PTH_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPP_PCB_PTH_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPP_PCB_PTH_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPP_PCB_PTH_PRBv2 struct {
	prb  *PRB                     `json:"prb,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	rol  []*PPP_PCB_PTH_PRB_ROLv2 `json:"rol,omitempty"`
	obx  []*PPP_PCB_PTH_PRB_OBXv2 `json:"obx,omitempty"`
	gol  []*PPP_PCB_PTH_PRB_GOLv2 `json:"gol,omitempty"`
	orc  []*PPP_PCB_PTH_PRB_ORCv2 `json:"orc,omitempty"`
}

func (m *PPP_PCB_PTH_PRBv2) PRB() *PRB {
	return m.prb
}

func (m *PPP_PCB_PTH_PRBv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPP_PCB_PTH_PRBv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPP_PCB_PTH_PRBv2) GroupByROL() []*PPP_PCB_PTH_PRB_ROLv2 {
	return m.rol
}

func (m *PPP_PCB_PTH_PRBv2) GroupByOBX() []*PPP_PCB_PTH_PRB_OBXv2 {
	return m.obx
}

func (m *PPP_PCB_PTH_PRBv2) GroupByGOL() []*PPP_PCB_PTH_PRB_GOLv2 {
	return m.gol
}

func (m *PPP_PCB_PTH_PRBv2) GroupByORC() []*PPP_PCB_PTH_PRB_ORCv2 {
	return m.orc
}

func (m PPP_PCB_PTH_PRBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prb":  m.prb,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
		"gol":  m.gol,
		"orc":  m.orc,
	}, nil
}

type PPP_PCB_PTH_PRB_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPP_PCB_PTH_PRB_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPP_PCB_PTH_PRB_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPP_PCB_PTH_PRB_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPP_PCB_PTH_PRB_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPP_PCB_PTH_PRB_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPP_PCB_PTH_PRB_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPP_PCB_PTH_PRB_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPP_PCB_PTH_PRB_GOLv2 struct {
	gol  *GOL                         `json:"gol,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	rol  []*PPP_PCB_PTH_PRB_GOL_ROLv2 `json:"rol,omitempty"`
	obx  []*PPP_PCB_PTH_PRB_GOL_OBXv2 `json:"obx,omitempty"`
}

func (m *PPP_PCB_PTH_PRB_GOLv2) GOL() *GOL {
	return m.gol
}

func (m *PPP_PCB_PTH_PRB_GOLv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPP_PCB_PTH_PRB_GOLv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPP_PCB_PTH_PRB_GOLv2) GroupByROL() []*PPP_PCB_PTH_PRB_GOL_ROLv2 {
	return m.rol
}

func (m *PPP_PCB_PTH_PRB_GOLv2) GroupByOBX() []*PPP_PCB_PTH_PRB_GOL_OBXv2 {
	return m.obx
}

func (m PPP_PCB_PTH_PRB_GOLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"gol":  m.gol,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
	}, nil
}

type PPP_PCB_PTH_PRB_GOL_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPP_PCB_PTH_PRB_GOL_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPP_PCB_PTH_PRB_GOL_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPP_PCB_PTH_PRB_GOL_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPP_PCB_PTH_PRB_GOL_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPP_PCB_PTH_PRB_GOL_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPP_PCB_PTH_PRB_GOL_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPP_PCB_PTH_PRB_GOL_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPP_PCB_PTH_PRB_ORCv2 struct {
	orc  *ORC                         `json:"orc,omitempty"` // Required
	obr  *OBR                         `json:"obr,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	obx  []*PPP_PCB_PTH_PRB_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *PPP_PCB_PTH_PRB_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *PPP_PCB_PTH_PRB_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *PPP_PCB_PTH_PRB_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPP_PCB_PTH_PRB_ORCv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPP_PCB_PTH_PRB_ORCv2) GroupByOBX() []*PPP_PCB_PTH_PRB_ORC_OBXv2 {
	return m.obx
}

func (m PPP_PCB_PTH_PRB_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"obr":  m.obr,
		"nte":  m.nte,
		"var_": m.var_,
		"obx":  m.obx,
	}, nil
}

type PPP_PCB_PTH_PRB_ORC_OBXv2 struct {
	obx  *OBX   `json:"obx,omitempty"` // Required
	nte  []*NTE `json:"nte,omitempty"`
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPP_PCB_PTH_PRB_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPP_PCB_PTH_PRB_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPP_PCB_PTH_PRB_ORC_OBXv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPP_PCB_PTH_PRB_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx":  m.obx,
		"nte":  m.nte,
		"var_": m.var_,
	}, nil
}

type PPR_PC1v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid *PID             `json:"pid,omitempty"`  // Required
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	prb []*PPR_PC1_PRBv2 `json:"prb,omitempty"` // Required
}

func (m *PPR_PC1v2) MSH() *MSH {
	return m.msh
}

func (m *PPR_PC1v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PPR_PC1v2) PID() *PID {
	return m.pid
}

func (m *PPR_PC1v2) PV1() *PV1 {
	return m.pv1
}

func (m *PPR_PC1v2) PV2() *PV2 {
	return m.pv2
}

func (m *PPR_PC1v2) GroupByPRB() []*PPR_PC1_PRBv2 {
	return m.prb
}

func (m PPR_PC1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"prb": m.prb,
	}, nil
}

type PPR_PC1_PRBv2 struct {
	prb  *PRB                 `json:"prb,omitempty"` // Required
	nte  []*NTE               `json:"nte,omitempty"`
	var_ []*VAR               `json:"var__,omitempty"`
	rol  []*PPR_PC1_PRB_ROLv2 `json:"rol,omitempty"`
	pth  []*PPR_PC1_PRB_PTHv2 `json:"pth,omitempty"`
	obx  []*PPR_PC1_PRB_OBXv2 `json:"obx,omitempty"`
	gol  []*PPR_PC1_PRB_GOLv2 `json:"gol,omitempty"`
	orc  []*PPR_PC1_PRB_ORCv2 `json:"orc,omitempty"`
}

func (m *PPR_PC1_PRBv2) PRB() *PRB {
	return m.prb
}

func (m *PPR_PC1_PRBv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPR_PC1_PRBv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPR_PC1_PRBv2) GroupByROL() []*PPR_PC1_PRB_ROLv2 {
	return m.rol
}

func (m *PPR_PC1_PRBv2) GroupByPTH() []*PPR_PC1_PRB_PTHv2 {
	return m.pth
}

func (m *PPR_PC1_PRBv2) GroupByOBX() []*PPR_PC1_PRB_OBXv2 {
	return m.obx
}

func (m *PPR_PC1_PRBv2) GroupByGOL() []*PPR_PC1_PRB_GOLv2 {
	return m.gol
}

func (m *PPR_PC1_PRBv2) GroupByORC() []*PPR_PC1_PRB_ORCv2 {
	return m.orc
}

func (m PPR_PC1_PRBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prb":  m.prb,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"pth":  m.pth,
		"obx":  m.obx,
		"gol":  m.gol,
		"orc":  m.orc,
	}, nil
}

type PPR_PC1_PRB_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPR_PC1_PRB_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPR_PC1_PRB_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPR_PC1_PRB_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPR_PC1_PRB_PTHv2 struct {
	pth  *PTH   `json:"pth,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPR_PC1_PRB_PTHv2) PTH() *PTH {
	return m.pth
}

func (m *PPR_PC1_PRB_PTHv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPR_PC1_PRB_PTHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pth":  m.pth,
		"var_": m.var_,
	}, nil
}

type PPR_PC1_PRB_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPR_PC1_PRB_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPR_PC1_PRB_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPR_PC1_PRB_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPR_PC1_PRB_GOLv2 struct {
	gol  *GOL                     `json:"gol,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	rol  []*PPR_PC1_PRB_GOL_ROLv2 `json:"rol,omitempty"`
	obx  []*PPR_PC1_PRB_GOL_OBXv2 `json:"obx,omitempty"`
}

func (m *PPR_PC1_PRB_GOLv2) GOL() *GOL {
	return m.gol
}

func (m *PPR_PC1_PRB_GOLv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPR_PC1_PRB_GOLv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPR_PC1_PRB_GOLv2) GroupByROL() []*PPR_PC1_PRB_GOL_ROLv2 {
	return m.rol
}

func (m *PPR_PC1_PRB_GOLv2) GroupByOBX() []*PPR_PC1_PRB_GOL_OBXv2 {
	return m.obx
}

func (m PPR_PC1_PRB_GOLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"gol":  m.gol,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
	}, nil
}

type PPR_PC1_PRB_GOL_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPR_PC1_PRB_GOL_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPR_PC1_PRB_GOL_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPR_PC1_PRB_GOL_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPR_PC1_PRB_GOL_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPR_PC1_PRB_GOL_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPR_PC1_PRB_GOL_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPR_PC1_PRB_GOL_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPR_PC1_PRB_ORCv2 struct {
	orc  *ORC                     `json:"orc,omitempty"` // Required
	obr  *OBR                     `json:"obr,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	obx  []*PPR_PC1_PRB_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *PPR_PC1_PRB_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *PPR_PC1_PRB_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *PPR_PC1_PRB_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPR_PC1_PRB_ORCv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPR_PC1_PRB_ORCv2) GroupByOBX() []*PPR_PC1_PRB_ORC_OBXv2 {
	return m.obx
}

func (m PPR_PC1_PRB_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"obr":  m.obr,
		"nte":  m.nte,
		"var_": m.var_,
		"obx":  m.obx,
	}, nil
}

type PPR_PC1_PRB_ORC_OBXv2 struct {
	obx  *OBX   `json:"obx,omitempty"` // Required
	nte  []*NTE `json:"nte,omitempty"`
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPR_PC1_PRB_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPR_PC1_PRB_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPR_PC1_PRB_ORC_OBXv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPR_PC1_PRB_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx":  m.obx,
		"nte":  m.nte,
		"var_": m.var_,
	}, nil
}

type PPT_PCLv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	pid []*PPT_PCL_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *PPT_PCLv2) MSH() *MSH {
	return m.msh
}

func (m *PPT_PCLv2) AllSFT() []*SFT {
	return m.sft
}

func (m *PPT_PCLv2) MSA() *MSA {
	return m.msa
}

func (m *PPT_PCLv2) AllERR() []*ERR {
	return m.err
}

func (m *PPT_PCLv2) QAK() *QAK {
	return m.qak
}

func (m *PPT_PCLv2) QRD() *QRD {
	return m.qrd
}

func (m *PPT_PCLv2) GroupByPID() []*PPT_PCL_PIDv2 {
	return m.pid
}

func (m PPT_PCLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"pid": m.pid,
	}, nil
}

type PPT_PCL_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"`  // Required
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	pth []*PPT_PCL_PID_PTHv2 `json:"pth,omitempty"` // Required
}

func (m *PPT_PCL_PIDv2) PID() *PID {
	return m.pid
}

func (m *PPT_PCL_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *PPT_PCL_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *PPT_PCL_PIDv2) GroupByPTH() []*PPT_PCL_PID_PTHv2 {
	return m.pth
}

func (m PPT_PCL_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"pth": m.pth,
	}, nil
}

type PPT_PCL_PID_PTHv2 struct {
	pth  *PTH                     `json:"pth,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	rol  []*PPT_PCL_PID_PTH_ROLv2 `json:"rol,omitempty"`
	gol  []*PPT_PCL_PID_PTH_GOLv2 `json:"gol,omitempty"`
}

func (m *PPT_PCL_PID_PTHv2) PTH() *PTH {
	return m.pth
}

func (m *PPT_PCL_PID_PTHv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPT_PCL_PID_PTHv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPT_PCL_PID_PTHv2) GroupByROL() []*PPT_PCL_PID_PTH_ROLv2 {
	return m.rol
}

func (m *PPT_PCL_PID_PTHv2) GroupByGOL() []*PPT_PCL_PID_PTH_GOLv2 {
	return m.gol
}

func (m PPT_PCL_PID_PTHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pth":  m.pth,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"gol":  m.gol,
	}, nil
}

type PPT_PCL_PID_PTH_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPT_PCL_PID_PTH_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPT_PCL_PID_PTH_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPT_PCL_PID_PTH_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPT_PCL_PID_PTH_GOLv2 struct {
	gol  *GOL                         `json:"gol,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	rol  []*PPT_PCL_PID_PTH_GOL_ROLv2 `json:"rol,omitempty"`
	obx  []*PPT_PCL_PID_PTH_GOL_OBXv2 `json:"obx,omitempty"`
	prb  []*PPT_PCL_PID_PTH_GOL_PRBv2 `json:"prb,omitempty"`
	orc  []*PPT_PCL_PID_PTH_GOL_ORCv2 `json:"orc,omitempty"`
}

func (m *PPT_PCL_PID_PTH_GOLv2) GOL() *GOL {
	return m.gol
}

func (m *PPT_PCL_PID_PTH_GOLv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPT_PCL_PID_PTH_GOLv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPT_PCL_PID_PTH_GOLv2) GroupByROL() []*PPT_PCL_PID_PTH_GOL_ROLv2 {
	return m.rol
}

func (m *PPT_PCL_PID_PTH_GOLv2) GroupByOBX() []*PPT_PCL_PID_PTH_GOL_OBXv2 {
	return m.obx
}

func (m *PPT_PCL_PID_PTH_GOLv2) GroupByPRB() []*PPT_PCL_PID_PTH_GOL_PRBv2 {
	return m.prb
}

func (m *PPT_PCL_PID_PTH_GOLv2) GroupByORC() []*PPT_PCL_PID_PTH_GOL_ORCv2 {
	return m.orc
}

func (m PPT_PCL_PID_PTH_GOLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"gol":  m.gol,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
		"prb":  m.prb,
		"orc":  m.orc,
	}, nil
}

type PPT_PCL_PID_PTH_GOL_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPT_PCL_PID_PTH_GOL_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPT_PCL_PID_PTH_GOL_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPT_PCL_PID_PTH_GOL_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPT_PCL_PID_PTH_GOL_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPT_PCL_PID_PTH_GOL_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPT_PCL_PID_PTH_GOL_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPT_PCL_PID_PTH_GOL_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPT_PCL_PID_PTH_GOL_PRBv2 struct {
	prb  *PRB                             `json:"prb,omitempty"` // Required
	nte  []*NTE                           `json:"nte,omitempty"`
	var_ []*VAR                           `json:"var__,omitempty"`
	rol  []*PPT_PCL_PID_PTH_GOL_PRB_ROLv2 `json:"rol,omitempty"`
	obx  []*PPT_PCL_PID_PTH_GOL_PRB_OBXv2 `json:"obx,omitempty"`
}

func (m *PPT_PCL_PID_PTH_GOL_PRBv2) PRB() *PRB {
	return m.prb
}

func (m *PPT_PCL_PID_PTH_GOL_PRBv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPT_PCL_PID_PTH_GOL_PRBv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPT_PCL_PID_PTH_GOL_PRBv2) GroupByROL() []*PPT_PCL_PID_PTH_GOL_PRB_ROLv2 {
	return m.rol
}

func (m *PPT_PCL_PID_PTH_GOL_PRBv2) GroupByOBX() []*PPT_PCL_PID_PTH_GOL_PRB_OBXv2 {
	return m.obx
}

func (m PPT_PCL_PID_PTH_GOL_PRBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prb":  m.prb,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
	}, nil
}

type PPT_PCL_PID_PTH_GOL_PRB_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPT_PCL_PID_PTH_GOL_PRB_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPT_PCL_PID_PTH_GOL_PRB_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPT_PCL_PID_PTH_GOL_PRB_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPT_PCL_PID_PTH_GOL_PRB_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPT_PCL_PID_PTH_GOL_PRB_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPT_PCL_PID_PTH_GOL_PRB_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPT_PCL_PID_PTH_GOL_PRB_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPT_PCL_PID_PTH_GOL_ORCv2 struct {
	orc  *ORC                             `json:"orc,omitempty"` // Required
	obr  *OBR                             `json:"obr,omitempty"` // Required
	nte  []*NTE                           `json:"nte,omitempty"`
	var_ []*VAR                           `json:"var__,omitempty"`
	obx  []*PPT_PCL_PID_PTH_GOL_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *PPT_PCL_PID_PTH_GOL_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *PPT_PCL_PID_PTH_GOL_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *PPT_PCL_PID_PTH_GOL_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPT_PCL_PID_PTH_GOL_ORCv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPT_PCL_PID_PTH_GOL_ORCv2) GroupByOBX() []*PPT_PCL_PID_PTH_GOL_ORC_OBXv2 {
	return m.obx
}

func (m PPT_PCL_PID_PTH_GOL_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"obr":  m.obr,
		"nte":  m.nte,
		"var_": m.var_,
		"obx":  m.obx,
	}, nil
}

type PPT_PCL_PID_PTH_GOL_ORC_OBXv2 struct {
	obx  *OBX   `json:"obx,omitempty"` // Required
	nte  []*NTE `json:"nte,omitempty"`
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPT_PCL_PID_PTH_GOL_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPT_PCL_PID_PTH_GOL_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPT_PCL_PID_PTH_GOL_ORC_OBXv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPT_PCL_PID_PTH_GOL_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx":  m.obx,
		"nte":  m.nte,
		"var_": m.var_,
	}, nil
}

type PPV_PCAv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	pid []*PPV_PCA_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *PPV_PCAv2) MSH() *MSH {
	return m.msh
}

func (m *PPV_PCAv2) AllSFT() []*SFT {
	return m.sft
}

func (m *PPV_PCAv2) MSA() *MSA {
	return m.msa
}

func (m *PPV_PCAv2) AllERR() []*ERR {
	return m.err
}

func (m *PPV_PCAv2) QAK() *QAK {
	return m.qak
}

func (m *PPV_PCAv2) QRD() *QRD {
	return m.qrd
}

func (m *PPV_PCAv2) GroupByPID() []*PPV_PCA_PIDv2 {
	return m.pid
}

func (m PPV_PCAv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"pid": m.pid,
	}, nil
}

type PPV_PCA_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"`  // Required
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	gol []*PPV_PCA_PID_GOLv2 `json:"gol,omitempty"` // Required
}

func (m *PPV_PCA_PIDv2) PID() *PID {
	return m.pid
}

func (m *PPV_PCA_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *PPV_PCA_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *PPV_PCA_PIDv2) GroupByGOL() []*PPV_PCA_PID_GOLv2 {
	return m.gol
}

func (m PPV_PCA_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"gol": m.gol,
	}, nil
}

type PPV_PCA_PID_GOLv2 struct {
	gol  *GOL                     `json:"gol,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	rol  []*PPV_PCA_PID_GOL_ROLv2 `json:"rol,omitempty"`
	pth  []*PPV_PCA_PID_GOL_PTHv2 `json:"pth,omitempty"`
	obx  []*PPV_PCA_PID_GOL_OBXv2 `json:"obx,omitempty"`
	prb  []*PPV_PCA_PID_GOL_PRBv2 `json:"prb,omitempty"`
	orc  []*PPV_PCA_PID_GOL_ORCv2 `json:"orc,omitempty"`
}

func (m *PPV_PCA_PID_GOLv2) GOL() *GOL {
	return m.gol
}

func (m *PPV_PCA_PID_GOLv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPV_PCA_PID_GOLv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPV_PCA_PID_GOLv2) GroupByROL() []*PPV_PCA_PID_GOL_ROLv2 {
	return m.rol
}

func (m *PPV_PCA_PID_GOLv2) GroupByPTH() []*PPV_PCA_PID_GOL_PTHv2 {
	return m.pth
}

func (m *PPV_PCA_PID_GOLv2) GroupByOBX() []*PPV_PCA_PID_GOL_OBXv2 {
	return m.obx
}

func (m *PPV_PCA_PID_GOLv2) GroupByPRB() []*PPV_PCA_PID_GOL_PRBv2 {
	return m.prb
}

func (m *PPV_PCA_PID_GOLv2) GroupByORC() []*PPV_PCA_PID_GOL_ORCv2 {
	return m.orc
}

func (m PPV_PCA_PID_GOLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"gol":  m.gol,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"pth":  m.pth,
		"obx":  m.obx,
		"prb":  m.prb,
		"orc":  m.orc,
	}, nil
}

type PPV_PCA_PID_GOL_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPV_PCA_PID_GOL_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPV_PCA_PID_GOL_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPV_PCA_PID_GOL_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPV_PCA_PID_GOL_PTHv2 struct {
	pth  *PTH   `json:"pth,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPV_PCA_PID_GOL_PTHv2) PTH() *PTH {
	return m.pth
}

func (m *PPV_PCA_PID_GOL_PTHv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPV_PCA_PID_GOL_PTHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pth":  m.pth,
		"var_": m.var_,
	}, nil
}

type PPV_PCA_PID_GOL_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPV_PCA_PID_GOL_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPV_PCA_PID_GOL_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPV_PCA_PID_GOL_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPV_PCA_PID_GOL_PRBv2 struct {
	prb  *PRB                         `json:"prb,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	rol  []*PPV_PCA_PID_GOL_PRB_ROLv2 `json:"rol,omitempty"`
	obx  []*PPV_PCA_PID_GOL_PRB_OBXv2 `json:"obx,omitempty"`
}

func (m *PPV_PCA_PID_GOL_PRBv2) PRB() *PRB {
	return m.prb
}

func (m *PPV_PCA_PID_GOL_PRBv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPV_PCA_PID_GOL_PRBv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPV_PCA_PID_GOL_PRBv2) GroupByROL() []*PPV_PCA_PID_GOL_PRB_ROLv2 {
	return m.rol
}

func (m *PPV_PCA_PID_GOL_PRBv2) GroupByOBX() []*PPV_PCA_PID_GOL_PRB_OBXv2 {
	return m.obx
}

func (m PPV_PCA_PID_GOL_PRBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prb":  m.prb,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
	}, nil
}

type PPV_PCA_PID_GOL_PRB_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPV_PCA_PID_GOL_PRB_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PPV_PCA_PID_GOL_PRB_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPV_PCA_PID_GOL_PRB_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PPV_PCA_PID_GOL_PRB_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PPV_PCA_PID_GOL_PRB_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPV_PCA_PID_GOL_PRB_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PPV_PCA_PID_GOL_PRB_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PPV_PCA_PID_GOL_ORCv2 struct {
	orc  *ORC                         `json:"orc,omitempty"` // Required
	obr  *OBR                         `json:"obr,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	obx  []*PPV_PCA_PID_GOL_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *PPV_PCA_PID_GOL_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *PPV_PCA_PID_GOL_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *PPV_PCA_PID_GOL_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPV_PCA_PID_GOL_ORCv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PPV_PCA_PID_GOL_ORCv2) GroupByOBX() []*PPV_PCA_PID_GOL_ORC_OBXv2 {
	return m.obx
}

func (m PPV_PCA_PID_GOL_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"obr":  m.obr,
		"nte":  m.nte,
		"var_": m.var_,
		"obx":  m.obx,
	}, nil
}

type PPV_PCA_PID_GOL_ORC_OBXv2 struct {
	obx  *OBX   `json:"obx,omitempty"` // Required
	nte  []*NTE `json:"nte,omitempty"`
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PPV_PCA_PID_GOL_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PPV_PCA_PID_GOL_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PPV_PCA_PID_GOL_ORC_OBXv2) AllVAR() []*VAR {
	return m.var_
}

func (m PPV_PCA_PID_GOL_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx":  m.obx,
		"nte":  m.nte,
		"var_": m.var_,
	}, nil
}

type PRR_PC5v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	pid []*PRR_PC5_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *PRR_PC5v2) MSH() *MSH {
	return m.msh
}

func (m *PRR_PC5v2) AllSFT() []*SFT {
	return m.sft
}

func (m *PRR_PC5v2) MSA() *MSA {
	return m.msa
}

func (m *PRR_PC5v2) AllERR() []*ERR {
	return m.err
}

func (m *PRR_PC5v2) QAK() *QAK {
	return m.qak
}

func (m *PRR_PC5v2) QRD() *QRD {
	return m.qrd
}

func (m *PRR_PC5v2) GroupByPID() []*PRR_PC5_PIDv2 {
	return m.pid
}

func (m PRR_PC5v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"pid": m.pid,
	}, nil
}

type PRR_PC5_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"`  // Required
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	prb []*PRR_PC5_PID_PRBv2 `json:"prb,omitempty"` // Required
}

func (m *PRR_PC5_PIDv2) PID() *PID {
	return m.pid
}

func (m *PRR_PC5_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *PRR_PC5_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *PRR_PC5_PIDv2) GroupByPRB() []*PRR_PC5_PID_PRBv2 {
	return m.prb
}

func (m PRR_PC5_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"prb": m.prb,
	}, nil
}

type PRR_PC5_PID_PRBv2 struct {
	prb  *PRB                     `json:"prb,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	rol  []*PRR_PC5_PID_PRB_ROLv2 `json:"rol,omitempty"`
	pth  []*PRR_PC5_PID_PRB_PTHv2 `json:"pth,omitempty"`
	obx  []*PRR_PC5_PID_PRB_OBXv2 `json:"obx,omitempty"`
	gol  []*PRR_PC5_PID_PRB_GOLv2 `json:"gol,omitempty"`
	orc  []*PRR_PC5_PID_PRB_ORCv2 `json:"orc,omitempty"`
}

func (m *PRR_PC5_PID_PRBv2) PRB() *PRB {
	return m.prb
}

func (m *PRR_PC5_PID_PRBv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PRR_PC5_PID_PRBv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PRR_PC5_PID_PRBv2) GroupByROL() []*PRR_PC5_PID_PRB_ROLv2 {
	return m.rol
}

func (m *PRR_PC5_PID_PRBv2) GroupByPTH() []*PRR_PC5_PID_PRB_PTHv2 {
	return m.pth
}

func (m *PRR_PC5_PID_PRBv2) GroupByOBX() []*PRR_PC5_PID_PRB_OBXv2 {
	return m.obx
}

func (m *PRR_PC5_PID_PRBv2) GroupByGOL() []*PRR_PC5_PID_PRB_GOLv2 {
	return m.gol
}

func (m *PRR_PC5_PID_PRBv2) GroupByORC() []*PRR_PC5_PID_PRB_ORCv2 {
	return m.orc
}

func (m PRR_PC5_PID_PRBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prb":  m.prb,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"pth":  m.pth,
		"obx":  m.obx,
		"gol":  m.gol,
		"orc":  m.orc,
	}, nil
}

type PRR_PC5_PID_PRB_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PRR_PC5_PID_PRB_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PRR_PC5_PID_PRB_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PRR_PC5_PID_PRB_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PRR_PC5_PID_PRB_PTHv2 struct {
	pth  *PTH   `json:"pth,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PRR_PC5_PID_PRB_PTHv2) PTH() *PTH {
	return m.pth
}

func (m *PRR_PC5_PID_PRB_PTHv2) AllVAR() []*VAR {
	return m.var_
}

func (m PRR_PC5_PID_PRB_PTHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pth":  m.pth,
		"var_": m.var_,
	}, nil
}

type PRR_PC5_PID_PRB_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PRR_PC5_PID_PRB_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PRR_PC5_PID_PRB_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PRR_PC5_PID_PRB_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PRR_PC5_PID_PRB_GOLv2 struct {
	gol  *GOL                         `json:"gol,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	rol  []*PRR_PC5_PID_PRB_GOL_ROLv2 `json:"rol,omitempty"`
	obx  []*PRR_PC5_PID_PRB_GOL_OBXv2 `json:"obx,omitempty"`
}

func (m *PRR_PC5_PID_PRB_GOLv2) GOL() *GOL {
	return m.gol
}

func (m *PRR_PC5_PID_PRB_GOLv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PRR_PC5_PID_PRB_GOLv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PRR_PC5_PID_PRB_GOLv2) GroupByROL() []*PRR_PC5_PID_PRB_GOL_ROLv2 {
	return m.rol
}

func (m *PRR_PC5_PID_PRB_GOLv2) GroupByOBX() []*PRR_PC5_PID_PRB_GOL_OBXv2 {
	return m.obx
}

func (m PRR_PC5_PID_PRB_GOLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"gol":  m.gol,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
	}, nil
}

type PRR_PC5_PID_PRB_GOL_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PRR_PC5_PID_PRB_GOL_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PRR_PC5_PID_PRB_GOL_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PRR_PC5_PID_PRB_GOL_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PRR_PC5_PID_PRB_GOL_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PRR_PC5_PID_PRB_GOL_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PRR_PC5_PID_PRB_GOL_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PRR_PC5_PID_PRB_GOL_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PRR_PC5_PID_PRB_ORCv2 struct {
	orc  *ORC                         `json:"orc,omitempty"` // Required
	obr  *OBR                         `json:"obr,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	obx  []*PRR_PC5_PID_PRB_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *PRR_PC5_PID_PRB_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *PRR_PC5_PID_PRB_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *PRR_PC5_PID_PRB_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PRR_PC5_PID_PRB_ORCv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PRR_PC5_PID_PRB_ORCv2) GroupByOBX() []*PRR_PC5_PID_PRB_ORC_OBXv2 {
	return m.obx
}

func (m PRR_PC5_PID_PRB_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"obr":  m.obr,
		"nte":  m.nte,
		"var_": m.var_,
		"obx":  m.obx,
	}, nil
}

type PRR_PC5_PID_PRB_ORC_OBXv2 struct {
	obx  *OBX   `json:"obx,omitempty"` // Required
	nte  []*NTE `json:"nte,omitempty"`
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PRR_PC5_PID_PRB_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PRR_PC5_PID_PRB_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PRR_PC5_PID_PRB_ORC_OBXv2) AllVAR() []*VAR {
	return m.var_
}

func (m PRR_PC5_PID_PRB_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx":  m.obx,
		"nte":  m.nte,
		"var_": m.var_,
	}, nil
}

type PTR_PCFv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	pid []*PTR_PCF_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *PTR_PCFv2) MSH() *MSH {
	return m.msh
}

func (m *PTR_PCFv2) AllSFT() []*SFT {
	return m.sft
}

func (m *PTR_PCFv2) MSA() *MSA {
	return m.msa
}

func (m *PTR_PCFv2) AllERR() []*ERR {
	return m.err
}

func (m *PTR_PCFv2) QAK() *QAK {
	return m.qak
}

func (m *PTR_PCFv2) QRD() *QRD {
	return m.qrd
}

func (m *PTR_PCFv2) GroupByPID() []*PTR_PCF_PIDv2 {
	return m.pid
}

func (m PTR_PCFv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qrd": m.qrd,
		"pid": m.pid,
	}, nil
}

type PTR_PCF_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"`  // Required
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	pth []*PTR_PCF_PID_PTHv2 `json:"pth,omitempty"` // Required
}

func (m *PTR_PCF_PIDv2) PID() *PID {
	return m.pid
}

func (m *PTR_PCF_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *PTR_PCF_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *PTR_PCF_PIDv2) GroupByPTH() []*PTR_PCF_PID_PTHv2 {
	return m.pth
}

func (m PTR_PCF_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"pth": m.pth,
	}, nil
}

type PTR_PCF_PID_PTHv2 struct {
	pth  *PTH                     `json:"pth,omitempty"` // Required
	nte  []*NTE                   `json:"nte,omitempty"`
	var_ []*VAR                   `json:"var__,omitempty"`
	rol  []*PTR_PCF_PID_PTH_ROLv2 `json:"rol,omitempty"`
	prb  []*PTR_PCF_PID_PTH_PRBv2 `json:"prb,omitempty"`
}

func (m *PTR_PCF_PID_PTHv2) PTH() *PTH {
	return m.pth
}

func (m *PTR_PCF_PID_PTHv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PTR_PCF_PID_PTHv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PTR_PCF_PID_PTHv2) GroupByROL() []*PTR_PCF_PID_PTH_ROLv2 {
	return m.rol
}

func (m *PTR_PCF_PID_PTHv2) GroupByPRB() []*PTR_PCF_PID_PTH_PRBv2 {
	return m.prb
}

func (m PTR_PCF_PID_PTHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pth":  m.pth,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"prb":  m.prb,
	}, nil
}

type PTR_PCF_PID_PTH_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PTR_PCF_PID_PTH_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PTR_PCF_PID_PTH_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PTR_PCF_PID_PTH_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PTR_PCF_PID_PTH_PRBv2 struct {
	prb  *PRB                         `json:"prb,omitempty"` // Required
	nte  []*NTE                       `json:"nte,omitempty"`
	var_ []*VAR                       `json:"var__,omitempty"`
	rol  []*PTR_PCF_PID_PTH_PRB_ROLv2 `json:"rol,omitempty"`
	obx  []*PTR_PCF_PID_PTH_PRB_OBXv2 `json:"obx,omitempty"`
	gol  []*PTR_PCF_PID_PTH_PRB_GOLv2 `json:"gol,omitempty"`
	orc  []*PTR_PCF_PID_PTH_PRB_ORCv2 `json:"orc,omitempty"`
}

func (m *PTR_PCF_PID_PTH_PRBv2) PRB() *PRB {
	return m.prb
}

func (m *PTR_PCF_PID_PTH_PRBv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PTR_PCF_PID_PTH_PRBv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PTR_PCF_PID_PTH_PRBv2) GroupByROL() []*PTR_PCF_PID_PTH_PRB_ROLv2 {
	return m.rol
}

func (m *PTR_PCF_PID_PTH_PRBv2) GroupByOBX() []*PTR_PCF_PID_PTH_PRB_OBXv2 {
	return m.obx
}

func (m *PTR_PCF_PID_PTH_PRBv2) GroupByGOL() []*PTR_PCF_PID_PTH_PRB_GOLv2 {
	return m.gol
}

func (m *PTR_PCF_PID_PTH_PRBv2) GroupByORC() []*PTR_PCF_PID_PTH_PRB_ORCv2 {
	return m.orc
}

func (m PTR_PCF_PID_PTH_PRBv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prb":  m.prb,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
		"gol":  m.gol,
		"orc":  m.orc,
	}, nil
}

type PTR_PCF_PID_PTH_PRB_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PTR_PCF_PID_PTH_PRB_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PTR_PCF_PID_PTH_PRB_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PTR_PCF_PID_PTH_PRB_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PTR_PCF_PID_PTH_PRB_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PTR_PCF_PID_PTH_PRB_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PTR_PCF_PID_PTH_PRB_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PTR_PCF_PID_PTH_PRB_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PTR_PCF_PID_PTH_PRB_GOLv2 struct {
	gol  *GOL                             `json:"gol,omitempty"` // Required
	nte  []*NTE                           `json:"nte,omitempty"`
	var_ []*VAR                           `json:"var__,omitempty"`
	rol  []*PTR_PCF_PID_PTH_PRB_GOL_ROLv2 `json:"rol,omitempty"`
	obx  []*PTR_PCF_PID_PTH_PRB_GOL_OBXv2 `json:"obx,omitempty"`
}

func (m *PTR_PCF_PID_PTH_PRB_GOLv2) GOL() *GOL {
	return m.gol
}

func (m *PTR_PCF_PID_PTH_PRB_GOLv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PTR_PCF_PID_PTH_PRB_GOLv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PTR_PCF_PID_PTH_PRB_GOLv2) GroupByROL() []*PTR_PCF_PID_PTH_PRB_GOL_ROLv2 {
	return m.rol
}

func (m *PTR_PCF_PID_PTH_PRB_GOLv2) GroupByOBX() []*PTR_PCF_PID_PTH_PRB_GOL_OBXv2 {
	return m.obx
}

func (m PTR_PCF_PID_PTH_PRB_GOLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"gol":  m.gol,
		"nte":  m.nte,
		"var_": m.var_,
		"rol":  m.rol,
		"obx":  m.obx,
	}, nil
}

type PTR_PCF_PID_PTH_PRB_GOL_ROLv2 struct {
	rol  *ROL   `json:"rol,omitempty"` // Required
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PTR_PCF_PID_PTH_PRB_GOL_ROLv2) ROL() *ROL {
	return m.rol
}

func (m *PTR_PCF_PID_PTH_PRB_GOL_ROLv2) AllVAR() []*VAR {
	return m.var_
}

func (m PTR_PCF_PID_PTH_PRB_GOL_ROLv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rol":  m.rol,
		"var_": m.var_,
	}, nil
}

type PTR_PCF_PID_PTH_PRB_GOL_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *PTR_PCF_PID_PTH_PRB_GOL_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PTR_PCF_PID_PTH_PRB_GOL_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m PTR_PCF_PID_PTH_PRB_GOL_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type PTR_PCF_PID_PTH_PRB_ORCv2 struct {
	orc  *ORC                             `json:"orc,omitempty"` // Required
	obr  *OBR                             `json:"obr,omitempty"` // Required
	nte  []*NTE                           `json:"nte,omitempty"`
	var_ []*VAR                           `json:"var__,omitempty"`
	obx  []*PTR_PCF_PID_PTH_PRB_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *PTR_PCF_PID_PTH_PRB_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *PTR_PCF_PID_PTH_PRB_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *PTR_PCF_PID_PTH_PRB_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PTR_PCF_PID_PTH_PRB_ORCv2) AllVAR() []*VAR {
	return m.var_
}

func (m *PTR_PCF_PID_PTH_PRB_ORCv2) GroupByOBX() []*PTR_PCF_PID_PTH_PRB_ORC_OBXv2 {
	return m.obx
}

func (m PTR_PCF_PID_PTH_PRB_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"obr":  m.obr,
		"nte":  m.nte,
		"var_": m.var_,
		"obx":  m.obx,
	}, nil
}

type PTR_PCF_PID_PTH_PRB_ORC_OBXv2 struct {
	obx  *OBX   `json:"obx,omitempty"` // Required
	nte  []*NTE `json:"nte,omitempty"`
	var_ []*VAR `json:"var__,omitempty"`
}

func (m *PTR_PCF_PID_PTH_PRB_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *PTR_PCF_PID_PTH_PRB_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m *PTR_PCF_PID_PTH_PRB_ORC_OBXv2) AllVAR() []*VAR {
	return m.var_
}

func (m PTR_PCF_PID_PTH_PRB_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx":  m.obx,
		"nte":  m.nte,
		"var_": m.var_,
	}, nil
}

type QBP_K13v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"` // Required
	rdt []*RDT `json:"rdt,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QBP_K13v2) MSH() *MSH {
	return m.msh
}

func (m *QBP_K13v2) MSA() *MSA {
	return m.msa
}

func (m *QBP_K13v2) ERR() *ERR {
	return m.err
}

func (m *QBP_K13v2) QAK() *QAK {
	return m.qak
}

func (m *QBP_K13v2) QPD() *QPD {
	return m.qpd
}

func (m *QBP_K13v2) RDF() *RDF {
	return m.rdf
}

func (m *QBP_K13v2) AllRDT() []*RDT {
	return m.rdt
}

func (m *QBP_K13v2) DSC() *DSC {
	return m.dsc
}

func (m QBP_K13v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rdf": m.rdf,
		"rdt": m.rdt,
		"dsc": m.dsc,
	}, nil
}

type QBP_Q11v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rcp *RCP   `json:"rcp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QBP_Q11v2) MSH() *MSH {
	return m.msh
}

func (m *QBP_Q11v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QBP_Q11v2) QPD() *QPD {
	return m.qpd
}

func (m *QBP_Q11v2) RCP() *RCP {
	return m.rcp
}

func (m *QBP_Q11v2) DSC() *DSC {
	return m.dsc
}

func (m QBP_Q11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"dsc": m.dsc,
	}, nil
}

type QBP_Q13v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"`
	rcp *RCP   `json:"rcp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QBP_Q13v2) MSH() *MSH {
	return m.msh
}

func (m *QBP_Q13v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QBP_Q13v2) QPD() *QPD {
	return m.qpd
}

func (m *QBP_Q13v2) RDF() *RDF {
	return m.rdf
}

func (m *QBP_Q13v2) RCP() *RCP {
	return m.rcp
}

func (m *QBP_Q13v2) DSC() *DSC {
	return m.dsc
}

func (m QBP_Q13v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qpd": m.qpd,
		"rdf": m.rdf,
		"rcp": m.rcp,
		"dsc": m.dsc,
	}, nil
}

type QBP_Q15v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rcp *RCP   `json:"rcp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QBP_Q15v2) MSH() *MSH {
	return m.msh
}

func (m *QBP_Q15v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QBP_Q15v2) QPD() *QPD {
	return m.qpd
}

func (m *QBP_Q15v2) RCP() *RCP {
	return m.rcp
}

func (m *QBP_Q15v2) DSC() *DSC {
	return m.dsc
}

func (m QBP_Q15v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"dsc": m.dsc,
	}, nil
}

type QBP_Q21v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rcp *RCP   `json:"rcp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QBP_Q21v2) MSH() *MSH {
	return m.msh
}

func (m *QBP_Q21v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QBP_Q21v2) QPD() *QPD {
	return m.qpd
}

func (m *QBP_Q21v2) RCP() *RCP {
	return m.rcp
}

func (m *QBP_Q21v2) DSC() *DSC {
	return m.dsc
}

func (m QBP_Q21v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"dsc": m.dsc,
	}, nil
}

type QBP_Qnnv2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"`
	rcp *RCP   `json:"rcp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QBP_Qnnv2) MSH() *MSH {
	return m.msh
}

func (m *QBP_Qnnv2) AllSFT() []*SFT {
	return m.sft
}

func (m *QBP_Qnnv2) QPD() *QPD {
	return m.qpd
}

func (m *QBP_Qnnv2) RDF() *RDF {
	return m.rdf
}

func (m *QBP_Qnnv2) RCP() *RCP {
	return m.rcp
}

func (m *QBP_Qnnv2) DSC() *DSC {
	return m.dsc
}

func (m QBP_Qnnv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qpd": m.qpd,
		"rdf": m.rdf,
		"rcp": m.rcp,
		"dsc": m.dsc,
	}, nil
}

type QBP_Z73v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rcp *RCP   `json:"rcp,omitempty"` // Required
}

func (m *QBP_Z73v2) MSH() *MSH {
	return m.msh
}

func (m *QBP_Z73v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QBP_Z73v2) QPD() *QPD {
	return m.qpd
}

func (m *QBP_Z73v2) RCP() *RCP {
	return m.rcp
}

func (m QBP_Z73v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qpd": m.qpd,
		"rcp": m.rcp,
	}, nil
}

type QCK_Q02v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"`
}

func (m *QCK_Q02v2) MSH() *MSH {
	return m.msh
}

func (m *QCK_Q02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QCK_Q02v2) MSA() *MSA {
	return m.msa
}

func (m *QCK_Q02v2) ERR() *ERR {
	return m.err
}

func (m *QCK_Q02v2) QAK() *QAK {
	return m.qak
}

func (m QCK_Q02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
	}, nil
}

type QCN_J01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qid *QID   `json:"qid,omitempty"` // Required
}

func (m *QCN_J01v2) MSH() *MSH {
	return m.msh
}

func (m *QCN_J01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QCN_J01v2) QID() *QID {
	return m.qid
}

func (m QCN_J01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qid": m.qid,
	}, nil
}

type QRY_A19v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
}

func (m *QRY_A19v2) MSH() *MSH {
	return m.msh
}

func (m *QRY_A19v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QRY_A19v2) QRD() *QRD {
	return m.qrd
}

func (m *QRY_A19v2) QRF() *QRF {
	return m.qrf
}

func (m QRY_A19v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
	}, nil
}

type QRY_P04v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	qrd *QRD `json:"qrd,omitempty"` // Required
	qrf *QRF `json:"qrf,omitempty"`
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *QRY_P04v2) MSH() *MSH {
	return m.msh
}

func (m *QRY_P04v2) QRD() *QRD {
	return m.qrd
}

func (m *QRY_P04v2) QRF() *QRF {
	return m.qrf
}

func (m *QRY_P04v2) DSC() *DSC {
	return m.dsc
}

func (m QRY_P04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsc": m.dsc,
	}, nil
}

type QRY_PC4v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
}

func (m *QRY_PC4v2) MSH() *MSH {
	return m.msh
}

func (m *QRY_PC4v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QRY_PC4v2) QRD() *QRD {
	return m.qrd
}

func (m *QRY_PC4v2) QRF() *QRF {
	return m.qrf
}

func (m QRY_PC4v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
	}, nil
}

type QRY_Q01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QRY_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *QRY_Q01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QRY_Q01v2) QRD() *QRD {
	return m.qrd
}

func (m *QRY_Q01v2) QRF() *QRF {
	return m.qrf
}

func (m *QRY_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m QRY_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsc": m.dsc,
	}, nil
}

type QRY_Q02v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QRY_Q02v2) MSH() *MSH {
	return m.msh
}

func (m *QRY_Q02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QRY_Q02v2) QRD() *QRD {
	return m.qrd
}

func (m *QRY_Q02v2) QRF() *QRF {
	return m.qrf
}

func (m *QRY_Q02v2) DSC() *DSC {
	return m.dsc
}

func (m QRY_Q02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"dsc": m.dsc,
	}, nil
}

type QRY_R02v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"` // Required
}

func (m *QRY_R02v2) MSH() *MSH {
	return m.msh
}

func (m *QRY_R02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QRY_R02v2) QRD() *QRD {
	return m.qrd
}

func (m *QRY_R02v2) QRF() *QRF {
	return m.qrf
}

func (m QRY_R02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
	}, nil
}

type QRY_T12v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	qrd *QRD `json:"qrd,omitempty"` // Required
	qrf *QRF `json:"qrf,omitempty"`
}

func (m *QRY_T12v2) MSH() *MSH {
	return m.msh
}

func (m *QRY_T12v2) QRD() *QRD {
	return m.qrd
}

func (m *QRY_T12v2) QRF() *QRF {
	return m.qrf
}

func (m QRY_T12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"qrd": m.qrd,
		"qrf": m.qrf,
	}, nil
}

type QSB_Q16v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rcp *RCP   `json:"rcp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QSB_Q16v2) MSH() *MSH {
	return m.msh
}

func (m *QSB_Q16v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QSB_Q16v2) QPD() *QPD {
	return m.qpd
}

func (m *QSB_Q16v2) RCP() *RCP {
	return m.rcp
}

func (m *QSB_Q16v2) DSC() *DSC {
	return m.dsc
}

func (m QSB_Q16v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"dsc": m.dsc,
	}, nil
}

type QVR_Q17v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rcp *RCP   `json:"rcp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *QVR_Q17v2) MSH() *MSH {
	return m.msh
}

func (m *QVR_Q17v2) AllSFT() []*SFT {
	return m.sft
}

func (m *QVR_Q17v2) QPD() *QPD {
	return m.qpd
}

func (m *QVR_Q17v2) RCP() *RCP {
	return m.rcp
}

func (m *QVR_Q17v2) DSC() *DSC {
	return m.dsc
}

func (m QVR_Q17v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"dsc": m.dsc,
	}, nil
}

type RAR_RARv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	qrd []*RAR_RAR_QRDv2 `json:"qrd,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RAR_RARv2) MSH() *MSH {
	return m.msh
}

func (m *RAR_RARv2) MSA() *MSA {
	return m.msa
}

func (m *RAR_RARv2) AllERR() []*ERR {
	return m.err
}

func (m *RAR_RARv2) AllSFT() []*SFT {
	return m.sft
}

func (m *RAR_RARv2) GroupByQRD() []*RAR_RAR_QRDv2 {
	return m.qrd
}

func (m *RAR_RARv2) DSC() *DSC {
	return m.dsc
}

func (m RAR_RARv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"qrd": m.qrd,
		"dsc": m.dsc,
	}, nil
}

type RAR_RAR_QRDv2 struct {
	qrd *QRD                 `json:"qrd,omitempty"` // Required
	qrf *QRF                 `json:"qrf,omitempty"`
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RAR_RAR_QRD_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RAR_RAR_QRDv2) QRD() *QRD {
	return m.qrd
}

func (m *RAR_RAR_QRDv2) QRF() *QRF {
	return m.qrf
}

func (m *RAR_RAR_QRDv2) PID() *PID {
	return m.pid
}

func (m *RAR_RAR_QRDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RAR_RAR_QRDv2) GroupByORC() []*RAR_RAR_QRD_ORCv2 {
	return m.orc
}

func (m RAR_RAR_QRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RAR_RAR_QRD_ORCv2 struct {
	orc *ORC                   `json:"orc,omitempty"` // Required
	rxe *RAR_RAR_QRD_ORC_RXEv2 `json:"rxe,omitempty"`
	rxa []*RXA                 `json:"rxa,omitempty"` // Required
	rxr *RXR                   `json:"rxr,omitempty"` // Required
}

func (m *RAR_RAR_QRD_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RAR_RAR_QRD_ORCv2) GroupByRXE() *RAR_RAR_QRD_ORC_RXEv2 {
	return m.rxe
}

func (m *RAR_RAR_QRD_ORCv2) AllRXA() []*RXA {
	return m.rxa
}

func (m *RAR_RAR_QRD_ORCv2) RXR() *RXR {
	return m.rxr
}

func (m RAR_RAR_QRD_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxe": m.rxe,
		"rxa": m.rxa,
		"rxr": m.rxr,
	}, nil
}

type RAR_RAR_QRD_ORC_RXEv2 struct {
	rxe *RXE   `json:"rxe,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RAR_RAR_QRD_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RAR_RAR_QRD_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RAR_RAR_QRD_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RAR_RAR_QRD_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RAS_O01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	pid *RAS_O01_PIDv2   `json:"pid,omitempty"`
	orc []*RAS_O01_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RAS_O01v2) MSH() *MSH {
	return m.msh
}

func (m *RAS_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RAS_O01v2) GroupByPID() *RAS_O01_PIDv2 {
	return m.pid
}

func (m *RAS_O01v2) GroupByORC() []*RAS_O01_ORCv2 {
	return m.orc
}

func (m RAS_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RAS_O01_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
	al1 []*AL1 `json:"al_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *RAS_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *RAS_O01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RAS_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RAS_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RAS_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RAS_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m RAS_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type RAS_O01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	rxo *RAS_O01_ORC_RXOv2   `json:"rxo,omitempty"`
	rxe *RAS_O01_ORC_RXEv2   `json:"rxe,omitempty"`
	rxa []*RXA               `json:"rxa,omitempty"` // Required
	rxr *RXR                 `json:"rxr,omitempty"` // Required
	obx []*RAS_O01_ORC_OBXv2 `json:"obx,omitempty"`
	cti []*CTI               `json:"cti,omitempty"`
}

func (m *RAS_O01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RAS_O01_ORCv2) GroupByRXO() *RAS_O01_ORC_RXOv2 {
	return m.rxo
}

func (m *RAS_O01_ORCv2) GroupByRXE() *RAS_O01_ORC_RXEv2 {
	return m.rxe
}

func (m *RAS_O01_ORCv2) AllRXA() []*RXA {
	return m.rxa
}

func (m *RAS_O01_ORCv2) RXR() *RXR {
	return m.rxr
}

func (m *RAS_O01_ORCv2) GroupByOBX() []*RAS_O01_ORC_OBXv2 {
	return m.obx
}

func (m *RAS_O01_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m RAS_O01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxo": m.rxo,
		"rxe": m.rxe,
		"rxa": m.rxa,
		"rxr": m.rxr,
		"obx": m.obx,
		"cti": m.cti,
	}, nil
}

type RAS_O01_ORC_RXOv2 struct {
	rxo *RXO                   `json:"rxo,omitempty"` // Required
	nte []*NTE                 `json:"nte,omitempty"` // Required
	rxr []*RXR                 `json:"rxr,omitempty"` // Required
	rxc *RAS_O01_ORC_RXO_RXCv2 `json:"rxc,omitempty"`
}

func (m *RAS_O01_ORC_RXOv2) RXO() *RXO {
	return m.rxo
}

func (m *RAS_O01_ORC_RXOv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RAS_O01_ORC_RXOv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RAS_O01_ORC_RXOv2) GroupByRXC() *RAS_O01_ORC_RXO_RXCv2 {
	return m.rxc
}

func (m RAS_O01_ORC_RXOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RAS_O01_ORC_RXO_RXCv2 struct {
	rxc []*RXC `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RAS_O01_ORC_RXO_RXCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RAS_O01_ORC_RXO_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RAS_O01_ORC_RXO_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RAS_O01_ORC_RXEv2 struct {
	rxe *RXE   `json:"rxe,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RAS_O01_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RAS_O01_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RAS_O01_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RAS_O01_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RAS_O01_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RAS_O01_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RAS_O01_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RAS_O01_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RAS_O17v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *RAS_O17_PIDv2   `json:"pid,omitempty"`
	orc []*RAS_O17_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RAS_O17v2) MSH() *MSH {
	return m.msh
}

func (m *RAS_O17v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RAS_O17v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RAS_O17v2) GroupByPID() *RAS_O17_PIDv2 {
	return m.pid
}

func (m *RAS_O17v2) GroupByORC() []*RAS_O17_ORCv2 {
	return m.orc
}

func (m RAS_O17v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RAS_O17_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
	al1 []*AL1 `json:"al_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *RAS_O17_PIDv2) PID() *PID {
	return m.pid
}

func (m *RAS_O17_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RAS_O17_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RAS_O17_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RAS_O17_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RAS_O17_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m RAS_O17_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type RAS_O17_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*RAS_O17_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RXO                 `json:"rxo,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"` // Required
	rxr []*RXR               `json:"rxr,omitempty"` // Required
	rxc []*RAS_O17_ORC_RXCv2 `json:"rxc,omitempty"`
	rxe *RAS_O17_ORC_RXEv2   `json:"rxe,omitempty"`
	rxa []*RAS_O17_ORC_RXAv2 `json:"rxa,omitempty"` // Required
	cti []*CTI               `json:"cti,omitempty"`
}

func (m *RAS_O17_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RAS_O17_ORCv2) GroupByTQ1() []*RAS_O17_ORC_TQ1v2 {
	return m.tq1
}

func (m *RAS_O17_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *RAS_O17_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RAS_O17_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RAS_O17_ORCv2) GroupByRXC() []*RAS_O17_ORC_RXCv2 {
	return m.rxc
}

func (m *RAS_O17_ORCv2) GroupByRXE() *RAS_O17_ORC_RXEv2 {
	return m.rxe
}

func (m *RAS_O17_ORCv2) GroupByRXA() []*RAS_O17_ORC_RXAv2 {
	return m.rxa
}

func (m *RAS_O17_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m RAS_O17_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"rxe": m.rxe,
		"rxa": m.rxa,
		"cti": m.cti,
	}, nil
}

type RAS_O17_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RAS_O17_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RAS_O17_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RAS_O17_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RAS_O17_ORC_RXCv2 struct {
	rxc *RXC   `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RAS_O17_ORC_RXCv2) RXC() *RXC {
	return m.rxc
}

func (m *RAS_O17_ORC_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RAS_O17_ORC_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RAS_O17_ORC_RXEv2 struct {
	rxe *RXE                     `json:"rxe,omitempty"`  // Required
	tq1 []*RAS_O17_ORC_RXE_TQ1v2 `json:"tq_1,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"`  // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
}

func (m *RAS_O17_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RAS_O17_ORC_RXEv2) GroupByTQ1() []*RAS_O17_ORC_RXE_TQ1v2 {
	return m.tq1
}

func (m *RAS_O17_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RAS_O17_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RAS_O17_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RAS_O17_ORC_RXE_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RAS_O17_ORC_RXE_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RAS_O17_ORC_RXE_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RAS_O17_ORC_RXE_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RAS_O17_ORC_RXAv2 struct {
	rxa []*RXA                   `json:"rxa,omitempty"` // Required
	rxr *RXR                     `json:"rxr,omitempty"` // Required
	obx []*RAS_O17_ORC_RXA_OBXv2 `json:"obx,omitempty"`
}

func (m *RAS_O17_ORC_RXAv2) AllRXA() []*RXA {
	return m.rxa
}

func (m *RAS_O17_ORC_RXAv2) RXR() *RXR {
	return m.rxr
}

func (m *RAS_O17_ORC_RXAv2) GroupByOBX() []*RAS_O17_ORC_RXA_OBXv2 {
	return m.obx
}

func (m RAS_O17_ORC_RXAv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxa": m.rxa,
		"rxr": m.rxr,
		"obx": m.obx,
	}, nil
}

type RAS_O17_ORC_RXA_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RAS_O17_ORC_RXA_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RAS_O17_ORC_RXA_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RAS_O17_ORC_RXA_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RCI_I05v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	prd []*RCI_I05_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	dg1 []*DG1           `json:"dg_1,omitempty"`
	drg []*DRG           `json:"drg,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	obr []*RCI_I05_OBRv2 `json:"obr,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RCI_I05v2) MSH() *MSH {
	return m.msh
}

func (m *RCI_I05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RCI_I05v2) MSA() *MSA {
	return m.msa
}

func (m *RCI_I05v2) QRD() *QRD {
	return m.qrd
}

func (m *RCI_I05v2) QRF() *QRF {
	return m.qrf
}

func (m *RCI_I05v2) GroupByPRD() []*RCI_I05_PRDv2 {
	return m.prd
}

func (m *RCI_I05v2) PID() *PID {
	return m.pid
}

func (m *RCI_I05v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *RCI_I05v2) AllDRG() []*DRG {
	return m.drg
}

func (m *RCI_I05v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RCI_I05v2) GroupByOBR() []*RCI_I05_OBRv2 {
	return m.obr
}

func (m *RCI_I05v2) AllNTE() []*NTE {
	return m.nte
}

func (m RCI_I05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"prd": m.prd,
		"pid": m.pid,
		"dg1": m.dg1,
		"drg": m.drg,
		"al1": m.al1,
		"obr": m.obr,
		"nte": m.nte,
	}, nil
}

type RCI_I05_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RCI_I05_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RCI_I05_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RCI_I05_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RCI_I05_OBRv2 struct {
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obx []*RCI_I05_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *RCI_I05_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *RCI_I05_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RCI_I05_OBRv2) GroupByOBX() []*RCI_I05_OBR_OBXv2 {
	return m.obx
}

func (m RCI_I05_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type RCI_I05_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RCI_I05_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RCI_I05_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RCI_I05_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RCL_I06v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	prd []*RCL_I06_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	dg1 []*DG1           `json:"dg_1,omitempty"`
	drg []*DRG           `json:"drg,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	dsp []*DSP           `json:"dsp,omitempty"`
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RCL_I06v2) MSH() *MSH {
	return m.msh
}

func (m *RCL_I06v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RCL_I06v2) MSA() *MSA {
	return m.msa
}

func (m *RCL_I06v2) QRD() *QRD {
	return m.qrd
}

func (m *RCL_I06v2) QRF() *QRF {
	return m.qrf
}

func (m *RCL_I06v2) GroupByPRD() []*RCL_I06_PRDv2 {
	return m.prd
}

func (m *RCL_I06v2) PID() *PID {
	return m.pid
}

func (m *RCL_I06v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *RCL_I06v2) AllDRG() []*DRG {
	return m.drg
}

func (m *RCL_I06v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RCL_I06v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RCL_I06v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *RCL_I06v2) DSC() *DSC {
	return m.dsc
}

func (m RCL_I06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"prd": m.prd,
		"pid": m.pid,
		"dg1": m.dg1,
		"drg": m.drg,
		"al1": m.al1,
		"nte": m.nte,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type RCL_I06_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RCL_I06_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RCL_I06_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RCL_I06_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RDE_O01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	pid *RDE_O01_PIDv2   `json:"pid,omitempty"`
	orc []*RDE_O01_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RDE_O01v2) MSH() *MSH {
	return m.msh
}

func (m *RDE_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDE_O01v2) GroupByPID() *RDE_O01_PIDv2 {
	return m.pid
}

func (m *RDE_O01v2) GroupByORC() []*RDE_O01_ORCv2 {
	return m.orc
}

func (m RDE_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RDE_O01_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*RDE_O01_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *RDE_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *RDE_O01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RDE_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDE_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RDE_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *RDE_O01_PIDv2) GroupByIN1() []*RDE_O01_PID_IN1v2 {
	return m.in1
}

func (m *RDE_O01_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *RDE_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m RDE_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type RDE_O01_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *RDE_O01_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *RDE_O01_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *RDE_O01_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m RDE_O01_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type RDE_O01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	rxo *RDE_O01_ORC_RXOv2   `json:"rxo,omitempty"`
	rxe *RXE                 `json:"rxe,omitempty"` // Required
	rxr []*RXR               `json:"rxr,omitempty"` // Required
	rxc []*RXC               `json:"rxc,omitempty"`
	obx []*RDE_O01_ORC_OBXv2 `json:"obx,omitempty"`
	cti []*CTI               `json:"cti,omitempty"`
}

func (m *RDE_O01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RDE_O01_ORCv2) GroupByRXO() *RDE_O01_ORC_RXOv2 {
	return m.rxo
}

func (m *RDE_O01_ORCv2) RXE() *RXE {
	return m.rxe
}

func (m *RDE_O01_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDE_O01_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RDE_O01_ORCv2) GroupByOBX() []*RDE_O01_ORC_OBXv2 {
	return m.obx
}

func (m *RDE_O01_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m RDE_O01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxo": m.rxo,
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
		"cti": m.cti,
	}, nil
}

type RDE_O01_ORC_RXOv2 struct {
	rxo *RXO                   `json:"rxo,omitempty"` // Required
	nte []*NTE                 `json:"nte,omitempty"`
	rxr []*RXR                 `json:"rxr,omitempty"` // Required
	rxc *RDE_O01_ORC_RXO_RXCv2 `json:"rxc,omitempty"`
}

func (m *RDE_O01_ORC_RXOv2) RXO() *RXO {
	return m.rxo
}

func (m *RDE_O01_ORC_RXOv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDE_O01_ORC_RXOv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDE_O01_ORC_RXOv2) GroupByRXC() *RDE_O01_ORC_RXO_RXCv2 {
	return m.rxc
}

func (m RDE_O01_ORC_RXOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RDE_O01_ORC_RXO_RXCv2 struct {
	rxc []*RXC `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDE_O01_ORC_RXO_RXCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RDE_O01_ORC_RXO_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDE_O01_ORC_RXO_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RDE_O01_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDE_O01_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RDE_O01_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDE_O01_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RDE_O11v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *RDE_O11_PIDv2   `json:"pid,omitempty"`
	orc []*RDE_O11_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RDE_O11v2) MSH() *MSH {
	return m.msh
}

func (m *RDE_O11v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RDE_O11v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDE_O11v2) GroupByPID() *RDE_O11_PIDv2 {
	return m.pid
}

func (m *RDE_O11v2) GroupByORC() []*RDE_O11_ORCv2 {
	return m.orc
}

func (m RDE_O11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RDE_O11_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*RDE_O11_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *RDE_O11_PIDv2) PID() *PID {
	return m.pid
}

func (m *RDE_O11_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RDE_O11_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDE_O11_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RDE_O11_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *RDE_O11_PIDv2) GroupByIN1() []*RDE_O11_PID_IN1v2 {
	return m.in1
}

func (m *RDE_O11_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *RDE_O11_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m RDE_O11_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type RDE_O11_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *RDE_O11_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *RDE_O11_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *RDE_O11_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m RDE_O11_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type RDE_O11_ORCv2 struct {
	orc  *ORC                  `json:"orc,omitempty"` // Required
	tq11 []*RDE_O11_ORC_TQ11v2 `json:"tq_11,omitempty"`
	rxo  *RDE_O11_ORC_RXOv2    `json:"rxo,omitempty"`
	rxe  *RXE                  `json:"rxe,omitempty"` // Required
	nte  []*NTE                `json:"nte,omitempty"`
	tq12 []*RDE_O11_ORC_TQ12v2 `json:"tq_12,omitempty"` // Required
	rxr  []*RXR                `json:"rxr,omitempty"`   // Required
	rxc  []*RXC                `json:"rxc,omitempty"`
	obx  []*RDE_O11_ORC_OBXv2  `json:"obx,omitempty"`
	ft1  []*FT1                `json:"ft_1,omitempty"`
	blg  *BLG                  `json:"blg,omitempty"`
	cti  []*CTI                `json:"cti,omitempty"`
}

func (m *RDE_O11_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RDE_O11_ORCv2) GroupByTQ11() []*RDE_O11_ORC_TQ11v2 {
	return m.tq11
}

func (m *RDE_O11_ORCv2) GroupByRXO() *RDE_O11_ORC_RXOv2 {
	return m.rxo
}

func (m *RDE_O11_ORCv2) RXE() *RXE {
	return m.rxe
}

func (m *RDE_O11_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDE_O11_ORCv2) GroupByTQ12() []*RDE_O11_ORC_TQ12v2 {
	return m.tq12
}

func (m *RDE_O11_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDE_O11_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RDE_O11_ORCv2) GroupByOBX() []*RDE_O11_ORC_OBXv2 {
	return m.obx
}

func (m *RDE_O11_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m *RDE_O11_ORCv2) BLG() *BLG {
	return m.blg
}

func (m *RDE_O11_ORCv2) AllCTI() []*CTI {
	return m.cti
}

func (m RDE_O11_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"tq11": m.tq11,
		"rxo":  m.rxo,
		"rxe":  m.rxe,
		"nte":  m.nte,
		"tq12": m.tq12,
		"rxr":  m.rxr,
		"rxc":  m.rxc,
		"obx":  m.obx,
		"ft1":  m.ft1,
		"blg":  m.blg,
		"cti":  m.cti,
	}, nil
}

type RDE_O11_ORC_TQ11v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RDE_O11_ORC_TQ11v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RDE_O11_ORC_TQ11v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RDE_O11_ORC_TQ11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RDE_O11_ORC_RXOv2 struct {
	rxo *RXO                     `json:"rxo,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RDE_O11_ORC_RXO_RXCv2 `json:"rxc,omitempty"`
}

func (m *RDE_O11_ORC_RXOv2) RXO() *RXO {
	return m.rxo
}

func (m *RDE_O11_ORC_RXOv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDE_O11_ORC_RXOv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDE_O11_ORC_RXOv2) GroupByRXC() []*RDE_O11_ORC_RXO_RXCv2 {
	return m.rxc
}

func (m RDE_O11_ORC_RXOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RDE_O11_ORC_RXO_RXCv2 struct {
	rxc *RXC   `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDE_O11_ORC_RXO_RXCv2) RXC() *RXC {
	return m.rxc
}

func (m *RDE_O11_ORC_RXO_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDE_O11_ORC_RXO_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RDE_O11_ORC_TQ12v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RDE_O11_ORC_TQ12v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RDE_O11_ORC_TQ12v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RDE_O11_ORC_TQ12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RDE_O11_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDE_O11_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RDE_O11_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDE_O11_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RDO_O01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	pid *RDO_O01_PIDv2   `json:"pid,omitempty"`
	orc []*RDO_O01_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RDO_O01v2) MSH() *MSH {
	return m.msh
}

func (m *RDO_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDO_O01v2) GroupByPID() *RDO_O01_PIDv2 {
	return m.pid
}

func (m *RDO_O01v2) GroupByORC() []*RDO_O01_ORCv2 {
	return m.orc
}

func (m RDO_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RDO_O01_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	in1 []*RDO_O01_PID_IN1v2 `json:"in_1,omitempty"`
	gt1 *GT1                 `json:"gt_1,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
}

func (m *RDO_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *RDO_O01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RDO_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDO_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RDO_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *RDO_O01_PIDv2) GroupByIN1() []*RDO_O01_PID_IN1v2 {
	return m.in1
}

func (m *RDO_O01_PIDv2) GT1() *GT1 {
	return m.gt1
}

func (m *RDO_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m RDO_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"in1": m.in1,
		"gt1": m.gt1,
		"al1": m.al1,
	}, nil
}

type RDO_O01_PID_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *RDO_O01_PID_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *RDO_O01_PID_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *RDO_O01_PID_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m RDO_O01_PID_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type RDO_O01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	rxo *RXO                 `json:"rxo,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	rxr []*RXR               `json:"rxr,omitempty"` // Required
	rxc *RDO_O01_ORC_RXCv2   `json:"rxc,omitempty"`
	obx []*RDO_O01_ORC_OBXv2 `json:"obx,omitempty"`
	blg *BLG                 `json:"blg,omitempty"`
}

func (m *RDO_O01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RDO_O01_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *RDO_O01_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDO_O01_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDO_O01_ORCv2) GroupByRXC() *RDO_O01_ORC_RXCv2 {
	return m.rxc
}

func (m *RDO_O01_ORCv2) GroupByOBX() []*RDO_O01_ORC_OBXv2 {
	return m.obx
}

func (m *RDO_O01_ORCv2) BLG() *BLG {
	return m.blg
}

func (m RDO_O01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
		"blg": m.blg,
	}, nil
}

type RDO_O01_ORC_RXCv2 struct {
	rxc []*RXC `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDO_O01_ORC_RXCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RDO_O01_ORC_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDO_O01_ORC_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RDO_O01_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDO_O01_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RDO_O01_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDO_O01_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RDR_RDRv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	qrd []*RDR_RDR_QRDv2 `json:"qrd,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RDR_RDRv2) MSH() *MSH {
	return m.msh
}

func (m *RDR_RDRv2) MSA() *MSA {
	return m.msa
}

func (m *RDR_RDRv2) AllERR() []*ERR {
	return m.err
}

func (m *RDR_RDRv2) AllSFT() []*SFT {
	return m.sft
}

func (m *RDR_RDRv2) GroupByQRD() []*RDR_RDR_QRDv2 {
	return m.qrd
}

func (m *RDR_RDRv2) DSC() *DSC {
	return m.dsc
}

func (m RDR_RDRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"qrd": m.qrd,
		"dsc": m.dsc,
	}, nil
}

type RDR_RDR_QRDv2 struct {
	qrd *QRD                 `json:"qrd,omitempty"` // Required
	qrf *QRF                 `json:"qrf,omitempty"`
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RDR_RDR_QRD_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RDR_RDR_QRDv2) QRD() *QRD {
	return m.qrd
}

func (m *RDR_RDR_QRDv2) QRF() *QRF {
	return m.qrf
}

func (m *RDR_RDR_QRDv2) PID() *PID {
	return m.pid
}

func (m *RDR_RDR_QRDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDR_RDR_QRDv2) GroupByORC() []*RDR_RDR_QRD_ORCv2 {
	return m.orc
}

func (m RDR_RDR_QRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RDR_RDR_QRD_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	rxe *RXE                     `json:"rxe,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
	rxd []*RDR_RDR_QRD_ORC_RXDv2 `json:"rxd,omitempty"` // Required
}

func (m *RDR_RDR_QRD_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RDR_RDR_QRD_ORCv2) RXE() *RXE {
	return m.rxe
}

func (m *RDR_RDR_QRD_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDR_RDR_QRD_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RDR_RDR_QRD_ORCv2) GroupByRXD() []*RDR_RDR_QRD_ORC_RXDv2 {
	return m.rxd
}

func (m RDR_RDR_QRD_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"rxd": m.rxd,
	}, nil
}

type RDR_RDR_QRD_ORC_RXDv2 struct {
	rxd *RXD   `json:"rxd,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RDR_RDR_QRD_ORC_RXDv2) RXD() *RXD {
	return m.rxd
}

func (m *RDR_RDR_QRD_ORC_RXDv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDR_RDR_QRD_ORC_RXDv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RDR_RDR_QRD_ORC_RXDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxd": m.rxd,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RDS_O01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	pid *RDS_O01_PIDv2   `json:"pid,omitempty"`
	orc []*RDS_O01_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RDS_O01v2) MSH() *MSH {
	return m.msh
}

func (m *RDS_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDS_O01v2) GroupByPID() *RDS_O01_PIDv2 {
	return m.pid
}

func (m *RDS_O01v2) GroupByORC() []*RDS_O01_ORCv2 {
	return m.orc
}

func (m RDS_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RDS_O01_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
	al1 []*AL1 `json:"al_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *RDS_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *RDS_O01_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RDS_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDS_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RDS_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RDS_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m RDS_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type RDS_O01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	rxo *RDS_O01_ORC_RXOv2   `json:"rxo,omitempty"`
	rxe *RDS_O01_ORC_RXEv2   `json:"rxe,omitempty"`
	rxd *RXD                 `json:"rxd,omitempty"` // Required
	rxr []*RXR               `json:"rxr,omitempty"` // Required
	rxc []*RXC               `json:"rxc,omitempty"`
	obx []*RDS_O01_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *RDS_O01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RDS_O01_ORCv2) GroupByRXO() *RDS_O01_ORC_RXOv2 {
	return m.rxo
}

func (m *RDS_O01_ORCv2) GroupByRXE() *RDS_O01_ORC_RXEv2 {
	return m.rxe
}

func (m *RDS_O01_ORCv2) RXD() *RXD {
	return m.rxd
}

func (m *RDS_O01_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDS_O01_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RDS_O01_ORCv2) GroupByOBX() []*RDS_O01_ORC_OBXv2 {
	return m.obx
}

func (m RDS_O01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxo": m.rxo,
		"rxe": m.rxe,
		"rxd": m.rxd,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
	}, nil
}

type RDS_O01_ORC_RXOv2 struct {
	rxo *RXO                   `json:"rxo,omitempty"` // Required
	nte []*NTE                 `json:"nte,omitempty"` // Required
	rxr []*RXR                 `json:"rxr,omitempty"` // Required
	rxc *RDS_O01_ORC_RXO_RXCv2 `json:"rxc,omitempty"`
}

func (m *RDS_O01_ORC_RXOv2) RXO() *RXO {
	return m.rxo
}

func (m *RDS_O01_ORC_RXOv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDS_O01_ORC_RXOv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDS_O01_ORC_RXOv2) GroupByRXC() *RDS_O01_ORC_RXO_RXCv2 {
	return m.rxc
}

func (m RDS_O01_ORC_RXOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RDS_O01_ORC_RXO_RXCv2 struct {
	rxc []*RXC `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDS_O01_ORC_RXO_RXCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RDS_O01_ORC_RXO_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDS_O01_ORC_RXO_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RDS_O01_ORC_RXEv2 struct {
	rxe *RXE   `json:"rxe,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RDS_O01_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RDS_O01_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDS_O01_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RDS_O01_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RDS_O01_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDS_O01_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RDS_O01_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDS_O01_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RDS_O13v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *RDS_O13_PIDv2   `json:"pid,omitempty"`
	orc []*RDS_O13_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RDS_O13v2) MSH() *MSH {
	return m.msh
}

func (m *RDS_O13v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RDS_O13v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDS_O13v2) GroupByPID() *RDS_O13_PIDv2 {
	return m.pid
}

func (m *RDS_O13v2) GroupByORC() []*RDS_O13_ORCv2 {
	return m.orc
}

func (m RDS_O13v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RDS_O13_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
	al1 []*AL1 `json:"al_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *RDS_O13_PIDv2) PID() *PID {
	return m.pid
}

func (m *RDS_O13_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RDS_O13_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDS_O13_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RDS_O13_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RDS_O13_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m RDS_O13_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type RDS_O13_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*RDS_O13_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RDS_O13_ORC_RXOv2   `json:"rxo,omitempty"`
	rxe *RDS_O13_ORC_RXEv2   `json:"rxe,omitempty"`
	rxd *RXD                 `json:"rxd,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	rxr []*RXR               `json:"rxr,omitempty"` // Required
	rxc []*RXC               `json:"rxc,omitempty"`
	obx []*RDS_O13_ORC_OBXv2 `json:"obx,omitempty"`
	ft1 []*FT1               `json:"ft_1,omitempty"`
}

func (m *RDS_O13_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RDS_O13_ORCv2) GroupByTQ1() []*RDS_O13_ORC_TQ1v2 {
	return m.tq1
}

func (m *RDS_O13_ORCv2) GroupByRXO() *RDS_O13_ORC_RXOv2 {
	return m.rxo
}

func (m *RDS_O13_ORCv2) GroupByRXE() *RDS_O13_ORC_RXEv2 {
	return m.rxe
}

func (m *RDS_O13_ORCv2) RXD() *RXD {
	return m.rxd
}

func (m *RDS_O13_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDS_O13_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDS_O13_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RDS_O13_ORCv2) GroupByOBX() []*RDS_O13_ORC_OBXv2 {
	return m.obx
}

func (m *RDS_O13_ORCv2) AllFT1() []*FT1 {
	return m.ft1
}

func (m RDS_O13_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"rxe": m.rxe,
		"rxd": m.rxd,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
		"ft1": m.ft1,
	}, nil
}

type RDS_O13_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RDS_O13_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RDS_O13_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RDS_O13_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RDS_O13_ORC_RXOv2 struct {
	rxo *RXO                     `json:"rxo,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RDS_O13_ORC_RXO_RXCv2 `json:"rxc,omitempty"`
}

func (m *RDS_O13_ORC_RXOv2) RXO() *RXO {
	return m.rxo
}

func (m *RDS_O13_ORC_RXOv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDS_O13_ORC_RXOv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDS_O13_ORC_RXOv2) GroupByRXC() []*RDS_O13_ORC_RXO_RXCv2 {
	return m.rxc
}

func (m RDS_O13_ORC_RXOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RDS_O13_ORC_RXO_RXCv2 struct {
	rxc *RXC   `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDS_O13_ORC_RXO_RXCv2) RXC() *RXC {
	return m.rxc
}

func (m *RDS_O13_ORC_RXO_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDS_O13_ORC_RXO_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RDS_O13_ORC_RXEv2 struct {
	rxe *RXE                     `json:"rxe,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	tq1 []*RDS_O13_ORC_RXE_TQ1v2 `json:"tq_1,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"`  // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
}

func (m *RDS_O13_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RDS_O13_ORC_RXEv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RDS_O13_ORC_RXEv2) GroupByTQ1() []*RDS_O13_ORC_RXE_TQ1v2 {
	return m.tq1
}

func (m *RDS_O13_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RDS_O13_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RDS_O13_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"nte": m.nte,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RDS_O13_ORC_RXE_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RDS_O13_ORC_RXE_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RDS_O13_ORC_RXE_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RDS_O13_ORC_RXE_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RDS_O13_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RDS_O13_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RDS_O13_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RDS_O13_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RDY_K15v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	dsp []*DSP `json:"dsp,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RDY_K15v2) MSH() *MSH {
	return m.msh
}

func (m *RDY_K15v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RDY_K15v2) MSA() *MSA {
	return m.msa
}

func (m *RDY_K15v2) ERR() *ERR {
	return m.err
}

func (m *RDY_K15v2) QAK() *QAK {
	return m.qak
}

func (m *RDY_K15v2) QPD() *QPD {
	return m.qpd
}

func (m *RDY_K15v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *RDY_K15v2) DSC() *DSC {
	return m.dsc
}

func (m RDY_K15v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type REF_I12v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	rf1 *RF1             `json:"rf_1,omitempty"`
	aut *AUT             `json:"aut,omitempty"` // Required
	ctd *CTD             `json:"ctd,omitempty"`
	prd []*REF_I12_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*REF_I12_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	drg []*DRG           `json:"drg,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	pr1 []*REF_I12_PR1v2 `json:"pr_1,omitempty"`
	obr []*REF_I12_OBRv2 `json:"obr,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *REF_I12v2) MSH() *MSH {
	return m.msh
}

func (m *REF_I12v2) AllSFT() []*SFT {
	return m.sft
}

func (m *REF_I12v2) RF1() *RF1 {
	return m.rf1
}

func (m *REF_I12v2) AUT() *AUT {
	return m.aut
}

func (m *REF_I12v2) CTD() *CTD {
	return m.ctd
}

func (m *REF_I12v2) GroupByPRD() []*REF_I12_PRDv2 {
	return m.prd
}

func (m *REF_I12v2) PID() *PID {
	return m.pid
}

func (m *REF_I12v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *REF_I12v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *REF_I12v2) GroupByIN1() []*REF_I12_IN1v2 {
	return m.in1
}

func (m *REF_I12v2) ACC() *ACC {
	return m.acc
}

func (m *REF_I12v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *REF_I12v2) AllDRG() []*DRG {
	return m.drg
}

func (m *REF_I12v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *REF_I12v2) GroupByPR1() []*REF_I12_PR1v2 {
	return m.pr1
}

func (m *REF_I12v2) GroupByOBR() []*REF_I12_OBRv2 {
	return m.obr
}

func (m *REF_I12v2) PV1() *PV1 {
	return m.pv1
}

func (m *REF_I12v2) PV2() *PV2 {
	return m.pv2
}

func (m *REF_I12v2) AllNTE() []*NTE {
	return m.nte
}

func (m REF_I12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"rf1": m.rf1,
		"aut": m.aut,
		"ctd": m.ctd,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"dg1": m.dg1,
		"drg": m.drg,
		"al1": m.al1,
		"pr1": m.pr1,
		"obr": m.obr,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"nte": m.nte,
	}, nil
}

type REF_I12_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *REF_I12_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *REF_I12_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m REF_I12_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type REF_I12_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *REF_I12_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *REF_I12_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *REF_I12_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m REF_I12_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type REF_I12_PR1v2 struct {
	pr1 *PR1 `json:"pr_1,omitempty"` // Required
	aut *AUT `json:"aut,omitempty"`  // Required
	ctd *CTD `json:"ctd,omitempty"`
}

func (m *REF_I12_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *REF_I12_PR1v2) AUT() *AUT {
	return m.aut
}

func (m *REF_I12_PR1v2) CTD() *CTD {
	return m.ctd
}

func (m REF_I12_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"aut": m.aut,
		"ctd": m.ctd,
	}, nil
}

type REF_I12_OBRv2 struct {
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obx []*REF_I12_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *REF_I12_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *REF_I12_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *REF_I12_OBRv2) GroupByOBX() []*REF_I12_OBR_OBXv2 {
	return m.obx
}

func (m REF_I12_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type REF_I12_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *REF_I12_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *REF_I12_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m REF_I12_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RER_RERv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	qrd []*RER_RER_QRDv2 `json:"qrd,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RER_RERv2) MSH() *MSH {
	return m.msh
}

func (m *RER_RERv2) MSA() *MSA {
	return m.msa
}

func (m *RER_RERv2) AllERR() []*ERR {
	return m.err
}

func (m *RER_RERv2) AllSFT() []*SFT {
	return m.sft
}

func (m *RER_RERv2) GroupByQRD() []*RER_RER_QRDv2 {
	return m.qrd
}

func (m *RER_RERv2) DSC() *DSC {
	return m.dsc
}

func (m RER_RERv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"qrd": m.qrd,
		"dsc": m.dsc,
	}, nil
}

type RER_RER_QRDv2 struct {
	qrd *QRD                 `json:"qrd,omitempty"` // Required
	qrf *QRF                 `json:"qrf,omitempty"`
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RER_RER_QRD_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RER_RER_QRDv2) QRD() *QRD {
	return m.qrd
}

func (m *RER_RER_QRDv2) QRF() *QRF {
	return m.qrf
}

func (m *RER_RER_QRDv2) PID() *PID {
	return m.pid
}

func (m *RER_RER_QRDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RER_RER_QRDv2) GroupByORC() []*RER_RER_QRD_ORCv2 {
	return m.orc
}

func (m RER_RER_QRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RER_RER_QRD_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	rxe *RXE   `json:"rxe,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RER_RER_QRD_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RER_RER_QRD_ORCv2) RXE() *RXE {
	return m.rxe
}

func (m *RER_RER_QRD_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RER_RER_QRD_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RER_RER_QRD_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RGR_RGRv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	qrd []*RGR_RGR_QRDv2 `json:"qrd,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RGR_RGRv2) MSH() *MSH {
	return m.msh
}

func (m *RGR_RGRv2) MSA() *MSA {
	return m.msa
}

func (m *RGR_RGRv2) AllERR() []*ERR {
	return m.err
}

func (m *RGR_RGRv2) AllSFT() []*SFT {
	return m.sft
}

func (m *RGR_RGRv2) GroupByQRD() []*RGR_RGR_QRDv2 {
	return m.qrd
}

func (m *RGR_RGRv2) DSC() *DSC {
	return m.dsc
}

func (m RGR_RGRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"qrd": m.qrd,
		"dsc": m.dsc,
	}, nil
}

type RGR_RGR_QRDv2 struct {
	qrd *QRD                 `json:"qrd,omitempty"` // Required
	qrf *QRF                 `json:"qrf,omitempty"`
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RGR_RGR_QRD_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RGR_RGR_QRDv2) QRD() *QRD {
	return m.qrd
}

func (m *RGR_RGR_QRDv2) QRF() *QRF {
	return m.qrf
}

func (m *RGR_RGR_QRDv2) PID() *PID {
	return m.pid
}

func (m *RGR_RGR_QRDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RGR_RGR_QRDv2) GroupByORC() []*RGR_RGR_QRD_ORCv2 {
	return m.orc
}

func (m RGR_RGR_QRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RGR_RGR_QRD_ORCv2 struct {
	orc *ORC                   `json:"orc,omitempty"` // Required
	rxe *RGR_RGR_QRD_ORC_RXEv2 `json:"rxe,omitempty"`
	rxg []*RXG                 `json:"rxg,omitempty"` // Required
	rxr []*RXR                 `json:"rxr,omitempty"` // Required
	rxc []*RXC                 `json:"rxc,omitempty"`
}

func (m *RGR_RGR_QRD_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RGR_RGR_QRD_ORCv2) GroupByRXE() *RGR_RGR_QRD_ORC_RXEv2 {
	return m.rxe
}

func (m *RGR_RGR_QRD_ORCv2) AllRXG() []*RXG {
	return m.rxg
}

func (m *RGR_RGR_QRD_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RGR_RGR_QRD_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RGR_RGR_QRD_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxe": m.rxe,
		"rxg": m.rxg,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RGR_RGR_QRD_ORC_RXEv2 struct {
	rxe *RXE   `json:"rxe,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RGR_RGR_QRD_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RGR_RGR_QRD_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RGR_RGR_QRD_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RGR_RGR_QRD_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RGV_O01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	pid *RGV_O01_PIDv2   `json:"pid,omitempty"`
	orc []*RGV_O01_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RGV_O01v2) MSH() *MSH {
	return m.msh
}

func (m *RGV_O01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RGV_O01v2) GroupByPID() *RGV_O01_PIDv2 {
	return m.pid
}

func (m *RGV_O01v2) GroupByORC() []*RGV_O01_ORCv2 {
	return m.orc
}

func (m RGV_O01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RGV_O01_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
	al1 []*AL1 `json:"al_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *RGV_O01_PIDv2) PID() *PID {
	return m.pid
}

func (m *RGV_O01_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RGV_O01_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RGV_O01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RGV_O01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m RGV_O01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type RGV_O01_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	rxo *RXO                 `json:"rxo,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"` // Required
	rxr []*RXR               `json:"rxr,omitempty"` // Required
	rxc *RGV_O01_ORC_RXCv2   `json:"rxc,omitempty"`
	rxe *RGV_O01_ORC_RXEv2   `json:"rxe,omitempty"`
	rxg []*RGV_O01_ORC_RXGv2 `json:"rxg,omitempty"` // Required
}

func (m *RGV_O01_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RGV_O01_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *RGV_O01_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RGV_O01_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RGV_O01_ORCv2) GroupByRXC() *RGV_O01_ORC_RXCv2 {
	return m.rxc
}

func (m *RGV_O01_ORCv2) GroupByRXE() *RGV_O01_ORC_RXEv2 {
	return m.rxe
}

func (m *RGV_O01_ORCv2) GroupByRXG() []*RGV_O01_ORC_RXGv2 {
	return m.rxg
}

func (m RGV_O01_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"rxe": m.rxe,
		"rxg": m.rxg,
	}, nil
}

type RGV_O01_ORC_RXCv2 struct {
	rxc []*RXC `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RGV_O01_ORC_RXCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RGV_O01_ORC_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RGV_O01_ORC_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RGV_O01_ORC_RXEv2 struct {
	rxe *RXE   `json:"rxe,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RGV_O01_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RGV_O01_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RGV_O01_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RGV_O01_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RGV_O01_ORC_RXGv2 struct {
	rxg *RXG                     `json:"rxg,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
	obx []*RGV_O01_ORC_RXG_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *RGV_O01_ORC_RXGv2) RXG() *RXG {
	return m.rxg
}

func (m *RGV_O01_ORC_RXGv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RGV_O01_ORC_RXGv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RGV_O01_ORC_RXGv2) GroupByOBX() []*RGV_O01_ORC_RXG_OBXv2 {
	return m.obx
}

func (m RGV_O01_ORC_RXGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxg": m.rxg,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
	}, nil
}

type RGV_O01_ORC_RXG_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RGV_O01_ORC_RXG_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RGV_O01_ORC_RXG_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RGV_O01_ORC_RXG_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RGV_O15v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid *RGV_O15_PIDv2   `json:"pid,omitempty"`
	orc []*RGV_O15_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RGV_O15v2) MSH() *MSH {
	return m.msh
}

func (m *RGV_O15v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RGV_O15v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RGV_O15v2) GroupByPID() *RGV_O15_PIDv2 {
	return m.pid
}

func (m *RGV_O15v2) GroupByORC() []*RGV_O15_ORCv2 {
	return m.orc
}

func (m RGV_O15v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
		"orc": m.orc,
	}, nil
}

type RGV_O15_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
	al1 []*AL1 `json:"al_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"` // Required
	pv2 *PV2   `json:"pv_2,omitempty"`
}

func (m *RGV_O15_PIDv2) PID() *PID {
	return m.pid
}

func (m *RGV_O15_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RGV_O15_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RGV_O15_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RGV_O15_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m RGV_O15_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
	}, nil
}

type RGV_O15_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*RGV_O15_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RXO                 `json:"rxo,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"` // Required
	rxr []*RXR               `json:"rxr,omitempty"` // Required
	rxc []*RGV_O15_ORC_RXCv2 `json:"rxc,omitempty"`
	rxe *RGV_O15_ORC_RXEv2   `json:"rxe,omitempty"`
	rxg []*RGV_O15_ORC_RXGv2 `json:"rxg,omitempty"` // Required
}

func (m *RGV_O15_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RGV_O15_ORCv2) GroupByTQ1() []*RGV_O15_ORC_TQ1v2 {
	return m.tq1
}

func (m *RGV_O15_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *RGV_O15_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RGV_O15_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RGV_O15_ORCv2) GroupByRXC() []*RGV_O15_ORC_RXCv2 {
	return m.rxc
}

func (m *RGV_O15_ORCv2) GroupByRXE() *RGV_O15_ORC_RXEv2 {
	return m.rxe
}

func (m *RGV_O15_ORCv2) GroupByRXG() []*RGV_O15_ORC_RXGv2 {
	return m.rxg
}

func (m RGV_O15_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"rxe": m.rxe,
		"rxg": m.rxg,
	}, nil
}

type RGV_O15_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RGV_O15_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RGV_O15_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RGV_O15_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RGV_O15_ORC_RXCv2 struct {
	rxc *RXC   `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RGV_O15_ORC_RXCv2) RXC() *RXC {
	return m.rxc
}

func (m *RGV_O15_ORC_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RGV_O15_ORC_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RGV_O15_ORC_RXEv2 struct {
	rxe *RXE                     `json:"rxe,omitempty"`  // Required
	tq1 []*RGV_O15_ORC_RXE_TQ1v2 `json:"tq_1,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"`  // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
}

func (m *RGV_O15_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RGV_O15_ORC_RXEv2) GroupByTQ1() []*RGV_O15_ORC_RXE_TQ1v2 {
	return m.tq1
}

func (m *RGV_O15_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RGV_O15_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RGV_O15_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RGV_O15_ORC_RXE_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RGV_O15_ORC_RXE_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RGV_O15_ORC_RXE_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RGV_O15_ORC_RXE_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RGV_O15_ORC_RXGv2 struct {
	rxg *RXG                     `json:"rxg,omitempty"`  // Required
	tq1 []*RGV_O15_ORC_RXG_TQ1v2 `json:"tq_1,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"`  // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
	obx []*RGV_O15_ORC_RXG_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *RGV_O15_ORC_RXGv2) RXG() *RXG {
	return m.rxg
}

func (m *RGV_O15_ORC_RXGv2) GroupByTQ1() []*RGV_O15_ORC_RXG_TQ1v2 {
	return m.tq1
}

func (m *RGV_O15_ORC_RXGv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RGV_O15_ORC_RXGv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RGV_O15_ORC_RXGv2) GroupByOBX() []*RGV_O15_ORC_RXG_OBXv2 {
	return m.obx
}

func (m RGV_O15_ORC_RXGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxg": m.rxg,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
	}, nil
}

type RGV_O15_ORC_RXG_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RGV_O15_ORC_RXG_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RGV_O15_ORC_RXG_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RGV_O15_ORC_RXG_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RGV_O15_ORC_RXG_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RGV_O15_ORC_RXG_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RGV_O15_ORC_RXG_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RGV_O15_ORC_RXG_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type ROR_RORv2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	qrd []*ROR_ROR_QRDv2 `json:"qrd,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *ROR_RORv2) MSH() *MSH {
	return m.msh
}

func (m *ROR_RORv2) MSA() *MSA {
	return m.msa
}

func (m *ROR_RORv2) AllERR() []*ERR {
	return m.err
}

func (m *ROR_RORv2) AllSFT() []*SFT {
	return m.sft
}

func (m *ROR_RORv2) GroupByQRD() []*ROR_ROR_QRDv2 {
	return m.qrd
}

func (m *ROR_RORv2) DSC() *DSC {
	return m.dsc
}

func (m ROR_RORv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"qrd": m.qrd,
		"dsc": m.dsc,
	}, nil
}

type ROR_ROR_QRDv2 struct {
	qrd *QRD                 `json:"qrd,omitempty"` // Required
	qrf *QRF                 `json:"qrf,omitempty"`
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*ROR_ROR_QRD_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *ROR_ROR_QRDv2) QRD() *QRD {
	return m.qrd
}

func (m *ROR_ROR_QRDv2) QRF() *QRF {
	return m.qrf
}

func (m *ROR_ROR_QRDv2) PID() *PID {
	return m.pid
}

func (m *ROR_ROR_QRDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *ROR_ROR_QRDv2) GroupByORC() []*ROR_ROR_QRD_ORCv2 {
	return m.orc
}

func (m ROR_ROR_QRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type ROR_ROR_QRD_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	rxo *RXO   `json:"rxo,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *ROR_ROR_QRD_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *ROR_ROR_QRD_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *ROR_ROR_QRD_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *ROR_ROR_QRD_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m ROR_ROR_QRD_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxo": m.rxo,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RPA_I08v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	rf1 *RF1             `json:"rf_1,omitempty"`
	aut *AUT             `json:"aut,omitempty"` // Required
	ctd *CTD             `json:"ctd,omitempty"`
	prd []*RPA_I08_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*RPA_I08_IN1v2 `json:"in_1,omitempty"`
	acc *ACC             `json:"acc,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	drg []*DRG           `json:"drg,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	pr1 []*RPA_I08_PR1v2 `json:"pr_1,omitempty"` // Required
	obr []*RPA_I08_OBRv2 `json:"obr,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RPA_I08v2) MSH() *MSH {
	return m.msh
}

func (m *RPA_I08v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RPA_I08v2) MSA() *MSA {
	return m.msa
}

func (m *RPA_I08v2) RF1() *RF1 {
	return m.rf1
}

func (m *RPA_I08v2) AUT() *AUT {
	return m.aut
}

func (m *RPA_I08v2) CTD() *CTD {
	return m.ctd
}

func (m *RPA_I08v2) GroupByPRD() []*RPA_I08_PRDv2 {
	return m.prd
}

func (m *RPA_I08v2) PID() *PID {
	return m.pid
}

func (m *RPA_I08v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RPA_I08v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *RPA_I08v2) GroupByIN1() []*RPA_I08_IN1v2 {
	return m.in1
}

func (m *RPA_I08v2) ACC() *ACC {
	return m.acc
}

func (m *RPA_I08v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *RPA_I08v2) AllDRG() []*DRG {
	return m.drg
}

func (m *RPA_I08v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RPA_I08v2) GroupByPR1() []*RPA_I08_PR1v2 {
	return m.pr1
}

func (m *RPA_I08v2) GroupByOBR() []*RPA_I08_OBRv2 {
	return m.obr
}

func (m *RPA_I08v2) PV1() *PV1 {
	return m.pv1
}

func (m *RPA_I08v2) PV2() *PV2 {
	return m.pv2
}

func (m *RPA_I08v2) AllNTE() []*NTE {
	return m.nte
}

func (m RPA_I08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"rf1": m.rf1,
		"aut": m.aut,
		"ctd": m.ctd,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"dg1": m.dg1,
		"drg": m.drg,
		"al1": m.al1,
		"pr1": m.pr1,
		"obr": m.obr,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"nte": m.nte,
	}, nil
}

type RPA_I08_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RPA_I08_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RPA_I08_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RPA_I08_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RPA_I08_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *RPA_I08_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *RPA_I08_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *RPA_I08_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m RPA_I08_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type RPA_I08_PR1v2 struct {
	pr1 *PR1 `json:"pr_1,omitempty"` // Required
	aut *AUT `json:"aut,omitempty"`  // Required
	ctd *CTD `json:"ctd,omitempty"`
}

func (m *RPA_I08_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *RPA_I08_PR1v2) AUT() *AUT {
	return m.aut
}

func (m *RPA_I08_PR1v2) CTD() *CTD {
	return m.ctd
}

func (m RPA_I08_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"aut": m.aut,
		"ctd": m.ctd,
	}, nil
}

type RPA_I08_OBRv2 struct {
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obx []*RPA_I08_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *RPA_I08_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *RPA_I08_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RPA_I08_OBRv2) GroupByOBX() []*RPA_I08_OBR_OBXv2 {
	return m.obx
}

func (m RPA_I08_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type RPA_I08_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RPA_I08_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RPA_I08_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RPA_I08_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RPI_I01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	prd []*RPI_I01_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*RPI_I01_IN1v2 `json:"in_1,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RPI_I01v2) MSH() *MSH {
	return m.msh
}

func (m *RPI_I01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RPI_I01v2) MSA() *MSA {
	return m.msa
}

func (m *RPI_I01v2) GroupByPRD() []*RPI_I01_PRDv2 {
	return m.prd
}

func (m *RPI_I01v2) PID() *PID {
	return m.pid
}

func (m *RPI_I01v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RPI_I01v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *RPI_I01v2) GroupByIN1() []*RPI_I01_IN1v2 {
	return m.in1
}

func (m *RPI_I01v2) AllNTE() []*NTE {
	return m.nte
}

func (m RPI_I01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"in1": m.in1,
		"nte": m.nte,
	}, nil
}

type RPI_I01_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RPI_I01_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RPI_I01_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RPI_I01_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RPI_I01_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *RPI_I01_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *RPI_I01_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *RPI_I01_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m RPI_I01_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type RPI_I04v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	prd []*RPI_I04_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*RPI_I04_IN1v2 `json:"in_1,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RPI_I04v2) MSH() *MSH {
	return m.msh
}

func (m *RPI_I04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RPI_I04v2) MSA() *MSA {
	return m.msa
}

func (m *RPI_I04v2) GroupByPRD() []*RPI_I04_PRDv2 {
	return m.prd
}

func (m *RPI_I04v2) PID() *PID {
	return m.pid
}

func (m *RPI_I04v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RPI_I04v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *RPI_I04v2) GroupByIN1() []*RPI_I04_IN1v2 {
	return m.in1
}

func (m *RPI_I04v2) AllNTE() []*NTE {
	return m.nte
}

func (m RPI_I04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"in1": m.in1,
		"nte": m.nte,
	}, nil
}

type RPI_I04_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RPI_I04_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RPI_I04_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RPI_I04_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RPI_I04_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *RPI_I04_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *RPI_I04_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *RPI_I04_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m RPI_I04_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type RPL_I02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	prd []*RPL_I02_PRDv2 `json:"prd,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
	dsp []*DSP           `json:"dsp,omitempty"`
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RPL_I02v2) MSH() *MSH {
	return m.msh
}

func (m *RPL_I02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RPL_I02v2) MSA() *MSA {
	return m.msa
}

func (m *RPL_I02v2) GroupByPRD() []*RPL_I02_PRDv2 {
	return m.prd
}

func (m *RPL_I02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RPL_I02v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *RPL_I02v2) DSC() *DSC {
	return m.dsc
}

func (m RPL_I02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"prd": m.prd,
		"nte": m.nte,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type RPL_I02_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RPL_I02_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RPL_I02_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RPL_I02_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RPR_I03v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	prd []*RPR_I03_PRDv2 `json:"prd,omitempty"` // Required
	pid []*PID           `json:"pid,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RPR_I03v2) MSH() *MSH {
	return m.msh
}

func (m *RPR_I03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RPR_I03v2) MSA() *MSA {
	return m.msa
}

func (m *RPR_I03v2) GroupByPRD() []*RPR_I03_PRDv2 {
	return m.prd
}

func (m *RPR_I03v2) AllPID() []*PID {
	return m.pid
}

func (m *RPR_I03v2) AllNTE() []*NTE {
	return m.nte
}

func (m RPR_I03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"prd": m.prd,
		"pid": m.pid,
		"nte": m.nte,
	}, nil
}

type RPR_I03_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RPR_I03_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RPR_I03_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RPR_I03_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RQA_I08v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	rf1 *RF1             `json:"rf_1,omitempty"`
	aut *AUT             `json:"aut,omitempty"` // Required
	ctd *CTD             `json:"ctd,omitempty"`
	prd []*RQA_I08_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*RQA_I08_IN1v2 `json:"in_1,omitempty"` // Required
	acc *ACC             `json:"acc,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	drg []*DRG           `json:"drg,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	pr1 []*RQA_I08_PR1v2 `json:"pr_1,omitempty"`
	obr []*RQA_I08_OBRv2 `json:"obr,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RQA_I08v2) MSH() *MSH {
	return m.msh
}

func (m *RQA_I08v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RQA_I08v2) RF1() *RF1 {
	return m.rf1
}

func (m *RQA_I08v2) AUT() *AUT {
	return m.aut
}

func (m *RQA_I08v2) CTD() *CTD {
	return m.ctd
}

func (m *RQA_I08v2) GroupByPRD() []*RQA_I08_PRDv2 {
	return m.prd
}

func (m *RQA_I08v2) PID() *PID {
	return m.pid
}

func (m *RQA_I08v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RQA_I08v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *RQA_I08v2) GroupByIN1() []*RQA_I08_IN1v2 {
	return m.in1
}

func (m *RQA_I08v2) ACC() *ACC {
	return m.acc
}

func (m *RQA_I08v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *RQA_I08v2) AllDRG() []*DRG {
	return m.drg
}

func (m *RQA_I08v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RQA_I08v2) GroupByPR1() []*RQA_I08_PR1v2 {
	return m.pr1
}

func (m *RQA_I08v2) GroupByOBR() []*RQA_I08_OBRv2 {
	return m.obr
}

func (m *RQA_I08v2) PV1() *PV1 {
	return m.pv1
}

func (m *RQA_I08v2) PV2() *PV2 {
	return m.pv2
}

func (m *RQA_I08v2) AllNTE() []*NTE {
	return m.nte
}

func (m RQA_I08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"rf1": m.rf1,
		"aut": m.aut,
		"ctd": m.ctd,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"in1": m.in1,
		"acc": m.acc,
		"dg1": m.dg1,
		"drg": m.drg,
		"al1": m.al1,
		"pr1": m.pr1,
		"obr": m.obr,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"nte": m.nte,
	}, nil
}

type RQA_I08_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RQA_I08_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RQA_I08_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RQA_I08_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RQA_I08_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *RQA_I08_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *RQA_I08_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *RQA_I08_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m RQA_I08_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type RQA_I08_PR1v2 struct {
	pr1 *PR1 `json:"pr_1,omitempty"` // Required
	aut *AUT `json:"aut,omitempty"`  // Required
	ctd *CTD `json:"ctd,omitempty"`
}

func (m *RQA_I08_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *RQA_I08_PR1v2) AUT() *AUT {
	return m.aut
}

func (m *RQA_I08_PR1v2) CTD() *CTD {
	return m.ctd
}

func (m RQA_I08_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"aut": m.aut,
		"ctd": m.ctd,
	}, nil
}

type RQA_I08_OBRv2 struct {
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obx []*RQA_I08_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *RQA_I08_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *RQA_I08_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RQA_I08_OBRv2) GroupByOBX() []*RQA_I08_OBR_OBXv2 {
	return m.obx
}

func (m RQA_I08_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type RQA_I08_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RQA_I08_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RQA_I08_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RQA_I08_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RQC_I05v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	prd []*RQC_I05_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RQC_I05v2) MSH() *MSH {
	return m.msh
}

func (m *RQC_I05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RQC_I05v2) QRD() *QRD {
	return m.qrd
}

func (m *RQC_I05v2) QRF() *QRF {
	return m.qrf
}

func (m *RQC_I05v2) GroupByPRD() []*RQC_I05_PRDv2 {
	return m.prd
}

func (m *RQC_I05v2) PID() *PID {
	return m.pid
}

func (m *RQC_I05v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RQC_I05v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *RQC_I05v2) AllNTE() []*NTE {
	return m.nte
}

func (m RQC_I05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"nte": m.nte,
	}, nil
}

type RQC_I05_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RQC_I05_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RQC_I05_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RQC_I05_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RQC_I06v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	prd []*RQC_I06_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 *GT1             `json:"gt_1,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RQC_I06v2) MSH() *MSH {
	return m.msh
}

func (m *RQC_I06v2) QRD() *QRD {
	return m.qrd
}

func (m *RQC_I06v2) QRF() *QRF {
	return m.qrf
}

func (m *RQC_I06v2) GroupByPRD() []*RQC_I06_PRDv2 {
	return m.prd
}

func (m *RQC_I06v2) PID() *PID {
	return m.pid
}

func (m *RQC_I06v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RQC_I06v2) GT1() *GT1 {
	return m.gt1
}

func (m *RQC_I06v2) AllNTE() []*NTE {
	return m.nte
}

func (m RQC_I06v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"nte": m.nte,
	}, nil
}

type RQC_I06_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RQC_I06_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RQC_I06_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RQC_I06_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RQI_I01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	prd []*RQI_I01_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*RQI_I01_IN1v2 `json:"in_1,omitempty"` // Required
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RQI_I01v2) MSH() *MSH {
	return m.msh
}

func (m *RQI_I01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RQI_I01v2) GroupByPRD() []*RQI_I01_PRDv2 {
	return m.prd
}

func (m *RQI_I01v2) PID() *PID {
	return m.pid
}

func (m *RQI_I01v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RQI_I01v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *RQI_I01v2) GroupByIN1() []*RQI_I01_IN1v2 {
	return m.in1
}

func (m *RQI_I01v2) AllNTE() []*NTE {
	return m.nte
}

func (m RQI_I01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"in1": m.in1,
		"nte": m.nte,
	}, nil
}

type RQI_I01_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RQI_I01_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RQI_I01_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RQI_I01_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RQI_I01_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *RQI_I01_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *RQI_I01_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *RQI_I01_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m RQI_I01_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type RQP_I04v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	prd []*RQP_I04_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	nk1 []*NK1           `json:"nk_1,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RQP_I04v2) MSH() *MSH {
	return m.msh
}

func (m *RQP_I04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RQP_I04v2) GroupByPRD() []*RQP_I04_PRDv2 {
	return m.prd
}

func (m *RQP_I04v2) PID() *PID {
	return m.pid
}

func (m *RQP_I04v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RQP_I04v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *RQP_I04v2) AllNTE() []*NTE {
	return m.nte
}

func (m RQP_I04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"prd": m.prd,
		"pid": m.pid,
		"nk1": m.nk1,
		"gt1": m.gt1,
		"nte": m.nte,
	}, nil
}

type RQP_I04_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RQP_I04_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RQP_I04_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RQP_I04_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RQQ_Q01v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	erq *ERQ `json:"erq,omitempty"` // Required
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *RQQ_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *RQQ_Q01v2) ERQ() *ERQ {
	return m.erq
}

func (m *RQQ_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m RQQ_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"erq": m.erq,
		"dsc": m.dsc,
	}, nil
}

type RQQ_Q09v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	erq *ERQ   `json:"erq,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RQQ_Q09v2) MSH() *MSH {
	return m.msh
}

func (m *RQQ_Q09v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RQQ_Q09v2) ERQ() *ERQ {
	return m.erq
}

func (m *RQQ_Q09v2) DSC() *DSC {
	return m.dsc
}

func (m RQQ_Q09v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"erq": m.erq,
		"dsc": m.dsc,
	}, nil
}

type RRA_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err *ERR           `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRA_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *RRA_O02v2) MSH() *MSH {
	return m.msh
}

func (m *RRA_O02v2) MSA() *MSA {
	return m.msa
}

func (m *RRA_O02v2) ERR() *ERR {
	return m.err
}

func (m *RRA_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRA_O02v2) GroupByPID() *RRA_O02_PIDv2 {
	return m.pid
}

func (m RRA_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRA_O02_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRA_O02_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRA_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRA_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRA_O02_PIDv2) GroupByORC() []*RRA_O02_PID_ORCv2 {
	return m.orc
}

func (m RRA_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRA_O02_PID_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	rxa []*RXA `json:"rxa,omitempty"` // Required
	rxr *RXR   `json:"rxr,omitempty"` // Required
}

func (m *RRA_O02_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRA_O02_PID_ORCv2) AllRXA() []*RXA {
	return m.rxa
}

func (m *RRA_O02_PID_ORCv2) RXR() *RXR {
	return m.rxr
}

func (m RRA_O02_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxa": m.rxa,
		"rxr": m.rxr,
	}, nil
}

type RRA_O18v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRA_O18_PIDv2 `json:"pid,omitempty"`
}

func (m *RRA_O18v2) MSH() *MSH {
	return m.msh
}

func (m *RRA_O18v2) MSA() *MSA {
	return m.msa
}

func (m *RRA_O18v2) AllERR() []*ERR {
	return m.err
}

func (m *RRA_O18v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RRA_O18v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRA_O18v2) GroupByPID() *RRA_O18_PIDv2 {
	return m.pid
}

func (m RRA_O18v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRA_O18_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRA_O18_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRA_O18_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRA_O18_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRA_O18_PIDv2) GroupByORC() []*RRA_O18_PID_ORCv2 {
	return m.orc
}

func (m RRA_O18_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRA_O18_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*RRA_O18_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxa []*RXA                   `json:"rxa,omitempty"` // Required
	rxr *RXR                     `json:"rxr,omitempty"` // Required
}

func (m *RRA_O18_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRA_O18_PID_ORCv2) GroupByTQ1() []*RRA_O18_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *RRA_O18_PID_ORCv2) AllRXA() []*RXA {
	return m.rxa
}

func (m *RRA_O18_PID_ORCv2) RXR() *RXR {
	return m.rxr
}

func (m RRA_O18_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxa": m.rxa,
		"rxr": m.rxr,
	}, nil
}

type RRA_O18_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RRA_O18_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RRA_O18_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RRA_O18_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RRD_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err *ERR           `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRD_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *RRD_O02v2) MSH() *MSH {
	return m.msh
}

func (m *RRD_O02v2) MSA() *MSA {
	return m.msa
}

func (m *RRD_O02v2) ERR() *ERR {
	return m.err
}

func (m *RRD_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRD_O02v2) GroupByPID() *RRD_O02_PIDv2 {
	return m.pid
}

func (m RRD_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRD_O02_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRD_O02_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRD_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRD_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRD_O02_PIDv2) GroupByORC() []*RRD_O02_PID_ORCv2 {
	return m.orc
}

func (m RRD_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRD_O02_PID_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	rxd *RXD   `json:"rxd,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RRD_O02_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRD_O02_PID_ORCv2) RXD() *RXD {
	return m.rxd
}

func (m *RRD_O02_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RRD_O02_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RRD_O02_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxd": m.rxd,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RRD_O14v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRD_O14_PIDv2 `json:"pid,omitempty"`
}

func (m *RRD_O14v2) MSH() *MSH {
	return m.msh
}

func (m *RRD_O14v2) MSA() *MSA {
	return m.msa
}

func (m *RRD_O14v2) AllERR() []*ERR {
	return m.err
}

func (m *RRD_O14v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RRD_O14v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRD_O14v2) GroupByPID() *RRD_O14_PIDv2 {
	return m.pid
}

func (m RRD_O14v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRD_O14_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRD_O14_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRD_O14_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRD_O14_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRD_O14_PIDv2) GroupByORC() []*RRD_O14_PID_ORCv2 {
	return m.orc
}

func (m RRD_O14_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRD_O14_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*RRD_O14_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxd *RXD                     `json:"rxd,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
}

func (m *RRD_O14_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRD_O14_PID_ORCv2) GroupByTQ1() []*RRD_O14_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *RRD_O14_PID_ORCv2) RXD() *RXD {
	return m.rxd
}

func (m *RRD_O14_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRD_O14_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RRD_O14_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RRD_O14_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxd": m.rxd,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RRD_O14_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RRD_O14_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RRD_O14_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RRD_O14_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RRE_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err *ERR           `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRE_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *RRE_O02v2) MSH() *MSH {
	return m.msh
}

func (m *RRE_O02v2) MSA() *MSA {
	return m.msa
}

func (m *RRE_O02v2) ERR() *ERR {
	return m.err
}

func (m *RRE_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRE_O02v2) GroupByPID() *RRE_O02_PIDv2 {
	return m.pid
}

func (m RRE_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRE_O02_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRE_O02_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRE_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRE_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRE_O02_PIDv2) GroupByORC() []*RRE_O02_PID_ORCv2 {
	return m.orc
}

func (m RRE_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRE_O02_PID_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	rxe *RXE   `json:"rxe,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RRE_O02_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRE_O02_PID_ORCv2) RXE() *RXE {
	return m.rxe
}

func (m *RRE_O02_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RRE_O02_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RRE_O02_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxe": m.rxe,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RRE_O12v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRE_O12_PIDv2 `json:"pid,omitempty"`
}

func (m *RRE_O12v2) MSH() *MSH {
	return m.msh
}

func (m *RRE_O12v2) MSA() *MSA {
	return m.msa
}

func (m *RRE_O12v2) AllERR() []*ERR {
	return m.err
}

func (m *RRE_O12v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RRE_O12v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRE_O12v2) GroupByPID() *RRE_O12_PIDv2 {
	return m.pid
}

func (m RRE_O12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRE_O12_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRE_O12_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRE_O12_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRE_O12_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRE_O12_PIDv2) GroupByORC() []*RRE_O12_PID_ORCv2 {
	return m.orc
}

func (m RRE_O12_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRE_O12_PID_ORCv2 struct {
	orc  *ORC                      `json:"orc,omitempty"` // Required
	tq11 []*RRE_O12_PID_ORC_TQ11v2 `json:"tq_11,omitempty"`
	rxe  *RXE                      `json:"rxe,omitempty"`   // Required
	tq12 []*RRE_O12_PID_ORC_TQ12v2 `json:"tq_12,omitempty"` // Required
	rxr  []*RXR                    `json:"rxr,omitempty"`   // Required
	rxc  []*RXC                    `json:"rxc,omitempty"`
}

func (m *RRE_O12_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRE_O12_PID_ORCv2) GroupByTQ11() []*RRE_O12_PID_ORC_TQ11v2 {
	return m.tq11
}

func (m *RRE_O12_PID_ORCv2) RXE() *RXE {
	return m.rxe
}

func (m *RRE_O12_PID_ORCv2) GroupByTQ12() []*RRE_O12_PID_ORC_TQ12v2 {
	return m.tq12
}

func (m *RRE_O12_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RRE_O12_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RRE_O12_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"tq11": m.tq11,
		"rxe":  m.rxe,
		"tq12": m.tq12,
		"rxr":  m.rxr,
		"rxc":  m.rxc,
	}, nil
}

type RRE_O12_PID_ORC_TQ11v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RRE_O12_PID_ORC_TQ11v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RRE_O12_PID_ORC_TQ11v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RRE_O12_PID_ORC_TQ11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RRE_O12_PID_ORC_TQ12v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RRE_O12_PID_ORC_TQ12v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RRE_O12_PID_ORC_TQ12v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RRE_O12_PID_ORC_TQ12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RRG_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err *ERR           `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRG_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *RRG_O02v2) MSH() *MSH {
	return m.msh
}

func (m *RRG_O02v2) MSA() *MSA {
	return m.msa
}

func (m *RRG_O02v2) ERR() *ERR {
	return m.err
}

func (m *RRG_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRG_O02v2) GroupByPID() *RRG_O02_PIDv2 {
	return m.pid
}

func (m RRG_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRG_O02_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRG_O02_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRG_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRG_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRG_O02_PIDv2) GroupByORC() []*RRG_O02_PID_ORCv2 {
	return m.orc
}

func (m RRG_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRG_O02_PID_ORCv2 struct {
	orc *ORC   `json:"orc,omitempty"` // Required
	rxg *RXG   `json:"rxg,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RRG_O02_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRG_O02_PID_ORCv2) RXG() *RXG {
	return m.rxg
}

func (m *RRG_O02_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RRG_O02_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RRG_O02_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"rxg": m.rxg,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RRG_O16v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err []*ERR         `json:"err,omitempty"`
	sft []*SFT         `json:"sft,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRG_O16_PIDv2 `json:"pid,omitempty"`
}

func (m *RRG_O16v2) MSH() *MSH {
	return m.msh
}

func (m *RRG_O16v2) MSA() *MSA {
	return m.msa
}

func (m *RRG_O16v2) AllERR() []*ERR {
	return m.err
}

func (m *RRG_O16v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RRG_O16v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRG_O16v2) GroupByPID() *RRG_O16_PIDv2 {
	return m.pid
}

func (m RRG_O16v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRG_O16_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRG_O16_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRG_O16_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRG_O16_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRG_O16_PIDv2) GroupByORC() []*RRG_O16_PID_ORCv2 {
	return m.orc
}

func (m RRG_O16_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRG_O16_PID_ORCv2 struct {
	orc  *ORC                      `json:"orc,omitempty"` // Required
	tq11 []*RRG_O16_PID_ORC_TQ11v2 `json:"tq_11,omitempty"`
	rxg  *RXG                      `json:"rxg,omitempty"`   // Required
	tq12 []*RRG_O16_PID_ORC_TQ12v2 `json:"tq_12,omitempty"` // Required
	rxr  []*RXR                    `json:"rxr,omitempty"`   // Required
	rxc  []*RXC                    `json:"rxc,omitempty"`
}

func (m *RRG_O16_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRG_O16_PID_ORCv2) GroupByTQ11() []*RRG_O16_PID_ORC_TQ11v2 {
	return m.tq11
}

func (m *RRG_O16_PID_ORCv2) RXG() *RXG {
	return m.rxg
}

func (m *RRG_O16_PID_ORCv2) GroupByTQ12() []*RRG_O16_PID_ORC_TQ12v2 {
	return m.tq12
}

func (m *RRG_O16_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RRG_O16_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RRG_O16_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"tq11": m.tq11,
		"rxg":  m.rxg,
		"tq12": m.tq12,
		"rxr":  m.rxr,
		"rxc":  m.rxc,
	}, nil
}

type RRG_O16_PID_ORC_TQ11v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RRG_O16_PID_ORC_TQ11v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RRG_O16_PID_ORC_TQ11v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RRG_O16_PID_ORC_TQ11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RRG_O16_PID_ORC_TQ12v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RRG_O16_PID_ORC_TQ12v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RRG_O16_PID_ORC_TQ12v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RRG_O16_PID_ORC_TQ12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RRI_I12v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"`
	rf1 *RF1             `json:"rf_1,omitempty"`
	aut *AUT             `json:"aut,omitempty"` // Required
	ctd *CTD             `json:"ctd,omitempty"`
	prd []*RRI_I12_PRDv2 `json:"prd,omitempty"` // Required
	pid *PID             `json:"pid,omitempty"` // Required
	acc *ACC             `json:"acc,omitempty"`
	dg1 []*DG1           `json:"dg_1,omitempty"`
	drg []*DRG           `json:"drg,omitempty"`
	al1 []*AL1           `json:"al_1,omitempty"`
	pr1 []*RRI_I12_PR1v2 `json:"pr_1,omitempty"`
	obr []*RRI_I12_OBRv2 `json:"obr,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
}

func (m *RRI_I12v2) MSH() *MSH {
	return m.msh
}

func (m *RRI_I12v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RRI_I12v2) MSA() *MSA {
	return m.msa
}

func (m *RRI_I12v2) RF1() *RF1 {
	return m.rf1
}

func (m *RRI_I12v2) AUT() *AUT {
	return m.aut
}

func (m *RRI_I12v2) CTD() *CTD {
	return m.ctd
}

func (m *RRI_I12v2) GroupByPRD() []*RRI_I12_PRDv2 {
	return m.prd
}

func (m *RRI_I12v2) PID() *PID {
	return m.pid
}

func (m *RRI_I12v2) ACC() *ACC {
	return m.acc
}

func (m *RRI_I12v2) AllDG1() []*DG1 {
	return m.dg1
}

func (m *RRI_I12v2) AllDRG() []*DRG {
	return m.drg
}

func (m *RRI_I12v2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RRI_I12v2) GroupByPR1() []*RRI_I12_PR1v2 {
	return m.pr1
}

func (m *RRI_I12v2) GroupByOBR() []*RRI_I12_OBRv2 {
	return m.obr
}

func (m *RRI_I12v2) PV1() *PV1 {
	return m.pv1
}

func (m *RRI_I12v2) PV2() *PV2 {
	return m.pv2
}

func (m *RRI_I12v2) AllNTE() []*NTE {
	return m.nte
}

func (m RRI_I12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"rf1": m.rf1,
		"aut": m.aut,
		"ctd": m.ctd,
		"prd": m.prd,
		"pid": m.pid,
		"acc": m.acc,
		"dg1": m.dg1,
		"drg": m.drg,
		"al1": m.al1,
		"pr1": m.pr1,
		"obr": m.obr,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"nte": m.nte,
	}, nil
}

type RRI_I12_PRDv2 struct {
	prd *PRD   `json:"prd,omitempty"` // Required
	ctd []*CTD `json:"ctd,omitempty"`
}

func (m *RRI_I12_PRDv2) PRD() *PRD {
	return m.prd
}

func (m *RRI_I12_PRDv2) AllCTD() []*CTD {
	return m.ctd
}

func (m RRI_I12_PRDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"prd": m.prd,
		"ctd": m.ctd,
	}, nil
}

type RRI_I12_PR1v2 struct {
	pr1 *PR1 `json:"pr_1,omitempty"` // Required
	aut *AUT `json:"aut,omitempty"`  // Required
	ctd *CTD `json:"ctd,omitempty"`
}

func (m *RRI_I12_PR1v2) PR1() *PR1 {
	return m.pr1
}

func (m *RRI_I12_PR1v2) AUT() *AUT {
	return m.aut
}

func (m *RRI_I12_PR1v2) CTD() *CTD {
	return m.ctd
}

func (m RRI_I12_PR1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pr1": m.pr1,
		"aut": m.aut,
		"ctd": m.ctd,
	}, nil
}

type RRI_I12_OBRv2 struct {
	obr *OBR                 `json:"obr,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	obx []*RRI_I12_OBR_OBXv2 `json:"obx,omitempty"`
}

func (m *RRI_I12_OBRv2) OBR() *OBR {
	return m.obr
}

func (m *RRI_I12_OBRv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRI_I12_OBRv2) GroupByOBX() []*RRI_I12_OBR_OBXv2 {
	return m.obx
}

func (m RRI_I12_OBRv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obr": m.obr,
		"nte": m.nte,
		"obx": m.obx,
	}, nil
}

type RRI_I12_OBR_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RRI_I12_OBR_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RRI_I12_OBR_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RRI_I12_OBR_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RRO_O02v2 struct {
	msh *MSH           `json:"msh,omitempty"` // Required
	msa *MSA           `json:"msa,omitempty"` // Required
	err *ERR           `json:"err,omitempty"`
	nte []*NTE         `json:"nte,omitempty"`
	pid *RRO_O02_PIDv2 `json:"pid,omitempty"`
}

func (m *RRO_O02v2) MSH() *MSH {
	return m.msh
}

func (m *RRO_O02v2) MSA() *MSA {
	return m.msa
}

func (m *RRO_O02v2) ERR() *ERR {
	return m.err
}

func (m *RRO_O02v2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRO_O02v2) GroupByPID() *RRO_O02_PIDv2 {
	return m.pid
}

func (m RRO_O02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"nte": m.nte,
		"pid": m.pid,
	}, nil
}

type RRO_O02_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	nte []*NTE               `json:"nte,omitempty"`
	orc []*RRO_O02_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RRO_O02_PIDv2) PID() *PID {
	return m.pid
}

func (m *RRO_O02_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RRO_O02_PIDv2) GroupByORC() []*RRO_O02_PID_ORCv2 {
	return m.orc
}

func (m RRO_O02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nte": m.nte,
		"orc": m.orc,
	}, nil
}

type RRO_O02_PID_ORCv2 struct {
	orc  *ORC   `json:"orc,omitempty"` // Required
	rxo  *RXO   `json:"rxo,omitempty"` // Required
	nte1 []*NTE `json:"nte_1,omitempty"`
	rxr  []*RXR `json:"rxr,omitempty"` // Required
	rxc  []*RXC `json:"rxc,omitempty"`
	nte2 []*NTE `json:"nte_2,omitempty"`
}

func (m *RRO_O02_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RRO_O02_PID_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *RRO_O02_PID_ORCv2) AllNTE1() []*NTE {
	return m.nte1
}

func (m *RRO_O02_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RRO_O02_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RRO_O02_PID_ORCv2) AllNTE2() []*NTE {
	return m.nte2
}

func (m RRO_O02_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc":  m.orc,
		"rxo":  m.rxo,
		"nte1": m.nte1,
		"rxr":  m.rxr,
		"rxc":  m.rxc,
		"nte2": m.nte2,
	}, nil
}

type RSP_K11v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"` // Required
	rdt []*RDT `json:"rdt,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RSP_K11v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K11v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_K11v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K11v2) ERR() *ERR {
	return m.err
}

func (m *RSP_K11v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K11v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K11v2) RDF() *RDF {
	return m.rdf
}

func (m *RSP_K11v2) AllRDT() []*RDT {
	return m.rdt
}

func (m *RSP_K11v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rdf": m.rdf,
		"rdt": m.rdt,
		"dsc": m.dsc,
	}, nil
}

type RSP_K13v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"` // Required
	rdt []*RDT `json:"rdt,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RSP_K13v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K13v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K13v2) ERR() *ERR {
	return m.err
}

func (m *RSP_K13v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K13v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K13v2) RDF() *RDF {
	return m.rdf
}

func (m *RSP_K13v2) AllRDT() []*RDT {
	return m.rdt
}

func (m *RSP_K13v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K13v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rdf": m.rdf,
		"rdt": m.rdt,
		"dsc": m.dsc,
	}, nil
}

type RSP_K15v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	dsp []*DSP `json:"dsp,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RSP_K15v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K15v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K15v2) ERR() *ERR {
	return m.err
}

func (m *RSP_K15v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K15v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K15v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *RSP_K15v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K15v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type RSP_K21v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	nk1 []*NK1 `json:"nk_1,omitempty"`
	qri *QRI   `json:"qri,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RSP_K21v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K21v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_K21v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K21v2) ERR() *ERR {
	return m.err
}

func (m *RSP_K21v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K21v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K21v2) PID() *PID {
	return m.pid
}

func (m *RSP_K21v2) PD1() *PD1 {
	return m.pd1
}

func (m *RSP_K21v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RSP_K21v2) QRI() *QRI {
	return m.qri
}

func (m *RSP_K21v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K21v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"pid": m.pid,
		"pd1": m.pd1,
		"nk1": m.nk1,
		"qri": m.qri,
		"dsc": m.dsc,
	}, nil
}

type RSP_K22v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	qpd *QPD             `json:"qpd,omitempty"` // Required
	pid []*RSP_K22_PIDv2 `json:"pid,omitempty"`
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RSP_K22v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K22v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K22v2) ERR() *ERR {
	return m.err
}

func (m *RSP_K22v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K22v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K22v2) GroupByPID() []*RSP_K22_PIDv2 {
	return m.pid
}

func (m *RSP_K22v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K22v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type RSP_K22_PIDv2 struct {
	pid *PID `json:"pid,omitempty"` // Required
	pd1 *PD1 `json:"pd_1,omitempty"`
	qri *QRI `json:"qri,omitempty"`
}

func (m *RSP_K22_PIDv2) PID() *PID {
	return m.pid
}

func (m *RSP_K22_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RSP_K22_PIDv2) QRI() *QRI {
	return m.qri
}

func (m RSP_K22_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"qri": m.qri,
	}, nil
}

type RSP_K23v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	pid *PID   `json:"pid,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RSP_K23v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K23v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_K23v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K23v2) ERR() *ERR {
	return m.err
}

func (m *RSP_K23v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K23v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K23v2) PID() *PID {
	return m.pid
}

func (m *RSP_K23v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K23v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type RSP_K24v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	msa *MSA `json:"msa,omitempty"` // Required
	err *ERR `json:"err,omitempty"`
	qak *QAK `json:"qak,omitempty"` // Required
	qpd *QPD `json:"qpd,omitempty"` // Required
	pid *PID `json:"pid,omitempty"`
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *RSP_K24v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K24v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K24v2) ERR() *ERR {
	return m.err
}

func (m *RSP_K24v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K24v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K24v2) PID() *PID {
	return m.pid
}

func (m *RSP_K24v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K24v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type RSP_K25v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	qpd *QPD             `json:"qpd,omitempty"` // Required
	rcp *RCP             `json:"rcp,omitempty"` // Required
	stf []*RSP_K25_STFv2 `json:"stf,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RSP_K25v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K25v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_K25v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K25v2) AllERR() []*ERR {
	return m.err
}

func (m *RSP_K25v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K25v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K25v2) RCP() *RCP {
	return m.rcp
}

func (m *RSP_K25v2) GroupBySTF() []*RSP_K25_STFv2 {
	return m.stf
}

func (m *RSP_K25v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K25v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"stf": m.stf,
		"dsc": m.dsc,
	}, nil
}

type RSP_K25_STFv2 struct {
	stf *STF   `json:"stf,omitempty"` // Required
	pra []*PRA `json:"pra,omitempty"`
	org []*ORG `json:"org,omitempty"`
	aff []*AFF `json:"aff,omitempty"`
	lan []*LAN `json:"lan,omitempty"`
	edu []*EDU `json:"edu,omitempty"`
	cer []*CER `json:"cer,omitempty"`
}

func (m *RSP_K25_STFv2) STF() *STF {
	return m.stf
}

func (m *RSP_K25_STFv2) AllPRA() []*PRA {
	return m.pra
}

func (m *RSP_K25_STFv2) AllORG() []*ORG {
	return m.org
}

func (m *RSP_K25_STFv2) AllAFF() []*AFF {
	return m.aff
}

func (m *RSP_K25_STFv2) AllLAN() []*LAN {
	return m.lan
}

func (m *RSP_K25_STFv2) AllEDU() []*EDU {
	return m.edu
}

func (m *RSP_K25_STFv2) AllCER() []*CER {
	return m.cer
}

func (m RSP_K25_STFv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"stf": m.stf,
		"pra": m.pra,
		"org": m.org,
		"aff": m.aff,
		"lan": m.lan,
		"edu": m.edu,
		"cer": m.cer,
	}, nil
}

type RSP_K31v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sft []*SFT           `json:"sft,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	qpd *QPD             `json:"qpd,omitempty"` // Required
	rcp *RCP             `json:"rcp,omitempty"` // Required
	pid []*RSP_K31_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RSP_K31v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_K31v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_K31v2) AllERR() []*ERR {
	return m.err
}

func (m *RSP_K31v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_K31v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_K31v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_K31v2) RCP() *RCP {
	return m.rcp
}

func (m *RSP_K31v2) GroupByPID() []*RSP_K31_PIDv2 {
	return m.pid
}

func (m *RSP_K31v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_K31v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"qak": m.qak,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type RSP_K31_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	orc []*RSP_K31_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RSP_K31_PIDv2) PID() *PID {
	return m.pid
}

func (m *RSP_K31_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RSP_K31_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_K31_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RSP_K31_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RSP_K31_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *RSP_K31_PIDv2) GroupByORC() []*RSP_K31_PID_ORCv2 {
	return m.orc
}

func (m RSP_K31_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"orc": m.orc,
	}, nil
}

type RSP_K31_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*RSP_K31_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RSP_K31_PID_ORC_RXOv2   `json:"rxo,omitempty"`
	rxe *RSP_K31_PID_ORC_RXEv2   `json:"rxe,omitempty"`
	rxd *RXD                     `json:"rxd,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
	obx []*RSP_K31_PID_ORC_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *RSP_K31_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RSP_K31_PID_ORCv2) GroupByTQ1() []*RSP_K31_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *RSP_K31_PID_ORCv2) GroupByRXO() *RSP_K31_PID_ORC_RXOv2 {
	return m.rxo
}

func (m *RSP_K31_PID_ORCv2) GroupByRXE() *RSP_K31_PID_ORC_RXEv2 {
	return m.rxe
}

func (m *RSP_K31_PID_ORCv2) RXD() *RXD {
	return m.rxd
}

func (m *RSP_K31_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_K31_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RSP_K31_PID_ORCv2) GroupByOBX() []*RSP_K31_PID_ORC_OBXv2 {
	return m.obx
}

func (m RSP_K31_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"rxe": m.rxe,
		"rxd": m.rxd,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
	}, nil
}

type RSP_K31_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_K31_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_K31_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_K31_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_K31_PID_ORC_RXOv2 struct {
	rxo *RXO                         `json:"rxo,omitempty"` // Required
	nte []*NTE                       `json:"nte,omitempty"`
	rxr []*RXR                       `json:"rxr,omitempty"` // Required
	rxc []*RSP_K31_PID_ORC_RXO_RXCv2 `json:"rxc,omitempty"`
}

func (m *RSP_K31_PID_ORC_RXOv2) RXO() *RXO {
	return m.rxo
}

func (m *RSP_K31_PID_ORC_RXOv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_K31_PID_ORC_RXOv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_K31_PID_ORC_RXOv2) GroupByRXC() []*RSP_K31_PID_ORC_RXO_RXCv2 {
	return m.rxc
}

func (m RSP_K31_PID_ORC_RXOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_K31_PID_ORC_RXO_RXCv2 struct {
	rxc *RXC   `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RSP_K31_PID_ORC_RXO_RXCv2) RXC() *RXC {
	return m.rxc
}

func (m *RSP_K31_PID_ORC_RXO_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RSP_K31_PID_ORC_RXO_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RSP_K31_PID_ORC_RXEv2 struct {
	rxe *RXE                         `json:"rxe,omitempty"`  // Required
	tq1 []*RSP_K31_PID_ORC_RXE_TQ1v2 `json:"tq_1,omitempty"` // Required
	rxr []*RXR                       `json:"rxr,omitempty"`  // Required
	rxc []*RXC                       `json:"rxc,omitempty"`
}

func (m *RSP_K31_PID_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RSP_K31_PID_ORC_RXEv2) GroupByTQ1() []*RSP_K31_PID_ORC_RXE_TQ1v2 {
	return m.tq1
}

func (m *RSP_K31_PID_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_K31_PID_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RSP_K31_PID_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_K31_PID_ORC_RXE_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_K31_PID_ORC_RXE_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_K31_PID_ORC_RXE_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_K31_PID_ORC_RXE_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_K31_PID_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RSP_K31_PID_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RSP_K31_PID_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RSP_K31_PID_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RSP_Q11v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	qpd *QPD             `json:"qpd,omitempty"` // Required
	mfe *MFE             `json:"mfe,omitempty"` // Required
	loc *LOC             `json:"loc,omitempty"` // Required
	lch []*LCH           `json:"lch,omitempty"`
	lrl []*LRL           `json:"lrl,omitempty"`
	ldp []*RSP_Q11_LDPv2 `json:"ldp,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RSP_Q11v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_Q11v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_Q11v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_Q11v2) AllERR() []*ERR {
	return m.err
}

func (m *RSP_Q11v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_Q11v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_Q11v2) MFE() *MFE {
	return m.mfe
}

func (m *RSP_Q11v2) LOC() *LOC {
	return m.loc
}

func (m *RSP_Q11v2) AllLCH() []*LCH {
	return m.lch
}

func (m *RSP_Q11v2) AllLRL() []*LRL {
	return m.lrl
}

func (m *RSP_Q11v2) GroupByLDP() []*RSP_Q11_LDPv2 {
	return m.ldp
}

func (m *RSP_Q11v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_Q11v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"mfe": m.mfe,
		"loc": m.loc,
		"lch": m.lch,
		"lrl": m.lrl,
		"ldp": m.ldp,
		"dsc": m.dsc,
	}, nil
}

type RSP_Q11_LDPv2 struct {
	ldp *LDP   `json:"ldp,omitempty"` // Required
	lch []*LCH `json:"lch,omitempty"`
	lcc []*LCC `json:"lcc,omitempty"`
}

func (m *RSP_Q11_LDPv2) LDP() *LDP {
	return m.ldp
}

func (m *RSP_Q11_LDPv2) AllLCH() []*LCH {
	return m.lch
}

func (m *RSP_Q11_LDPv2) AllLCC() []*LCC {
	return m.lcc
}

func (m RSP_Q11_LDPv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ldp": m.ldp,
		"lch": m.lch,
		"lcc": m.lcc,
	}, nil
}

type RSP_Z82v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	qpd *QPD             `json:"qpd,omitempty"` // Required
	rcp *RCP             `json:"rcp,omitempty"` // Required
	pid []*RSP_Z82_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RSP_Z82v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_Z82v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_Z82v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_Z82v2) ERR() *ERR {
	return m.err
}

func (m *RSP_Z82v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_Z82v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_Z82v2) RCP() *RCP {
	return m.rcp
}

func (m *RSP_Z82v2) GroupByPID() []*RSP_Z82_PIDv2 {
	return m.pid
}

func (m *RSP_Z82v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_Z82v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type RSP_Z82_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"` // Required
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	orc []*RSP_Z82_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RSP_Z82_PIDv2) PID() *PID {
	return m.pid
}

func (m *RSP_Z82_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RSP_Z82_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_Z82_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RSP_Z82_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RSP_Z82_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *RSP_Z82_PIDv2) GroupByORC() []*RSP_Z82_PID_ORCv2 {
	return m.orc
}

func (m RSP_Z82_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"orc": m.orc,
	}, nil
}

type RSP_Z82_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*RSP_Z82_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RSP_Z82_PID_ORC_RXOv2   `json:"rxo,omitempty"`
	rxe *RSP_Z82_PID_ORC_RXEv2   `json:"rxe,omitempty"`
	rxd *RXD                     `json:"rxd,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
	obx []*RSP_Z82_PID_ORC_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *RSP_Z82_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RSP_Z82_PID_ORCv2) GroupByTQ1() []*RSP_Z82_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *RSP_Z82_PID_ORCv2) GroupByRXO() *RSP_Z82_PID_ORC_RXOv2 {
	return m.rxo
}

func (m *RSP_Z82_PID_ORCv2) GroupByRXE() *RSP_Z82_PID_ORC_RXEv2 {
	return m.rxe
}

func (m *RSP_Z82_PID_ORCv2) RXD() *RXD {
	return m.rxd
}

func (m *RSP_Z82_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z82_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RSP_Z82_PID_ORCv2) GroupByOBX() []*RSP_Z82_PID_ORC_OBXv2 {
	return m.obx
}

func (m RSP_Z82_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"rxe": m.rxe,
		"rxd": m.rxd,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
	}, nil
}

type RSP_Z82_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_Z82_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_Z82_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_Z82_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_Z82_PID_ORC_RXOv2 struct {
	rxo *RXO                       `json:"rxo,omitempty"` // Required
	nte []*NTE                     `json:"nte,omitempty"`
	rxr []*RXR                     `json:"rxr,omitempty"` // Required
	rxc *RSP_Z82_PID_ORC_RXO_RXCv2 `json:"rxc,omitempty"`
}

func (m *RSP_Z82_PID_ORC_RXOv2) RXO() *RXO {
	return m.rxo
}

func (m *RSP_Z82_PID_ORC_RXOv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_Z82_PID_ORC_RXOv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z82_PID_ORC_RXOv2) GroupByRXC() *RSP_Z82_PID_ORC_RXO_RXCv2 {
	return m.rxc
}

func (m RSP_Z82_PID_ORC_RXOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_Z82_PID_ORC_RXO_RXCv2 struct {
	rxc []*RXC `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RSP_Z82_PID_ORC_RXO_RXCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RSP_Z82_PID_ORC_RXO_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RSP_Z82_PID_ORC_RXO_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RSP_Z82_PID_ORC_RXEv2 struct {
	rxe *RXE                         `json:"rxe,omitempty"` // Required
	tq1 []*RSP_Z82_PID_ORC_RXE_TQ1v2 `json:"tq_1,omitempty"`
	rxr []*RXR                       `json:"rxr,omitempty"` // Required
	rxc []*RXC                       `json:"rxc,omitempty"`
}

func (m *RSP_Z82_PID_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RSP_Z82_PID_ORC_RXEv2) GroupByTQ1() []*RSP_Z82_PID_ORC_RXE_TQ1v2 {
	return m.tq1
}

func (m *RSP_Z82_PID_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z82_PID_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RSP_Z82_PID_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_Z82_PID_ORC_RXE_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_Z82_PID_ORC_RXE_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_Z82_PID_ORC_RXE_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_Z82_PID_ORC_RXE_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_Z82_PID_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RSP_Z82_PID_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RSP_Z82_PID_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RSP_Z82_PID_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RSP_Z86v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	qpd *QPD             `json:"qpd,omitempty"` // Required
	pid []*RSP_Z86_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *RSP_Z86v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_Z86v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_Z86v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_Z86v2) ERR() *ERR {
	return m.err
}

func (m *RSP_Z86v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_Z86v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_Z86v2) GroupByPID() []*RSP_Z86_PIDv2 {
	return m.pid
}

func (m *RSP_Z86v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_Z86v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type RSP_Z86_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"`
	orc []*RSP_Z86_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RSP_Z86_PIDv2) PID() *PID {
	return m.pid
}

func (m *RSP_Z86_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RSP_Z86_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_Z86_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RSP_Z86_PIDv2) GroupByORC() []*RSP_Z86_PID_ORCv2 {
	return m.orc
}

func (m RSP_Z86_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"al1": m.al1,
		"orc": m.orc,
	}, nil
}

type RSP_Z86_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*RSP_Z86_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RXO                     `json:"rxo,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
	rxe *RSP_Z86_PID_ORC_RXEv2   `json:"rxe,omitempty"`
	rxd *RSP_Z86_PID_ORC_RXDv2   `json:"rxd,omitempty"`
	rxg *RSP_Z86_PID_ORC_RXGv2   `json:"rxg,omitempty"`
	rxa *RSP_Z86_PID_ORC_RXAv2   `json:"rxa,omitempty"`
	obx []*RSP_Z86_PID_ORC_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *RSP_Z86_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RSP_Z86_PID_ORCv2) GroupByTQ1() []*RSP_Z86_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *RSP_Z86_PID_ORCv2) RXO() *RXO {
	return m.rxo
}

func (m *RSP_Z86_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z86_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RSP_Z86_PID_ORCv2) GroupByRXE() *RSP_Z86_PID_ORC_RXEv2 {
	return m.rxe
}

func (m *RSP_Z86_PID_ORCv2) GroupByRXD() *RSP_Z86_PID_ORC_RXDv2 {
	return m.rxd
}

func (m *RSP_Z86_PID_ORCv2) GroupByRXG() *RSP_Z86_PID_ORC_RXGv2 {
	return m.rxg
}

func (m *RSP_Z86_PID_ORCv2) GroupByRXA() *RSP_Z86_PID_ORC_RXAv2 {
	return m.rxa
}

func (m *RSP_Z86_PID_ORCv2) GroupByOBX() []*RSP_Z86_PID_ORC_OBXv2 {
	return m.obx
}

func (m RSP_Z86_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"rxe": m.rxe,
		"rxd": m.rxd,
		"rxg": m.rxg,
		"rxa": m.rxa,
		"obx": m.obx,
	}, nil
}

type RSP_Z86_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_Z86_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_Z86_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_Z86_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_Z86_PID_ORC_RXEv2 struct {
	rxe *RXE                         `json:"rxe,omitempty"` // Required
	tq1 []*RSP_Z86_PID_ORC_RXE_TQ1v2 `json:"tq_1,omitempty"`
	rxr []*RXR                       `json:"rxr,omitempty"` // Required
	rxc []*RXC                       `json:"rxc,omitempty"`
}

func (m *RSP_Z86_PID_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RSP_Z86_PID_ORC_RXEv2) GroupByTQ1() []*RSP_Z86_PID_ORC_RXE_TQ1v2 {
	return m.tq1
}

func (m *RSP_Z86_PID_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z86_PID_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RSP_Z86_PID_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_Z86_PID_ORC_RXE_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_Z86_PID_ORC_RXE_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_Z86_PID_ORC_RXE_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_Z86_PID_ORC_RXE_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_Z86_PID_ORC_RXDv2 struct {
	rxd *RXD   `json:"rxd,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RSP_Z86_PID_ORC_RXDv2) RXD() *RXD {
	return m.rxd
}

func (m *RSP_Z86_PID_ORC_RXDv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z86_PID_ORC_RXDv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RSP_Z86_PID_ORC_RXDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxd": m.rxd,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_Z86_PID_ORC_RXGv2 struct {
	rxg *RXG   `json:"rxg,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RSP_Z86_PID_ORC_RXGv2) RXG() *RXG {
	return m.rxg
}

func (m *RSP_Z86_PID_ORC_RXGv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z86_PID_ORC_RXGv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RSP_Z86_PID_ORC_RXGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxg": m.rxg,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_Z86_PID_ORC_RXAv2 struct {
	rxa *RXA   `json:"rxa,omitempty"` // Required
	rxr []*RXR `json:"rxr,omitempty"` // Required
	rxc []*RXC `json:"rxc,omitempty"`
}

func (m *RSP_Z86_PID_ORC_RXAv2) RXA() *RXA {
	return m.rxa
}

func (m *RSP_Z86_PID_ORC_RXAv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z86_PID_ORC_RXAv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RSP_Z86_PID_ORC_RXAv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxa": m.rxa,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_Z86_PID_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RSP_Z86_PID_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RSP_Z86_PID_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RSP_Z86_PID_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RSP_Z88v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	qpd *QPD             `json:"qpd,omitempty"` // Required
	rcp *RCP             `json:"rcp,omitempty"` // Required
	pid []*RSP_Z88_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"` // Required
}

func (m *RSP_Z88v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_Z88v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_Z88v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_Z88v2) ERR() *ERR {
	return m.err
}

func (m *RSP_Z88v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_Z88v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_Z88v2) RCP() *RCP {
	return m.rcp
}

func (m *RSP_Z88v2) GroupByPID() []*RSP_Z88_PIDv2 {
	return m.pid
}

func (m *RSP_Z88v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_Z88v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type RSP_Z88_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	al1 []*AL1               `json:"al_1,omitempty"` // Required
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	orc []*RSP_Z88_PID_ORCv2 `json:"orc,omitempty"` // Required
}

func (m *RSP_Z88_PIDv2) PID() *PID {
	return m.pid
}

func (m *RSP_Z88_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RSP_Z88_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_Z88_PIDv2) AllAL1() []*AL1 {
	return m.al1
}

func (m *RSP_Z88_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RSP_Z88_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *RSP_Z88_PIDv2) GroupByORC() []*RSP_Z88_PID_ORCv2 {
	return m.orc
}

func (m RSP_Z88_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nte": m.nte,
		"al1": m.al1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"orc": m.orc,
	}, nil
}

type RSP_Z88_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*RSP_Z88_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxo *RSP_Z88_PID_ORC_RXOv2   `json:"rxo,omitempty"`
	rxe *RSP_Z88_PID_ORC_RXEv2   `json:"rxe,omitempty"`
	rxd *RXD                     `json:"rxd,omitempty"` // Required
	rxr []*RXR                   `json:"rxr,omitempty"` // Required
	rxc []*RXC                   `json:"rxc,omitempty"`
	obx []*RSP_Z88_PID_ORC_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *RSP_Z88_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RSP_Z88_PID_ORCv2) GroupByTQ1() []*RSP_Z88_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *RSP_Z88_PID_ORCv2) GroupByRXO() *RSP_Z88_PID_ORC_RXOv2 {
	return m.rxo
}

func (m *RSP_Z88_PID_ORCv2) GroupByRXE() *RSP_Z88_PID_ORC_RXEv2 {
	return m.rxe
}

func (m *RSP_Z88_PID_ORCv2) RXD() *RXD {
	return m.rxd
}

func (m *RSP_Z88_PID_ORCv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z88_PID_ORCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RSP_Z88_PID_ORCv2) GroupByOBX() []*RSP_Z88_PID_ORC_OBXv2 {
	return m.obx
}

func (m RSP_Z88_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxo": m.rxo,
		"rxe": m.rxe,
		"rxd": m.rxd,
		"rxr": m.rxr,
		"rxc": m.rxc,
		"obx": m.obx,
	}, nil
}

type RSP_Z88_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_Z88_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_Z88_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_Z88_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_Z88_PID_ORC_RXOv2 struct {
	rxo *RXO                       `json:"rxo,omitempty"` // Required
	nte []*NTE                     `json:"nte,omitempty"`
	rxr []*RXR                     `json:"rxr,omitempty"` // Required
	rxc *RSP_Z88_PID_ORC_RXO_RXCv2 `json:"rxc,omitempty"`
}

func (m *RSP_Z88_PID_ORC_RXOv2) RXO() *RXO {
	return m.rxo
}

func (m *RSP_Z88_PID_ORC_RXOv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_Z88_PID_ORC_RXOv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z88_PID_ORC_RXOv2) GroupByRXC() *RSP_Z88_PID_ORC_RXO_RXCv2 {
	return m.rxc
}

func (m RSP_Z88_PID_ORC_RXOv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxo": m.rxo,
		"nte": m.nte,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_Z88_PID_ORC_RXO_RXCv2 struct {
	rxc []*RXC `json:"rxc,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RSP_Z88_PID_ORC_RXO_RXCv2) AllRXC() []*RXC {
	return m.rxc
}

func (m *RSP_Z88_PID_ORC_RXO_RXCv2) AllNTE() []*NTE {
	return m.nte
}

func (m RSP_Z88_PID_ORC_RXO_RXCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxc": m.rxc,
		"nte": m.nte,
	}, nil
}

type RSP_Z88_PID_ORC_RXEv2 struct {
	rxe *RXE                         `json:"rxe,omitempty"` // Required
	tq1 []*RSP_Z88_PID_ORC_RXE_TQ1v2 `json:"tq_1,omitempty"`
	rxr []*RXR                       `json:"rxr,omitempty"` // Required
	rxc []*RXC                       `json:"rxc,omitempty"`
}

func (m *RSP_Z88_PID_ORC_RXEv2) RXE() *RXE {
	return m.rxe
}

func (m *RSP_Z88_PID_ORC_RXEv2) GroupByTQ1() []*RSP_Z88_PID_ORC_RXE_TQ1v2 {
	return m.tq1
}

func (m *RSP_Z88_PID_ORC_RXEv2) AllRXR() []*RXR {
	return m.rxr
}

func (m *RSP_Z88_PID_ORC_RXEv2) AllRXC() []*RXC {
	return m.rxc
}

func (m RSP_Z88_PID_ORC_RXEv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rxe": m.rxe,
		"tq1": m.tq1,
		"rxr": m.rxr,
		"rxc": m.rxc,
	}, nil
}

type RSP_Z88_PID_ORC_RXE_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_Z88_PID_ORC_RXE_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_Z88_PID_ORC_RXE_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_Z88_PID_ORC_RXE_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_Z88_PID_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RSP_Z88_PID_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RSP_Z88_PID_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RSP_Z88_PID_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RSP_Z90v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	msa *MSA             `json:"msa,omitempty"` // Required
	err *ERR             `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	qpd *QPD             `json:"qpd,omitempty"` // Required
	rcp *RCP             `json:"rcp,omitempty"` // Required
	pid []*RSP_Z90_PIDv2 `json:"pid,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"` // Required
}

func (m *RSP_Z90v2) MSH() *MSH {
	return m.msh
}

func (m *RSP_Z90v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RSP_Z90v2) MSA() *MSA {
	return m.msa
}

func (m *RSP_Z90v2) ERR() *ERR {
	return m.err
}

func (m *RSP_Z90v2) QAK() *QAK {
	return m.qak
}

func (m *RSP_Z90v2) QPD() *QPD {
	return m.qpd
}

func (m *RSP_Z90v2) RCP() *RCP {
	return m.rcp
}

func (m *RSP_Z90v2) GroupByPID() []*RSP_Z90_PIDv2 {
	return m.pid
}

func (m *RSP_Z90v2) DSC() *DSC {
	return m.dsc
}

func (m RSP_Z90v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rcp": m.rcp,
		"pid": m.pid,
		"dsc": m.dsc,
	}, nil
}

type RSP_Z90_PIDv2 struct {
	pid *PID                 `json:"pid,omitempty"` // Required
	pd1 *PD1                 `json:"pd_1,omitempty"`
	nk1 []*NK1               `json:"nk_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pv1 *PV1                 `json:"pv_1,omitempty"` // Required
	pv2 *PV2                 `json:"pv_2,omitempty"`
	orc []*RSP_Z90_PID_ORCv2 `json:"orc,omitempty"` // Required
	spm []*RSP_Z90_PID_SPMv2 `json:"spm,omitempty"`
}

func (m *RSP_Z90_PIDv2) PID() *PID {
	return m.pid
}

func (m *RSP_Z90_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *RSP_Z90_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *RSP_Z90_PIDv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_Z90_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *RSP_Z90_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *RSP_Z90_PIDv2) GroupByORC() []*RSP_Z90_PID_ORCv2 {
	return m.orc
}

func (m *RSP_Z90_PIDv2) GroupBySPM() []*RSP_Z90_PID_SPMv2 {
	return m.spm
}

func (m RSP_Z90_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"nk1": m.nk1,
		"nte": m.nte,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"orc": m.orc,
		"spm": m.spm,
	}, nil
}

type RSP_Z90_PID_ORCv2 struct {
	orc *ORC                     `json:"orc,omitempty"` // Required
	tq1 []*RSP_Z90_PID_ORC_TQ1v2 `json:"tq_1,omitempty"`
	obr *OBR                     `json:"obr,omitempty"` // Required
	nte []*NTE                   `json:"nte,omitempty"`
	ctd *CTD                     `json:"ctd,omitempty"`
	obx []*RSP_Z90_PID_ORC_OBXv2 `json:"obx,omitempty"` // Required
}

func (m *RSP_Z90_PID_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *RSP_Z90_PID_ORCv2) GroupByTQ1() []*RSP_Z90_PID_ORC_TQ1v2 {
	return m.tq1
}

func (m *RSP_Z90_PID_ORCv2) OBR() *OBR {
	return m.obr
}

func (m *RSP_Z90_PID_ORCv2) AllNTE() []*NTE {
	return m.nte
}

func (m *RSP_Z90_PID_ORCv2) CTD() *CTD {
	return m.ctd
}

func (m *RSP_Z90_PID_ORCv2) GroupByOBX() []*RSP_Z90_PID_ORC_OBXv2 {
	return m.obx
}

func (m RSP_Z90_PID_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"obr": m.obr,
		"nte": m.nte,
		"ctd": m.ctd,
		"obx": m.obx,
	}, nil
}

type RSP_Z90_PID_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *RSP_Z90_PID_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *RSP_Z90_PID_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m RSP_Z90_PID_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type RSP_Z90_PID_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *RSP_Z90_PID_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *RSP_Z90_PID_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m RSP_Z90_PID_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type RSP_Z90_PID_SPMv2 struct {
	spm *SPM   `json:"spm,omitempty"` // Required
	obx []*OBX `json:"obx,omitempty"`
}

func (m *RSP_Z90_PID_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *RSP_Z90_PID_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m RSP_Z90_PID_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
	}, nil
}

type RTB_K13v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"` // Required
	rdt []*RDT `json:"rdt,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RTB_K13v2) MSH() *MSH {
	return m.msh
}

func (m *RTB_K13v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RTB_K13v2) MSA() *MSA {
	return m.msa
}

func (m *RTB_K13v2) ERR() *ERR {
	return m.err
}

func (m *RTB_K13v2) QAK() *QAK {
	return m.qak
}

func (m *RTB_K13v2) QPD() *QPD {
	return m.qpd
}

func (m *RTB_K13v2) RDF() *RDF {
	return m.rdf
}

func (m *RTB_K13v2) AllRDT() []*RDT {
	return m.rdt
}

func (m *RTB_K13v2) DSC() *DSC {
	return m.dsc
}

func (m RTB_K13v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rdf": m.rdf,
		"rdt": m.rdt,
		"dsc": m.dsc,
	}, nil
}

type RTB_Knnv2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RTB_Knnv2) MSH() *MSH {
	return m.msh
}

func (m *RTB_Knnv2) AllSFT() []*SFT {
	return m.sft
}

func (m *RTB_Knnv2) MSA() *MSA {
	return m.msa
}

func (m *RTB_Knnv2) ERR() *ERR {
	return m.err
}

func (m *RTB_Knnv2) QAK() *QAK {
	return m.qak
}

func (m *RTB_Knnv2) QPD() *QPD {
	return m.qpd
}

func (m *RTB_Knnv2) DSC() *DSC {
	return m.dsc
}

func (m RTB_Knnv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"dsc": m.dsc,
	}, nil
}

type RTB_Q13v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"` // Required
	rdt []*RDT `json:"rdt,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RTB_Q13v2) MSH() *MSH {
	return m.msh
}

func (m *RTB_Q13v2) MSA() *MSA {
	return m.msa
}

func (m *RTB_Q13v2) ERR() *ERR {
	return m.err
}

func (m *RTB_Q13v2) QAK() *QAK {
	return m.qak
}

func (m *RTB_Q13v2) QPD() *QPD {
	return m.qpd
}

func (m *RTB_Q13v2) RDF() *RDF {
	return m.rdf
}

func (m *RTB_Q13v2) AllRDT() []*RDT {
	return m.rdt
}

func (m *RTB_Q13v2) DSC() *DSC {
	return m.dsc
}

func (m RTB_Q13v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"qpd": m.qpd,
		"rdf": m.rdf,
		"rdt": m.rdt,
		"dsc": m.dsc,
	}, nil
}

type RTB_Z74v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err []*ERR `json:"err,omitempty"`
	sft []*SFT `json:"sft,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	qpd *QPD   `json:"qpd,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"` // Required
	rdt []*RDT `json:"rdt,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *RTB_Z74v2) MSH() *MSH {
	return m.msh
}

func (m *RTB_Z74v2) MSA() *MSA {
	return m.msa
}

func (m *RTB_Z74v2) AllERR() []*ERR {
	return m.err
}

func (m *RTB_Z74v2) AllSFT() []*SFT {
	return m.sft
}

func (m *RTB_Z74v2) QAK() *QAK {
	return m.qak
}

func (m *RTB_Z74v2) QPD() *QPD {
	return m.qpd
}

func (m *RTB_Z74v2) RDF() *RDF {
	return m.rdf
}

func (m *RTB_Z74v2) AllRDT() []*RDT {
	return m.rdt
}

func (m *RTB_Z74v2) DSC() *DSC {
	return m.dsc
}

func (m RTB_Z74v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sft": m.sft,
		"qak": m.qak,
		"qpd": m.qpd,
		"rdf": m.rdf,
		"rdt": m.rdt,
		"dsc": m.dsc,
	}, nil
}

type SIU_S12v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sch *SCH             `json:"sch,omitempty"` // Required
	tq1 []*TQ1           `json:"tq_1,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid []*SIU_S12_PIDv2 `json:"pid,omitempty"`
	rgs []*SIU_S12_RGSv2 `json:"rgs,omitempty"` // Required
}

func (m *SIU_S12v2) MSH() *MSH {
	return m.msh
}

func (m *SIU_S12v2) SCH() *SCH {
	return m.sch
}

func (m *SIU_S12v2) AllTQ1() []*TQ1 {
	return m.tq1
}

func (m *SIU_S12v2) AllNTE() []*NTE {
	return m.nte
}

func (m *SIU_S12v2) GroupByPID() []*SIU_S12_PIDv2 {
	return m.pid
}

func (m *SIU_S12v2) GroupByRGS() []*SIU_S12_RGSv2 {
	return m.rgs
}

func (m SIU_S12v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sch": m.sch,
		"tq1": m.tq1,
		"nte": m.nte,
		"pid": m.pid,
		"rgs": m.rgs,
	}, nil
}

type SIU_S12_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pd1 *PD1   `json:"pd_1,omitempty"`
	pv1 *PV1   `json:"pv_1,omitempty"`
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
	dg1 []*DG1 `json:"dg_1,omitempty"`
}

func (m *SIU_S12_PIDv2) PID() *PID {
	return m.pid
}

func (m *SIU_S12_PIDv2) PD1() *PD1 {
	return m.pd1
}

func (m *SIU_S12_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *SIU_S12_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *SIU_S12_PIDv2) AllOBX() []*OBX {
	return m.obx
}

func (m *SIU_S12_PIDv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m SIU_S12_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pd1": m.pd1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"dg1": m.dg1,
	}, nil
}

type SIU_S12_RGSv2 struct {
	rgs *RGS                 `json:"rgs,omitempty"` // Required
	ais []*SIU_S12_RGS_AISv2 `json:"ais,omitempty"`
	aig []*SIU_S12_RGS_AIGv2 `json:"aig,omitempty"`
	ail []*SIU_S12_RGS_AILv2 `json:"ail,omitempty"`
	aip []*SIU_S12_RGS_AIPv2 `json:"aip,omitempty"`
}

func (m *SIU_S12_RGSv2) RGS() *RGS {
	return m.rgs
}

func (m *SIU_S12_RGSv2) GroupByAIS() []*SIU_S12_RGS_AISv2 {
	return m.ais
}

func (m *SIU_S12_RGSv2) GroupByAIG() []*SIU_S12_RGS_AIGv2 {
	return m.aig
}

func (m *SIU_S12_RGSv2) GroupByAIL() []*SIU_S12_RGS_AILv2 {
	return m.ail
}

func (m *SIU_S12_RGSv2) GroupByAIP() []*SIU_S12_RGS_AIPv2 {
	return m.aip
}

func (m SIU_S12_RGSv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rgs": m.rgs,
		"ais": m.ais,
		"aig": m.aig,
		"ail": m.ail,
		"aip": m.aip,
	}, nil
}

type SIU_S12_RGS_AISv2 struct {
	ais *AIS   `json:"ais,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SIU_S12_RGS_AISv2) AIS() *AIS {
	return m.ais
}

func (m *SIU_S12_RGS_AISv2) AllNTE() []*NTE {
	return m.nte
}

func (m SIU_S12_RGS_AISv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ais": m.ais,
		"nte": m.nte,
	}, nil
}

type SIU_S12_RGS_AIGv2 struct {
	aig *AIG   `json:"aig,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SIU_S12_RGS_AIGv2) AIG() *AIG {
	return m.aig
}

func (m *SIU_S12_RGS_AIGv2) AllNTE() []*NTE {
	return m.nte
}

func (m SIU_S12_RGS_AIGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aig": m.aig,
		"nte": m.nte,
	}, nil
}

type SIU_S12_RGS_AILv2 struct {
	ail *AIL   `json:"ail,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SIU_S12_RGS_AILv2) AIL() *AIL {
	return m.ail
}

func (m *SIU_S12_RGS_AILv2) AllNTE() []*NTE {
	return m.nte
}

func (m SIU_S12_RGS_AILv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ail": m.ail,
		"nte": m.nte,
	}, nil
}

type SIU_S12_RGS_AIPv2 struct {
	aip *AIP   `json:"aip,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SIU_S12_RGS_AIPv2) AIP() *AIP {
	return m.aip
}

func (m *SIU_S12_RGS_AIPv2) AllNTE() []*NTE {
	return m.nte
}

func (m SIU_S12_RGS_AIPv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aip": m.aip,
		"nte": m.nte,
	}, nil
}

type SPQ_Q01v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	spr *SPR `json:"spr,omitempty"` // Required
	rdf *RDF `json:"rdf,omitempty"`
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *SPQ_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *SPQ_Q01v2) SPR() *SPR {
	return m.spr
}

func (m *SPQ_Q01v2) RDF() *RDF {
	return m.rdf
}

func (m *SPQ_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m SPQ_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"spr": m.spr,
		"rdf": m.rdf,
		"dsc": m.dsc,
	}, nil
}

type SPQ_Q08v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	spr *SPR   `json:"spr,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *SPQ_Q08v2) MSH() *MSH {
	return m.msh
}

func (m *SPQ_Q08v2) AllSFT() []*SFT {
	return m.sft
}

func (m *SPQ_Q08v2) SPR() *SPR {
	return m.spr
}

func (m *SPQ_Q08v2) RDF() *RDF {
	return m.rdf
}

func (m *SPQ_Q08v2) DSC() *DSC {
	return m.dsc
}

func (m SPQ_Q08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"spr": m.spr,
		"rdf": m.rdf,
		"dsc": m.dsc,
	}, nil
}

type SQM_S25v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	arq *ARQ             `json:"arq,omitempty"` // Required
	apr *APR             `json:"apr,omitempty"`
	pid *PID             `json:"pid,omitempty"`
	rgs []*SQM_S25_RGSv2 `json:"rgs,omitempty"` // Required
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *SQM_S25v2) MSH() *MSH {
	return m.msh
}

func (m *SQM_S25v2) QRD() *QRD {
	return m.qrd
}

func (m *SQM_S25v2) QRF() *QRF {
	return m.qrf
}

func (m *SQM_S25v2) ARQ() *ARQ {
	return m.arq
}

func (m *SQM_S25v2) APR() *APR {
	return m.apr
}

func (m *SQM_S25v2) PID() *PID {
	return m.pid
}

func (m *SQM_S25v2) GroupByRGS() []*SQM_S25_RGSv2 {
	return m.rgs
}

func (m *SQM_S25v2) DSC() *DSC {
	return m.dsc
}

func (m SQM_S25v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"arq": m.arq,
		"apr": m.apr,
		"pid": m.pid,
		"rgs": m.rgs,
		"dsc": m.dsc,
	}, nil
}

type SQM_S25_RGSv2 struct {
	rgs *RGS                 `json:"rgs,omitempty"` // Required
	ais []*SQM_S25_RGS_AISv2 `json:"ais,omitempty"`
	aig []*SQM_S25_RGS_AIGv2 `json:"aig,omitempty"`
	aip []*SQM_S25_RGS_AIPv2 `json:"aip,omitempty"`
	ail []*SQM_S25_RGS_AILv2 `json:"ail,omitempty"`
}

func (m *SQM_S25_RGSv2) RGS() *RGS {
	return m.rgs
}

func (m *SQM_S25_RGSv2) GroupByAIS() []*SQM_S25_RGS_AISv2 {
	return m.ais
}

func (m *SQM_S25_RGSv2) GroupByAIG() []*SQM_S25_RGS_AIGv2 {
	return m.aig
}

func (m *SQM_S25_RGSv2) GroupByAIP() []*SQM_S25_RGS_AIPv2 {
	return m.aip
}

func (m *SQM_S25_RGSv2) GroupByAIL() []*SQM_S25_RGS_AILv2 {
	return m.ail
}

func (m SQM_S25_RGSv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rgs": m.rgs,
		"ais": m.ais,
		"aig": m.aig,
		"aip": m.aip,
		"ail": m.ail,
	}, nil
}

type SQM_S25_RGS_AISv2 struct {
	ais *AIS `json:"ais,omitempty"` // Required
	apr *APR `json:"apr,omitempty"`
}

func (m *SQM_S25_RGS_AISv2) AIS() *AIS {
	return m.ais
}

func (m *SQM_S25_RGS_AISv2) APR() *APR {
	return m.apr
}

func (m SQM_S25_RGS_AISv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ais": m.ais,
		"apr": m.apr,
	}, nil
}

type SQM_S25_RGS_AIGv2 struct {
	aig *AIG `json:"aig,omitempty"` // Required
	apr *APR `json:"apr,omitempty"`
}

func (m *SQM_S25_RGS_AIGv2) AIG() *AIG {
	return m.aig
}

func (m *SQM_S25_RGS_AIGv2) APR() *APR {
	return m.apr
}

func (m SQM_S25_RGS_AIGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aig": m.aig,
		"apr": m.apr,
	}, nil
}

type SQM_S25_RGS_AIPv2 struct {
	aip *AIP `json:"aip,omitempty"` // Required
	apr *APR `json:"apr,omitempty"`
}

func (m *SQM_S25_RGS_AIPv2) AIP() *AIP {
	return m.aip
}

func (m *SQM_S25_RGS_AIPv2) APR() *APR {
	return m.apr
}

func (m SQM_S25_RGS_AIPv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aip": m.aip,
		"apr": m.apr,
	}, nil
}

type SQM_S25_RGS_AILv2 struct {
	ail *AIL `json:"ail,omitempty"` // Required
	apr *APR `json:"apr,omitempty"`
}

func (m *SQM_S25_RGS_AILv2) AIL() *AIL {
	return m.ail
}

func (m *SQM_S25_RGS_AILv2) APR() *APR {
	return m.apr
}

func (m SQM_S25_RGS_AILv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ail": m.ail,
		"apr": m.apr,
	}, nil
}

type SQR_S25v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	qak *QAK             `json:"qak,omitempty"` // Required
	sch []*SQR_S25_SCHv2 `json:"sch,omitempty"`
	dsc *DSC             `json:"dsc,omitempty"`
}

func (m *SQR_S25v2) MSH() *MSH {
	return m.msh
}

func (m *SQR_S25v2) MSA() *MSA {
	return m.msa
}

func (m *SQR_S25v2) AllERR() []*ERR {
	return m.err
}

func (m *SQR_S25v2) QAK() *QAK {
	return m.qak
}

func (m *SQR_S25v2) GroupBySCH() []*SQR_S25_SCHv2 {
	return m.sch
}

func (m *SQR_S25v2) DSC() *DSC {
	return m.dsc
}

func (m SQR_S25v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"sch": m.sch,
		"dsc": m.dsc,
	}, nil
}

type SQR_S25_SCHv2 struct {
	sch *SCH                 `json:"sch,omitempty"` // Required
	tq1 []*TQ1               `json:"tq_1,omitempty"`
	nte []*NTE               `json:"nte,omitempty"`
	pid *PID                 `json:"pid,omitempty"` // Required
	pv1 *PV1                 `json:"pv_1,omitempty"`
	pv2 *PV2                 `json:"pv_2,omitempty"`
	dg1 *DG1                 `json:"dg_1,omitempty"`
	rgs []*SQR_S25_SCH_RGSv2 `json:"rgs,omitempty"` // Required
}

func (m *SQR_S25_SCHv2) SCH() *SCH {
	return m.sch
}

func (m *SQR_S25_SCHv2) AllTQ1() []*TQ1 {
	return m.tq1
}

func (m *SQR_S25_SCHv2) AllNTE() []*NTE {
	return m.nte
}

func (m *SQR_S25_SCHv2) PID() *PID {
	return m.pid
}

func (m *SQR_S25_SCHv2) PV1() *PV1 {
	return m.pv1
}

func (m *SQR_S25_SCHv2) PV2() *PV2 {
	return m.pv2
}

func (m *SQR_S25_SCHv2) DG1() *DG1 {
	return m.dg1
}

func (m *SQR_S25_SCHv2) GroupByRGS() []*SQR_S25_SCH_RGSv2 {
	return m.rgs
}

func (m SQR_S25_SCHv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sch": m.sch,
		"tq1": m.tq1,
		"nte": m.nte,
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"dg1": m.dg1,
		"rgs": m.rgs,
	}, nil
}

type SQR_S25_SCH_RGSv2 struct {
	rgs *RGS                     `json:"rgs,omitempty"` // Required
	ais []*SQR_S25_SCH_RGS_AISv2 `json:"ais,omitempty"`
	aig []*SQR_S25_SCH_RGS_AIGv2 `json:"aig,omitempty"`
	aip []*SQR_S25_SCH_RGS_AIPv2 `json:"aip,omitempty"`
	ail []*SQR_S25_SCH_RGS_AILv2 `json:"ail,omitempty"`
}

func (m *SQR_S25_SCH_RGSv2) RGS() *RGS {
	return m.rgs
}

func (m *SQR_S25_SCH_RGSv2) GroupByAIS() []*SQR_S25_SCH_RGS_AISv2 {
	return m.ais
}

func (m *SQR_S25_SCH_RGSv2) GroupByAIG() []*SQR_S25_SCH_RGS_AIGv2 {
	return m.aig
}

func (m *SQR_S25_SCH_RGSv2) GroupByAIP() []*SQR_S25_SCH_RGS_AIPv2 {
	return m.aip
}

func (m *SQR_S25_SCH_RGSv2) GroupByAIL() []*SQR_S25_SCH_RGS_AILv2 {
	return m.ail
}

func (m SQR_S25_SCH_RGSv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rgs": m.rgs,
		"ais": m.ais,
		"aig": m.aig,
		"aip": m.aip,
		"ail": m.ail,
	}, nil
}

type SQR_S25_SCH_RGS_AISv2 struct {
	ais *AIS   `json:"ais,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SQR_S25_SCH_RGS_AISv2) AIS() *AIS {
	return m.ais
}

func (m *SQR_S25_SCH_RGS_AISv2) AllNTE() []*NTE {
	return m.nte
}

func (m SQR_S25_SCH_RGS_AISv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ais": m.ais,
		"nte": m.nte,
	}, nil
}

type SQR_S25_SCH_RGS_AIGv2 struct {
	aig *AIG   `json:"aig,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SQR_S25_SCH_RGS_AIGv2) AIG() *AIG {
	return m.aig
}

func (m *SQR_S25_SCH_RGS_AIGv2) AllNTE() []*NTE {
	return m.nte
}

func (m SQR_S25_SCH_RGS_AIGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aig": m.aig,
		"nte": m.nte,
	}, nil
}

type SQR_S25_SCH_RGS_AIPv2 struct {
	aip *AIP   `json:"aip,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SQR_S25_SCH_RGS_AIPv2) AIP() *AIP {
	return m.aip
}

func (m *SQR_S25_SCH_RGS_AIPv2) AllNTE() []*NTE {
	return m.nte
}

func (m SQR_S25_SCH_RGS_AIPv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aip": m.aip,
		"nte": m.nte,
	}, nil
}

type SQR_S25_SCH_RGS_AILv2 struct {
	ail *AIL   `json:"ail,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SQR_S25_SCH_RGS_AILv2) AIL() *AIL {
	return m.ail
}

func (m *SQR_S25_SCH_RGS_AILv2) AllNTE() []*NTE {
	return m.nte
}

func (m SQR_S25_SCH_RGS_AILv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ail": m.ail,
		"nte": m.nte,
	}, nil
}

type SRM_S01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	arq *ARQ             `json:"arq,omitempty"` // Required
	apr *APR             `json:"apr,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid []*SRM_S01_PIDv2 `json:"pid,omitempty"`
	rgs []*SRM_S01_RGSv2 `json:"rgs,omitempty"` // Required
}

func (m *SRM_S01v2) MSH() *MSH {
	return m.msh
}

func (m *SRM_S01v2) ARQ() *ARQ {
	return m.arq
}

func (m *SRM_S01v2) APR() *APR {
	return m.apr
}

func (m *SRM_S01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *SRM_S01v2) GroupByPID() []*SRM_S01_PIDv2 {
	return m.pid
}

func (m *SRM_S01v2) GroupByRGS() []*SRM_S01_RGSv2 {
	return m.rgs
}

func (m SRM_S01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"arq": m.arq,
		"apr": m.apr,
		"nte": m.nte,
		"pid": m.pid,
		"rgs": m.rgs,
	}, nil
}

type SRM_S01_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pv1 *PV1   `json:"pv_1,omitempty"`
	pv2 *PV2   `json:"pv_2,omitempty"`
	obx []*OBX `json:"obx,omitempty"`
	dg1 []*DG1 `json:"dg_1,omitempty"`
}

func (m *SRM_S01_PIDv2) PID() *PID {
	return m.pid
}

func (m *SRM_S01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *SRM_S01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *SRM_S01_PIDv2) AllOBX() []*OBX {
	return m.obx
}

func (m *SRM_S01_PIDv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m SRM_S01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"obx": m.obx,
		"dg1": m.dg1,
	}, nil
}

type SRM_S01_RGSv2 struct {
	rgs *RGS                 `json:"rgs,omitempty"` // Required
	ais []*SRM_S01_RGS_AISv2 `json:"ais,omitempty"`
	aig []*SRM_S01_RGS_AIGv2 `json:"aig,omitempty"`
	ail []*SRM_S01_RGS_AILv2 `json:"ail,omitempty"`
	aip []*SRM_S01_RGS_AIPv2 `json:"aip,omitempty"`
}

func (m *SRM_S01_RGSv2) RGS() *RGS {
	return m.rgs
}

func (m *SRM_S01_RGSv2) GroupByAIS() []*SRM_S01_RGS_AISv2 {
	return m.ais
}

func (m *SRM_S01_RGSv2) GroupByAIG() []*SRM_S01_RGS_AIGv2 {
	return m.aig
}

func (m *SRM_S01_RGSv2) GroupByAIL() []*SRM_S01_RGS_AILv2 {
	return m.ail
}

func (m *SRM_S01_RGSv2) GroupByAIP() []*SRM_S01_RGS_AIPv2 {
	return m.aip
}

func (m SRM_S01_RGSv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rgs": m.rgs,
		"ais": m.ais,
		"aig": m.aig,
		"ail": m.ail,
		"aip": m.aip,
	}, nil
}

type SRM_S01_RGS_AISv2 struct {
	ais *AIS   `json:"ais,omitempty"` // Required
	apr *APR   `json:"apr,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SRM_S01_RGS_AISv2) AIS() *AIS {
	return m.ais
}

func (m *SRM_S01_RGS_AISv2) APR() *APR {
	return m.apr
}

func (m *SRM_S01_RGS_AISv2) AllNTE() []*NTE {
	return m.nte
}

func (m SRM_S01_RGS_AISv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ais": m.ais,
		"apr": m.apr,
		"nte": m.nte,
	}, nil
}

type SRM_S01_RGS_AIGv2 struct {
	aig *AIG   `json:"aig,omitempty"` // Required
	apr *APR   `json:"apr,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SRM_S01_RGS_AIGv2) AIG() *AIG {
	return m.aig
}

func (m *SRM_S01_RGS_AIGv2) APR() *APR {
	return m.apr
}

func (m *SRM_S01_RGS_AIGv2) AllNTE() []*NTE {
	return m.nte
}

func (m SRM_S01_RGS_AIGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aig": m.aig,
		"apr": m.apr,
		"nte": m.nte,
	}, nil
}

type SRM_S01_RGS_AILv2 struct {
	ail *AIL   `json:"ail,omitempty"` // Required
	apr *APR   `json:"apr,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SRM_S01_RGS_AILv2) AIL() *AIL {
	return m.ail
}

func (m *SRM_S01_RGS_AILv2) APR() *APR {
	return m.apr
}

func (m *SRM_S01_RGS_AILv2) AllNTE() []*NTE {
	return m.nte
}

func (m SRM_S01_RGS_AILv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ail": m.ail,
		"apr": m.apr,
		"nte": m.nte,
	}, nil
}

type SRM_S01_RGS_AIPv2 struct {
	aip *AIP   `json:"aip,omitempty"` // Required
	apr *APR   `json:"apr,omitempty"`
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SRM_S01_RGS_AIPv2) AIP() *AIP {
	return m.aip
}

func (m *SRM_S01_RGS_AIPv2) APR() *APR {
	return m.apr
}

func (m *SRM_S01_RGS_AIPv2) AllNTE() []*NTE {
	return m.nte
}

func (m SRM_S01_RGS_AIPv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aip": m.aip,
		"apr": m.apr,
		"nte": m.nte,
	}, nil
}

type SRR_S01v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	err []*ERR           `json:"err,omitempty"`
	sch *SCH             `json:"sch,omitempty"` // Required
	tq1 []*TQ1           `json:"tq_1,omitempty"`
	nte []*NTE           `json:"nte,omitempty"`
	pid []*SRR_S01_PIDv2 `json:"pid,omitempty"`
	rgs []*SRR_S01_RGSv2 `json:"rgs,omitempty"` // Required
}

func (m *SRR_S01v2) MSH() *MSH {
	return m.msh
}

func (m *SRR_S01v2) MSA() *MSA {
	return m.msa
}

func (m *SRR_S01v2) AllERR() []*ERR {
	return m.err
}

func (m *SRR_S01v2) SCH() *SCH {
	return m.sch
}

func (m *SRR_S01v2) AllTQ1() []*TQ1 {
	return m.tq1
}

func (m *SRR_S01v2) AllNTE() []*NTE {
	return m.nte
}

func (m *SRR_S01v2) GroupByPID() []*SRR_S01_PIDv2 {
	return m.pid
}

func (m *SRR_S01v2) GroupByRGS() []*SRR_S01_RGSv2 {
	return m.rgs
}

func (m SRR_S01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"sch": m.sch,
		"tq1": m.tq1,
		"nte": m.nte,
		"pid": m.pid,
		"rgs": m.rgs,
	}, nil
}

type SRR_S01_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	pv1 *PV1   `json:"pv_1,omitempty"`
	pv2 *PV2   `json:"pv_2,omitempty"`
	dg1 []*DG1 `json:"dg_1,omitempty"`
}

func (m *SRR_S01_PIDv2) PID() *PID {
	return m.pid
}

func (m *SRR_S01_PIDv2) PV1() *PV1 {
	return m.pv1
}

func (m *SRR_S01_PIDv2) PV2() *PV2 {
	return m.pv2
}

func (m *SRR_S01_PIDv2) AllDG1() []*DG1 {
	return m.dg1
}

func (m SRR_S01_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"dg1": m.dg1,
	}, nil
}

type SRR_S01_RGSv2 struct {
	rgs *RGS                 `json:"rgs,omitempty"` // Required
	ais []*SRR_S01_RGS_AISv2 `json:"ais,omitempty"`
	aig []*SRR_S01_RGS_AIGv2 `json:"aig,omitempty"`
	ail []*SRR_S01_RGS_AILv2 `json:"ail,omitempty"`
	aip []*SRR_S01_RGS_AIPv2 `json:"aip,omitempty"`
}

func (m *SRR_S01_RGSv2) RGS() *RGS {
	return m.rgs
}

func (m *SRR_S01_RGSv2) GroupByAIS() []*SRR_S01_RGS_AISv2 {
	return m.ais
}

func (m *SRR_S01_RGSv2) GroupByAIG() []*SRR_S01_RGS_AIGv2 {
	return m.aig
}

func (m *SRR_S01_RGSv2) GroupByAIL() []*SRR_S01_RGS_AILv2 {
	return m.ail
}

func (m *SRR_S01_RGSv2) GroupByAIP() []*SRR_S01_RGS_AIPv2 {
	return m.aip
}

func (m SRR_S01_RGSv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"rgs": m.rgs,
		"ais": m.ais,
		"aig": m.aig,
		"ail": m.ail,
		"aip": m.aip,
	}, nil
}

type SRR_S01_RGS_AISv2 struct {
	ais *AIS   `json:"ais,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SRR_S01_RGS_AISv2) AIS() *AIS {
	return m.ais
}

func (m *SRR_S01_RGS_AISv2) AllNTE() []*NTE {
	return m.nte
}

func (m SRR_S01_RGS_AISv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ais": m.ais,
		"nte": m.nte,
	}, nil
}

type SRR_S01_RGS_AIGv2 struct {
	aig *AIG   `json:"aig,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SRR_S01_RGS_AIGv2) AIG() *AIG {
	return m.aig
}

func (m *SRR_S01_RGS_AIGv2) AllNTE() []*NTE {
	return m.nte
}

func (m SRR_S01_RGS_AIGv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aig": m.aig,
		"nte": m.nte,
	}, nil
}

type SRR_S01_RGS_AILv2 struct {
	ail *AIL   `json:"ail,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SRR_S01_RGS_AILv2) AIL() *AIL {
	return m.ail
}

func (m *SRR_S01_RGS_AILv2) AllNTE() []*NTE {
	return m.nte
}

func (m SRR_S01_RGS_AILv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"ail": m.ail,
		"nte": m.nte,
	}, nil
}

type SRR_S01_RGS_AIPv2 struct {
	aip *AIP   `json:"aip,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *SRR_S01_RGS_AIPv2) AIP() *AIP {
	return m.aip
}

func (m *SRR_S01_RGS_AIPv2) AllNTE() []*NTE {
	return m.nte
}

func (m SRR_S01_RGS_AIPv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"aip": m.aip,
		"nte": m.nte,
	}, nil
}

type SSR_U04v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	equ *EQU             `json:"equ,omitempty"` // Required
	sac []*SSR_U04_SACv2 `json:"sac,omitempty"` // Required
	rol *ROL             `json:"rol,omitempty"`
}

func (m *SSR_U04v2) MSH() *MSH {
	return m.msh
}

func (m *SSR_U04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *SSR_U04v2) EQU() *EQU {
	return m.equ
}

func (m *SSR_U04v2) GroupBySAC() []*SSR_U04_SACv2 {
	return m.sac
}

func (m *SSR_U04v2) ROL() *ROL {
	return m.rol
}

func (m SSR_U04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"sac": m.sac,
		"rol": m.rol,
	}, nil
}

type SSR_U04_SACv2 struct {
	sac *SAC   `json:"sac,omitempty"` // Required
	spm []*SPM `json:"spm,omitempty"`
}

func (m *SSR_U04_SACv2) SAC() *SAC {
	return m.sac
}

func (m *SSR_U04_SACv2) AllSPM() []*SPM {
	return m.spm
}

func (m SSR_U04_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"spm": m.spm,
	}, nil
}

type SSU_U03v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	equ *EQU             `json:"equ,omitempty"` // Required
	sac []*SSU_U03_SACv2 `json:"sac,omitempty"` // Required
	rol *ROL             `json:"rol,omitempty"`
}

func (m *SSU_U03v2) MSH() *MSH {
	return m.msh
}

func (m *SSU_U03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *SSU_U03v2) EQU() *EQU {
	return m.equ
}

func (m *SSU_U03v2) GroupBySAC() []*SSU_U03_SACv2 {
	return m.sac
}

func (m *SSU_U03v2) ROL() *ROL {
	return m.rol
}

func (m SSU_U03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"sac": m.sac,
		"rol": m.rol,
	}, nil
}

type SSU_U03_SACv2 struct {
	sac *SAC                 `json:"sac,omitempty"` // Required
	obx []*OBX               `json:"obx,omitempty"`
	spm []*SSU_U03_SAC_SPMv2 `json:"spm,omitempty"`
}

func (m *SSU_U03_SACv2) SAC() *SAC {
	return m.sac
}

func (m *SSU_U03_SACv2) AllOBX() []*OBX {
	return m.obx
}

func (m *SSU_U03_SACv2) GroupBySPM() []*SSU_U03_SAC_SPMv2 {
	return m.spm
}

func (m SSU_U03_SACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"sac": m.sac,
		"obx": m.obx,
		"spm": m.spm,
	}, nil
}

type SSU_U03_SAC_SPMv2 struct {
	spm *SPM   `json:"spm,omitempty"` // Required
	obx []*OBX `json:"obx,omitempty"`
}

func (m *SSU_U03_SAC_SPMv2) SPM() *SPM {
	return m.spm
}

func (m *SSU_U03_SAC_SPMv2) AllOBX() []*OBX {
	return m.obx
}

func (m SSU_U03_SAC_SPMv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"obx": m.obx,
	}, nil
}

type SUR_P09v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	fac []*SUR_P09_FACv2 `json:"fac,omitempty"` // Required
}

func (m *SUR_P09v2) MSH() *MSH {
	return m.msh
}

func (m *SUR_P09v2) GroupByFAC() []*SUR_P09_FACv2 {
	return m.fac
}

func (m SUR_P09v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"fac": m.fac,
	}, nil
}

type SUR_P09_FACv2 struct {
	fac1 *FAC                  `json:"fac_1,omitempty"` // Required
	psh1 []*SUR_P09_FAC_PSH1v2 `json:"psh_1,omitempty"` // Required
	psh2 *PSH                  `json:"psh_2,omitempty"` // Required
	fac2 []*SUR_P09_FAC_FAC2v2 `json:"fac_2,omitempty"` // Required
	ed   *ED                   `json:"ed,omitempty"`    // Required
}

func (m *SUR_P09_FACv2) FAC1() *FAC {
	return m.fac1
}

func (m *SUR_P09_FACv2) GroupByPSH1() []*SUR_P09_FAC_PSH1v2 {
	return m.psh1
}

func (m *SUR_P09_FACv2) PSH2() *PSH {
	return m.psh2
}

func (m *SUR_P09_FACv2) GroupByFAC2() []*SUR_P09_FAC_FAC2v2 {
	return m.fac2
}

func (m *SUR_P09_FACv2) ED() *ED {
	return m.ed
}

func (m SUR_P09_FACv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"fac1": m.fac1,
		"psh1": m.psh1,
		"psh2": m.psh2,
		"fac2": m.fac2,
		"ed":   m.ed,
	}, nil
}

type SUR_P09_FAC_PSH1v2 struct {
	psh *PSH `json:"psh,omitempty"` // Required
	pdc *PDC `json:"pdc,omitempty"` // Required
}

func (m *SUR_P09_FAC_PSH1v2) PSH() *PSH {
	return m.psh
}

func (m *SUR_P09_FAC_PSH1v2) PDC() *PDC {
	return m.pdc
}

func (m SUR_P09_FAC_PSH1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"psh": m.psh,
		"pdc": m.pdc,
	}, nil
}

type SUR_P09_FAC_FAC2v2 struct {
	fac *FAC `json:"fac,omitempty"` // Required
	pdc *PDC `json:"pdc,omitempty"` // Required
	nte *NTE `json:"nte,omitempty"` // Required
}

func (m *SUR_P09_FAC_FAC2v2) FAC() *FAC {
	return m.fac
}

func (m *SUR_P09_FAC_FAC2v2) PDC() *PDC {
	return m.pdc
}

func (m *SUR_P09_FAC_FAC2v2) NTE() *NTE {
	return m.nte
}

func (m SUR_P09_FAC_FAC2v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"fac": m.fac,
		"pdc": m.pdc,
		"nte": m.nte,
	}, nil
}

type TBR_Q01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"` // Required
	rdt []*RDT `json:"rdt,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *TBR_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *TBR_Q01v2) MSA() *MSA {
	return m.msa
}

func (m *TBR_Q01v2) ERR() *ERR {
	return m.err
}

func (m *TBR_Q01v2) QAK() *QAK {
	return m.qak
}

func (m *TBR_Q01v2) RDF() *RDF {
	return m.rdf
}

func (m *TBR_Q01v2) AllRDT() []*RDT {
	return m.rdt
}

func (m *TBR_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m TBR_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"rdf": m.rdf,
		"rdt": m.rdt,
		"dsc": m.dsc,
	}, nil
}

type TBR_R08v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	msa *MSA   `json:"msa,omitempty"` // Required
	err *ERR   `json:"err,omitempty"`
	qak *QAK   `json:"qak,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"` // Required
	rdt []*RDT `json:"rdt,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *TBR_R08v2) MSH() *MSH {
	return m.msh
}

func (m *TBR_R08v2) AllSFT() []*SFT {
	return m.sft
}

func (m *TBR_R08v2) MSA() *MSA {
	return m.msa
}

func (m *TBR_R08v2) ERR() *ERR {
	return m.err
}

func (m *TBR_R08v2) QAK() *QAK {
	return m.qak
}

func (m *TBR_R08v2) RDF() *RDF {
	return m.rdf
}

func (m *TBR_R08v2) AllRDT() []*RDT {
	return m.rdt
}

func (m *TBR_R08v2) DSC() *DSC {
	return m.dsc
}

func (m TBR_R08v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"msa": m.msa,
		"err": m.err,
		"qak": m.qak,
		"rdf": m.rdf,
		"rdt": m.rdt,
		"dsc": m.dsc,
	}, nil
}

type TCU_U10v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	equ *EQU             `json:"equ,omitempty"` // Required
	tcc []*TCU_U10_TCCv2 `json:"tcc,omitempty"` // Required
	rol *ROL             `json:"rol,omitempty"`
}

func (m *TCU_U10v2) MSH() *MSH {
	return m.msh
}

func (m *TCU_U10v2) AllSFT() []*SFT {
	return m.sft
}

func (m *TCU_U10v2) EQU() *EQU {
	return m.equ
}

func (m *TCU_U10v2) GroupByTCC() []*TCU_U10_TCCv2 {
	return m.tcc
}

func (m *TCU_U10v2) ROL() *ROL {
	return m.rol
}

func (m TCU_U10v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"equ": m.equ,
		"tcc": m.tcc,
		"rol": m.rol,
	}, nil
}

type TCU_U10_TCCv2 struct {
	spm *SPM   `json:"spm,omitempty"`
	tcc []*TCC `json:"tcc,omitempty"` // Required
}

func (m *TCU_U10_TCCv2) SPM() *SPM {
	return m.spm
}

func (m *TCU_U10_TCCv2) AllTCC() []*TCC {
	return m.tcc
}

func (m TCU_U10_TCCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"spm": m.spm,
		"tcc": m.tcc,
	}, nil
}

type UDM_Q05v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	urd *URD   `json:"urd,omitempty"` // Required
	urs *URS   `json:"urs,omitempty"`
	dsp []*DSP `json:"dsp,omitempty"` // Required
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *UDM_Q05v2) MSH() *MSH {
	return m.msh
}

func (m *UDM_Q05v2) AllSFT() []*SFT {
	return m.sft
}

func (m *UDM_Q05v2) URD() *URD {
	return m.urd
}

func (m *UDM_Q05v2) URS() *URS {
	return m.urs
}

func (m *UDM_Q05v2) AllDSP() []*DSP {
	return m.dsp
}

func (m *UDM_Q05v2) DSC() *DSC {
	return m.dsc
}

func (m UDM_Q05v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"urd": m.urd,
		"urs": m.urs,
		"dsp": m.dsp,
		"dsc": m.dsc,
	}, nil
}

type VQQ_Q01v2 struct {
	msh *MSH `json:"msh,omitempty"` // Required
	vtq *VTQ `json:"vtq,omitempty"` // Required
	rdf *RDF `json:"rdf,omitempty"`
	dsc *DSC `json:"dsc,omitempty"`
}

func (m *VQQ_Q01v2) MSH() *MSH {
	return m.msh
}

func (m *VQQ_Q01v2) VTQ() *VTQ {
	return m.vtq
}

func (m *VQQ_Q01v2) RDF() *RDF {
	return m.rdf
}

func (m *VQQ_Q01v2) DSC() *DSC {
	return m.dsc
}

func (m VQQ_Q01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"vtq": m.vtq,
		"rdf": m.rdf,
		"dsc": m.dsc,
	}, nil
}

type VQQ_Q07v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	vtq *VTQ   `json:"vtq,omitempty"` // Required
	rdf *RDF   `json:"rdf,omitempty"`
	dsc *DSC   `json:"dsc,omitempty"`
}

func (m *VQQ_Q07v2) MSH() *MSH {
	return m.msh
}

func (m *VQQ_Q07v2) AllSFT() []*SFT {
	return m.sft
}

func (m *VQQ_Q07v2) VTQ() *VTQ {
	return m.vtq
}

func (m *VQQ_Q07v2) RDF() *RDF {
	return m.rdf
}

func (m *VQQ_Q07v2) DSC() *DSC {
	return m.dsc
}

func (m VQQ_Q07v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"vtq": m.vtq,
		"rdf": m.rdf,
		"dsc": m.dsc,
	}, nil
}

type VXQ_V01v2 struct {
	msh *MSH   `json:"msh,omitempty"` // Required
	sft []*SFT `json:"sft,omitempty"`
	qrd *QRD   `json:"qrd,omitempty"` // Required
	qrf *QRF   `json:"qrf,omitempty"`
}

func (m *VXQ_V01v2) MSH() *MSH {
	return m.msh
}

func (m *VXQ_V01v2) AllSFT() []*SFT {
	return m.sft
}

func (m *VXQ_V01v2) QRD() *QRD {
	return m.qrd
}

func (m *VXQ_V01v2) QRF() *QRF {
	return m.qrf
}

func (m VXQ_V01v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
	}, nil
}

type VXR_V03v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	pid *PID             `json:"pid,omitempty"` // Required
	pd1 *PD1             `json:"pd_1,omitempty"`
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*VXR_V03_IN1v2 `json:"in_1,omitempty"`
	orc []*VXR_V03_ORCv2 `json:"orc,omitempty"`
}

func (m *VXR_V03v2) MSH() *MSH {
	return m.msh
}

func (m *VXR_V03v2) MSA() *MSA {
	return m.msa
}

func (m *VXR_V03v2) AllSFT() []*SFT {
	return m.sft
}

func (m *VXR_V03v2) QRD() *QRD {
	return m.qrd
}

func (m *VXR_V03v2) QRF() *QRF {
	return m.qrf
}

func (m *VXR_V03v2) PID() *PID {
	return m.pid
}

func (m *VXR_V03v2) PD1() *PD1 {
	return m.pd1
}

func (m *VXR_V03v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *VXR_V03v2) PV1() *PV1 {
	return m.pv1
}

func (m *VXR_V03v2) PV2() *PV2 {
	return m.pv2
}

func (m *VXR_V03v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *VXR_V03v2) GroupByIN1() []*VXR_V03_IN1v2 {
	return m.in1
}

func (m *VXR_V03v2) GroupByORC() []*VXR_V03_ORCv2 {
	return m.orc
}

func (m VXR_V03v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
		"pd1": m.pd1,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"gt1": m.gt1,
		"in1": m.in1,
		"orc": m.orc,
	}, nil
}

type VXR_V03_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *VXR_V03_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *VXR_V03_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *VXR_V03_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m VXR_V03_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type VXR_V03_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*VXR_V03_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxa *RXA                 `json:"rxa,omitempty"` // Required
	rxr *RXR                 `json:"rxr,omitempty"`
	obx []*VXR_V03_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *VXR_V03_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *VXR_V03_ORCv2) GroupByTQ1() []*VXR_V03_ORC_TQ1v2 {
	return m.tq1
}

func (m *VXR_V03_ORCv2) RXA() *RXA {
	return m.rxa
}

func (m *VXR_V03_ORCv2) RXR() *RXR {
	return m.rxr
}

func (m *VXR_V03_ORCv2) GroupByOBX() []*VXR_V03_ORC_OBXv2 {
	return m.obx
}

func (m VXR_V03_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxa": m.rxa,
		"rxr": m.rxr,
		"obx": m.obx,
	}, nil
}

type VXR_V03_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *VXR_V03_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *VXR_V03_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m VXR_V03_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type VXR_V03_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *VXR_V03_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *VXR_V03_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m VXR_V03_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type VXU_V04v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	pid *PID             `json:"pid,omitempty"` // Required
	pd1 *PD1             `json:"pd_1,omitempty"`
	nk1 []*NK1           `json:"nk_1,omitempty"`
	pv1 *PV1             `json:"pv_1,omitempty"` // Required
	pv2 *PV2             `json:"pv_2,omitempty"`
	gt1 []*GT1           `json:"gt_1,omitempty"`
	in1 []*VXU_V04_IN1v2 `json:"in_1,omitempty"`
	orc []*VXU_V04_ORCv2 `json:"orc,omitempty"`
}

func (m *VXU_V04v2) MSH() *MSH {
	return m.msh
}

func (m *VXU_V04v2) AllSFT() []*SFT {
	return m.sft
}

func (m *VXU_V04v2) PID() *PID {
	return m.pid
}

func (m *VXU_V04v2) PD1() *PD1 {
	return m.pd1
}

func (m *VXU_V04v2) AllNK1() []*NK1 {
	return m.nk1
}

func (m *VXU_V04v2) PV1() *PV1 {
	return m.pv1
}

func (m *VXU_V04v2) PV2() *PV2 {
	return m.pv2
}

func (m *VXU_V04v2) AllGT1() []*GT1 {
	return m.gt1
}

func (m *VXU_V04v2) GroupByIN1() []*VXU_V04_IN1v2 {
	return m.in1
}

func (m *VXU_V04v2) GroupByORC() []*VXU_V04_ORCv2 {
	return m.orc
}

func (m VXU_V04v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"sft": m.sft,
		"pid": m.pid,
		"pd1": m.pd1,
		"nk1": m.nk1,
		"pv1": m.pv1,
		"pv2": m.pv2,
		"gt1": m.gt1,
		"in1": m.in1,
		"orc": m.orc,
	}, nil
}

type VXU_V04_IN1v2 struct {
	in1 *IN1 `json:"in_1,omitempty"` // Required
	in2 *IN2 `json:"in_2,omitempty"`
	in3 *IN3 `json:"in_3,omitempty"`
}

func (m *VXU_V04_IN1v2) IN1() *IN1 {
	return m.in1
}

func (m *VXU_V04_IN1v2) IN2() *IN2 {
	return m.in2
}

func (m *VXU_V04_IN1v2) IN3() *IN3 {
	return m.in3
}

func (m VXU_V04_IN1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"in1": m.in1,
		"in2": m.in2,
		"in3": m.in3,
	}, nil
}

type VXU_V04_ORCv2 struct {
	orc *ORC                 `json:"orc,omitempty"` // Required
	tq1 []*VXU_V04_ORC_TQ1v2 `json:"tq_1,omitempty"`
	rxa *RXA                 `json:"rxa,omitempty"` // Required
	rxr *RXR                 `json:"rxr,omitempty"`
	obx []*VXU_V04_ORC_OBXv2 `json:"obx,omitempty"`
}

func (m *VXU_V04_ORCv2) ORC() *ORC {
	return m.orc
}

func (m *VXU_V04_ORCv2) GroupByTQ1() []*VXU_V04_ORC_TQ1v2 {
	return m.tq1
}

func (m *VXU_V04_ORCv2) RXA() *RXA {
	return m.rxa
}

func (m *VXU_V04_ORCv2) RXR() *RXR {
	return m.rxr
}

func (m *VXU_V04_ORCv2) GroupByOBX() []*VXU_V04_ORC_OBXv2 {
	return m.obx
}

func (m VXU_V04_ORCv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"orc": m.orc,
		"tq1": m.tq1,
		"rxa": m.rxa,
		"rxr": m.rxr,
		"obx": m.obx,
	}, nil
}

type VXU_V04_ORC_TQ1v2 struct {
	tq1 *TQ1   `json:"tq_1,omitempty"` // Required
	tq2 []*TQ2 `json:"tq_2,omitempty"`
}

func (m *VXU_V04_ORC_TQ1v2) TQ1() *TQ1 {
	return m.tq1
}

func (m *VXU_V04_ORC_TQ1v2) AllTQ2() []*TQ2 {
	return m.tq2
}

func (m VXU_V04_ORC_TQ1v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"tq1": m.tq1,
		"tq2": m.tq2,
	}, nil
}

type VXU_V04_ORC_OBXv2 struct {
	obx *OBX   `json:"obx,omitempty"` // Required
	nte []*NTE `json:"nte,omitempty"`
}

func (m *VXU_V04_ORC_OBXv2) OBX() *OBX {
	return m.obx
}

func (m *VXU_V04_ORC_OBXv2) AllNTE() []*NTE {
	return m.nte
}

func (m VXU_V04_ORC_OBXv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"obx": m.obx,
		"nte": m.nte,
	}, nil
}

type VXX_V02v2 struct {
	msh *MSH             `json:"msh,omitempty"` // Required
	msa *MSA             `json:"msa,omitempty"` // Required
	sft []*SFT           `json:"sft,omitempty"`
	qrd *QRD             `json:"qrd,omitempty"` // Required
	qrf *QRF             `json:"qrf,omitempty"`
	pid []*VXX_V02_PIDv2 `json:"pid,omitempty"` // Required
}

func (m *VXX_V02v2) MSH() *MSH {
	return m.msh
}

func (m *VXX_V02v2) MSA() *MSA {
	return m.msa
}

func (m *VXX_V02v2) AllSFT() []*SFT {
	return m.sft
}

func (m *VXX_V02v2) QRD() *QRD {
	return m.qrd
}

func (m *VXX_V02v2) QRF() *QRF {
	return m.qrf
}

func (m *VXX_V02v2) GroupByPID() []*VXX_V02_PIDv2 {
	return m.pid
}

func (m VXX_V02v2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"msh": m.msh,
		"msa": m.msa,
		"sft": m.sft,
		"qrd": m.qrd,
		"qrf": m.qrf,
		"pid": m.pid,
	}, nil
}

type VXX_V02_PIDv2 struct {
	pid *PID   `json:"pid,omitempty"` // Required
	nk1 []*NK1 `json:"nk_1,omitempty"`
}

func (m *VXX_V02_PIDv2) PID() *PID {
	return m.pid
}

func (m *VXX_V02_PIDv2) AllNK1() []*NK1 {
	return m.nk1
}

func (m VXX_V02_PIDv2) MarshalYAML() (interface{}, error) {
	return map[string]interface{}{
		"pid": m.pid,
		"nk1": m.nk1,
	}, nil
}

//  Types maps the name of an HL7 segment or message type to the type of the struct that
//  represents that segment or message type.
var Types = map[string]reflect.Type{}

func init() {
	Types["ABS"] = reflect.TypeOf(ABS{})
	Types["ACC"] = reflect.TypeOf(ACC{})
	Types["ADD"] = reflect.TypeOf(ADD{})
	Types["AFF"] = reflect.TypeOf(AFF{})
	Types["AIG"] = reflect.TypeOf(AIG{})
	Types["AIL"] = reflect.TypeOf(AIL{})
	Types["AIP"] = reflect.TypeOf(AIP{})
	Types["AIS"] = reflect.TypeOf(AIS{})
	Types["AL1"] = reflect.TypeOf(AL1{})
	Types["APR"] = reflect.TypeOf(APR{})
	Types["ARQ"] = reflect.TypeOf(ARQ{})
	Types["AUT"] = reflect.TypeOf(AUT{})
	Types["BHS"] = reflect.TypeOf(BHS{})
	Types["BLC"] = reflect.TypeOf(BLC{})
	Types["BLG"] = reflect.TypeOf(BLG{})
	Types["BPO"] = reflect.TypeOf(BPO{})
	Types["BPX"] = reflect.TypeOf(BPX{})
	Types["BTS"] = reflect.TypeOf(BTS{})
	Types["BTX"] = reflect.TypeOf(BTX{})
	Types["CDM"] = reflect.TypeOf(CDM{})
	Types["CER"] = reflect.TypeOf(CER{})
	Types["CM0"] = reflect.TypeOf(CM0{})
	Types["CM1"] = reflect.TypeOf(CM1{})
	Types["CM2"] = reflect.TypeOf(CM2{})
	Types["CNS"] = reflect.TypeOf(CNS{})
	Types["CON"] = reflect.TypeOf(CON{})
	Types["CSP"] = reflect.TypeOf(CSP{})
	Types["CSR"] = reflect.TypeOf(CSR{})
	Types["CSS"] = reflect.TypeOf(CSS{})
	Types["CTD"] = reflect.TypeOf(CTD{})
	Types["CTI"] = reflect.TypeOf(CTI{})
	Types["DB1"] = reflect.TypeOf(DB1{})
	Types["DG1"] = reflect.TypeOf(DG1{})
	Types["DRG"] = reflect.TypeOf(DRG{})
	Types["DSC"] = reflect.TypeOf(DSC{})
	Types["DSP"] = reflect.TypeOf(DSP{})
	Types["ECD"] = reflect.TypeOf(ECD{})
	Types["ECR"] = reflect.TypeOf(ECR{})
	Types["EDU"] = reflect.TypeOf(EDU{})
	Types["EQL"] = reflect.TypeOf(EQL{})
	Types["EQP"] = reflect.TypeOf(EQP{})
	Types["EQU"] = reflect.TypeOf(EQU{})
	Types["ERQ"] = reflect.TypeOf(ERQ{})
	Types["ERR"] = reflect.TypeOf(ERR{})
	Types["EVN"] = reflect.TypeOf(EVN{})
	Types["FAC"] = reflect.TypeOf(FAC{})
	Types["FHS"] = reflect.TypeOf(FHS{})
	Types["FT1"] = reflect.TypeOf(FT1{})
	Types["FTS"] = reflect.TypeOf(FTS{})
	Types["GOL"] = reflect.TypeOf(GOL{})
	Types["GP1"] = reflect.TypeOf(GP1{})
	Types["GP2"] = reflect.TypeOf(GP2{})
	Types["GT1"] = reflect.TypeOf(GT1{})
	Types["IAM"] = reflect.TypeOf(IAM{})
	Types["IIM"] = reflect.TypeOf(IIM{})
	Types["IN1"] = reflect.TypeOf(IN1{})
	Types["IN2"] = reflect.TypeOf(IN2{})
	Types["IN3"] = reflect.TypeOf(IN3{})
	Types["INV"] = reflect.TypeOf(INV{})
	Types["IPC"] = reflect.TypeOf(IPC{})
	Types["ISD"] = reflect.TypeOf(ISD{})
	Types["LAN"] = reflect.TypeOf(LAN{})
	Types["LCC"] = reflect.TypeOf(LCC{})
	Types["LCH"] = reflect.TypeOf(LCH{})
	Types["LDP"] = reflect.TypeOf(LDP{})
	Types["LOC"] = reflect.TypeOf(LOC{})
	Types["LRL"] = reflect.TypeOf(LRL{})
	Types["MFA"] = reflect.TypeOf(MFA{})
	Types["MFE"] = reflect.TypeOf(MFE{})
	Types["MFI"] = reflect.TypeOf(MFI{})
	Types["MRG"] = reflect.TypeOf(MRG{})
	Types["MSA"] = reflect.TypeOf(MSA{})
	Types["MSH"] = reflect.TypeOf(MSH{})
	Types["NCK"] = reflect.TypeOf(NCK{})
	Types["NDS"] = reflect.TypeOf(NDS{})
	Types["NK1"] = reflect.TypeOf(NK1{})
	Types["NPU"] = reflect.TypeOf(NPU{})
	Types["NSC"] = reflect.TypeOf(NSC{})
	Types["NST"] = reflect.TypeOf(NST{})
	Types["NTE"] = reflect.TypeOf(NTE{})
	Types["OBR"] = reflect.TypeOf(OBR{})
	Types["OBX"] = reflect.TypeOf(OBX{})
	Types["ODS"] = reflect.TypeOf(ODS{})
	Types["ODT"] = reflect.TypeOf(ODT{})
	Types["OM1"] = reflect.TypeOf(OM1{})
	Types["OM2"] = reflect.TypeOf(OM2{})
	Types["OM3"] = reflect.TypeOf(OM3{})
	Types["OM4"] = reflect.TypeOf(OM4{})
	Types["OM5"] = reflect.TypeOf(OM5{})
	Types["OM6"] = reflect.TypeOf(OM6{})
	Types["OM7"] = reflect.TypeOf(OM7{})
	Types["ORC"] = reflect.TypeOf(ORC{})
	Types["ORG"] = reflect.TypeOf(ORG{})
	Types["ORO"] = reflect.TypeOf(ORO{})
	Types["OVR"] = reflect.TypeOf(OVR{})
	Types["PCR"] = reflect.TypeOf(PCR{})
	Types["PD1"] = reflect.TypeOf(PD1{})
	Types["PDA"] = reflect.TypeOf(PDA{})
	Types["PDC"] = reflect.TypeOf(PDC{})
	Types["PEO"] = reflect.TypeOf(PEO{})
	Types["PES"] = reflect.TypeOf(PES{})
	Types["PID"] = reflect.TypeOf(PID{})
	Types["PR1"] = reflect.TypeOf(PR1{})
	Types["PRA"] = reflect.TypeOf(PRA{})
	Types["PRB"] = reflect.TypeOf(PRB{})
	Types["PRC"] = reflect.TypeOf(PRC{})
	Types["PRD"] = reflect.TypeOf(PRD{})
	Types["PSH"] = reflect.TypeOf(PSH{})
	Types["PTH"] = reflect.TypeOf(PTH{})
	Types["PV1"] = reflect.TypeOf(PV1{})
	Types["PV2"] = reflect.TypeOf(PV2{})
	Types["QAK"] = reflect.TypeOf(QAK{})
	Types["QID"] = reflect.TypeOf(QID{})
	Types["QPD"] = reflect.TypeOf(QPD{})
	Types["QRD"] = reflect.TypeOf(QRD{})
	Types["QRF"] = reflect.TypeOf(QRF{})
	Types["QRI"] = reflect.TypeOf(QRI{})
	Types["RCP"] = reflect.TypeOf(RCP{})
	Types["RDF"] = reflect.TypeOf(RDF{})
	Types["RDT"] = reflect.TypeOf(RDT{})
	Types["RF1"] = reflect.TypeOf(RF1{})
	Types["RGS"] = reflect.TypeOf(RGS{})
	Types["RMI"] = reflect.TypeOf(RMI{})
	Types["ROL"] = reflect.TypeOf(ROL{})
	Types["RQ1"] = reflect.TypeOf(RQ1{})
	Types["RQD"] = reflect.TypeOf(RQD{})
	Types["RX1"] = reflect.TypeOf(RX1{})
	Types["RXA"] = reflect.TypeOf(RXA{})
	Types["RXC"] = reflect.TypeOf(RXC{})
	Types["RXD"] = reflect.TypeOf(RXD{})
	Types["RXE"] = reflect.TypeOf(RXE{})
	Types["RXG"] = reflect.TypeOf(RXG{})
	Types["RXO"] = reflect.TypeOf(RXO{})
	Types["RXR"] = reflect.TypeOf(RXR{})
	Types["SAC"] = reflect.TypeOf(SAC{})
	Types["SCH"] = reflect.TypeOf(SCH{})
	Types["SFT"] = reflect.TypeOf(SFT{})
	Types["SID"] = reflect.TypeOf(SID{})
	Types["SPM"] = reflect.TypeOf(SPM{})
	Types["SPR"] = reflect.TypeOf(SPR{})
	Types["STF"] = reflect.TypeOf(STF{})
	Types["TCC"] = reflect.TypeOf(TCC{})
	Types["TCD"] = reflect.TypeOf(TCD{})
	Types["TQ1"] = reflect.TypeOf(TQ1{})
	Types["TQ2"] = reflect.TypeOf(TQ2{})
	Types["TXA"] = reflect.TypeOf(TXA{})
	Types["UB1"] = reflect.TypeOf(UB1{})
	Types["UB2"] = reflect.TypeOf(UB2{})
	Types["URD"] = reflect.TypeOf(URD{})
	Types["URS"] = reflect.TypeOf(URS{})
	Types["VAR"] = reflect.TypeOf(VAR{})
	Types["VTQ"] = reflect.TypeOf(VTQ{})
	Types["ACK"] = reflect.TypeOf(ACK{})
	Types["ACK_N02"] = reflect.TypeOf(ACK_N02{})
	Types["ADR_A19"] = reflect.TypeOf(ADR_A19{})
	Types["ADR_A19_INSURANCE"] = reflect.TypeOf(ADR_A19_INSURANCE{})
	Types["ADR_A19_PROCEDURE"] = reflect.TypeOf(ADR_A19_PROCEDURE{})
	Types["ADR_A19_QUERY_RESPONSE"] = reflect.TypeOf(ADR_A19_QUERY_RESPONSE{})
	Types["ADT_A01"] = reflect.TypeOf(ADT_A01{})
	Types["ADT_A01_INSURANCE"] = reflect.TypeOf(ADT_A01_INSURANCE{})
	Types["ADT_A01_PROCEDURE"] = reflect.TypeOf(ADT_A01_PROCEDURE{})
	Types["ADT_A02"] = reflect.TypeOf(ADT_A02{})
	Types["ADT_A03"] = reflect.TypeOf(ADT_A03{})
	Types["ADT_A03_INSURANCE"] = reflect.TypeOf(ADT_A03_INSURANCE{})
	Types["ADT_A03_PROCEDURE"] = reflect.TypeOf(ADT_A03_PROCEDURE{})
	Types["ADT_A04"] = reflect.TypeOf(ADT_A04{})
	Types["ADT_A04_INSURANCE"] = reflect.TypeOf(ADT_A04_INSURANCE{})
	Types["ADT_A05"] = reflect.TypeOf(ADT_A05{})
	Types["ADT_A05_INSURANCE"] = reflect.TypeOf(ADT_A05_INSURANCE{})
	Types["ADT_A05_PROCEDURE"] = reflect.TypeOf(ADT_A05_PROCEDURE{})
	Types["ADT_A06"] = reflect.TypeOf(ADT_A06{})
	Types["ADT_A06_INSURANCE"] = reflect.TypeOf(ADT_A06_INSURANCE{})
	Types["ADT_A06_PROCEDURE"] = reflect.TypeOf(ADT_A06_PROCEDURE{})
	Types["ADT_A07"] = reflect.TypeOf(ADT_A07{})
	Types["ADT_A07_INSURANCE"] = reflect.TypeOf(ADT_A07_INSURANCE{})
	Types["ADT_A08"] = reflect.TypeOf(ADT_A08{})
	Types["ADT_A08_INSURANCE"] = reflect.TypeOf(ADT_A08_INSURANCE{})
	Types["ADT_A09"] = reflect.TypeOf(ADT_A09{})
	Types["ADT_A10"] = reflect.TypeOf(ADT_A10{})
	Types["ADT_A11"] = reflect.TypeOf(ADT_A11{})
	Types["ADT_A12"] = reflect.TypeOf(ADT_A12{})
	Types["ADT_A13"] = reflect.TypeOf(ADT_A13{})
	Types["ADT_A13_INSURANCE"] = reflect.TypeOf(ADT_A13_INSURANCE{})
	Types["ADT_A14"] = reflect.TypeOf(ADT_A14{})
	Types["ADT_A14_INSURANCE"] = reflect.TypeOf(ADT_A14_INSURANCE{})
	Types["ADT_A15"] = reflect.TypeOf(ADT_A15{})
	Types["ADT_A16"] = reflect.TypeOf(ADT_A16{})
	Types["ADT_A16_INSURANCE"] = reflect.TypeOf(ADT_A16_INSURANCE{})
	Types["ADT_A16_PROCEDURE"] = reflect.TypeOf(ADT_A16_PROCEDURE{})
	Types["ADT_A17"] = reflect.TypeOf(ADT_A17{})
	Types["ADT_A17_PATIENT"] = reflect.TypeOf(ADT_A17_PATIENT{})
	Types["ADT_A18"] = reflect.TypeOf(ADT_A18{})
	Types["ADT_A20"] = reflect.TypeOf(ADT_A20{})
	Types["ADT_A21"] = reflect.TypeOf(ADT_A21{})
	Types["ADT_A22"] = reflect.TypeOf(ADT_A22{})
	Types["ADT_A23"] = reflect.TypeOf(ADT_A23{})
	Types["ADT_A24"] = reflect.TypeOf(ADT_A24{})
	Types["ADT_A25"] = reflect.TypeOf(ADT_A25{})
	Types["ADT_A26"] = reflect.TypeOf(ADT_A26{})
	Types["ADT_A27"] = reflect.TypeOf(ADT_A27{})
	Types["ADT_A28"] = reflect.TypeOf(ADT_A28{})
	Types["ADT_A28_INSURANCE"] = reflect.TypeOf(ADT_A28_INSURANCE{})
	Types["ADT_A29"] = reflect.TypeOf(ADT_A29{})
	Types["ADT_A30"] = reflect.TypeOf(ADT_A30{})
	Types["ADT_A31"] = reflect.TypeOf(ADT_A31{})
	Types["ADT_A31_INSURANCE"] = reflect.TypeOf(ADT_A31_INSURANCE{})
	Types["ADT_A32"] = reflect.TypeOf(ADT_A32{})
	Types["ADT_A33"] = reflect.TypeOf(ADT_A33{})
	Types["ADT_A34"] = reflect.TypeOf(ADT_A34{})
	Types["ADT_A35"] = reflect.TypeOf(ADT_A35{})
	Types["ADT_A36"] = reflect.TypeOf(ADT_A36{})
	Types["ADT_A37"] = reflect.TypeOf(ADT_A37{})
	Types["ADT_A38"] = reflect.TypeOf(ADT_A38{})
	Types["ADT_A39"] = reflect.TypeOf(ADT_A39{})
	Types["ADT_A39_PATIENT"] = reflect.TypeOf(ADT_A39_PATIENT{})
	Types["ADT_A40"] = reflect.TypeOf(ADT_A40{})
	Types["ADT_A40_PATIENT"] = reflect.TypeOf(ADT_A40_PATIENT{})
	Types["ADT_A43"] = reflect.TypeOf(ADT_A43{})
	Types["ADT_A43_PATIENT"] = reflect.TypeOf(ADT_A43_PATIENT{})
	Types["ADT_A44"] = reflect.TypeOf(ADT_A44{})
	Types["ADT_A44_PATIENT"] = reflect.TypeOf(ADT_A44_PATIENT{})
	Types["ADT_A45"] = reflect.TypeOf(ADT_A45{})
	Types["ADT_A45_MERGE_INFO"] = reflect.TypeOf(ADT_A45_MERGE_INFO{})
	Types["ADT_A50"] = reflect.TypeOf(ADT_A50{})
	Types["ADT_A52"] = reflect.TypeOf(ADT_A52{})
	Types["ADT_A54"] = reflect.TypeOf(ADT_A54{})
	Types["ADT_A60"] = reflect.TypeOf(ADT_A60{})
	Types["ADT_A61"] = reflect.TypeOf(ADT_A61{})
	Types["ARD_A19"] = reflect.TypeOf(ARD_A19{})
	Types["ARD_A19_INSURANCE"] = reflect.TypeOf(ARD_A19_INSURANCE{})
	Types["ARD_A19_PROCEDURE"] = reflect.TypeOf(ARD_A19_PROCEDURE{})
	Types["ARD_A19_QUERY_RESPONSE"] = reflect.TypeOf(ARD_A19_QUERY_RESPONSE{})
	Types["BAR_P01"] = reflect.TypeOf(BAR_P01{})
	Types["BAR_P01_INSURANCE"] = reflect.TypeOf(BAR_P01_INSURANCE{})
	Types["BAR_P01_PROCEDURE"] = reflect.TypeOf(BAR_P01_PROCEDURE{})
	Types["BAR_P01_VISIT"] = reflect.TypeOf(BAR_P01_VISIT{})
	Types["BAR_P02"] = reflect.TypeOf(BAR_P02{})
	Types["BAR_P02_PATIENT"] = reflect.TypeOf(BAR_P02_PATIENT{})
	Types["BAR_P05"] = reflect.TypeOf(BAR_P05{})
	Types["BAR_P05_INSURANCE"] = reflect.TypeOf(BAR_P05_INSURANCE{})
	Types["BAR_P05_PROCEDURE"] = reflect.TypeOf(BAR_P05_PROCEDURE{})
	Types["BAR_P05_VISIT"] = reflect.TypeOf(BAR_P05_VISIT{})
	Types["BAR_P06"] = reflect.TypeOf(BAR_P06{})
	Types["BAR_P06_PATIENT"] = reflect.TypeOf(BAR_P06_PATIENT{})
	Types["BAR_P10"] = reflect.TypeOf(BAR_P10{})
	Types["BAR_P10_PROCEDURE"] = reflect.TypeOf(BAR_P10_PROCEDURE{})
	Types["BAR_P12"] = reflect.TypeOf(BAR_P12{})
	Types["BAR_P12_PROCEDURE"] = reflect.TypeOf(BAR_P12_PROCEDURE{})
	Types["BPS_O29"] = reflect.TypeOf(BPS_O29{})
	Types["BPS_O29_ORDER"] = reflect.TypeOf(BPS_O29_ORDER{})
	Types["BPS_O29_PATIENT"] = reflect.TypeOf(BPS_O29_PATIENT{})
	Types["BPS_O29_PATIENT_VISIT"] = reflect.TypeOf(BPS_O29_PATIENT_VISIT{})
	Types["BPS_O29_PRODUCT"] = reflect.TypeOf(BPS_O29_PRODUCT{})
	Types["BPS_O29_TIMING"] = reflect.TypeOf(BPS_O29_TIMING{})
	Types["BRP_O30"] = reflect.TypeOf(BRP_O30{})
	Types["BRP_O30_ORDER"] = reflect.TypeOf(BRP_O30_ORDER{})
	Types["BRP_O30_PATIENT"] = reflect.TypeOf(BRP_O30_PATIENT{})
	Types["BRP_O30_RESPONSE"] = reflect.TypeOf(BRP_O30_RESPONSE{})
	Types["BRP_O30_TIMING"] = reflect.TypeOf(BRP_O30_TIMING{})
	Types["BRT_O32"] = reflect.TypeOf(BRT_O32{})
	Types["BRT_O32_ORDER"] = reflect.TypeOf(BRT_O32_ORDER{})
	Types["BRT_O32_RESPONSE"] = reflect.TypeOf(BRT_O32_RESPONSE{})
	Types["BRT_O32_TIMING"] = reflect.TypeOf(BRT_O32_TIMING{})
	Types["BTS_O31"] = reflect.TypeOf(BTS_O31{})
	Types["BTS_O31_ORDER"] = reflect.TypeOf(BTS_O31_ORDER{})
	Types["BTS_O31_PATIENT"] = reflect.TypeOf(BTS_O31_PATIENT{})
	Types["BTS_O31_PATIENT_VISIT"] = reflect.TypeOf(BTS_O31_PATIENT_VISIT{})
	Types["BTS_O31_PRODUCT_STATUS"] = reflect.TypeOf(BTS_O31_PRODUCT_STATUS{})
	Types["BTS_O31_TIMING"] = reflect.TypeOf(BTS_O31_TIMING{})
	Types["CRM_C01"] = reflect.TypeOf(CRM_C01{})
	Types["CRM_C01_PATIENT"] = reflect.TypeOf(CRM_C01_PATIENT{})
	Types["CSU_C09"] = reflect.TypeOf(CSU_C09{})
	Types["CSU_C09_PATIENT"] = reflect.TypeOf(CSU_C09_PATIENT{})
	Types["CSU_C09_RX_ADMIN"] = reflect.TypeOf(CSU_C09_RX_ADMIN{})
	Types["CSU_C09_STUDY_OBSERVATION"] = reflect.TypeOf(CSU_C09_STUDY_OBSERVATION{})
	Types["CSU_C09_STUDY_PHARM"] = reflect.TypeOf(CSU_C09_STUDY_PHARM{})
	Types["CSU_C09_STUDY_PHASE"] = reflect.TypeOf(CSU_C09_STUDY_PHASE{})
	Types["CSU_C09_STUDY_SCHEDULE"] = reflect.TypeOf(CSU_C09_STUDY_SCHEDULE{})
	Types["CSU_C09_TIMING_QTY"] = reflect.TypeOf(CSU_C09_TIMING_QTY{})
	Types["CSU_C09_VISIT"] = reflect.TypeOf(CSU_C09_VISIT{})
	Types["DFT_P03_COMMON_ORDER"] = reflect.TypeOf(DFT_P03_COMMON_ORDER{})
	Types["DFT_P03"] = reflect.TypeOf(DFT_P03{})
	Types["DFT_P03_FINANCIAL"] = reflect.TypeOf(DFT_P03_FINANCIAL{})
	Types["DFT_P03_FINANCIAL_COMMON_ORDER"] = reflect.TypeOf(DFT_P03_FINANCIAL_COMMON_ORDER{})
	Types["DFT_P03_FINANCIAL_OBSERVATION"] = reflect.TypeOf(DFT_P03_FINANCIAL_OBSERVATION{})
	Types["DFT_P03_FINANCIAL_ORDER"] = reflect.TypeOf(DFT_P03_FINANCIAL_ORDER{})
	Types["DFT_P03_FINANCIAL_PROCEDURE"] = reflect.TypeOf(DFT_P03_FINANCIAL_PROCEDURE{})
	Types["DFT_P03_FINANCIAL_TIMING_QUANTITY"] = reflect.TypeOf(DFT_P03_FINANCIAL_TIMING_QUANTITY{})
	Types["DFT_P03_INSURANCE"] = reflect.TypeOf(DFT_P03_INSURANCE{})
	Types["DFT_P03_OBSERVATION"] = reflect.TypeOf(DFT_P03_OBSERVATION{})
	Types["DFT_P03_ORDER"] = reflect.TypeOf(DFT_P03_ORDER{})
	Types["DFT_P03_TIMING_QUANTITY"] = reflect.TypeOf(DFT_P03_TIMING_QUANTITY{})
	Types["DFT_P11_COMMON_ORDER"] = reflect.TypeOf(DFT_P11_COMMON_ORDER{})
	Types["DFT_P11"] = reflect.TypeOf(DFT_P11{})
	Types["DFT_P11_FINANCIAL"] = reflect.TypeOf(DFT_P11_FINANCIAL{})
	Types["DFT_P11_FINANCIAL_COMMON_ORDER"] = reflect.TypeOf(DFT_P11_FINANCIAL_COMMON_ORDER{})
	Types["DFT_P11_FINANCIAL_INSURANCE"] = reflect.TypeOf(DFT_P11_FINANCIAL_INSURANCE{})
	Types["DFT_P11_FINANCIAL_OBSERVATION"] = reflect.TypeOf(DFT_P11_FINANCIAL_OBSERVATION{})
	Types["DFT_P11_FINANCIAL_ORDER"] = reflect.TypeOf(DFT_P11_FINANCIAL_ORDER{})
	Types["DFT_P11_FINANCIAL_PROCEDURE"] = reflect.TypeOf(DFT_P11_FINANCIAL_PROCEDURE{})
	Types["DFT_P11_FINANCIAL_TIMING_QUANTITY"] = reflect.TypeOf(DFT_P11_FINANCIAL_TIMING_QUANTITY{})
	Types["DFT_P11_INSURANCE"] = reflect.TypeOf(DFT_P11_INSURANCE{})
	Types["DFT_P11_OBSERVATION"] = reflect.TypeOf(DFT_P11_OBSERVATION{})
	Types["DFT_P11_ORDER"] = reflect.TypeOf(DFT_P11_ORDER{})
	Types["DFT_P11_TIMING_QUANTITY"] = reflect.TypeOf(DFT_P11_TIMING_QUANTITY{})
	Types["DOC_T12"] = reflect.TypeOf(DOC_T12{})
	Types["DOC_T12_RESULT"] = reflect.TypeOf(DOC_T12_RESULT{})
	Types["DSR_P04"] = reflect.TypeOf(DSR_P04{})
	Types["DSR_Q01"] = reflect.TypeOf(DSR_Q01{})
	Types["DSR_Q03"] = reflect.TypeOf(DSR_Q03{})
	Types["DSR_R03"] = reflect.TypeOf(DSR_R03{})
	Types["EAC_U07_COMMAND"] = reflect.TypeOf(EAC_U07_COMMAND{})
	Types["EAC_U07"] = reflect.TypeOf(EAC_U07{})
	Types["EAC_U07_SPECIMEN_CONTAINER"] = reflect.TypeOf(EAC_U07_SPECIMEN_CONTAINER{})
	Types["EAN_U09"] = reflect.TypeOf(EAN_U09{})
	Types["EAN_U09_NOTIFICATION"] = reflect.TypeOf(EAN_U09_NOTIFICATION{})
	Types["EAR_U08_COMMAND_RESPONSE"] = reflect.TypeOf(EAR_U08_COMMAND_RESPONSE{})
	Types["EAR_U08"] = reflect.TypeOf(EAR_U08{})
	Types["EAR_U08_SPECIMEN_CONTAINER"] = reflect.TypeOf(EAR_U08_SPECIMEN_CONTAINER{})
	Types["EDR_Q01"] = reflect.TypeOf(EDR_Q01{})
	Types["EDR_R07"] = reflect.TypeOf(EDR_R07{})
	Types["EQQ_Q01"] = reflect.TypeOf(EQQ_Q01{})
	Types["EQQ_Q04"] = reflect.TypeOf(EQQ_Q04{})
	Types["ERP_Q01"] = reflect.TypeOf(ERP_Q01{})
	Types["ERP_R09"] = reflect.TypeOf(ERP_R09{})
	Types["ESR_U02"] = reflect.TypeOf(ESR_U02{})
	Types["ESU_U01"] = reflect.TypeOf(ESU_U01{})
	Types["INR_U06"] = reflect.TypeOf(INR_U06{})
	Types["INU_U05"] = reflect.TypeOf(INU_U05{})
	Types["LSU_U12"] = reflect.TypeOf(LSU_U12{})
	Types["MCF_Q02"] = reflect.TypeOf(MCF_Q02{})
	Types["MDM_T01_COMMON_ORDER"] = reflect.TypeOf(MDM_T01_COMMON_ORDER{})
	Types["MDM_T01"] = reflect.TypeOf(MDM_T01{})
	Types["MDM_T01_TIMING"] = reflect.TypeOf(MDM_T01_TIMING{})
	Types["MDM_T02_COMMON_ORDER"] = reflect.TypeOf(MDM_T02_COMMON_ORDER{})
	Types["MDM_T02"] = reflect.TypeOf(MDM_T02{})
	Types["MDM_T02_OBSERVATION"] = reflect.TypeOf(MDM_T02_OBSERVATION{})
	Types["MDM_T02_TIMING"] = reflect.TypeOf(MDM_T02_TIMING{})
	Types["MFD_M01"] = reflect.TypeOf(MFD_M01{})
	Types["MFD_M02"] = reflect.TypeOf(MFD_M02{})
	Types["MFD_M03"] = reflect.TypeOf(MFD_M03{})
	Types["MFK_M01"] = reflect.TypeOf(MFK_M01{})
	Types["MFK_M02"] = reflect.TypeOf(MFK_M02{})
	Types["MFK_M03"] = reflect.TypeOf(MFK_M03{})
	Types["MFN_M01"] = reflect.TypeOf(MFN_M01{})
	Types["MFN_M01_MF"] = reflect.TypeOf(MFN_M01_MF{})
	Types["MFN_M02"] = reflect.TypeOf(MFN_M02{})
	Types["MFN_M02_MF_STAFF"] = reflect.TypeOf(MFN_M02_MF_STAFF{})
	Types["MFN_M03"] = reflect.TypeOf(MFN_M03{})
	Types["MFN_M03_MF_TEST"] = reflect.TypeOf(MFN_M03_MF_TEST{})
	Types["MFN_M04"] = reflect.TypeOf(MFN_M04{})
	Types["MFN_M04_MF_CDM"] = reflect.TypeOf(MFN_M04_MF_CDM{})
	Types["MFN_M05"] = reflect.TypeOf(MFN_M05{})
	Types["MFN_M05_MF_LOCATION"] = reflect.TypeOf(MFN_M05_MF_LOCATION{})
	Types["MFN_M05_MF_LOC_DEPT"] = reflect.TypeOf(MFN_M05_MF_LOC_DEPT{})
	Types["MFN_M06"] = reflect.TypeOf(MFN_M06{})
	Types["MFN_M06_MF_CDM"] = reflect.TypeOf(MFN_M06_MF_CDM{})
	Types["MFN_M06_MF_CLIN_STUDY"] = reflect.TypeOf(MFN_M06_MF_CLIN_STUDY{})
	Types["MFN_M06_MF_PHASE_SCHED_DETAIL"] = reflect.TypeOf(MFN_M06_MF_PHASE_SCHED_DETAIL{})
	Types["MFN_M07"] = reflect.TypeOf(MFN_M07{})
	Types["MFN_M07_MF_CLIN_STUDY"] = reflect.TypeOf(MFN_M07_MF_CLIN_STUDY{})
	Types["MFN_M07_MF_CLIN_STUDY_SCHED"] = reflect.TypeOf(MFN_M07_MF_CLIN_STUDY_SCHED{})
	Types["MFN_M07_MF_PHASE_SCHED_DETAIL"] = reflect.TypeOf(MFN_M07_MF_PHASE_SCHED_DETAIL{})
	Types["MFN_M08"] = reflect.TypeOf(MFN_M08{})
	Types["MFN_M08_MF_NUMERIC_OBSERVATION"] = reflect.TypeOf(MFN_M08_MF_NUMERIC_OBSERVATION{})
	Types["MFN_M08_MF_TEST_NUMERIC"] = reflect.TypeOf(MFN_M08_MF_TEST_NUMERIC{})
	Types["MFN_M09"] = reflect.TypeOf(MFN_M09{})
	Types["MFN_M09_MF_TEST_CATEGORICAL"] = reflect.TypeOf(MFN_M09_MF_TEST_CATEGORICAL{})
	Types["MFN_M09_MF_TEST_CAT_DETAIL"] = reflect.TypeOf(MFN_M09_MF_TEST_CAT_DETAIL{})
	Types["MFN_M10"] = reflect.TypeOf(MFN_M10{})
	Types["MFN_M10_MF_TEST_BATTERIES"] = reflect.TypeOf(MFN_M10_MF_TEST_BATTERIES{})
	Types["MFN_M10_MF_TEST_BATT_DETAIL"] = reflect.TypeOf(MFN_M10_MF_TEST_BATT_DETAIL{})
	Types["MFN_M11"] = reflect.TypeOf(MFN_M11{})
	Types["MFN_M11_MF_TEST_CALCULATED"] = reflect.TypeOf(MFN_M11_MF_TEST_CALCULATED{})
	Types["MFN_M11_MF_TEST_CALC_DETAIL"] = reflect.TypeOf(MFN_M11_MF_TEST_CALC_DETAIL{})
	Types["MFN_M12"] = reflect.TypeOf(MFN_M12{})
	Types["MFN_M12_MF_OBS_ATTRIBUTES"] = reflect.TypeOf(MFN_M12_MF_OBS_ATTRIBUTES{})
	Types["MFN_M13"] = reflect.TypeOf(MFN_M13{})
	Types["MFN_M15"] = reflect.TypeOf(MFN_M15{})
	Types["MFN_M15_MF_INV_ITEM"] = reflect.TypeOf(MFN_M15_MF_INV_ITEM{})
	Types["MFN_Znn"] = reflect.TypeOf(MFN_Znn{})
	Types["MFN_Znn_MF_SITE_DEFINED"] = reflect.TypeOf(MFN_Znn_MF_SITE_DEFINED{})
	Types["MFQ_M01"] = reflect.TypeOf(MFQ_M01{})
	Types["MFQ_M02"] = reflect.TypeOf(MFQ_M02{})
	Types["MFQ_M03"] = reflect.TypeOf(MFQ_M03{})
	Types["MFR_M01"] = reflect.TypeOf(MFR_M01{})
	Types["MFR_M01_MF"] = reflect.TypeOf(MFR_M01_MF{})
	Types["MFR_M01_MF_QUERY"] = reflect.TypeOf(MFR_M01_MF_QUERY{})
	Types["MFR_M02"] = reflect.TypeOf(MFR_M02{})
	Types["MFR_M02_MF_STAFF"] = reflect.TypeOf(MFR_M02_MF_STAFF{})
	Types["MFR_M03"] = reflect.TypeOf(MFR_M03{})
	Types["MFR_M03_MF_TEST"] = reflect.TypeOf(MFR_M03_MF_TEST{})
	Types["MFR_M04"] = reflect.TypeOf(MFR_M04{})
	Types["MFR_M04_MF_QUERY"] = reflect.TypeOf(MFR_M04_MF_QUERY{})
	Types["MFR_M05"] = reflect.TypeOf(MFR_M05{})
	Types["MFR_M05_MF_QUERY"] = reflect.TypeOf(MFR_M05_MF_QUERY{})
	Types["MFR_M06"] = reflect.TypeOf(MFR_M06{})
	Types["MFR_M06_MF_QUERY"] = reflect.TypeOf(MFR_M06_MF_QUERY{})
	Types["MFR_M07"] = reflect.TypeOf(MFR_M07{})
	Types["MFR_M07_MF_QUERY"] = reflect.TypeOf(MFR_M07_MF_QUERY{})
	Types["NMD_N01_APP_STATS"] = reflect.TypeOf(NMD_N01_APP_STATS{})
	Types["NMD_N01_APP_STATUS"] = reflect.TypeOf(NMD_N01_APP_STATUS{})
	Types["NMD_N01_CLOCK"] = reflect.TypeOf(NMD_N01_CLOCK{})
	Types["NMD_N01_CLOCK_AND_STATS_WITH_NOTES"] = reflect.TypeOf(NMD_N01_CLOCK_AND_STATS_WITH_NOTES{})
	Types["NMD_N01"] = reflect.TypeOf(NMD_N01{})
	Types["NMD_N02_APP_STATS"] = reflect.TypeOf(NMD_N02_APP_STATS{})
	Types["NMD_N02_APP_STATUS"] = reflect.TypeOf(NMD_N02_APP_STATUS{})
	Types["NMD_N02_CLOCK"] = reflect.TypeOf(NMD_N02_CLOCK{})
	Types["NMD_N02_CLOCK_AND_STATS_WITH_NOTES"] = reflect.TypeOf(NMD_N02_CLOCK_AND_STATS_WITH_NOTES{})
	Types["NMD_N02"] = reflect.TypeOf(NMD_N02{})
	Types["NMQ_N01_CLOCK_AND_STATISTICS"] = reflect.TypeOf(NMQ_N01_CLOCK_AND_STATISTICS{})
	Types["NMQ_N01"] = reflect.TypeOf(NMQ_N01{})
	Types["NMQ_N01_QRY_WITH_DETAIL"] = reflect.TypeOf(NMQ_N01_QRY_WITH_DETAIL{})
	Types["NMQ_N02_CLOCK_AND_STATISTICS"] = reflect.TypeOf(NMQ_N02_CLOCK_AND_STATISTICS{})
	Types["NMQ_N02"] = reflect.TypeOf(NMQ_N02{})
	Types["NMQ_N02_QRY_WITH_DETAIL"] = reflect.TypeOf(NMQ_N02_QRY_WITH_DETAIL{})
	Types["NMR_N01_CLOCK_AND_STATS_WITH_NOTES_ALT"] = reflect.TypeOf(NMR_N01_CLOCK_AND_STATS_WITH_NOTES_ALT{})
	Types["NMR_N01"] = reflect.TypeOf(NMR_N01{})
	Types["NMR_N02_CLOCK_AND_STATS_WITH_NOTES_ALT"] = reflect.TypeOf(NMR_N02_CLOCK_AND_STATS_WITH_NOTES_ALT{})
	Types["NMR_N02"] = reflect.TypeOf(NMR_N02{})
	Types["OMB_O27"] = reflect.TypeOf(OMB_O27{})
	Types["OMB_O27_INSURANCE"] = reflect.TypeOf(OMB_O27_INSURANCE{})
	Types["OMB_O27_OBSERVATION"] = reflect.TypeOf(OMB_O27_OBSERVATION{})
	Types["OMB_O27_ORDER"] = reflect.TypeOf(OMB_O27_ORDER{})
	Types["OMB_O27_PATIENT"] = reflect.TypeOf(OMB_O27_PATIENT{})
	Types["OMB_O27_PATIENT_VISIT"] = reflect.TypeOf(OMB_O27_PATIENT_VISIT{})
	Types["OMB_O27_TIMING"] = reflect.TypeOf(OMB_O27_TIMING{})
	Types["OMD_O01"] = reflect.TypeOf(OMD_O01{})
	Types["OMD_O01_DIET"] = reflect.TypeOf(OMD_O01_DIET{})
	Types["OMD_O01_INSURANCE"] = reflect.TypeOf(OMD_O01_INSURANCE{})
	Types["OMD_O01_OBSERVATION"] = reflect.TypeOf(OMD_O01_OBSERVATION{})
	Types["OMD_O01_ORDER_DIET"] = reflect.TypeOf(OMD_O01_ORDER_DIET{})
	Types["OMD_O01_ORDER_TRAY"] = reflect.TypeOf(OMD_O01_ORDER_TRAY{})
	Types["OMD_O01_PATIENT"] = reflect.TypeOf(OMD_O01_PATIENT{})
	Types["OMD_O01_PATIENT_VISIT"] = reflect.TypeOf(OMD_O01_PATIENT_VISIT{})
	Types["OMD_O03"] = reflect.TypeOf(OMD_O03{})
	Types["OMD_O03_DIET"] = reflect.TypeOf(OMD_O03_DIET{})
	Types["OMD_O03_INSURANCE"] = reflect.TypeOf(OMD_O03_INSURANCE{})
	Types["OMD_O03_OBSERVATION"] = reflect.TypeOf(OMD_O03_OBSERVATION{})
	Types["OMD_O03_ORDER_DIET"] = reflect.TypeOf(OMD_O03_ORDER_DIET{})
	Types["OMD_O03_ORDER_TRAY"] = reflect.TypeOf(OMD_O03_ORDER_TRAY{})
	Types["OMD_O03_PATIENT"] = reflect.TypeOf(OMD_O03_PATIENT{})
	Types["OMD_O03_PATIENT_VISIT"] = reflect.TypeOf(OMD_O03_PATIENT_VISIT{})
	Types["OMD_O03_TIMING_DIET"] = reflect.TypeOf(OMD_O03_TIMING_DIET{})
	Types["OMD_O03_TIMING_TRAY"] = reflect.TypeOf(OMD_O03_TIMING_TRAY{})
	Types["OMG_O19_CONTAINER"] = reflect.TypeOf(OMG_O19_CONTAINER{})
	Types["OMG_O19"] = reflect.TypeOf(OMG_O19{})
	Types["OMG_O19_INSURANCE"] = reflect.TypeOf(OMG_O19_INSURANCE{})
	Types["OMG_O19_OBSERVATION"] = reflect.TypeOf(OMG_O19_OBSERVATION{})
	Types["OMG_O19_OBSERVATION_PRIOR"] = reflect.TypeOf(OMG_O19_OBSERVATION_PRIOR{})
	Types["OMG_O19_ORDER"] = reflect.TypeOf(OMG_O19_ORDER{})
	Types["OMG_O19_ORDER_PRIOR"] = reflect.TypeOf(OMG_O19_ORDER_PRIOR{})
	Types["OMG_O19_PATIENT"] = reflect.TypeOf(OMG_O19_PATIENT{})
	Types["OMG_O19_PATIENT_PRIOR"] = reflect.TypeOf(OMG_O19_PATIENT_PRIOR{})
	Types["OMG_O19_PATIENT_VISIT"] = reflect.TypeOf(OMG_O19_PATIENT_VISIT{})
	Types["OMG_O19_PATIENT_VISIT_PRIOR"] = reflect.TypeOf(OMG_O19_PATIENT_VISIT_PRIOR{})
	Types["OMG_O19_PRIOR_RESULT"] = reflect.TypeOf(OMG_O19_PRIOR_RESULT{})
	Types["OMG_O19_SPECIMEN"] = reflect.TypeOf(OMG_O19_SPECIMEN{})
	Types["OMG_O19_TIMING"] = reflect.TypeOf(OMG_O19_TIMING{})
	Types["OMG_O19_TIMING_PRIOR"] = reflect.TypeOf(OMG_O19_TIMING_PRIOR{})
	Types["OMI_O23"] = reflect.TypeOf(OMI_O23{})
	Types["OMI_O23_INSURANCE"] = reflect.TypeOf(OMI_O23_INSURANCE{})
	Types["OMI_O23_OBSERVATION"] = reflect.TypeOf(OMI_O23_OBSERVATION{})
	Types["OMI_O23_ORDER"] = reflect.TypeOf(OMI_O23_ORDER{})
	Types["OMI_O23_PATIENT"] = reflect.TypeOf(OMI_O23_PATIENT{})
	Types["OMI_O23_PATIENT_VISIT"] = reflect.TypeOf(OMI_O23_PATIENT_VISIT{})
	Types["OMI_O23_TIMING"] = reflect.TypeOf(OMI_O23_TIMING{})
	Types["OML_O21_CONTAINER"] = reflect.TypeOf(OML_O21_CONTAINER{})
	Types["OML_O21_CONTAINER_1"] = reflect.TypeOf(OML_O21_CONTAINER_1{})
	Types["OML_O21_CONTAINER_2"] = reflect.TypeOf(OML_O21_CONTAINER_2{})
	Types["OML_O21"] = reflect.TypeOf(OML_O21{})
	Types["OML_O21_INSURANCE"] = reflect.TypeOf(OML_O21_INSURANCE{})
	Types["OML_O21_OBSERVATION"] = reflect.TypeOf(OML_O21_OBSERVATION{})
	Types["OML_O21_OBSERVATION_PRIOR"] = reflect.TypeOf(OML_O21_OBSERVATION_PRIOR{})
	Types["OML_O21_OBSERVATION_REQUEST"] = reflect.TypeOf(OML_O21_OBSERVATION_REQUEST{})
	Types["OML_O21_ORDER"] = reflect.TypeOf(OML_O21_ORDER{})
	Types["OML_O21_ORDER_GENERAL"] = reflect.TypeOf(OML_O21_ORDER_GENERAL{})
	Types["OML_O21_ORDER_PRIOR"] = reflect.TypeOf(OML_O21_ORDER_PRIOR{})
	Types["OML_O21_PATIENT"] = reflect.TypeOf(OML_O21_PATIENT{})
	Types["OML_O21_PATIENT_PRIOR"] = reflect.TypeOf(OML_O21_PATIENT_PRIOR{})
	Types["OML_O21_PATIENT_VISIT"] = reflect.TypeOf(OML_O21_PATIENT_VISIT{})
	Types["OML_O21_PATIENT_VISIT_PRIOR"] = reflect.TypeOf(OML_O21_PATIENT_VISIT_PRIOR{})
	Types["OML_O21_PRIOR_RESULT"] = reflect.TypeOf(OML_O21_PRIOR_RESULT{})
	Types["OML_O21_SPECIMEN"] = reflect.TypeOf(OML_O21_SPECIMEN{})
	Types["OML_O21_TIIMING"] = reflect.TypeOf(OML_O21_TIIMING{})
	Types["OML_O21_TIMING"] = reflect.TypeOf(OML_O21_TIMING{})
	Types["OML_O21_TIMING_PRIOR"] = reflect.TypeOf(OML_O21_TIMING_PRIOR{})
	Types["OML_O33"] = reflect.TypeOf(OML_O33{})
	Types["OML_O33_INSURANCE"] = reflect.TypeOf(OML_O33_INSURANCE{})
	Types["OML_O33_OBSERVATION"] = reflect.TypeOf(OML_O33_OBSERVATION{})
	Types["OML_O33_OBSERVATION_PRIOR"] = reflect.TypeOf(OML_O33_OBSERVATION_PRIOR{})
	Types["OML_O33_OBSERVATION_REQUEST"] = reflect.TypeOf(OML_O33_OBSERVATION_REQUEST{})
	Types["OML_O33_ORDER"] = reflect.TypeOf(OML_O33_ORDER{})
	Types["OML_O33_ORDER_PRIOR"] = reflect.TypeOf(OML_O33_ORDER_PRIOR{})
	Types["OML_O33_PATIENT"] = reflect.TypeOf(OML_O33_PATIENT{})
	Types["OML_O33_PATIENT_PRIOR"] = reflect.TypeOf(OML_O33_PATIENT_PRIOR{})
	Types["OML_O33_PATIENT_VISIT"] = reflect.TypeOf(OML_O33_PATIENT_VISIT{})
	Types["OML_O33_PATIENT_VISIT_PRIOR"] = reflect.TypeOf(OML_O33_PATIENT_VISIT_PRIOR{})
	Types["OML_O33_PRIOR_RESULT"] = reflect.TypeOf(OML_O33_PRIOR_RESULT{})
	Types["OML_O33_SPECIMEN"] = reflect.TypeOf(OML_O33_SPECIMEN{})
	Types["OML_O33_TIIMING"] = reflect.TypeOf(OML_O33_TIIMING{})
	Types["OML_O33_TIMING"] = reflect.TypeOf(OML_O33_TIMING{})
	Types["OML_O33_TIMING_PRIOR"] = reflect.TypeOf(OML_O33_TIMING_PRIOR{})
	Types["OML_O35"] = reflect.TypeOf(OML_O35{})
	Types["OML_O35_INSURANCE"] = reflect.TypeOf(OML_O35_INSURANCE{})
	Types["OML_O35_OBSERVATION"] = reflect.TypeOf(OML_O35_OBSERVATION{})
	Types["OML_O35_OBSERVATION_PRIOR"] = reflect.TypeOf(OML_O35_OBSERVATION_PRIOR{})
	Types["OML_O35_OBSERVATION_REQUEST"] = reflect.TypeOf(OML_O35_OBSERVATION_REQUEST{})
	Types["OML_O35_ORDER"] = reflect.TypeOf(OML_O35_ORDER{})
	Types["OML_O35_ORDER_PRIOR"] = reflect.TypeOf(OML_O35_ORDER_PRIOR{})
	Types["OML_O35_PATIENT"] = reflect.TypeOf(OML_O35_PATIENT{})
	Types["OML_O35_PATIENT_PRIOR"] = reflect.TypeOf(OML_O35_PATIENT_PRIOR{})
	Types["OML_O35_PATIENT_VISIT"] = reflect.TypeOf(OML_O35_PATIENT_VISIT{})
	Types["OML_O35_PATIENT_VISIT_PRIOR"] = reflect.TypeOf(OML_O35_PATIENT_VISIT_PRIOR{})
	Types["OML_O35_PRIOR_RESULT"] = reflect.TypeOf(OML_O35_PRIOR_RESULT{})
	Types["OML_O35_SPECIMEN"] = reflect.TypeOf(OML_O35_SPECIMEN{})
	Types["OML_O35_SPECIMEN_CONTAINER"] = reflect.TypeOf(OML_O35_SPECIMEN_CONTAINER{})
	Types["OML_O35_TIIMING"] = reflect.TypeOf(OML_O35_TIIMING{})
	Types["OML_O35_TIMING"] = reflect.TypeOf(OML_O35_TIMING{})
	Types["OML_O35_TIMING_PRIOR"] = reflect.TypeOf(OML_O35_TIMING_PRIOR{})
	Types["OMN_O01"] = reflect.TypeOf(OMN_O01{})
	Types["OMN_O01_INSURANCE"] = reflect.TypeOf(OMN_O01_INSURANCE{})
	Types["OMN_O01_OBSERVATION"] = reflect.TypeOf(OMN_O01_OBSERVATION{})
	Types["OMN_O01_ORDER"] = reflect.TypeOf(OMN_O01_ORDER{})
	Types["OMN_O01_ORDER_DETAIL"] = reflect.TypeOf(OMN_O01_ORDER_DETAIL{})
	Types["OMN_O01_PATIENT"] = reflect.TypeOf(OMN_O01_PATIENT{})
	Types["OMN_O01_PATIENT_VISIT"] = reflect.TypeOf(OMN_O01_PATIENT_VISIT{})
	Types["OMN_O07"] = reflect.TypeOf(OMN_O07{})
	Types["OMN_O07_INSURANCE"] = reflect.TypeOf(OMN_O07_INSURANCE{})
	Types["OMN_O07_OBSERVATION"] = reflect.TypeOf(OMN_O07_OBSERVATION{})
	Types["OMN_O07_ORDER"] = reflect.TypeOf(OMN_O07_ORDER{})
	Types["OMN_O07_PATIENT"] = reflect.TypeOf(OMN_O07_PATIENT{})
	Types["OMN_O07_PATIENT_VISIT"] = reflect.TypeOf(OMN_O07_PATIENT_VISIT{})
	Types["OMN_O07_TIMING"] = reflect.TypeOf(OMN_O07_TIMING{})
	Types["OMP_O09_COMPONENT"] = reflect.TypeOf(OMP_O09_COMPONENT{})
	Types["OMP_O09"] = reflect.TypeOf(OMP_O09{})
	Types["OMP_O09_INSURANCE"] = reflect.TypeOf(OMP_O09_INSURANCE{})
	Types["OMP_O09_OBSERVATION"] = reflect.TypeOf(OMP_O09_OBSERVATION{})
	Types["OMP_O09_ORDER"] = reflect.TypeOf(OMP_O09_ORDER{})
	Types["OMP_O09_PATIENT"] = reflect.TypeOf(OMP_O09_PATIENT{})
	Types["OMP_O09_PATIENT_VISIT"] = reflect.TypeOf(OMP_O09_PATIENT_VISIT{})
	Types["OMP_O09_TIMING"] = reflect.TypeOf(OMP_O09_TIMING{})
	Types["OMS_O01"] = reflect.TypeOf(OMS_O01{})
	Types["OMS_O01_INSURANCE"] = reflect.TypeOf(OMS_O01_INSURANCE{})
	Types["OMS_O01_OBSERVATION"] = reflect.TypeOf(OMS_O01_OBSERVATION{})
	Types["OMS_O01_ORDER"] = reflect.TypeOf(OMS_O01_ORDER{})
	Types["OMS_O01_ORDER_DETAIL"] = reflect.TypeOf(OMS_O01_ORDER_DETAIL{})
	Types["OMS_O01_PATIENT"] = reflect.TypeOf(OMS_O01_PATIENT{})
	Types["OMS_O01_PATIENT_VISIT"] = reflect.TypeOf(OMS_O01_PATIENT_VISIT{})
	Types["OMS_O05"] = reflect.TypeOf(OMS_O05{})
	Types["OMS_O05_INSURANCE"] = reflect.TypeOf(OMS_O05_INSURANCE{})
	Types["OMS_O05_OBSERVATION"] = reflect.TypeOf(OMS_O05_OBSERVATION{})
	Types["OMS_O05_ORDER"] = reflect.TypeOf(OMS_O05_ORDER{})
	Types["OMS_O05_PATIENT"] = reflect.TypeOf(OMS_O05_PATIENT{})
	Types["OMS_O05_PATIENT_VISIT"] = reflect.TypeOf(OMS_O05_PATIENT_VISIT{})
	Types["OMS_O05_TIMING"] = reflect.TypeOf(OMS_O05_TIMING{})
	Types["ORB_O28"] = reflect.TypeOf(ORB_O28{})
	Types["ORB_O28_ORDER"] = reflect.TypeOf(ORB_O28_ORDER{})
	Types["ORB_O28_PATIENT"] = reflect.TypeOf(ORB_O28_PATIENT{})
	Types["ORB_O28_RESPONSE"] = reflect.TypeOf(ORB_O28_RESPONSE{})
	Types["ORB_O28_TIMING"] = reflect.TypeOf(ORB_O28_TIMING{})
	Types["ORD_O02"] = reflect.TypeOf(ORD_O02{})
	Types["ORD_O02_ORDER_DIET"] = reflect.TypeOf(ORD_O02_ORDER_DIET{})
	Types["ORD_O02_ORDER_TRAY"] = reflect.TypeOf(ORD_O02_ORDER_TRAY{})
	Types["ORD_O02_PATIENT"] = reflect.TypeOf(ORD_O02_PATIENT{})
	Types["ORD_O02_RESPONSE"] = reflect.TypeOf(ORD_O02_RESPONSE{})
	Types["ORD_O04"] = reflect.TypeOf(ORD_O04{})
	Types["ORD_O04_ORDER_DIET"] = reflect.TypeOf(ORD_O04_ORDER_DIET{})
	Types["ORD_O04_ORDER_TRAY"] = reflect.TypeOf(ORD_O04_ORDER_TRAY{})
	Types["ORD_O04_PATIENT"] = reflect.TypeOf(ORD_O04_PATIENT{})
	Types["ORD_O04_RESPONSE"] = reflect.TypeOf(ORD_O04_RESPONSE{})
	Types["ORD_O04_TIMING_DIET"] = reflect.TypeOf(ORD_O04_TIMING_DIET{})
	Types["ORD_O04_TIMING_TRAY"] = reflect.TypeOf(ORD_O04_TIMING_TRAY{})
	Types["ORF_R04"] = reflect.TypeOf(ORF_R04{})
	Types["ORF_R04_OBSERVATION"] = reflect.TypeOf(ORF_R04_OBSERVATION{})
	Types["ORF_R04_ORDER"] = reflect.TypeOf(ORF_R04_ORDER{})
	Types["ORF_R04_PATIENT"] = reflect.TypeOf(ORF_R04_PATIENT{})
	Types["ORF_R04_QUERY_RESPONSE"] = reflect.TypeOf(ORF_R04_QUERY_RESPONSE{})
	Types["ORF_R04_RESPONSE"] = reflect.TypeOf(ORF_R04_RESPONSE{})
	Types["ORF_R04_TIMING_QTY"] = reflect.TypeOf(ORF_R04_TIMING_QTY{})
	Types["ORG_O20"] = reflect.TypeOf(ORG_O20{})
	Types["ORG_O20_ORDER"] = reflect.TypeOf(ORG_O20_ORDER{})
	Types["ORG_O20_PATIENT"] = reflect.TypeOf(ORG_O20_PATIENT{})
	Types["ORG_O20_RESPONSE"] = reflect.TypeOf(ORG_O20_RESPONSE{})
	Types["ORG_O20_SPECIMEN"] = reflect.TypeOf(ORG_O20_SPECIMEN{})
	Types["ORG_O20_TIMING"] = reflect.TypeOf(ORG_O20_TIMING{})
	Types["ORI_O24"] = reflect.TypeOf(ORI_O24{})
	Types["ORI_O24_ORDER"] = reflect.TypeOf(ORI_O24_ORDER{})
	Types["ORI_O24_PATIENT"] = reflect.TypeOf(ORI_O24_PATIENT{})
	Types["ORI_O24_RESPONSE"] = reflect.TypeOf(ORI_O24_RESPONSE{})
	Types["ORI_O24_TIMING"] = reflect.TypeOf(ORI_O24_TIMING{})
	Types["ORL_O22_CONTAINER"] = reflect.TypeOf(ORL_O22_CONTAINER{})
	Types["ORL_O22"] = reflect.TypeOf(ORL_O22{})
	Types["ORL_O22_GENERAL_ORDER"] = reflect.TypeOf(ORL_O22_GENERAL_ORDER{})
	Types["ORL_O22_OBSERVATION_REQUEST"] = reflect.TypeOf(ORL_O22_OBSERVATION_REQUEST{})
	Types["ORL_O22_ORDER"] = reflect.TypeOf(ORL_O22_ORDER{})
	Types["ORL_O22_PATIENT"] = reflect.TypeOf(ORL_O22_PATIENT{})
	Types["ORL_O22_RESPONSE"] = reflect.TypeOf(ORL_O22_RESPONSE{})
	Types["ORL_O22_SPECIMEN"] = reflect.TypeOf(ORL_O22_SPECIMEN{})
	Types["ORL_O22_TIMING"] = reflect.TypeOf(ORL_O22_TIMING{})
	Types["ORL_O34"] = reflect.TypeOf(ORL_O34{})
	Types["ORL_O34_OBSERVATION_REQUEST"] = reflect.TypeOf(ORL_O34_OBSERVATION_REQUEST{})
	Types["ORL_O34_ORDER"] = reflect.TypeOf(ORL_O34_ORDER{})
	Types["ORL_O34_PATIENT"] = reflect.TypeOf(ORL_O34_PATIENT{})
	Types["ORL_O34_RESPONSE"] = reflect.TypeOf(ORL_O34_RESPONSE{})
	Types["ORL_O34_SPECIMEN"] = reflect.TypeOf(ORL_O34_SPECIMEN{})
	Types["ORL_O34_SPECIMEN_DETAIL"] = reflect.TypeOf(ORL_O34_SPECIMEN_DETAIL{})
	Types["ORL_O34_SPMSAC_SUPPGRP2"] = reflect.TypeOf(ORL_O34_SPMSAC_SUPPGRP2{})
	Types["ORL_O34_TIMING"] = reflect.TypeOf(ORL_O34_TIMING{})
	Types["ORL_O36"] = reflect.TypeOf(ORL_O36{})
	Types["ORL_O36_OBSERVATION_REQUEST"] = reflect.TypeOf(ORL_O36_OBSERVATION_REQUEST{})
	Types["ORL_O36_ORDER"] = reflect.TypeOf(ORL_O36_ORDER{})
	Types["ORL_O36_PATIENT"] = reflect.TypeOf(ORL_O36_PATIENT{})
	Types["ORL_O36_RESPONSE"] = reflect.TypeOf(ORL_O36_RESPONSE{})
	Types["ORL_O36_SPECIMEN"] = reflect.TypeOf(ORL_O36_SPECIMEN{})
	Types["ORL_O36_SPECIMEN_CONTAINER"] = reflect.TypeOf(ORL_O36_SPECIMEN_CONTAINER{})
	Types["ORL_O36_TIMING"] = reflect.TypeOf(ORL_O36_TIMING{})
	Types["ORM_O01_CHOICE"] = reflect.TypeOf(ORM_O01_CHOICE{})
	Types["ORM_O01"] = reflect.TypeOf(ORM_O01{})
	Types["ORM_O01_INSURANCE"] = reflect.TypeOf(ORM_O01_INSURANCE{})
	Types["ORM_O01_OBSERVATION"] = reflect.TypeOf(ORM_O01_OBSERVATION{})
	Types["ORM_O01_ORDER"] = reflect.TypeOf(ORM_O01_ORDER{})
	Types["ORM_O01_ORDER_DETAIL"] = reflect.TypeOf(ORM_O01_ORDER_DETAIL{})
	Types["ORM_O01_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(ORM_O01_ORDER_DETAIL_SEGMENT{})
	Types["ORM_O01_PATIENT"] = reflect.TypeOf(ORM_O01_PATIENT{})
	Types["ORM_O01_PATIENT_VISIT"] = reflect.TypeOf(ORM_O01_PATIENT_VISIT{})
	Types["ORN_O02"] = reflect.TypeOf(ORN_O02{})
	Types["ORN_O02_ORDER"] = reflect.TypeOf(ORN_O02_ORDER{})
	Types["ORN_O02_PATIENT"] = reflect.TypeOf(ORN_O02_PATIENT{})
	Types["ORN_O02_RESPONSE"] = reflect.TypeOf(ORN_O02_RESPONSE{})
	Types["ORN_O08"] = reflect.TypeOf(ORN_O08{})
	Types["ORN_O08_ORDER"] = reflect.TypeOf(ORN_O08_ORDER{})
	Types["ORN_O08_PATIENT"] = reflect.TypeOf(ORN_O08_PATIENT{})
	Types["ORN_O08_RESPONSE"] = reflect.TypeOf(ORN_O08_RESPONSE{})
	Types["ORN_O08_TIMING"] = reflect.TypeOf(ORN_O08_TIMING{})
	Types["ORP_O10_COMPONENT"] = reflect.TypeOf(ORP_O10_COMPONENT{})
	Types["ORP_O10"] = reflect.TypeOf(ORP_O10{})
	Types["ORP_O10_ORDER"] = reflect.TypeOf(ORP_O10_ORDER{})
	Types["ORP_O10_ORDER_DETAIL"] = reflect.TypeOf(ORP_O10_ORDER_DETAIL{})
	Types["ORP_O10_PATIENT"] = reflect.TypeOf(ORP_O10_PATIENT{})
	Types["ORP_O10_RESPONSE"] = reflect.TypeOf(ORP_O10_RESPONSE{})
	Types["ORP_O10_TIMING"] = reflect.TypeOf(ORP_O10_TIMING{})
	Types["ORR_O02_CHOICE"] = reflect.TypeOf(ORR_O02_CHOICE{})
	Types["ORR_O02"] = reflect.TypeOf(ORR_O02{})
	Types["ORR_O02_ORDER"] = reflect.TypeOf(ORR_O02_ORDER{})
	Types["ORR_O02_ORDER_DETAIL"] = reflect.TypeOf(ORR_O02_ORDER_DETAIL{})
	Types["ORR_O02_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(ORR_O02_ORDER_DETAIL_SEGMENT{})
	Types["ORR_O02_PATIENT"] = reflect.TypeOf(ORR_O02_PATIENT{})
	Types["ORR_O02_RESPONSE"] = reflect.TypeOf(ORR_O02_RESPONSE{})
	Types["ORS_O02"] = reflect.TypeOf(ORS_O02{})
	Types["ORS_O02_ORDER"] = reflect.TypeOf(ORS_O02_ORDER{})
	Types["ORS_O02_PATIENT"] = reflect.TypeOf(ORS_O02_PATIENT{})
	Types["ORS_O02_RESPONSE"] = reflect.TypeOf(ORS_O02_RESPONSE{})
	Types["ORS_O06"] = reflect.TypeOf(ORS_O06{})
	Types["ORS_O06_ORDER"] = reflect.TypeOf(ORS_O06_ORDER{})
	Types["ORS_O06_PATIENT"] = reflect.TypeOf(ORS_O06_PATIENT{})
	Types["ORS_O06_RESPONSE"] = reflect.TypeOf(ORS_O06_RESPONSE{})
	Types["ORS_O06_RSPONSE"] = reflect.TypeOf(ORS_O06_RSPONSE{})
	Types["ORS_O06_TIMING"] = reflect.TypeOf(ORS_O06_TIMING{})
	Types["ORU_R01"] = reflect.TypeOf(ORU_R01{})
	Types["ORU_R01_OBSERVATION"] = reflect.TypeOf(ORU_R01_OBSERVATION{})
	Types["ORU_R01_ORDER_OBSERVATION"] = reflect.TypeOf(ORU_R01_ORDER_OBSERVATION{})
	Types["ORU_R01_PATIENT"] = reflect.TypeOf(ORU_R01_PATIENT{})
	Types["ORU_R01_PATIENT_RESULT"] = reflect.TypeOf(ORU_R01_PATIENT_RESULT{})
	Types["ORU_R01_RESPONSE"] = reflect.TypeOf(ORU_R01_RESPONSE{})
	Types["ORU_R01_SPECIMEN"] = reflect.TypeOf(ORU_R01_SPECIMEN{})
	Types["ORU_R01_TIMING_QTY"] = reflect.TypeOf(ORU_R01_TIMING_QTY{})
	Types["ORU_R01_VISIT"] = reflect.TypeOf(ORU_R01_VISIT{})
	Types["ORU_R03"] = reflect.TypeOf(ORU_R03{})
	Types["ORU_R03_OBSERVATION"] = reflect.TypeOf(ORU_R03_OBSERVATION{})
	Types["ORU_R03_ORDER_OBSERVATION"] = reflect.TypeOf(ORU_R03_ORDER_OBSERVATION{})
	Types["ORU_R03_PATIENT"] = reflect.TypeOf(ORU_R03_PATIENT{})
	Types["ORU_R03_PATIENT_RESULT"] = reflect.TypeOf(ORU_R03_PATIENT_RESULT{})
	Types["ORU_R30"] = reflect.TypeOf(ORU_R30{})
	Types["ORU_R30_OBSERVATION"] = reflect.TypeOf(ORU_R30_OBSERVATION{})
	Types["ORU_R30_TIMING_QTY"] = reflect.TypeOf(ORU_R30_TIMING_QTY{})
	Types["ORU_R30_VISIT"] = reflect.TypeOf(ORU_R30_VISIT{})
	Types["ORU_R32"] = reflect.TypeOf(ORU_R32{})
	Types["ORU_R32_OBSERVATION"] = reflect.TypeOf(ORU_R32_OBSERVATION{})
	Types["ORU_R32_ORDER_OBSERVATION"] = reflect.TypeOf(ORU_R32_ORDER_OBSERVATION{})
	Types["ORU_R32_PATIENT"] = reflect.TypeOf(ORU_R32_PATIENT{})
	Types["ORU_R32_PATIENT_RESULT"] = reflect.TypeOf(ORU_R32_PATIENT_RESULT{})
	Types["ORU_R32_VISIT"] = reflect.TypeOf(ORU_R32_VISIT{})
	Types["OSQ_Q06"] = reflect.TypeOf(OSQ_Q06{})
	Types["OSR_Q06_CHOICE"] = reflect.TypeOf(OSR_Q06_CHOICE{})
	Types["OSR_Q06"] = reflect.TypeOf(OSR_Q06{})
	Types["OSR_Q06_OBSERVATION"] = reflect.TypeOf(OSR_Q06_OBSERVATION{})
	Types["OSR_Q06_ORDER"] = reflect.TypeOf(OSR_Q06_ORDER{})
	Types["OSR_Q06_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(OSR_Q06_ORDER_DETAIL_SEGMENT{})
	Types["OSR_Q06_PATIENT"] = reflect.TypeOf(OSR_Q06_PATIENT{})
	Types["OSR_Q06_RESPONSE"] = reflect.TypeOf(OSR_Q06_RESPONSE{})
	Types["OSR_Q06_TIMING"] = reflect.TypeOf(OSR_Q06_TIMING{})
	Types["OUL_R21_CONTAINER"] = reflect.TypeOf(OUL_R21_CONTAINER{})
	Types["OUL_R21"] = reflect.TypeOf(OUL_R21{})
	Types["OUL_R21_OBSERVATION"] = reflect.TypeOf(OUL_R21_OBSERVATION{})
	Types["OUL_R21_ORDER_OBSERVATION"] = reflect.TypeOf(OUL_R21_ORDER_OBSERVATION{})
	Types["OUL_R21_PATIENT"] = reflect.TypeOf(OUL_R21_PATIENT{})
	Types["OUL_R21_TIMING_QTY"] = reflect.TypeOf(OUL_R21_TIMING_QTY{})
	Types["OUL_R21_VISIT"] = reflect.TypeOf(OUL_R21_VISIT{})
	Types["OUL_R22_CONTAINER"] = reflect.TypeOf(OUL_R22_CONTAINER{})
	Types["OUL_R22"] = reflect.TypeOf(OUL_R22{})
	Types["OUL_R22_ORDER"] = reflect.TypeOf(OUL_R22_ORDER{})
	Types["OUL_R22_PATIENT"] = reflect.TypeOf(OUL_R22_PATIENT{})
	Types["OUL_R22_RESULT"] = reflect.TypeOf(OUL_R22_RESULT{})
	Types["OUL_R22_SPECIMEN"] = reflect.TypeOf(OUL_R22_SPECIMEN{})
	Types["OUL_R22_TIMING_QTY"] = reflect.TypeOf(OUL_R22_TIMING_QTY{})
	Types["OUL_R22_VISIT"] = reflect.TypeOf(OUL_R22_VISIT{})
	Types["OUL_R23_CONTAINER"] = reflect.TypeOf(OUL_R23_CONTAINER{})
	Types["OUL_R23"] = reflect.TypeOf(OUL_R23{})
	Types["OUL_R23_ORDER"] = reflect.TypeOf(OUL_R23_ORDER{})
	Types["OUL_R23_PATIENT"] = reflect.TypeOf(OUL_R23_PATIENT{})
	Types["OUL_R23_RESULT"] = reflect.TypeOf(OUL_R23_RESULT{})
	Types["OUL_R23_SPECIMEN"] = reflect.TypeOf(OUL_R23_SPECIMEN{})
	Types["OUL_R23_TIMING_QTY"] = reflect.TypeOf(OUL_R23_TIMING_QTY{})
	Types["OUL_R23_VISIT"] = reflect.TypeOf(OUL_R23_VISIT{})
	Types["OUL_R24_CONTAINER"] = reflect.TypeOf(OUL_R24_CONTAINER{})
	Types["OUL_R24"] = reflect.TypeOf(OUL_R24{})
	Types["OUL_R24_ORDER"] = reflect.TypeOf(OUL_R24_ORDER{})
	Types["OUL_R24_PATIENT"] = reflect.TypeOf(OUL_R24_PATIENT{})
	Types["OUL_R24_RESULT"] = reflect.TypeOf(OUL_R24_RESULT{})
	Types["OUL_R24_SPECIMEN"] = reflect.TypeOf(OUL_R24_SPECIMEN{})
	Types["OUL_R24_TIMING_QTY"] = reflect.TypeOf(OUL_R24_TIMING_QTY{})
	Types["OUL_R24_VISIT"] = reflect.TypeOf(OUL_R24_VISIT{})
	Types["PEX_P07_ASSOCIATED_PERSON"] = reflect.TypeOf(PEX_P07_ASSOCIATED_PERSON{})
	Types["PEX_P07_ASSOCIATED_RX_ADMIN"] = reflect.TypeOf(PEX_P07_ASSOCIATED_RX_ADMIN{})
	Types["PEX_P07_ASSOCIATED_RX_ORDER"] = reflect.TypeOf(PEX_P07_ASSOCIATED_RX_ORDER{})
	Types["PEX_P07"] = reflect.TypeOf(PEX_P07{})
	Types["PEX_P07_EXPERIENCE"] = reflect.TypeOf(PEX_P07_EXPERIENCE{})
	Types["PEX_P07_NK1_TIMING_QTY"] = reflect.TypeOf(PEX_P07_NK1_TIMING_QTY{})
	Types["PEX_P07_PEX_CAUSE"] = reflect.TypeOf(PEX_P07_PEX_CAUSE{})
	Types["PEX_P07_PEX_OBSERVATION"] = reflect.TypeOf(PEX_P07_PEX_OBSERVATION{})
	Types["PEX_P07_RX_ADMINISTRATION"] = reflect.TypeOf(PEX_P07_RX_ADMINISTRATION{})
	Types["PEX_P07_RX_ORDER"] = reflect.TypeOf(PEX_P07_RX_ORDER{})
	Types["PEX_P07_STUDY"] = reflect.TypeOf(PEX_P07_STUDY{})
	Types["PEX_P07_TIMING_QTY"] = reflect.TypeOf(PEX_P07_TIMING_QTY{})
	Types["PEX_P07_VISIT"] = reflect.TypeOf(PEX_P07_VISIT{})
	Types["PGL_PC6_CHOICE"] = reflect.TypeOf(PGL_PC6_CHOICE{})
	Types["PGL_PC6"] = reflect.TypeOf(PGL_PC6{})
	Types["PGL_PC6_GOAL"] = reflect.TypeOf(PGL_PC6_GOAL{})
	Types["PGL_PC6_GOAL_ROLE"] = reflect.TypeOf(PGL_PC6_GOAL_ROLE{})
	Types["PGL_PC6_OBSERVATION"] = reflect.TypeOf(PGL_PC6_OBSERVATION{})
	Types["PGL_PC6_ORDER"] = reflect.TypeOf(PGL_PC6_ORDER{})
	Types["PGL_PC6_ORDER_DETAIL"] = reflect.TypeOf(PGL_PC6_ORDER_DETAIL{})
	Types["PGL_PC6_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(PGL_PC6_ORDER_DETAIL_SEGMENT{})
	Types["PGL_PC6_ORDER_OBSERVATION"] = reflect.TypeOf(PGL_PC6_ORDER_OBSERVATION{})
	Types["PGL_PC6_PATHWAY"] = reflect.TypeOf(PGL_PC6_PATHWAY{})
	Types["PGL_PC6_PATIENT_VISIT"] = reflect.TypeOf(PGL_PC6_PATIENT_VISIT{})
	Types["PGL_PC6_PROBLEM"] = reflect.TypeOf(PGL_PC6_PROBLEM{})
	Types["PGL_PC6_PROBLEM_OBSERVATION"] = reflect.TypeOf(PGL_PC6_PROBLEM_OBSERVATION{})
	Types["PGL_PC6_PROBLEM_ROLE"] = reflect.TypeOf(PGL_PC6_PROBLEM_ROLE{})
	Types["PIN_I07"] = reflect.TypeOf(PIN_I07{})
	Types["PIN_I07_GUARANTOR_INSURANCE"] = reflect.TypeOf(PIN_I07_GUARANTOR_INSURANCE{})
	Types["PIN_I07_INSURANCE"] = reflect.TypeOf(PIN_I07_INSURANCE{})
	Types["PIN_I07_PROVIDER"] = reflect.TypeOf(PIN_I07_PROVIDER{})
	Types["PMU_B01"] = reflect.TypeOf(PMU_B01{})
	Types["PMU_B03"] = reflect.TypeOf(PMU_B03{})
	Types["PMU_B04"] = reflect.TypeOf(PMU_B04{})
	Types["PMU_B07_CERTIFICATE"] = reflect.TypeOf(PMU_B07_CERTIFICATE{})
	Types["PMU_B07"] = reflect.TypeOf(PMU_B07{})
	Types["PMU_B08"] = reflect.TypeOf(PMU_B08{})
	Types["PPG_PCG_CHOICE"] = reflect.TypeOf(PPG_PCG_CHOICE{})
	Types["PPG_PCG"] = reflect.TypeOf(PPG_PCG{})
	Types["PPG_PCG_GOAL"] = reflect.TypeOf(PPG_PCG_GOAL{})
	Types["PPG_PCG_GOAL_OBSERVATION"] = reflect.TypeOf(PPG_PCG_GOAL_OBSERVATION{})
	Types["PPG_PCG_GOAL_ROLE"] = reflect.TypeOf(PPG_PCG_GOAL_ROLE{})
	Types["PPG_PCG_ORDER"] = reflect.TypeOf(PPG_PCG_ORDER{})
	Types["PPG_PCG_ORDER_DETAIL"] = reflect.TypeOf(PPG_PCG_ORDER_DETAIL{})
	Types["PPG_PCG_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(PPG_PCG_ORDER_DETAIL_SEGMENT{})
	Types["PPG_PCG_ORDER_OBSERVATION"] = reflect.TypeOf(PPG_PCG_ORDER_OBSERVATION{})
	Types["PPG_PCG_PATHWAY"] = reflect.TypeOf(PPG_PCG_PATHWAY{})
	Types["PPG_PCG_PATHWAY_ROLE"] = reflect.TypeOf(PPG_PCG_PATHWAY_ROLE{})
	Types["PPG_PCG_PATIENT_VISIT"] = reflect.TypeOf(PPG_PCG_PATIENT_VISIT{})
	Types["PPG_PCG_PROBLEM"] = reflect.TypeOf(PPG_PCG_PROBLEM{})
	Types["PPG_PCG_PROBLEM_OBSERVATION"] = reflect.TypeOf(PPG_PCG_PROBLEM_OBSERVATION{})
	Types["PPG_PCG_PROBLEM_ROLE"] = reflect.TypeOf(PPG_PCG_PROBLEM_ROLE{})
	Types["PPP_PCB_CHOICE"] = reflect.TypeOf(PPP_PCB_CHOICE{})
	Types["PPP_PCB"] = reflect.TypeOf(PPP_PCB{})
	Types["PPP_PCB_GOAL"] = reflect.TypeOf(PPP_PCB_GOAL{})
	Types["PPP_PCB_GOAL_OBSERVATION"] = reflect.TypeOf(PPP_PCB_GOAL_OBSERVATION{})
	Types["PPP_PCB_GOAL_ROLE"] = reflect.TypeOf(PPP_PCB_GOAL_ROLE{})
	Types["PPP_PCB_ORDER"] = reflect.TypeOf(PPP_PCB_ORDER{})
	Types["PPP_PCB_ORDER_DETAIL"] = reflect.TypeOf(PPP_PCB_ORDER_DETAIL{})
	Types["PPP_PCB_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(PPP_PCB_ORDER_DETAIL_SEGMENT{})
	Types["PPP_PCB_ORDER_OBSERVATION"] = reflect.TypeOf(PPP_PCB_ORDER_OBSERVATION{})
	Types["PPP_PCB_PATHWAY"] = reflect.TypeOf(PPP_PCB_PATHWAY{})
	Types["PPP_PCB_PATHWAY_ROLE"] = reflect.TypeOf(PPP_PCB_PATHWAY_ROLE{})
	Types["PPP_PCB_PATIENT_VISIT"] = reflect.TypeOf(PPP_PCB_PATIENT_VISIT{})
	Types["PPP_PCB_PROBLEM"] = reflect.TypeOf(PPP_PCB_PROBLEM{})
	Types["PPP_PCB_PROBLEM_OBSERVATION"] = reflect.TypeOf(PPP_PCB_PROBLEM_OBSERVATION{})
	Types["PPP_PCB_PROBLEM_ROLE"] = reflect.TypeOf(PPP_PCB_PROBLEM_ROLE{})
	Types["PPR_PC1_CHOICE"] = reflect.TypeOf(PPR_PC1_CHOICE{})
	Types["PPR_PC1"] = reflect.TypeOf(PPR_PC1{})
	Types["PPR_PC1_GOAL"] = reflect.TypeOf(PPR_PC1_GOAL{})
	Types["PPR_PC1_GOAL_OBSERVATION"] = reflect.TypeOf(PPR_PC1_GOAL_OBSERVATION{})
	Types["PPR_PC1_GOAL_ROLE"] = reflect.TypeOf(PPR_PC1_GOAL_ROLE{})
	Types["PPR_PC1_ORDER"] = reflect.TypeOf(PPR_PC1_ORDER{})
	Types["PPR_PC1_ORDER_DETAIL"] = reflect.TypeOf(PPR_PC1_ORDER_DETAIL{})
	Types["PPR_PC1_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(PPR_PC1_ORDER_DETAIL_SEGMENT{})
	Types["PPR_PC1_ORDER_OBSERVATION"] = reflect.TypeOf(PPR_PC1_ORDER_OBSERVATION{})
	Types["PPR_PC1_PATHWAY"] = reflect.TypeOf(PPR_PC1_PATHWAY{})
	Types["PPR_PC1_PATHWAY_OBSERVATION"] = reflect.TypeOf(PPR_PC1_PATHWAY_OBSERVATION{})
	Types["PPR_PC1_PATIENT_VISIT"] = reflect.TypeOf(PPR_PC1_PATIENT_VISIT{})
	Types["PPR_PC1_PROBLEM"] = reflect.TypeOf(PPR_PC1_PROBLEM{})
	Types["PPR_PC1_PROBLEM_OBSERVATION"] = reflect.TypeOf(PPR_PC1_PROBLEM_OBSERVATION{})
	Types["PPR_PC1_PROBLEM_ROLE"] = reflect.TypeOf(PPR_PC1_PROBLEM_ROLE{})
	Types["PPT_PCL_CHOICE"] = reflect.TypeOf(PPT_PCL_CHOICE{})
	Types["PPT_PCL"] = reflect.TypeOf(PPT_PCL{})
	Types["PPT_PCL_GOAL"] = reflect.TypeOf(PPT_PCL_GOAL{})
	Types["PPT_PCL_GOAL_OBSERVATION"] = reflect.TypeOf(PPT_PCL_GOAL_OBSERVATION{})
	Types["PPT_PCL_GOAL_ROLE"] = reflect.TypeOf(PPT_PCL_GOAL_ROLE{})
	Types["PPT_PCL_ORDER"] = reflect.TypeOf(PPT_PCL_ORDER{})
	Types["PPT_PCL_ORDER_DETAIL"] = reflect.TypeOf(PPT_PCL_ORDER_DETAIL{})
	Types["PPT_PCL_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(PPT_PCL_ORDER_DETAIL_SEGMENT{})
	Types["PPT_PCL_ORDER_OBSERVATION"] = reflect.TypeOf(PPT_PCL_ORDER_OBSERVATION{})
	Types["PPT_PCL_PATHWAY"] = reflect.TypeOf(PPT_PCL_PATHWAY{})
	Types["PPT_PCL_PATHWAY_ROLE"] = reflect.TypeOf(PPT_PCL_PATHWAY_ROLE{})
	Types["PPT_PCL_PATIENT"] = reflect.TypeOf(PPT_PCL_PATIENT{})
	Types["PPT_PCL_PATIENT_VISIT"] = reflect.TypeOf(PPT_PCL_PATIENT_VISIT{})
	Types["PPT_PCL_PROBLEM"] = reflect.TypeOf(PPT_PCL_PROBLEM{})
	Types["PPT_PCL_PROBLEM_OBSERVATION"] = reflect.TypeOf(PPT_PCL_PROBLEM_OBSERVATION{})
	Types["PPT_PCL_PROBLEM_ROLE"] = reflect.TypeOf(PPT_PCL_PROBLEM_ROLE{})
	Types["PPV_PCA_CHOICE"] = reflect.TypeOf(PPV_PCA_CHOICE{})
	Types["PPV_PCA"] = reflect.TypeOf(PPV_PCA{})
	Types["PPV_PCA_GOAL"] = reflect.TypeOf(PPV_PCA_GOAL{})
	Types["PPV_PCA_GOAL_OBSERVATION"] = reflect.TypeOf(PPV_PCA_GOAL_OBSERVATION{})
	Types["PPV_PCA_GOAL_PATHWAY"] = reflect.TypeOf(PPV_PCA_GOAL_PATHWAY{})
	Types["PPV_PCA_GOAL_ROLE"] = reflect.TypeOf(PPV_PCA_GOAL_ROLE{})
	Types["PPV_PCA_ORDER"] = reflect.TypeOf(PPV_PCA_ORDER{})
	Types["PPV_PCA_ORDER_CHOICE"] = reflect.TypeOf(PPV_PCA_ORDER_CHOICE{})
	Types["PPV_PCA_ORDER_DETAIL"] = reflect.TypeOf(PPV_PCA_ORDER_DETAIL{})
	Types["PPV_PCA_ORDER_OBSERVATION"] = reflect.TypeOf(PPV_PCA_ORDER_OBSERVATION{})
	Types["PPV_PCA_PATIENT"] = reflect.TypeOf(PPV_PCA_PATIENT{})
	Types["PPV_PCA_PATIENT_VISIT"] = reflect.TypeOf(PPV_PCA_PATIENT_VISIT{})
	Types["PPV_PCA_PROBLEM"] = reflect.TypeOf(PPV_PCA_PROBLEM{})
	Types["PPV_PCA_PROBLEM_OBSERVATION"] = reflect.TypeOf(PPV_PCA_PROBLEM_OBSERVATION{})
	Types["PPV_PCA_PROBLEM_ROLE"] = reflect.TypeOf(PPV_PCA_PROBLEM_ROLE{})
	Types["PRR_PC5_CHOICE"] = reflect.TypeOf(PRR_PC5_CHOICE{})
	Types["PRR_PC5"] = reflect.TypeOf(PRR_PC5{})
	Types["PRR_PC5_GOAL"] = reflect.TypeOf(PRR_PC5_GOAL{})
	Types["PRR_PC5_GOAL_OBSERVATION"] = reflect.TypeOf(PRR_PC5_GOAL_OBSERVATION{})
	Types["PRR_PC5_GOAL_ROLE"] = reflect.TypeOf(PRR_PC5_GOAL_ROLE{})
	Types["PRR_PC5_ORDER"] = reflect.TypeOf(PRR_PC5_ORDER{})
	Types["PRR_PC5_ORDER_DETAIL"] = reflect.TypeOf(PRR_PC5_ORDER_DETAIL{})
	Types["PRR_PC5_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(PRR_PC5_ORDER_DETAIL_SEGMENT{})
	Types["PRR_PC5_ORDER_OBSERVATION"] = reflect.TypeOf(PRR_PC5_ORDER_OBSERVATION{})
	Types["PRR_PC5_PATIENT"] = reflect.TypeOf(PRR_PC5_PATIENT{})
	Types["PRR_PC5_PATIENT_VISIT"] = reflect.TypeOf(PRR_PC5_PATIENT_VISIT{})
	Types["PRR_PC5_PROBLEM"] = reflect.TypeOf(PRR_PC5_PROBLEM{})
	Types["PRR_PC5_PROBLEM_OBSERVATION"] = reflect.TypeOf(PRR_PC5_PROBLEM_OBSERVATION{})
	Types["PRR_PC5_PROBLEM_PATHWAY"] = reflect.TypeOf(PRR_PC5_PROBLEM_PATHWAY{})
	Types["PRR_PC5_PROBLEM_ROLE"] = reflect.TypeOf(PRR_PC5_PROBLEM_ROLE{})
	Types["PTR_PCF_CHOICE"] = reflect.TypeOf(PTR_PCF_CHOICE{})
	Types["PTR_PCF"] = reflect.TypeOf(PTR_PCF{})
	Types["PTR_PCF_GOAL"] = reflect.TypeOf(PTR_PCF_GOAL{})
	Types["PTR_PCF_GOAL_OBSERVATION"] = reflect.TypeOf(PTR_PCF_GOAL_OBSERVATION{})
	Types["PTR_PCF_GOAL_ROLE"] = reflect.TypeOf(PTR_PCF_GOAL_ROLE{})
	Types["PTR_PCF_ORDER"] = reflect.TypeOf(PTR_PCF_ORDER{})
	Types["PTR_PCF_ORDER_DETAIL"] = reflect.TypeOf(PTR_PCF_ORDER_DETAIL{})
	Types["PTR_PCF_ORDER_DETAIL_SEGMENT"] = reflect.TypeOf(PTR_PCF_ORDER_DETAIL_SEGMENT{})
	Types["PTR_PCF_ORDER_OBSERVATION"] = reflect.TypeOf(PTR_PCF_ORDER_OBSERVATION{})
	Types["PTR_PCF_PATHWAY"] = reflect.TypeOf(PTR_PCF_PATHWAY{})
	Types["PTR_PCF_PATHWAY_ROLE"] = reflect.TypeOf(PTR_PCF_PATHWAY_ROLE{})
	Types["PTR_PCF_PATIENT"] = reflect.TypeOf(PTR_PCF_PATIENT{})
	Types["PTR_PCF_PATIENT_VISIT"] = reflect.TypeOf(PTR_PCF_PATIENT_VISIT{})
	Types["PTR_PCF_PROBLEM"] = reflect.TypeOf(PTR_PCF_PROBLEM{})
	Types["PTR_PCF_PROBLEM_OBSERVATION"] = reflect.TypeOf(PTR_PCF_PROBLEM_OBSERVATION{})
	Types["PTR_PCF_PROBLEM_ROLE"] = reflect.TypeOf(PTR_PCF_PROBLEM_ROLE{})
	Types["QBP_K13"] = reflect.TypeOf(QBP_K13{})
	Types["QBP_K13_ROW_DEFINITION"] = reflect.TypeOf(QBP_K13_ROW_DEFINITION{})
	Types["QBP_Q11"] = reflect.TypeOf(QBP_Q11{})
	Types["QBP_Q13"] = reflect.TypeOf(QBP_Q13{})
	Types["QBP_Q13_QBP"] = reflect.TypeOf(QBP_Q13_QBP{})
	Types["QBP_Q15"] = reflect.TypeOf(QBP_Q15{})
	Types["QBP_Q21"] = reflect.TypeOf(QBP_Q21{})
	Types["QBP_Qnn"] = reflect.TypeOf(QBP_Qnn{})
	Types["QBP_Z73"] = reflect.TypeOf(QBP_Z73{})
	Types["QCK_Q02"] = reflect.TypeOf(QCK_Q02{})
	Types["QCN_J01"] = reflect.TypeOf(QCN_J01{})
	Types["QRY_A19"] = reflect.TypeOf(QRY_A19{})
	Types["QRY_P04"] = reflect.TypeOf(QRY_P04{})
	Types["QRY_PC4"] = reflect.TypeOf(QRY_PC4{})
	Types["QRY_Q01"] = reflect.TypeOf(QRY_Q01{})
	Types["QRY_Q02"] = reflect.TypeOf(QRY_Q02{})
	Types["QRY_R02"] = reflect.TypeOf(QRY_R02{})
	Types["QRY_T12"] = reflect.TypeOf(QRY_T12{})
	Types["QSB_Q16"] = reflect.TypeOf(QSB_Q16{})
	Types["QVR_Q17"] = reflect.TypeOf(QVR_Q17{})
	Types["QVR_Q17_QBP"] = reflect.TypeOf(QVR_Q17_QBP{})
	Types["RAR_RAR"] = reflect.TypeOf(RAR_RAR{})
	Types["RAR_RAR_DEFINITION"] = reflect.TypeOf(RAR_RAR_DEFINITION{})
	Types["RAR_RAR_ENCODING"] = reflect.TypeOf(RAR_RAR_ENCODING{})
	Types["RAR_RAR_ORDER"] = reflect.TypeOf(RAR_RAR_ORDER{})
	Types["RAR_RAR_PATIENT"] = reflect.TypeOf(RAR_RAR_PATIENT{})
	Types["RAS_O01_COMPONENTS"] = reflect.TypeOf(RAS_O01_COMPONENTS{})
	Types["RAS_O01"] = reflect.TypeOf(RAS_O01{})
	Types["RAS_O01_ENCODING"] = reflect.TypeOf(RAS_O01_ENCODING{})
	Types["RAS_O01_OBSERVATION"] = reflect.TypeOf(RAS_O01_OBSERVATION{})
	Types["RAS_O01_ORDER"] = reflect.TypeOf(RAS_O01_ORDER{})
	Types["RAS_O01_ORDER_DETAIL"] = reflect.TypeOf(RAS_O01_ORDER_DETAIL{})
	Types["RAS_O01_ORDER_DETAIL_SUPPLEMENT"] = reflect.TypeOf(RAS_O01_ORDER_DETAIL_SUPPLEMENT{})
	Types["RAS_O01_PATIENT"] = reflect.TypeOf(RAS_O01_PATIENT{})
	Types["RAS_O01_PATIENT_VISIT"] = reflect.TypeOf(RAS_O01_PATIENT_VISIT{})
	Types["RAS_O17_ADMINISTRATION"] = reflect.TypeOf(RAS_O17_ADMINISTRATION{})
	Types["RAS_O17_COMPONENTS"] = reflect.TypeOf(RAS_O17_COMPONENTS{})
	Types["RAS_O17"] = reflect.TypeOf(RAS_O17{})
	Types["RAS_O17_ENCODING"] = reflect.TypeOf(RAS_O17_ENCODING{})
	Types["RAS_O17_OBSERVATION"] = reflect.TypeOf(RAS_O17_OBSERVATION{})
	Types["RAS_O17_ORDER"] = reflect.TypeOf(RAS_O17_ORDER{})
	Types["RAS_O17_ORDER_DETAIL"] = reflect.TypeOf(RAS_O17_ORDER_DETAIL{})
	Types["RAS_O17_ORDER_DETAIL_SUPPLEMENT"] = reflect.TypeOf(RAS_O17_ORDER_DETAIL_SUPPLEMENT{})
	Types["RAS_O17_PATIENT"] = reflect.TypeOf(RAS_O17_PATIENT{})
	Types["RAS_O17_PATIENT_VISIT"] = reflect.TypeOf(RAS_O17_PATIENT_VISIT{})
	Types["RAS_O17_TIMING"] = reflect.TypeOf(RAS_O17_TIMING{})
	Types["RAS_O17_TIMING_ENCODED"] = reflect.TypeOf(RAS_O17_TIMING_ENCODED{})
	Types["RCI_I05"] = reflect.TypeOf(RCI_I05{})
	Types["RCI_I05_OBSERVATION"] = reflect.TypeOf(RCI_I05_OBSERVATION{})
	Types["RCI_I05_PROVIDER"] = reflect.TypeOf(RCI_I05_PROVIDER{})
	Types["RCI_I05_RESULTS"] = reflect.TypeOf(RCI_I05_RESULTS{})
	Types["RCL_I06"] = reflect.TypeOf(RCL_I06{})
	Types["RCL_I06_PROVIDER"] = reflect.TypeOf(RCL_I06_PROVIDER{})
	Types["RDE_O01_COMPONENT"] = reflect.TypeOf(RDE_O01_COMPONENT{})
	Types["RDE_O01"] = reflect.TypeOf(RDE_O01{})
	Types["RDE_O01_INSURANCE"] = reflect.TypeOf(RDE_O01_INSURANCE{})
	Types["RDE_O01_OBSERVATION"] = reflect.TypeOf(RDE_O01_OBSERVATION{})
	Types["RDE_O01_ORDER"] = reflect.TypeOf(RDE_O01_ORDER{})
	Types["RDE_O01_ORDER_DETAIL"] = reflect.TypeOf(RDE_O01_ORDER_DETAIL{})
	Types["RDE_O01_PATIENT"] = reflect.TypeOf(RDE_O01_PATIENT{})
	Types["RDE_O01_PATIENT_VISIT"] = reflect.TypeOf(RDE_O01_PATIENT_VISIT{})
	Types["RDE_O11_COMPONENT"] = reflect.TypeOf(RDE_O11_COMPONENT{})
	Types["RDE_O11"] = reflect.TypeOf(RDE_O11{})
	Types["RDE_O11_INSURANCE"] = reflect.TypeOf(RDE_O11_INSURANCE{})
	Types["RDE_O11_OBSERVATION"] = reflect.TypeOf(RDE_O11_OBSERVATION{})
	Types["RDE_O11_ORDER"] = reflect.TypeOf(RDE_O11_ORDER{})
	Types["RDE_O11_ORDER_DETAIL"] = reflect.TypeOf(RDE_O11_ORDER_DETAIL{})
	Types["RDE_O11_PATIENT"] = reflect.TypeOf(RDE_O11_PATIENT{})
	Types["RDE_O11_PATIENT_VISIT"] = reflect.TypeOf(RDE_O11_PATIENT_VISIT{})
	Types["RDE_O11_TIMING"] = reflect.TypeOf(RDE_O11_TIMING{})
	Types["RDE_O11_TIMING_ENCODED"] = reflect.TypeOf(RDE_O11_TIMING_ENCODED{})
	Types["RDO_O01_COMPONENT"] = reflect.TypeOf(RDO_O01_COMPONENT{})
	Types["RDO_O01"] = reflect.TypeOf(RDO_O01{})
	Types["RDO_O01_INSURANCE"] = reflect.TypeOf(RDO_O01_INSURANCE{})
	Types["RDO_O01_OBSERVATION"] = reflect.TypeOf(RDO_O01_OBSERVATION{})
	Types["RDO_O01_ORDER"] = reflect.TypeOf(RDO_O01_ORDER{})
	Types["RDO_O01_ORDER_DETAIL"] = reflect.TypeOf(RDO_O01_ORDER_DETAIL{})
	Types["RDO_O01_PATIENT"] = reflect.TypeOf(RDO_O01_PATIENT{})
	Types["RDO_O01_PATIENT_VISIT"] = reflect.TypeOf(RDO_O01_PATIENT_VISIT{})
	Types["RDR_RDR"] = reflect.TypeOf(RDR_RDR{})
	Types["RDR_RDR_DEFINITION"] = reflect.TypeOf(RDR_RDR_DEFINITION{})
	Types["RDR_RDR_DISPENSE"] = reflect.TypeOf(RDR_RDR_DISPENSE{})
	Types["RDR_RDR_ENCODING"] = reflect.TypeOf(RDR_RDR_ENCODING{})
	Types["RDR_RDR_ORDER"] = reflect.TypeOf(RDR_RDR_ORDER{})
	Types["RDR_RDR_PATIENT"] = reflect.TypeOf(RDR_RDR_PATIENT{})
	Types["RDS_O01_COMPONENT"] = reflect.TypeOf(RDS_O01_COMPONENT{})
	Types["RDS_O01"] = reflect.TypeOf(RDS_O01{})
	Types["RDS_O01_ENCODING"] = reflect.TypeOf(RDS_O01_ENCODING{})
	Types["RDS_O01_OBSERVATION"] = reflect.TypeOf(RDS_O01_OBSERVATION{})
	Types["RDS_O01_ORDER"] = reflect.TypeOf(RDS_O01_ORDER{})
	Types["RDS_O01_ORDER_DETAIL"] = reflect.TypeOf(RDS_O01_ORDER_DETAIL{})
	Types["RDS_O01_ORDER_DETAIL_SUPPLEMENT"] = reflect.TypeOf(RDS_O01_ORDER_DETAIL_SUPPLEMENT{})
	Types["RDS_O01_PATIENT"] = reflect.TypeOf(RDS_O01_PATIENT{})
	Types["RDS_O01_PATIENT_VISIT"] = reflect.TypeOf(RDS_O01_PATIENT_VISIT{})
	Types["RDS_O13_COMPONENT"] = reflect.TypeOf(RDS_O13_COMPONENT{})
	Types["RDS_O13"] = reflect.TypeOf(RDS_O13{})
	Types["RDS_O13_ENCODING"] = reflect.TypeOf(RDS_O13_ENCODING{})
	Types["RDS_O13_OBSERVATION"] = reflect.TypeOf(RDS_O13_OBSERVATION{})
	Types["RDS_O13_ORDER"] = reflect.TypeOf(RDS_O13_ORDER{})
	Types["RDS_O13_ORDER_DETAIL"] = reflect.TypeOf(RDS_O13_ORDER_DETAIL{})
	Types["RDS_O13_ORDER_DETAIL_SUPPLEMENT"] = reflect.TypeOf(RDS_O13_ORDER_DETAIL_SUPPLEMENT{})
	Types["RDS_O13_PATIENT"] = reflect.TypeOf(RDS_O13_PATIENT{})
	Types["RDS_O13_PATIENT_VISIT"] = reflect.TypeOf(RDS_O13_PATIENT_VISIT{})
	Types["RDS_O13_TIMING"] = reflect.TypeOf(RDS_O13_TIMING{})
	Types["RDS_O13_TIMING_ENCODED"] = reflect.TypeOf(RDS_O13_TIMING_ENCODED{})
	Types["RDY_K15"] = reflect.TypeOf(RDY_K15{})
	Types["REF_I12_AUTHORIZATION"] = reflect.TypeOf(REF_I12_AUTHORIZATION{})
	Types["REF_I12_AUTHORIZATION_CONTACT"] = reflect.TypeOf(REF_I12_AUTHORIZATION_CONTACT{})
	Types["REF_I12"] = reflect.TypeOf(REF_I12{})
	Types["REF_I12_INSURANCE"] = reflect.TypeOf(REF_I12_INSURANCE{})
	Types["REF_I12_OBSERVATION"] = reflect.TypeOf(REF_I12_OBSERVATION{})
	Types["REF_I12_PATIENT_VISIT"] = reflect.TypeOf(REF_I12_PATIENT_VISIT{})
	Types["REF_I12_PROCEDURE"] = reflect.TypeOf(REF_I12_PROCEDURE{})
	Types["REF_I12_PROVIDER"] = reflect.TypeOf(REF_I12_PROVIDER{})
	Types["REF_I12_PROVIDER_CONTACT"] = reflect.TypeOf(REF_I12_PROVIDER_CONTACT{})
	Types["REF_I12_RESULTS"] = reflect.TypeOf(REF_I12_RESULTS{})
	Types["REF_I12_RESULTS_NOTES"] = reflect.TypeOf(REF_I12_RESULTS_NOTES{})
	Types["REF_I12_VISIT"] = reflect.TypeOf(REF_I12_VISIT{})
	Types["RER_RER"] = reflect.TypeOf(RER_RER{})
	Types["RER_RER_DEFINITION"] = reflect.TypeOf(RER_RER_DEFINITION{})
	Types["RER_RER_ORDER"] = reflect.TypeOf(RER_RER_ORDER{})
	Types["RER_RER_PATIENT"] = reflect.TypeOf(RER_RER_PATIENT{})
	Types["RGR_RGR"] = reflect.TypeOf(RGR_RGR{})
	Types["RGR_RGR_DEFINITION"] = reflect.TypeOf(RGR_RGR_DEFINITION{})
	Types["RGR_RGR_DEFINTION"] = reflect.TypeOf(RGR_RGR_DEFINTION{})
	Types["RGR_RGR_ENCODING"] = reflect.TypeOf(RGR_RGR_ENCODING{})
	Types["RGR_RGR_ORDER"] = reflect.TypeOf(RGR_RGR_ORDER{})
	Types["RGR_RGR_PATIENT"] = reflect.TypeOf(RGR_RGR_PATIENT{})
	Types["RGV_O01_COMPONENTS"] = reflect.TypeOf(RGV_O01_COMPONENTS{})
	Types["RGV_O01"] = reflect.TypeOf(RGV_O01{})
	Types["RGV_O01_ENCODING"] = reflect.TypeOf(RGV_O01_ENCODING{})
	Types["RGV_O01_GIVE"] = reflect.TypeOf(RGV_O01_GIVE{})
	Types["RGV_O01_OBSERVATION"] = reflect.TypeOf(RGV_O01_OBSERVATION{})
	Types["RGV_O01_ORDER"] = reflect.TypeOf(RGV_O01_ORDER{})
	Types["RGV_O01_ORDER_DETAIL"] = reflect.TypeOf(RGV_O01_ORDER_DETAIL{})
	Types["RGV_O01_ORDER_DETAIL_SUPPLEMENT"] = reflect.TypeOf(RGV_O01_ORDER_DETAIL_SUPPLEMENT{})
	Types["RGV_O01_PATIENT"] = reflect.TypeOf(RGV_O01_PATIENT{})
	Types["RGV_O01_PATIENT_VISIT"] = reflect.TypeOf(RGV_O01_PATIENT_VISIT{})
	Types["RGV_O15_COMPONENTS"] = reflect.TypeOf(RGV_O15_COMPONENTS{})
	Types["RGV_O15"] = reflect.TypeOf(RGV_O15{})
	Types["RGV_O15_ENCODING"] = reflect.TypeOf(RGV_O15_ENCODING{})
	Types["RGV_O15_GIVE"] = reflect.TypeOf(RGV_O15_GIVE{})
	Types["RGV_O15_OBSERVATION"] = reflect.TypeOf(RGV_O15_OBSERVATION{})
	Types["RGV_O15_ORDER"] = reflect.TypeOf(RGV_O15_ORDER{})
	Types["RGV_O15_ORDER_DETAIL"] = reflect.TypeOf(RGV_O15_ORDER_DETAIL{})
	Types["RGV_O15_ORDER_DETAIL_SUPPLEMENT"] = reflect.TypeOf(RGV_O15_ORDER_DETAIL_SUPPLEMENT{})
	Types["RGV_O15_PATIENT"] = reflect.TypeOf(RGV_O15_PATIENT{})
	Types["RGV_O15_PATIENT_VISIT"] = reflect.TypeOf(RGV_O15_PATIENT_VISIT{})
	Types["RGV_O15_TIMING"] = reflect.TypeOf(RGV_O15_TIMING{})
	Types["RGV_O15_TIMING_ENCODED"] = reflect.TypeOf(RGV_O15_TIMING_ENCODED{})
	Types["RGV_O15_TIMING_GIVE"] = reflect.TypeOf(RGV_O15_TIMING_GIVE{})
	Types["ROR_ROR"] = reflect.TypeOf(ROR_ROR{})
	Types["ROR_ROR_DEFINITION"] = reflect.TypeOf(ROR_ROR_DEFINITION{})
	Types["ROR_ROR_ORDER"] = reflect.TypeOf(ROR_ROR_ORDER{})
	Types["ROR_ROR_PATIENT"] = reflect.TypeOf(ROR_ROR_PATIENT{})
	Types["RPA_I08_AUTHORIZATION"] = reflect.TypeOf(RPA_I08_AUTHORIZATION{})
	Types["RPA_I08_AUTHORIZATION_1"] = reflect.TypeOf(RPA_I08_AUTHORIZATION_1{})
	Types["RPA_I08_AUTHORIZATION_2"] = reflect.TypeOf(RPA_I08_AUTHORIZATION_2{})
	Types["RPA_I08"] = reflect.TypeOf(RPA_I08{})
	Types["RPA_I08_INSURANCE"] = reflect.TypeOf(RPA_I08_INSURANCE{})
	Types["RPA_I08_OBSERVATION"] = reflect.TypeOf(RPA_I08_OBSERVATION{})
	Types["RPA_I08_PROCEDURE"] = reflect.TypeOf(RPA_I08_PROCEDURE{})
	Types["RPA_I08_PROVIDER"] = reflect.TypeOf(RPA_I08_PROVIDER{})
	Types["RPA_I08_RESULTS"] = reflect.TypeOf(RPA_I08_RESULTS{})
	Types["RPA_I08_VISIT"] = reflect.TypeOf(RPA_I08_VISIT{})
	Types["RPI_I01"] = reflect.TypeOf(RPI_I01{})
	Types["RPI_I01_GUARANTOR_INSURANCE"] = reflect.TypeOf(RPI_I01_GUARANTOR_INSURANCE{})
	Types["RPI_I01_INSURANCE"] = reflect.TypeOf(RPI_I01_INSURANCE{})
	Types["RPI_I01_PROVIDER"] = reflect.TypeOf(RPI_I01_PROVIDER{})
	Types["RPI_I04"] = reflect.TypeOf(RPI_I04{})
	Types["RPI_I04_GUARANTOR_INSURANCE"] = reflect.TypeOf(RPI_I04_GUARANTOR_INSURANCE{})
	Types["RPI_I04_INSURANCE"] = reflect.TypeOf(RPI_I04_INSURANCE{})
	Types["RPI_I04_PROVIDER"] = reflect.TypeOf(RPI_I04_PROVIDER{})
	Types["RPL_I02"] = reflect.TypeOf(RPL_I02{})
	Types["RPL_I02_PROVIDER"] = reflect.TypeOf(RPL_I02_PROVIDER{})
	Types["RPR_I03"] = reflect.TypeOf(RPR_I03{})
	Types["RPR_I03_PROVIDER"] = reflect.TypeOf(RPR_I03_PROVIDER{})
	Types["RQA_I08_AUTHORIZATION"] = reflect.TypeOf(RQA_I08_AUTHORIZATION{})
	Types["RQA_I08"] = reflect.TypeOf(RQA_I08{})
	Types["RQA_I08_GUARANTOR_INSURANCE"] = reflect.TypeOf(RQA_I08_GUARANTOR_INSURANCE{})
	Types["RQA_I08_INSURANCE"] = reflect.TypeOf(RQA_I08_INSURANCE{})
	Types["RQA_I08_OBSERVATION"] = reflect.TypeOf(RQA_I08_OBSERVATION{})
	Types["RQA_I08_PROCEDURE"] = reflect.TypeOf(RQA_I08_PROCEDURE{})
	Types["RQA_I08_PROVIDER"] = reflect.TypeOf(RQA_I08_PROVIDER{})
	Types["RQA_I08_RESULTS"] = reflect.TypeOf(RQA_I08_RESULTS{})
	Types["RQA_I08_VISIT"] = reflect.TypeOf(RQA_I08_VISIT{})
	Types["RQC_I05"] = reflect.TypeOf(RQC_I05{})
	Types["RQC_I05_PROVIDER"] = reflect.TypeOf(RQC_I05_PROVIDER{})
	Types["RQC_I06"] = reflect.TypeOf(RQC_I06{})
	Types["RQC_I06_PROVIDER"] = reflect.TypeOf(RQC_I06_PROVIDER{})
	Types["RQI_I01"] = reflect.TypeOf(RQI_I01{})
	Types["RQI_I01_GUARANTOR_INSURANCE"] = reflect.TypeOf(RQI_I01_GUARANTOR_INSURANCE{})
	Types["RQI_I01_INSURANCE"] = reflect.TypeOf(RQI_I01_INSURANCE{})
	Types["RQI_I01_PROVIDER"] = reflect.TypeOf(RQI_I01_PROVIDER{})
	Types["RQP_I04"] = reflect.TypeOf(RQP_I04{})
	Types["RQP_I04_PROVIDER"] = reflect.TypeOf(RQP_I04_PROVIDER{})
	Types["RQQ_Q01"] = reflect.TypeOf(RQQ_Q01{})
	Types["RQQ_Q09"] = reflect.TypeOf(RQQ_Q09{})
	Types["RRA_O02_ADMINISTRATION"] = reflect.TypeOf(RRA_O02_ADMINISTRATION{})
	Types["RRA_O02"] = reflect.TypeOf(RRA_O02{})
	Types["RRA_O02_ORDER"] = reflect.TypeOf(RRA_O02_ORDER{})
	Types["RRA_O02_PATIENT"] = reflect.TypeOf(RRA_O02_PATIENT{})
	Types["RRA_O02_RESPONSE"] = reflect.TypeOf(RRA_O02_RESPONSE{})
	Types["RRA_O18_ADMINISTRATION"] = reflect.TypeOf(RRA_O18_ADMINISTRATION{})
	Types["RRA_O18"] = reflect.TypeOf(RRA_O18{})
	Types["RRA_O18_ORDER"] = reflect.TypeOf(RRA_O18_ORDER{})
	Types["RRA_O18_PATIENT"] = reflect.TypeOf(RRA_O18_PATIENT{})
	Types["RRA_O18_RESPONSE"] = reflect.TypeOf(RRA_O18_RESPONSE{})
	Types["RRA_O18_TIMING"] = reflect.TypeOf(RRA_O18_TIMING{})
	Types["RRD_O02"] = reflect.TypeOf(RRD_O02{})
	Types["RRD_O02_DISPENSE"] = reflect.TypeOf(RRD_O02_DISPENSE{})
	Types["RRD_O02_ORDER"] = reflect.TypeOf(RRD_O02_ORDER{})
	Types["RRD_O02_PATIENT"] = reflect.TypeOf(RRD_O02_PATIENT{})
	Types["RRD_O02_RESPONSE"] = reflect.TypeOf(RRD_O02_RESPONSE{})
	Types["RRD_O14"] = reflect.TypeOf(RRD_O14{})
	Types["RRD_O14_DISPENSE"] = reflect.TypeOf(RRD_O14_DISPENSE{})
	Types["RRD_O14_ORDER"] = reflect.TypeOf(RRD_O14_ORDER{})
	Types["RRD_O14_PATIENT"] = reflect.TypeOf(RRD_O14_PATIENT{})
	Types["RRD_O14_RESPONSE"] = reflect.TypeOf(RRD_O14_RESPONSE{})
	Types["RRD_O14_TIMING"] = reflect.TypeOf(RRD_O14_TIMING{})
	Types["RRE_O02"] = reflect.TypeOf(RRE_O02{})
	Types["RRE_O02_ENCODING"] = reflect.TypeOf(RRE_O02_ENCODING{})
	Types["RRE_O02_ORDER"] = reflect.TypeOf(RRE_O02_ORDER{})
	Types["RRE_O02_PATIENT"] = reflect.TypeOf(RRE_O02_PATIENT{})
	Types["RRE_O02_RESPONSE"] = reflect.TypeOf(RRE_O02_RESPONSE{})
	Types["RRE_O12"] = reflect.TypeOf(RRE_O12{})
	Types["RRE_O12_ENCODING"] = reflect.TypeOf(RRE_O12_ENCODING{})
	Types["RRE_O12_ORDER"] = reflect.TypeOf(RRE_O12_ORDER{})
	Types["RRE_O12_PATIENT"] = reflect.TypeOf(RRE_O12_PATIENT{})
	Types["RRE_O12_RESPONSE"] = reflect.TypeOf(RRE_O12_RESPONSE{})
	Types["RRE_O12_TIMING"] = reflect.TypeOf(RRE_O12_TIMING{})
	Types["RRE_O12_TIMING_ENCODED"] = reflect.TypeOf(RRE_O12_TIMING_ENCODED{})
	Types["RRG_O02"] = reflect.TypeOf(RRG_O02{})
	Types["RRG_O02_GIVE"] = reflect.TypeOf(RRG_O02_GIVE{})
	Types["RRG_O02_ORDER"] = reflect.TypeOf(RRG_O02_ORDER{})
	Types["RRG_O02_PATIENT"] = reflect.TypeOf(RRG_O02_PATIENT{})
	Types["RRG_O02_RESPONSE"] = reflect.TypeOf(RRG_O02_RESPONSE{})
	Types["RRG_O16"] = reflect.TypeOf(RRG_O16{})
	Types["RRG_O16_GIVE"] = reflect.TypeOf(RRG_O16_GIVE{})
	Types["RRG_O16_ORDER"] = reflect.TypeOf(RRG_O16_ORDER{})
	Types["RRG_O16_PATIENT"] = reflect.TypeOf(RRG_O16_PATIENT{})
	Types["RRG_O16_RESPONSE"] = reflect.TypeOf(RRG_O16_RESPONSE{})
	Types["RRG_O16_TIMING"] = reflect.TypeOf(RRG_O16_TIMING{})
	Types["RRG_O16_TIMING_GIVE"] = reflect.TypeOf(RRG_O16_TIMING_GIVE{})
	Types["RRI_I12_AUTHORIZATION"] = reflect.TypeOf(RRI_I12_AUTHORIZATION{})
	Types["RRI_I12_AUTHORIZATION_CONTACT"] = reflect.TypeOf(RRI_I12_AUTHORIZATION_CONTACT{})
	Types["RRI_I12"] = reflect.TypeOf(RRI_I12{})
	Types["RRI_I12_OBSERVATION"] = reflect.TypeOf(RRI_I12_OBSERVATION{})
	Types["RRI_I12_PATIENT_VISIT"] = reflect.TypeOf(RRI_I12_PATIENT_VISIT{})
	Types["RRI_I12_PROCEDURE"] = reflect.TypeOf(RRI_I12_PROCEDURE{})
	Types["RRI_I12_PROVIDER"] = reflect.TypeOf(RRI_I12_PROVIDER{})
	Types["RRI_I12_PROVIDER_CONTACT"] = reflect.TypeOf(RRI_I12_PROVIDER_CONTACT{})
	Types["RRI_I12_RESULTS"] = reflect.TypeOf(RRI_I12_RESULTS{})
	Types["RRI_I12_RESULTS_NOTES"] = reflect.TypeOf(RRI_I12_RESULTS_NOTES{})
	Types["RRI_I12_VISIT"] = reflect.TypeOf(RRI_I12_VISIT{})
	Types["RRO_O02"] = reflect.TypeOf(RRO_O02{})
	Types["RRO_O02_ORDER"] = reflect.TypeOf(RRO_O02_ORDER{})
	Types["RRO_O02_ORDER_DETAIL"] = reflect.TypeOf(RRO_O02_ORDER_DETAIL{})
	Types["RRO_O02_PATIENT"] = reflect.TypeOf(RRO_O02_PATIENT{})
	Types["RRO_O02_RESPONSE"] = reflect.TypeOf(RRO_O02_RESPONSE{})
	Types["RSP_K11"] = reflect.TypeOf(RSP_K11{})
	Types["RSP_K11_ROW_DEFINITION"] = reflect.TypeOf(RSP_K11_ROW_DEFINITION{})
	Types["RSP_K13"] = reflect.TypeOf(RSP_K13{})
	Types["RSP_K13_ROW_DEFINITION"] = reflect.TypeOf(RSP_K13_ROW_DEFINITION{})
	Types["RSP_K15"] = reflect.TypeOf(RSP_K15{})
	Types["RSP_K21"] = reflect.TypeOf(RSP_K21{})
	Types["RSP_K21_QUERY_RESPONSE"] = reflect.TypeOf(RSP_K21_QUERY_RESPONSE{})
	Types["RSP_K22"] = reflect.TypeOf(RSP_K22{})
	Types["RSP_K22_QUERY_RESPONSE"] = reflect.TypeOf(RSP_K22_QUERY_RESPONSE{})
	Types["RSP_K23"] = reflect.TypeOf(RSP_K23{})
	Types["RSP_K23_QUERY_RESPONSE"] = reflect.TypeOf(RSP_K23_QUERY_RESPONSE{})
	Types["RSP_K24"] = reflect.TypeOf(RSP_K24{})
	Types["RSP_K25"] = reflect.TypeOf(RSP_K25{})
	Types["RSP_K25_STAFF"] = reflect.TypeOf(RSP_K25_STAFF{})
	Types["RSP_K31_COMPONENTS"] = reflect.TypeOf(RSP_K31_COMPONENTS{})
	Types["RSP_K31"] = reflect.TypeOf(RSP_K31{})
	Types["RSP_K31_ENCODING"] = reflect.TypeOf(RSP_K31_ENCODING{})
	Types["RSP_K31_OBSERVATION"] = reflect.TypeOf(RSP_K31_OBSERVATION{})
	Types["RSP_K31_ORDER"] = reflect.TypeOf(RSP_K31_ORDER{})
	Types["RSP_K31_ORDER_DETAIL"] = reflect.TypeOf(RSP_K31_ORDER_DETAIL{})
	Types["RSP_K31_PATIENT"] = reflect.TypeOf(RSP_K31_PATIENT{})
	Types["RSP_K31_PATIENT_VISIT"] = reflect.TypeOf(RSP_K31_PATIENT_VISIT{})
	Types["RSP_K31_RESPONSE"] = reflect.TypeOf(RSP_K31_RESPONSE{})
	Types["RSP_K31_TIMING"] = reflect.TypeOf(RSP_K31_TIMING{})
	Types["RSP_K31_TIMING_ENCODED"] = reflect.TypeOf(RSP_K31_TIMING_ENCODED{})
	Types["RSP_Q11"] = reflect.TypeOf(RSP_Q11{})
	Types["RSP_Q11_MF_LOC_DEPT"] = reflect.TypeOf(RSP_Q11_MF_LOC_DEPT{})
	Types["RSP_Q11_QUERY_RESULT_CLUSTER"] = reflect.TypeOf(RSP_Q11_QUERY_RESULT_CLUSTER{})
	Types["RSP_Z82_COMMON_ORDER"] = reflect.TypeOf(RSP_Z82_COMMON_ORDER{})
	Types["RSP_Z82"] = reflect.TypeOf(RSP_Z82{})
	Types["RSP_Z82_ENCODED_ORDER"] = reflect.TypeOf(RSP_Z82_ENCODED_ORDER{})
	Types["RSP_Z82_OBSERVATION"] = reflect.TypeOf(RSP_Z82_OBSERVATION{})
	Types["RSP_Z82_ORDER_DETAIL"] = reflect.TypeOf(RSP_Z82_ORDER_DETAIL{})
	Types["RSP_Z82_PATIENT"] = reflect.TypeOf(RSP_Z82_PATIENT{})
	Types["RSP_Z82_PATIENT_VISIT"] = reflect.TypeOf(RSP_Z82_PATIENT_VISIT{})
	Types["RSP_Z82_QUERY_RESPONSE"] = reflect.TypeOf(RSP_Z82_QUERY_RESPONSE{})
	Types["RSP_Z82_TIMING"] = reflect.TypeOf(RSP_Z82_TIMING{})
	Types["RSP_Z82_TIMING_ENCODED"] = reflect.TypeOf(RSP_Z82_TIMING_ENCODED{})
	Types["RSP_Z82_TREATMENT"] = reflect.TypeOf(RSP_Z82_TREATMENT{})
	Types["RSP_Z82_VISIT"] = reflect.TypeOf(RSP_Z82_VISIT{})
	Types["RSP_Z86_ADMINISTRATION"] = reflect.TypeOf(RSP_Z86_ADMINISTRATION{})
	Types["RSP_Z86_COMMON_ORDER"] = reflect.TypeOf(RSP_Z86_COMMON_ORDER{})
	Types["RSP_Z86"] = reflect.TypeOf(RSP_Z86{})
	Types["RSP_Z86_DISPENSE"] = reflect.TypeOf(RSP_Z86_DISPENSE{})
	Types["RSP_Z86_ENCODED_ORDER"] = reflect.TypeOf(RSP_Z86_ENCODED_ORDER{})
	Types["RSP_Z86_GIVE"] = reflect.TypeOf(RSP_Z86_GIVE{})
	Types["RSP_Z86_OBSERVATION"] = reflect.TypeOf(RSP_Z86_OBSERVATION{})
	Types["RSP_Z86_ORDER_DETAIL"] = reflect.TypeOf(RSP_Z86_ORDER_DETAIL{})
	Types["RSP_Z86_PATIENT"] = reflect.TypeOf(RSP_Z86_PATIENT{})
	Types["RSP_Z86_QUERY_RESPONSE"] = reflect.TypeOf(RSP_Z86_QUERY_RESPONSE{})
	Types["RSP_Z86_TIMING"] = reflect.TypeOf(RSP_Z86_TIMING{})
	Types["RSP_Z86_TIMING_ENCODED"] = reflect.TypeOf(RSP_Z86_TIMING_ENCODED{})
	Types["RSP_Z88_ALLERGY"] = reflect.TypeOf(RSP_Z88_ALLERGY{})
	Types["RSP_Z88_COMMON_ORDER"] = reflect.TypeOf(RSP_Z88_COMMON_ORDER{})
	Types["RSP_Z88_COMPONENT"] = reflect.TypeOf(RSP_Z88_COMPONENT{})
	Types["RSP_Z88"] = reflect.TypeOf(RSP_Z88{})
	Types["RSP_Z88_OBSERVATION"] = reflect.TypeOf(RSP_Z88_OBSERVATION{})
	Types["RSP_Z88_ORDER_DETAIL"] = reflect.TypeOf(RSP_Z88_ORDER_DETAIL{})
	Types["RSP_Z88_ORDER_ENCODED"] = reflect.TypeOf(RSP_Z88_ORDER_ENCODED{})
	Types["RSP_Z88_PATIENT"] = reflect.TypeOf(RSP_Z88_PATIENT{})
	Types["RSP_Z88_QUERY_RESPONSE"] = reflect.TypeOf(RSP_Z88_QUERY_RESPONSE{})
	Types["RSP_Z88_TIMING"] = reflect.TypeOf(RSP_Z88_TIMING{})
	Types["RSP_Z88_TIMING_ENCODED"] = reflect.TypeOf(RSP_Z88_TIMING_ENCODED{})
	Types["RSP_Z88_VISIT"] = reflect.TypeOf(RSP_Z88_VISIT{})
	Types["RSP_Z90_COMMON_ORDER"] = reflect.TypeOf(RSP_Z90_COMMON_ORDER{})
	Types["RSP_Z90"] = reflect.TypeOf(RSP_Z90{})
	Types["RSP_Z90_OBSERVATION"] = reflect.TypeOf(RSP_Z90_OBSERVATION{})
	Types["RSP_Z90_PATIENT"] = reflect.TypeOf(RSP_Z90_PATIENT{})
	Types["RSP_Z90_QUERY_RESPONSE"] = reflect.TypeOf(RSP_Z90_QUERY_RESPONSE{})
	Types["RSP_Z90_SPECIMEN"] = reflect.TypeOf(RSP_Z90_SPECIMEN{})
	Types["RSP_Z90_TIMING"] = reflect.TypeOf(RSP_Z90_TIMING{})
	Types["RSP_Z90_VISIT"] = reflect.TypeOf(RSP_Z90_VISIT{})
	Types["RTB_K13"] = reflect.TypeOf(RTB_K13{})
	Types["RTB_K13_ROW_DEFINITION"] = reflect.TypeOf(RTB_K13_ROW_DEFINITION{})
	Types["RTB_Knn"] = reflect.TypeOf(RTB_Knn{})
	Types["RTB_Q13"] = reflect.TypeOf(RTB_Q13{})
	Types["RTB_Q13_ROW_DEFINITION"] = reflect.TypeOf(RTB_Q13_ROW_DEFINITION{})
	Types["RTB_Z74"] = reflect.TypeOf(RTB_Z74{})
	Types["RTB_Z74_ROW_DEFINITION"] = reflect.TypeOf(RTB_Z74_ROW_DEFINITION{})
	Types["SIU_S12"] = reflect.TypeOf(SIU_S12{})
	Types["SIU_S12_GENERAL_RESOURCE"] = reflect.TypeOf(SIU_S12_GENERAL_RESOURCE{})
	Types["SIU_S12_LOCATION_RESOURCE"] = reflect.TypeOf(SIU_S12_LOCATION_RESOURCE{})
	Types["SIU_S12_PATIENT"] = reflect.TypeOf(SIU_S12_PATIENT{})
	Types["SIU_S12_PERSONNEL_RESOURCE"] = reflect.TypeOf(SIU_S12_PERSONNEL_RESOURCE{})
	Types["SIU_S12_RESOURCES"] = reflect.TypeOf(SIU_S12_RESOURCES{})
	Types["SIU_S12_SERVICE"] = reflect.TypeOf(SIU_S12_SERVICE{})
	Types["SPQ_Q01"] = reflect.TypeOf(SPQ_Q01{})
	Types["SPQ_Q08"] = reflect.TypeOf(SPQ_Q08{})
	Types["SQM_S25"] = reflect.TypeOf(SQM_S25{})
	Types["SQM_S25_GENERAL_RESOURCE"] = reflect.TypeOf(SQM_S25_GENERAL_RESOURCE{})
	Types["SQM_S25_LOCATION_RESOURCE"] = reflect.TypeOf(SQM_S25_LOCATION_RESOURCE{})
	Types["SQM_S25_PERSONNEL_RESOURCE"] = reflect.TypeOf(SQM_S25_PERSONNEL_RESOURCE{})
	Types["SQM_S25_REQUEST"] = reflect.TypeOf(SQM_S25_REQUEST{})
	Types["SQM_S25_RESOURCES"] = reflect.TypeOf(SQM_S25_RESOURCES{})
	Types["SQM_S25_SERVICE"] = reflect.TypeOf(SQM_S25_SERVICE{})
	Types["SQR_S25"] = reflect.TypeOf(SQR_S25{})
	Types["SQR_S25_GENERAL_RESOURCE"] = reflect.TypeOf(SQR_S25_GENERAL_RESOURCE{})
	Types["SQR_S25_LOCATION_RESOURCE"] = reflect.TypeOf(SQR_S25_LOCATION_RESOURCE{})
	Types["SQR_S25_PATIENT"] = reflect.TypeOf(SQR_S25_PATIENT{})
	Types["SQR_S25_PERSONNEL_RESOURCE"] = reflect.TypeOf(SQR_S25_PERSONNEL_RESOURCE{})
	Types["SQR_S25_RESOURCES"] = reflect.TypeOf(SQR_S25_RESOURCES{})
	Types["SQR_S25_SCHEDULE"] = reflect.TypeOf(SQR_S25_SCHEDULE{})
	Types["SQR_S25_SERVICE"] = reflect.TypeOf(SQR_S25_SERVICE{})
	Types["SRM_S01"] = reflect.TypeOf(SRM_S01{})
	Types["SRM_S01_GENERAL_RESOURCE"] = reflect.TypeOf(SRM_S01_GENERAL_RESOURCE{})
	Types["SRM_S01_LOCATION_RESOURCE"] = reflect.TypeOf(SRM_S01_LOCATION_RESOURCE{})
	Types["SRM_S01_PATIENT"] = reflect.TypeOf(SRM_S01_PATIENT{})
	Types["SRM_S01_PERSONNEL_RESOURCE"] = reflect.TypeOf(SRM_S01_PERSONNEL_RESOURCE{})
	Types["SRM_S01_RESOURCES"] = reflect.TypeOf(SRM_S01_RESOURCES{})
	Types["SRM_S01_SERVICE"] = reflect.TypeOf(SRM_S01_SERVICE{})
	Types["SRR_S01"] = reflect.TypeOf(SRR_S01{})
	Types["SRR_S01_GENERAL_RESOURCE"] = reflect.TypeOf(SRR_S01_GENERAL_RESOURCE{})
	Types["SRR_S01_LOCATION_RESOURCE"] = reflect.TypeOf(SRR_S01_LOCATION_RESOURCE{})
	Types["SRR_S01_PATIENT"] = reflect.TypeOf(SRR_S01_PATIENT{})
	Types["SRR_S01_PERSONNEL_RESOURCE"] = reflect.TypeOf(SRR_S01_PERSONNEL_RESOURCE{})
	Types["SRR_S01_RESOURCES"] = reflect.TypeOf(SRR_S01_RESOURCES{})
	Types["SRR_S01_SCHEDULE"] = reflect.TypeOf(SRR_S01_SCHEDULE{})
	Types["SRR_S01_SERVICE"] = reflect.TypeOf(SRR_S01_SERVICE{})
	Types["SSR_U04"] = reflect.TypeOf(SSR_U04{})
	Types["SSR_U04_SPECIMEN_CONTAINER"] = reflect.TypeOf(SSR_U04_SPECIMEN_CONTAINER{})
	Types["SSU_U03"] = reflect.TypeOf(SSU_U03{})
	Types["SSU_U03_SPECIMEN"] = reflect.TypeOf(SSU_U03_SPECIMEN{})
	Types["SSU_U03_SPECIMEN_CONTAINER"] = reflect.TypeOf(SSU_U03_SPECIMEN_CONTAINER{})
	Types["SUR_P09"] = reflect.TypeOf(SUR_P09{})
	Types["SUR_P09_FACILITY"] = reflect.TypeOf(SUR_P09_FACILITY{})
	Types["SUR_P09_FACILITY_DETAIL"] = reflect.TypeOf(SUR_P09_FACILITY_DETAIL{})
	Types["SUR_P09_PRODUCT"] = reflect.TypeOf(SUR_P09_PRODUCT{})
	Types["TBR_Q01"] = reflect.TypeOf(TBR_Q01{})
	Types["TBR_R08"] = reflect.TypeOf(TBR_R08{})
	Types["TCU_U10"] = reflect.TypeOf(TCU_U10{})
	Types["TCU_U10_TEST_CONFIGURATION"] = reflect.TypeOf(TCU_U10_TEST_CONFIGURATION{})
	Types["UDM_Q05"] = reflect.TypeOf(UDM_Q05{})
	Types["VQQ_Q01"] = reflect.TypeOf(VQQ_Q01{})
	Types["VQQ_Q07"] = reflect.TypeOf(VQQ_Q07{})
	Types["VXQ_V01"] = reflect.TypeOf(VXQ_V01{})
	Types["VXR_V03"] = reflect.TypeOf(VXR_V03{})
	Types["VXR_V03_INSURANCE"] = reflect.TypeOf(VXR_V03_INSURANCE{})
	Types["VXR_V03_OBSERVATION"] = reflect.TypeOf(VXR_V03_OBSERVATION{})
	Types["VXR_V03_ORDER"] = reflect.TypeOf(VXR_V03_ORDER{})
	Types["VXR_V03_PATIENT_VISIT"] = reflect.TypeOf(VXR_V03_PATIENT_VISIT{})
	Types["VXR_V03_TIMING"] = reflect.TypeOf(VXR_V03_TIMING{})
	Types["VXU_V04"] = reflect.TypeOf(VXU_V04{})
	Types["VXU_V04_INSURANCE"] = reflect.TypeOf(VXU_V04_INSURANCE{})
	Types["VXU_V04_OBSERVATION"] = reflect.TypeOf(VXU_V04_OBSERVATION{})
	Types["VXU_V04_ORDER"] = reflect.TypeOf(VXU_V04_ORDER{})
	Types["VXU_V04_PATIENT"] = reflect.TypeOf(VXU_V04_PATIENT{})
	Types["VXU_V04_TIMING"] = reflect.TypeOf(VXU_V04_TIMING{})
	Types["VXX_V02"] = reflect.TypeOf(VXX_V02{})
	Types["VXX_V02_PATIENT"] = reflect.TypeOf(VXX_V02_PATIENT{})
	Types["GenericHL7Segment"] = reflect.TypeOf(GenericHL7Segment{})
	Types["ACKv2"] = reflect.TypeOf(ACKv2{})
	Types["ACK_N02v2"] = reflect.TypeOf(ACK_N02v2{})
	Types["ADR_A19v2"] = reflect.TypeOf(ADR_A19v2{})
	Types["ADR_A19_PIDv2"] = reflect.TypeOf(ADR_A19_PIDv2{})
	Types["ADR_A19_PID_PR1v2"] = reflect.TypeOf(ADR_A19_PID_PR1v2{})
	Types["ADR_A19_PID_IN1v2"] = reflect.TypeOf(ADR_A19_PID_IN1v2{})
	Types["ADT_A01v2"] = reflect.TypeOf(ADT_A01v2{})
	Types["ADT_A01_PR1v2"] = reflect.TypeOf(ADT_A01_PR1v2{})
	Types["ADT_A01_IN1v2"] = reflect.TypeOf(ADT_A01_IN1v2{})
	Types["ADT_A02v2"] = reflect.TypeOf(ADT_A02v2{})
	Types["ADT_A03v2"] = reflect.TypeOf(ADT_A03v2{})
	Types["ADT_A03_PR1v2"] = reflect.TypeOf(ADT_A03_PR1v2{})
	Types["ADT_A03_IN1v2"] = reflect.TypeOf(ADT_A03_IN1v2{})
	Types["ADT_A04v2"] = reflect.TypeOf(ADT_A04v2{})
	Types["ADT_A04_IN1v2"] = reflect.TypeOf(ADT_A04_IN1v2{})
	Types["ADT_A05v2"] = reflect.TypeOf(ADT_A05v2{})
	Types["ADT_A05_PR1v2"] = reflect.TypeOf(ADT_A05_PR1v2{})
	Types["ADT_A05_IN1v2"] = reflect.TypeOf(ADT_A05_IN1v2{})
	Types["ADT_A06v2"] = reflect.TypeOf(ADT_A06v2{})
	Types["ADT_A06_PR1v2"] = reflect.TypeOf(ADT_A06_PR1v2{})
	Types["ADT_A06_IN1v2"] = reflect.TypeOf(ADT_A06_IN1v2{})
	Types["ADT_A07v2"] = reflect.TypeOf(ADT_A07v2{})
	Types["ADT_A07_IN1v2"] = reflect.TypeOf(ADT_A07_IN1v2{})
	Types["ADT_A08v2"] = reflect.TypeOf(ADT_A08v2{})
	Types["ADT_A08_IN1v2"] = reflect.TypeOf(ADT_A08_IN1v2{})
	Types["ADT_A09v2"] = reflect.TypeOf(ADT_A09v2{})
	Types["ADT_A10v2"] = reflect.TypeOf(ADT_A10v2{})
	Types["ADT_A11v2"] = reflect.TypeOf(ADT_A11v2{})
	Types["ADT_A12v2"] = reflect.TypeOf(ADT_A12v2{})
	Types["ADT_A13v2"] = reflect.TypeOf(ADT_A13v2{})
	Types["ADT_A13_IN1v2"] = reflect.TypeOf(ADT_A13_IN1v2{})
	Types["ADT_A14v2"] = reflect.TypeOf(ADT_A14v2{})
	Types["ADT_A14_IN1v2"] = reflect.TypeOf(ADT_A14_IN1v2{})
	Types["ADT_A15v2"] = reflect.TypeOf(ADT_A15v2{})
	Types["ADT_A16v2"] = reflect.TypeOf(ADT_A16v2{})
	Types["ADT_A16_PR1v2"] = reflect.TypeOf(ADT_A16_PR1v2{})
	Types["ADT_A16_IN1v2"] = reflect.TypeOf(ADT_A16_IN1v2{})
	Types["ADT_A17v2"] = reflect.TypeOf(ADT_A17v2{})
	Types["ADT_A18v2"] = reflect.TypeOf(ADT_A18v2{})
	Types["ADT_A20v2"] = reflect.TypeOf(ADT_A20v2{})
	Types["ADT_A21v2"] = reflect.TypeOf(ADT_A21v2{})
	Types["ADT_A22v2"] = reflect.TypeOf(ADT_A22v2{})
	Types["ADT_A23v2"] = reflect.TypeOf(ADT_A23v2{})
	Types["ADT_A24v2"] = reflect.TypeOf(ADT_A24v2{})
	Types["ADT_A25v2"] = reflect.TypeOf(ADT_A25v2{})
	Types["ADT_A26v2"] = reflect.TypeOf(ADT_A26v2{})
	Types["ADT_A27v2"] = reflect.TypeOf(ADT_A27v2{})
	Types["ADT_A28v2"] = reflect.TypeOf(ADT_A28v2{})
	Types["ADT_A28_IN1v2"] = reflect.TypeOf(ADT_A28_IN1v2{})
	Types["ADT_A29v2"] = reflect.TypeOf(ADT_A29v2{})
	Types["ADT_A30v2"] = reflect.TypeOf(ADT_A30v2{})
	Types["ADT_A31v2"] = reflect.TypeOf(ADT_A31v2{})
	Types["ADT_A31_IN1v2"] = reflect.TypeOf(ADT_A31_IN1v2{})
	Types["ADT_A32v2"] = reflect.TypeOf(ADT_A32v2{})
	Types["ADT_A33v2"] = reflect.TypeOf(ADT_A33v2{})
	Types["ADT_A34v2"] = reflect.TypeOf(ADT_A34v2{})
	Types["ADT_A35v2"] = reflect.TypeOf(ADT_A35v2{})
	Types["ADT_A36v2"] = reflect.TypeOf(ADT_A36v2{})
	Types["ADT_A37v2"] = reflect.TypeOf(ADT_A37v2{})
	Types["ADT_A38v2"] = reflect.TypeOf(ADT_A38v2{})
	Types["ADT_A39v2"] = reflect.TypeOf(ADT_A39v2{})
	Types["ADT_A39_PIDv2"] = reflect.TypeOf(ADT_A39_PIDv2{})
	Types["ADT_A40v2"] = reflect.TypeOf(ADT_A40v2{})
	Types["ADT_A40_PIDv2"] = reflect.TypeOf(ADT_A40_PIDv2{})
	Types["ADT_A43v2"] = reflect.TypeOf(ADT_A43v2{})
	Types["ADT_A43_PIDv2"] = reflect.TypeOf(ADT_A43_PIDv2{})
	Types["ADT_A44v2"] = reflect.TypeOf(ADT_A44v2{})
	Types["ADT_A44_PIDv2"] = reflect.TypeOf(ADT_A44_PIDv2{})
	Types["ADT_A45v2"] = reflect.TypeOf(ADT_A45v2{})
	Types["ADT_A45_MRGv2"] = reflect.TypeOf(ADT_A45_MRGv2{})
	Types["ADT_A50v2"] = reflect.TypeOf(ADT_A50v2{})
	Types["ADT_A52v2"] = reflect.TypeOf(ADT_A52v2{})
	Types["ADT_A54v2"] = reflect.TypeOf(ADT_A54v2{})
	Types["ADT_A60v2"] = reflect.TypeOf(ADT_A60v2{})
	Types["ADT_A61v2"] = reflect.TypeOf(ADT_A61v2{})
	Types["ARD_A19v2"] = reflect.TypeOf(ARD_A19v2{})
	Types["ARD_A19_PIDv2"] = reflect.TypeOf(ARD_A19_PIDv2{})
	Types["ARD_A19_PID_PR1v2"] = reflect.TypeOf(ARD_A19_PID_PR1v2{})
	Types["ARD_A19_PID_IN1v2"] = reflect.TypeOf(ARD_A19_PID_IN1v2{})
	Types["BAR_P01v2"] = reflect.TypeOf(BAR_P01v2{})
	Types["BAR_P01_PV1v2"] = reflect.TypeOf(BAR_P01_PV1v2{})
	Types["BAR_P01_PV1_PR1v2"] = reflect.TypeOf(BAR_P01_PV1_PR1v2{})
	Types["BAR_P01_PV1_IN1v2"] = reflect.TypeOf(BAR_P01_PV1_IN1v2{})
	Types["BAR_P02v2"] = reflect.TypeOf(BAR_P02v2{})
	Types["BAR_P02_PIDv2"] = reflect.TypeOf(BAR_P02_PIDv2{})
	Types["BAR_P05v2"] = reflect.TypeOf(BAR_P05v2{})
	Types["BAR_P05_PV1v2"] = reflect.TypeOf(BAR_P05_PV1v2{})
	Types["BAR_P05_PV1_PR1v2"] = reflect.TypeOf(BAR_P05_PV1_PR1v2{})
	Types["BAR_P05_PV1_IN1v2"] = reflect.TypeOf(BAR_P05_PV1_IN1v2{})
	Types["BAR_P06v2"] = reflect.TypeOf(BAR_P06v2{})
	Types["BAR_P06_PIDv2"] = reflect.TypeOf(BAR_P06_PIDv2{})
	Types["BAR_P10v2"] = reflect.TypeOf(BAR_P10v2{})
	Types["BAR_P10_PR1v2"] = reflect.TypeOf(BAR_P10_PR1v2{})
	Types["BAR_P12v2"] = reflect.TypeOf(BAR_P12v2{})
	Types["BAR_P12_PR1v2"] = reflect.TypeOf(BAR_P12_PR1v2{})
	Types["BPS_O29v2"] = reflect.TypeOf(BPS_O29v2{})
	Types["BPS_O29_PIDv2"] = reflect.TypeOf(BPS_O29_PIDv2{})
	Types["BPS_O29_ORCv2"] = reflect.TypeOf(BPS_O29_ORCv2{})
	Types["BPS_O29_ORC_TQ1v2"] = reflect.TypeOf(BPS_O29_ORC_TQ1v2{})
	Types["BPS_O29_ORC_BPXv2"] = reflect.TypeOf(BPS_O29_ORC_BPXv2{})
	Types["BRP_O30v2"] = reflect.TypeOf(BRP_O30v2{})
	Types["BRP_O30_ORCv2"] = reflect.TypeOf(BRP_O30_ORCv2{})
	Types["BRP_O30_ORC_TQ1v2"] = reflect.TypeOf(BRP_O30_ORC_TQ1v2{})
	Types["BRT_O32v2"] = reflect.TypeOf(BRT_O32v2{})
	Types["BRT_O32_ORCv2"] = reflect.TypeOf(BRT_O32_ORCv2{})
	Types["BRT_O32_ORC_TQ1v2"] = reflect.TypeOf(BRT_O32_ORC_TQ1v2{})
	Types["BTS_O31v2"] = reflect.TypeOf(BTS_O31v2{})
	Types["BTS_O31_PIDv2"] = reflect.TypeOf(BTS_O31_PIDv2{})
	Types["BTS_O31_ORCv2"] = reflect.TypeOf(BTS_O31_ORCv2{})
	Types["BTS_O31_ORC_TQ1v2"] = reflect.TypeOf(BTS_O31_ORC_TQ1v2{})
	Types["BTS_O31_ORC_BTXv2"] = reflect.TypeOf(BTS_O31_ORC_BTXv2{})
	Types["CRM_C01v2"] = reflect.TypeOf(CRM_C01v2{})
	Types["CRM_C01_PIDv2"] = reflect.TypeOf(CRM_C01_PIDv2{})
	Types["CSU_C09v2"] = reflect.TypeOf(CSU_C09v2{})
	Types["CSU_C09_PIDv2"] = reflect.TypeOf(CSU_C09_PIDv2{})
	Types["CSU_C09_PID_CSPv2"] = reflect.TypeOf(CSU_C09_PID_CSPv2{})
	Types["CSU_C09_PID_CSP_CSSv2"] = reflect.TypeOf(CSU_C09_PID_CSP_CSSv2{})
	Types["CSU_C09_PID_CSP_CSS_OBRv2"] = reflect.TypeOf(CSU_C09_PID_CSP_CSS_OBRv2{})
	Types["CSU_C09_PID_CSP_CSS_OBR_TQ1v2"] = reflect.TypeOf(CSU_C09_PID_CSP_CSS_OBR_TQ1v2{})
	Types["CSU_C09_PID_CSP_CSS_ORCv2"] = reflect.TypeOf(CSU_C09_PID_CSP_CSS_ORCv2{})
	Types["CSU_C09_PID_CSP_CSS_ORC_RXAv2"] = reflect.TypeOf(CSU_C09_PID_CSP_CSS_ORC_RXAv2{})
	Types["DFT_P03v2"] = reflect.TypeOf(DFT_P03v2{})
	Types["DFT_P03_OBRv2"] = reflect.TypeOf(DFT_P03_OBRv2{})
	Types["DFT_P03_OBR_TQ1v2"] = reflect.TypeOf(DFT_P03_OBR_TQ1v2{})
	Types["DFT_P03_OBR_OBXv2"] = reflect.TypeOf(DFT_P03_OBR_OBXv2{})
	Types["DFT_P03_FT1v2"] = reflect.TypeOf(DFT_P03_FT1v2{})
	Types["DFT_P03_FT1_PR1v2"] = reflect.TypeOf(DFT_P03_FT1_PR1v2{})
	Types["DFT_P03_FT1_OBRv2"] = reflect.TypeOf(DFT_P03_FT1_OBRv2{})
	Types["DFT_P03_FT1_OBR_TQ1v2"] = reflect.TypeOf(DFT_P03_FT1_OBR_TQ1v2{})
	Types["DFT_P03_FT1_OBR_OBXv2"] = reflect.TypeOf(DFT_P03_FT1_OBR_OBXv2{})
	Types["DFT_P03_IN1v2"] = reflect.TypeOf(DFT_P03_IN1v2{})
	Types["DFT_P11v2"] = reflect.TypeOf(DFT_P11v2{})
	Types["DFT_P11_OBRv2"] = reflect.TypeOf(DFT_P11_OBRv2{})
	Types["DFT_P11_OBR_TQ1v2"] = reflect.TypeOf(DFT_P11_OBR_TQ1v2{})
	Types["DFT_P11_OBR_OBXv2"] = reflect.TypeOf(DFT_P11_OBR_OBXv2{})
	Types["DFT_P11_IN1v2"] = reflect.TypeOf(DFT_P11_IN1v2{})
	Types["DFT_P11_FT1v2"] = reflect.TypeOf(DFT_P11_FT1v2{})
	Types["DFT_P11_FT1_PR1v2"] = reflect.TypeOf(DFT_P11_FT1_PR1v2{})
	Types["DFT_P11_FT1_OBRv2"] = reflect.TypeOf(DFT_P11_FT1_OBRv2{})
	Types["DFT_P11_FT1_OBR_TQ1v2"] = reflect.TypeOf(DFT_P11_FT1_OBR_TQ1v2{})
	Types["DFT_P11_FT1_OBR_OBXv2"] = reflect.TypeOf(DFT_P11_FT1_OBR_OBXv2{})
	Types["DFT_P11_FT1_IN1v2"] = reflect.TypeOf(DFT_P11_FT1_IN1v2{})
	Types["DOC_T12v2"] = reflect.TypeOf(DOC_T12v2{})
	Types["DOC_T12_PIDv2"] = reflect.TypeOf(DOC_T12_PIDv2{})
	Types["DSR_P04v2"] = reflect.TypeOf(DSR_P04v2{})
	Types["DSR_Q01v2"] = reflect.TypeOf(DSR_Q01v2{})
	Types["DSR_Q03v2"] = reflect.TypeOf(DSR_Q03v2{})
	Types["DSR_R03v2"] = reflect.TypeOf(DSR_R03v2{})
	Types["EAC_U07v2"] = reflect.TypeOf(EAC_U07v2{})
	Types["EAC_U07_ECDv2"] = reflect.TypeOf(EAC_U07_ECDv2{})
	Types["EAN_U09v2"] = reflect.TypeOf(EAN_U09v2{})
	Types["EAN_U09_NDSv2"] = reflect.TypeOf(EAN_U09_NDSv2{})
	Types["EAR_U08v2"] = reflect.TypeOf(EAR_U08v2{})
	Types["EAR_U08_ECDv2"] = reflect.TypeOf(EAR_U08_ECDv2{})
	Types["EDR_Q01v2"] = reflect.TypeOf(EDR_Q01v2{})
	Types["EDR_R07v2"] = reflect.TypeOf(EDR_R07v2{})
	Types["EQQ_Q01v2"] = reflect.TypeOf(EQQ_Q01v2{})
	Types["EQQ_Q04v2"] = reflect.TypeOf(EQQ_Q04v2{})
	Types["ERP_Q01v2"] = reflect.TypeOf(ERP_Q01v2{})
	Types["ERP_R09v2"] = reflect.TypeOf(ERP_R09v2{})
	Types["ESR_U02v2"] = reflect.TypeOf(ESR_U02v2{})
	Types["ESU_U01v2"] = reflect.TypeOf(ESU_U01v2{})
	Types["INR_U06v2"] = reflect.TypeOf(INR_U06v2{})
	Types["INU_U05v2"] = reflect.TypeOf(INU_U05v2{})
	Types["LSU_U12v2"] = reflect.TypeOf(LSU_U12v2{})
	Types["MCF_Q02v2"] = reflect.TypeOf(MCF_Q02v2{})
	Types["MDM_T01v2"] = reflect.TypeOf(MDM_T01v2{})
	Types["MDM_T01_ORCv2"] = reflect.TypeOf(MDM_T01_ORCv2{})
	Types["MDM_T01_ORC_TQ1v2"] = reflect.TypeOf(MDM_T01_ORC_TQ1v2{})
	Types["MDM_T02v2"] = reflect.TypeOf(MDM_T02v2{})
	Types["MDM_T02_ORCv2"] = reflect.TypeOf(MDM_T02_ORCv2{})
	Types["MDM_T02_ORC_TQ1v2"] = reflect.TypeOf(MDM_T02_ORC_TQ1v2{})
	Types["MDM_T02_OBXv2"] = reflect.TypeOf(MDM_T02_OBXv2{})
	Types["MFD_M01v2"] = reflect.TypeOf(MFD_M01v2{})
	Types["MFD_M02v2"] = reflect.TypeOf(MFD_M02v2{})
	Types["MFD_M03v2"] = reflect.TypeOf(MFD_M03v2{})
	Types["MFK_M01v2"] = reflect.TypeOf(MFK_M01v2{})
	Types["MFK_M02v2"] = reflect.TypeOf(MFK_M02v2{})
	Types["MFK_M03v2"] = reflect.TypeOf(MFK_M03v2{})
	Types["MFN_M01v2"] = reflect.TypeOf(MFN_M01v2{})
	Types["MFN_M01_MFEv2"] = reflect.TypeOf(MFN_M01_MFEv2{})
	Types["MFN_M02v2"] = reflect.TypeOf(MFN_M02v2{})
	Types["MFN_M02_MFEv2"] = reflect.TypeOf(MFN_M02_MFEv2{})
	Types["MFN_M03v2"] = reflect.TypeOf(MFN_M03v2{})
	Types["MFN_M03_MFEv2"] = reflect.TypeOf(MFN_M03_MFEv2{})
	Types["MFN_M04v2"] = reflect.TypeOf(MFN_M04v2{})
	Types["MFN_M04_MFEv2"] = reflect.TypeOf(MFN_M04_MFEv2{})
	Types["MFN_M05v2"] = reflect.TypeOf(MFN_M05v2{})
	Types["MFN_M05_MFEv2"] = reflect.TypeOf(MFN_M05_MFEv2{})
	Types["MFN_M05_MFE_LDPv2"] = reflect.TypeOf(MFN_M05_MFE_LDPv2{})
	Types["MFN_M06v2"] = reflect.TypeOf(MFN_M06v2{})
	Types["MFN_M06_MFEv2"] = reflect.TypeOf(MFN_M06_MFEv2{})
	Types["MFN_M06_MFE_CM1v2"] = reflect.TypeOf(MFN_M06_MFE_CM1v2{})
	Types["MFN_M07v2"] = reflect.TypeOf(MFN_M07v2{})
	Types["MFN_M07_MFEv2"] = reflect.TypeOf(MFN_M07_MFEv2{})
	Types["MFN_M08v2"] = reflect.TypeOf(MFN_M08v2{})
	Types["MFN_M08_MFEv2"] = reflect.TypeOf(MFN_M08_MFEv2{})
	Types["MFN_M09v2"] = reflect.TypeOf(MFN_M09v2{})
	Types["MFN_M09_MFEv2"] = reflect.TypeOf(MFN_M09_MFEv2{})
	Types["MFN_M10v2"] = reflect.TypeOf(MFN_M10v2{})
	Types["MFN_M10_MFEv2"] = reflect.TypeOf(MFN_M10_MFEv2{})
	Types["MFN_M11v2"] = reflect.TypeOf(MFN_M11v2{})
	Types["MFN_M11_MFEv2"] = reflect.TypeOf(MFN_M11_MFEv2{})
	Types["MFN_M12v2"] = reflect.TypeOf(MFN_M12v2{})
	Types["MFN_M12_MFEv2"] = reflect.TypeOf(MFN_M12_MFEv2{})
	Types["MFN_M13v2"] = reflect.TypeOf(MFN_M13v2{})
	Types["MFN_M15v2"] = reflect.TypeOf(MFN_M15v2{})
	Types["MFN_M15_MFEv2"] = reflect.TypeOf(MFN_M15_MFEv2{})
	Types["MFN_Znnv2"] = reflect.TypeOf(MFN_Znnv2{})
	Types["MFN_Znn_MFEv2"] = reflect.TypeOf(MFN_Znn_MFEv2{})
	Types["MFQ_M01v2"] = reflect.TypeOf(MFQ_M01v2{})
	Types["MFQ_M02v2"] = reflect.TypeOf(MFQ_M02v2{})
	Types["MFQ_M03v2"] = reflect.TypeOf(MFQ_M03v2{})
	Types["MFR_M01v2"] = reflect.TypeOf(MFR_M01v2{})
	Types["MFR_M01_MFEv2"] = reflect.TypeOf(MFR_M01_MFEv2{})
	Types["MFR_M02v2"] = reflect.TypeOf(MFR_M02v2{})
	Types["MFR_M02_MFEv2"] = reflect.TypeOf(MFR_M02_MFEv2{})
	Types["MFR_M03v2"] = reflect.TypeOf(MFR_M03v2{})
	Types["MFR_M03_MFEv2"] = reflect.TypeOf(MFR_M03_MFEv2{})
	Types["MFR_M04v2"] = reflect.TypeOf(MFR_M04v2{})
	Types["MFR_M04_MFEv2"] = reflect.TypeOf(MFR_M04_MFEv2{})
	Types["MFR_M05v2"] = reflect.TypeOf(MFR_M05v2{})
	Types["MFR_M05_MFEv2"] = reflect.TypeOf(MFR_M05_MFEv2{})
	Types["MFR_M06v2"] = reflect.TypeOf(MFR_M06v2{})
	Types["MFR_M06_MFEv2"] = reflect.TypeOf(MFR_M06_MFEv2{})
	Types["MFR_M07v2"] = reflect.TypeOf(MFR_M07v2{})
	Types["MFR_M07_MFEv2"] = reflect.TypeOf(MFR_M07_MFEv2{})
	Types["NMD_N01v2"] = reflect.TypeOf(NMD_N01v2{})
	Types["NMD_N01_NCKv2"] = reflect.TypeOf(NMD_N01_NCKv2{})
	Types["NMD_N01_NCK_NSTv2"] = reflect.TypeOf(NMD_N01_NCK_NSTv2{})
	Types["NMD_N01_NCK_NSCv2"] = reflect.TypeOf(NMD_N01_NCK_NSCv2{})
	Types["NMD_N02v2"] = reflect.TypeOf(NMD_N02v2{})
	Types["NMD_N02_NCKv2"] = reflect.TypeOf(NMD_N02_NCKv2{})
	Types["NMD_N02_NCK_NSTv2"] = reflect.TypeOf(NMD_N02_NCK_NSTv2{})
	Types["NMD_N02_NCK_NSCv2"] = reflect.TypeOf(NMD_N02_NCK_NSCv2{})
	Types["NMQ_N01v2"] = reflect.TypeOf(NMQ_N01v2{})
	Types["NMQ_N01_NCKv2"] = reflect.TypeOf(NMQ_N01_NCKv2{})
	Types["NMQ_N02v2"] = reflect.TypeOf(NMQ_N02v2{})
	Types["NMQ_N02_NCKv2"] = reflect.TypeOf(NMQ_N02_NCKv2{})
	Types["NMR_N01v2"] = reflect.TypeOf(NMR_N01v2{})
	Types["NMR_N01_NCKv2"] = reflect.TypeOf(NMR_N01_NCKv2{})
	Types["NMR_N02v2"] = reflect.TypeOf(NMR_N02v2{})
	Types["NMR_N02_NCKv2"] = reflect.TypeOf(NMR_N02_NCKv2{})
	Types["OMB_O27v2"] = reflect.TypeOf(OMB_O27v2{})
	Types["OMB_O27_PIDv2"] = reflect.TypeOf(OMB_O27_PIDv2{})
	Types["OMB_O27_PID_IN1v2"] = reflect.TypeOf(OMB_O27_PID_IN1v2{})
	Types["OMB_O27_ORCv2"] = reflect.TypeOf(OMB_O27_ORCv2{})
	Types["OMB_O27_ORC_TQ1v2"] = reflect.TypeOf(OMB_O27_ORC_TQ1v2{})
	Types["OMB_O27_ORC_OBXv2"] = reflect.TypeOf(OMB_O27_ORC_OBXv2{})
	Types["OMD_O01v2"] = reflect.TypeOf(OMD_O01v2{})
	Types["OMD_O01_PIDv2"] = reflect.TypeOf(OMD_O01_PIDv2{})
	Types["OMD_O01_PID_IN1v2"] = reflect.TypeOf(OMD_O01_PID_IN1v2{})
	Types["OMD_O01_ORC1v2"] = reflect.TypeOf(OMD_O01_ORC1v2{})
	Types["OMD_O01_ORC1_OBXv2"] = reflect.TypeOf(OMD_O01_ORC1_OBXv2{})
	Types["OMD_O01_ORC2v2"] = reflect.TypeOf(OMD_O01_ORC2v2{})
	Types["OMD_O03v2"] = reflect.TypeOf(OMD_O03v2{})
	Types["OMD_O03_PIDv2"] = reflect.TypeOf(OMD_O03_PIDv2{})
	Types["OMD_O03_PID_IN1v2"] = reflect.TypeOf(OMD_O03_PID_IN1v2{})
	Types["OMD_O03_ORC1v2"] = reflect.TypeOf(OMD_O03_ORC1v2{})
	Types["OMD_O03_ORC1_TQ1v2"] = reflect.TypeOf(OMD_O03_ORC1_TQ1v2{})
	Types["OMD_O03_ORC1_OBXv2"] = reflect.TypeOf(OMD_O03_ORC1_OBXv2{})
	Types["OMD_O03_ORC2v2"] = reflect.TypeOf(OMD_O03_ORC2v2{})
	Types["OMD_O03_ORC2_TQ1v2"] = reflect.TypeOf(OMD_O03_ORC2_TQ1v2{})
	Types["OMG_O19v2"] = reflect.TypeOf(OMG_O19v2{})
	Types["OMG_O19_PIDv2"] = reflect.TypeOf(OMG_O19_PIDv2{})
	Types["OMG_O19_PID_IN1v2"] = reflect.TypeOf(OMG_O19_PID_IN1v2{})
	Types["OMG_O19_ORCv2"] = reflect.TypeOf(OMG_O19_ORCv2{})
	Types["OMG_O19_ORC_TQ1v2"] = reflect.TypeOf(OMG_O19_ORC_TQ1v2{})
	Types["OMG_O19_ORC_OBXv2"] = reflect.TypeOf(OMG_O19_ORC_OBXv2{})
	Types["OMG_O19_ORC_SPMv2"] = reflect.TypeOf(OMG_O19_ORC_SPMv2{})
	Types["OMG_O19_ORC_SPM_SACv2"] = reflect.TypeOf(OMG_O19_ORC_SPM_SACv2{})
	Types["OMG_O19_ORC_PIDv2"] = reflect.TypeOf(OMG_O19_ORC_PIDv2{})
	Types["OMG_O19_ORC_PID_OBRv2"] = reflect.TypeOf(OMG_O19_ORC_PID_OBRv2{})
	Types["OMG_O19_ORC_PID_OBR_TQ1v2"] = reflect.TypeOf(OMG_O19_ORC_PID_OBR_TQ1v2{})
	Types["OMG_O19_ORC_PID_OBR_OBXv2"] = reflect.TypeOf(OMG_O19_ORC_PID_OBR_OBXv2{})
	Types["OMI_O23v2"] = reflect.TypeOf(OMI_O23v2{})
	Types["OMI_O23_PIDv2"] = reflect.TypeOf(OMI_O23_PIDv2{})
	Types["OMI_O23_PID_IN1v2"] = reflect.TypeOf(OMI_O23_PID_IN1v2{})
	Types["OMI_O23_ORCv2"] = reflect.TypeOf(OMI_O23_ORCv2{})
	Types["OMI_O23_ORC_TQ1v2"] = reflect.TypeOf(OMI_O23_ORC_TQ1v2{})
	Types["OMI_O23_ORC_OBXv2"] = reflect.TypeOf(OMI_O23_ORC_OBXv2{})
	Types["OML_O21v2"] = reflect.TypeOf(OML_O21v2{})
	Types["OML_O21_PIDv2"] = reflect.TypeOf(OML_O21_PIDv2{})
	Types["OML_O21_PID_IN1v2"] = reflect.TypeOf(OML_O21_PID_IN1v2{})
	Types["OML_O21_ORCv2"] = reflect.TypeOf(OML_O21_ORCv2{})
	Types["OML_O21_ORC_TQ1v2"] = reflect.TypeOf(OML_O21_ORC_TQ1v2{})
	Types["OML_O21_ORC_OBXv2"] = reflect.TypeOf(OML_O21_ORC_OBXv2{})
	Types["OML_O21_ORC_SPMv2"] = reflect.TypeOf(OML_O21_ORC_SPMv2{})
	Types["OML_O21_ORC_SPM_SACv2"] = reflect.TypeOf(OML_O21_ORC_SPM_SACv2{})
	Types["OML_O21_ORC_PIDv2"] = reflect.TypeOf(OML_O21_ORC_PIDv2{})
	Types["OML_O21_ORC_PID_OBRv2"] = reflect.TypeOf(OML_O21_ORC_PID_OBRv2{})
	Types["OML_O21_ORC_PID_OBR_TQ1v2"] = reflect.TypeOf(OML_O21_ORC_PID_OBR_TQ1v2{})
	Types["OML_O21_ORC_PID_OBR_OBXv2"] = reflect.TypeOf(OML_O21_ORC_PID_OBR_OBXv2{})
	Types["OML_O33v2"] = reflect.TypeOf(OML_O33v2{})
	Types["OML_O33_PIDv2"] = reflect.TypeOf(OML_O33_PIDv2{})
	Types["OML_O33_PID_IN1v2"] = reflect.TypeOf(OML_O33_PID_IN1v2{})
	Types["OML_O33_SPMv2"] = reflect.TypeOf(OML_O33_SPMv2{})
	Types["OML_O33_SPM_ORCv2"] = reflect.TypeOf(OML_O33_SPM_ORCv2{})
	Types["OML_O33_SPM_ORC_TQ1v2"] = reflect.TypeOf(OML_O33_SPM_ORC_TQ1v2{})
	Types["OML_O33_SPM_ORC_OBXv2"] = reflect.TypeOf(OML_O33_SPM_ORC_OBXv2{})
	Types["OML_O33_SPM_ORC_PIDv2"] = reflect.TypeOf(OML_O33_SPM_ORC_PIDv2{})
	Types["OML_O33_SPM_ORC_PID_OBRv2"] = reflect.TypeOf(OML_O33_SPM_ORC_PID_OBRv2{})
	Types["OML_O33_SPM_ORC_PID_OBR_TQ1v2"] = reflect.TypeOf(OML_O33_SPM_ORC_PID_OBR_TQ1v2{})
	Types["OML_O33_SPM_ORC_PID_OBR_OBXv2"] = reflect.TypeOf(OML_O33_SPM_ORC_PID_OBR_OBXv2{})
	Types["OML_O35v2"] = reflect.TypeOf(OML_O35v2{})
	Types["OML_O35_PIDv2"] = reflect.TypeOf(OML_O35_PIDv2{})
	Types["OML_O35_PID_IN1v2"] = reflect.TypeOf(OML_O35_PID_IN1v2{})
	Types["OML_O35_SPMv2"] = reflect.TypeOf(OML_O35_SPMv2{})
	Types["OML_O35_SPM_SACv2"] = reflect.TypeOf(OML_O35_SPM_SACv2{})
	Types["OML_O35_SPM_SAC_ORCv2"] = reflect.TypeOf(OML_O35_SPM_SAC_ORCv2{})
	Types["OML_O35_SPM_SAC_ORC_TQ1v2"] = reflect.TypeOf(OML_O35_SPM_SAC_ORC_TQ1v2{})
	Types["OML_O35_SPM_SAC_ORC_OBXv2"] = reflect.TypeOf(OML_O35_SPM_SAC_ORC_OBXv2{})
	Types["OML_O35_SPM_SAC_ORC_PIDv2"] = reflect.TypeOf(OML_O35_SPM_SAC_ORC_PIDv2{})
	Types["OML_O35_SPM_SAC_ORC_PID_OBRv2"] = reflect.TypeOf(OML_O35_SPM_SAC_ORC_PID_OBRv2{})
	Types["OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2"] = reflect.TypeOf(OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2{})
	Types["OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2"] = reflect.TypeOf(OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2{})
	Types["OMN_O01v2"] = reflect.TypeOf(OMN_O01v2{})
	Types["OMN_O01_PIDv2"] = reflect.TypeOf(OMN_O01_PIDv2{})
	Types["OMN_O01_PID_IN1v2"] = reflect.TypeOf(OMN_O01_PID_IN1v2{})
	Types["OMN_O01_ORCv2"] = reflect.TypeOf(OMN_O01_ORCv2{})
	Types["OMN_O01_ORC_OBXv2"] = reflect.TypeOf(OMN_O01_ORC_OBXv2{})
	Types["OMN_O07v2"] = reflect.TypeOf(OMN_O07v2{})
	Types["OMN_O07_PIDv2"] = reflect.TypeOf(OMN_O07_PIDv2{})
	Types["OMN_O07_PID_IN1v2"] = reflect.TypeOf(OMN_O07_PID_IN1v2{})
	Types["OMN_O07_ORCv2"] = reflect.TypeOf(OMN_O07_ORCv2{})
	Types["OMN_O07_ORC_TQ1v2"] = reflect.TypeOf(OMN_O07_ORC_TQ1v2{})
	Types["OMN_O07_ORC_OBXv2"] = reflect.TypeOf(OMN_O07_ORC_OBXv2{})
	Types["OMP_O09v2"] = reflect.TypeOf(OMP_O09v2{})
	Types["OMP_O09_PIDv2"] = reflect.TypeOf(OMP_O09_PIDv2{})
	Types["OMP_O09_PID_IN1v2"] = reflect.TypeOf(OMP_O09_PID_IN1v2{})
	Types["OMP_O09_ORCv2"] = reflect.TypeOf(OMP_O09_ORCv2{})
	Types["OMP_O09_ORC_TQ1v2"] = reflect.TypeOf(OMP_O09_ORC_TQ1v2{})
	Types["OMP_O09_ORC_RXCv2"] = reflect.TypeOf(OMP_O09_ORC_RXCv2{})
	Types["OMP_O09_ORC_OBXv2"] = reflect.TypeOf(OMP_O09_ORC_OBXv2{})
	Types["OMS_O01v2"] = reflect.TypeOf(OMS_O01v2{})
	Types["OMS_O01_PIDv2"] = reflect.TypeOf(OMS_O01_PIDv2{})
	Types["OMS_O01_PID_IN1v2"] = reflect.TypeOf(OMS_O01_PID_IN1v2{})
	Types["OMS_O01_ORCv2"] = reflect.TypeOf(OMS_O01_ORCv2{})
	Types["OMS_O01_ORC_OBXv2"] = reflect.TypeOf(OMS_O01_ORC_OBXv2{})
	Types["OMS_O05v2"] = reflect.TypeOf(OMS_O05v2{})
	Types["OMS_O05_PIDv2"] = reflect.TypeOf(OMS_O05_PIDv2{})
	Types["OMS_O05_PID_IN1v2"] = reflect.TypeOf(OMS_O05_PID_IN1v2{})
	Types["OMS_O05_ORCv2"] = reflect.TypeOf(OMS_O05_ORCv2{})
	Types["OMS_O05_ORC_TQ1v2"] = reflect.TypeOf(OMS_O05_ORC_TQ1v2{})
	Types["OMS_O05_ORC_OBXv2"] = reflect.TypeOf(OMS_O05_ORC_OBXv2{})
	Types["ORB_O28v2"] = reflect.TypeOf(ORB_O28v2{})
	Types["ORB_O28_ORCv2"] = reflect.TypeOf(ORB_O28_ORCv2{})
	Types["ORB_O28_ORC_TQ1v2"] = reflect.TypeOf(ORB_O28_ORC_TQ1v2{})
	Types["ORD_O02v2"] = reflect.TypeOf(ORD_O02v2{})
	Types["ORD_O02_PIDv2"] = reflect.TypeOf(ORD_O02_PIDv2{})
	Types["ORD_O02_PID_ORC1v2"] = reflect.TypeOf(ORD_O02_PID_ORC1v2{})
	Types["ORD_O02_PID_ORC2v2"] = reflect.TypeOf(ORD_O02_PID_ORC2v2{})
	Types["ORD_O04v2"] = reflect.TypeOf(ORD_O04v2{})
	Types["ORD_O04_PIDv2"] = reflect.TypeOf(ORD_O04_PIDv2{})
	Types["ORD_O04_PID_ORC1v2"] = reflect.TypeOf(ORD_O04_PID_ORC1v2{})
	Types["ORD_O04_PID_ORC1_TQ1v2"] = reflect.TypeOf(ORD_O04_PID_ORC1_TQ1v2{})
	Types["ORD_O04_PID_ORC2v2"] = reflect.TypeOf(ORD_O04_PID_ORC2v2{})
	Types["ORD_O04_PID_ORC2_TQ1v2"] = reflect.TypeOf(ORD_O04_PID_ORC2_TQ1v2{})
	Types["ORF_R04v2"] = reflect.TypeOf(ORF_R04v2{})
	Types["ORF_R04_PIDv2"] = reflect.TypeOf(ORF_R04_PIDv2{})
	Types["ORF_R04_PID_OBRv2"] = reflect.TypeOf(ORF_R04_PID_OBRv2{})
	Types["ORF_R04_PID_OBR_TQ1v2"] = reflect.TypeOf(ORF_R04_PID_OBR_TQ1v2{})
	Types["ORF_R04_PID_OBR_OBXv2"] = reflect.TypeOf(ORF_R04_PID_OBR_OBXv2{})
	Types["ORG_O20v2"] = reflect.TypeOf(ORG_O20v2{})
	Types["ORG_O20_PIDv2"] = reflect.TypeOf(ORG_O20_PIDv2{})
	Types["ORG_O20_PID_ORCv2"] = reflect.TypeOf(ORG_O20_PID_ORCv2{})
	Types["ORG_O20_PID_ORC_TQ1v2"] = reflect.TypeOf(ORG_O20_PID_ORC_TQ1v2{})
	Types["ORG_O20_PID_ORC_SPMv2"] = reflect.TypeOf(ORG_O20_PID_ORC_SPMv2{})
	Types["ORI_O24v2"] = reflect.TypeOf(ORI_O24v2{})
	Types["ORI_O24_PIDv2"] = reflect.TypeOf(ORI_O24_PIDv2{})
	Types["ORI_O24_PID_ORCv2"] = reflect.TypeOf(ORI_O24_PID_ORCv2{})
	Types["ORI_O24_PID_ORC_TQ1v2"] = reflect.TypeOf(ORI_O24_PID_ORC_TQ1v2{})
	Types["ORL_O22v2"] = reflect.TypeOf(ORL_O22v2{})
	Types["ORL_O22_ORCv2"] = reflect.TypeOf(ORL_O22_ORCv2{})
	Types["ORL_O22_ORC_TQ1v2"] = reflect.TypeOf(ORL_O22_ORC_TQ1v2{})
	Types["ORL_O22_ORC_SPMv2"] = reflect.TypeOf(ORL_O22_ORC_SPMv2{})
	Types["ORL_O34v2"] = reflect.TypeOf(ORL_O34v2{})
	Types["ORL_O34_SPMv2"] = reflect.TypeOf(ORL_O34_SPMv2{})
	Types["ORL_O34_SPM_ORCv2"] = reflect.TypeOf(ORL_O34_SPM_ORCv2{})
	Types["ORL_O34_SPM_ORC_TQ1v2"] = reflect.TypeOf(ORL_O34_SPM_ORC_TQ1v2{})
	Types["ORL_O34_SPM_ORC_SPMv2"] = reflect.TypeOf(ORL_O34_SPM_ORC_SPMv2{})
	Types["ORL_O36v2"] = reflect.TypeOf(ORL_O36v2{})
	Types["ORL_O36_SPMv2"] = reflect.TypeOf(ORL_O36_SPMv2{})
	Types["ORL_O36_SPM_SACv2"] = reflect.TypeOf(ORL_O36_SPM_SACv2{})
	Types["ORL_O36_SPM_SAC_ORCv2"] = reflect.TypeOf(ORL_O36_SPM_SAC_ORCv2{})
	Types["ORL_O36_SPM_SAC_ORC_TQ1v2"] = reflect.TypeOf(ORL_O36_SPM_SAC_ORC_TQ1v2{})
	Types["ORM_O01v2"] = reflect.TypeOf(ORM_O01v2{})
	Types["ORM_O01_PIDv2"] = reflect.TypeOf(ORM_O01_PIDv2{})
	Types["ORM_O01_PID_IN1v2"] = reflect.TypeOf(ORM_O01_PID_IN1v2{})
	Types["ORM_O01_ORCv2"] = reflect.TypeOf(ORM_O01_ORCv2{})
	Types["ORM_O01_ORC_OBXv2"] = reflect.TypeOf(ORM_O01_ORC_OBXv2{})
	Types["ORN_O02v2"] = reflect.TypeOf(ORN_O02v2{})
	Types["ORN_O02_PIDv2"] = reflect.TypeOf(ORN_O02_PIDv2{})
	Types["ORN_O02_PID_ORCv2"] = reflect.TypeOf(ORN_O02_PID_ORCv2{})
	Types["ORN_O08v2"] = reflect.TypeOf(ORN_O08v2{})
	Types["ORN_O08_PIDv2"] = reflect.TypeOf(ORN_O08_PIDv2{})
	Types["ORN_O08_PID_ORCv2"] = reflect.TypeOf(ORN_O08_PID_ORCv2{})
	Types["ORN_O08_PID_ORC_TQ1v2"] = reflect.TypeOf(ORN_O08_PID_ORC_TQ1v2{})
	Types["ORP_O10v2"] = reflect.TypeOf(ORP_O10v2{})
	Types["ORP_O10_PIDv2"] = reflect.TypeOf(ORP_O10_PIDv2{})
	Types["ORP_O10_PID_ORCv2"] = reflect.TypeOf(ORP_O10_PID_ORCv2{})
	Types["ORP_O10_PID_ORC_TQ1v2"] = reflect.TypeOf(ORP_O10_PID_ORC_TQ1v2{})
	Types["ORP_O10_PID_ORC_RXCv2"] = reflect.TypeOf(ORP_O10_PID_ORC_RXCv2{})
	Types["ORR_O02v2"] = reflect.TypeOf(ORR_O02v2{})
	Types["ORR_O02_PIDv2"] = reflect.TypeOf(ORR_O02_PIDv2{})
	Types["ORR_O02_PID_ORCv2"] = reflect.TypeOf(ORR_O02_PID_ORCv2{})
	Types["ORS_O02v2"] = reflect.TypeOf(ORS_O02v2{})
	Types["ORS_O02_PIDv2"] = reflect.TypeOf(ORS_O02_PIDv2{})
	Types["ORS_O02_PID_ORCv2"] = reflect.TypeOf(ORS_O02_PID_ORCv2{})
	Types["ORS_O06v2"] = reflect.TypeOf(ORS_O06v2{})
	Types["ORS_O06_PIDv2"] = reflect.TypeOf(ORS_O06_PIDv2{})
	Types["ORS_O06_PID_ORCv2"] = reflect.TypeOf(ORS_O06_PID_ORCv2{})
	Types["ORS_O06_PID_ORC_TQ1v2"] = reflect.TypeOf(ORS_O06_PID_ORC_TQ1v2{})
	Types["ORU_R01v2"] = reflect.TypeOf(ORU_R01v2{})
	Types["ORU_R01_PIDv2"] = reflect.TypeOf(ORU_R01_PIDv2{})
	Types["ORU_R01_PID_OBRv2"] = reflect.TypeOf(ORU_R01_PID_OBRv2{})
	Types["ORU_R01_PID_OBR_TQ1v2"] = reflect.TypeOf(ORU_R01_PID_OBR_TQ1v2{})
	Types["ORU_R01_PID_OBR_OBXv2"] = reflect.TypeOf(ORU_R01_PID_OBR_OBXv2{})
	Types["ORU_R01_PID_OBR_SPMv2"] = reflect.TypeOf(ORU_R01_PID_OBR_SPMv2{})
	Types["ORU_R03v2"] = reflect.TypeOf(ORU_R03v2{})
	Types["ORU_R03_PIDv2"] = reflect.TypeOf(ORU_R03_PIDv2{})
	Types["ORU_R03_PID_OBRv2"] = reflect.TypeOf(ORU_R03_PID_OBRv2{})
	Types["ORU_R03_PID_OBR_OBXv2"] = reflect.TypeOf(ORU_R03_PID_OBR_OBXv2{})
	Types["ORU_R30v2"] = reflect.TypeOf(ORU_R30v2{})
	Types["ORU_R30_TQ1v2"] = reflect.TypeOf(ORU_R30_TQ1v2{})
	Types["ORU_R30_OBXv2"] = reflect.TypeOf(ORU_R30_OBXv2{})
	Types["ORU_R32v2"] = reflect.TypeOf(ORU_R32v2{})
	Types["ORU_R32_PIDv2"] = reflect.TypeOf(ORU_R32_PIDv2{})
	Types["ORU_R32_PID_OBRv2"] = reflect.TypeOf(ORU_R32_PID_OBRv2{})
	Types["ORU_R32_PID_OBR_OBXv2"] = reflect.TypeOf(ORU_R32_PID_OBR_OBXv2{})
	Types["OSQ_Q06v2"] = reflect.TypeOf(OSQ_Q06v2{})
	Types["OSR_Q06v2"] = reflect.TypeOf(OSR_Q06v2{})
	Types["OSR_Q06_PIDv2"] = reflect.TypeOf(OSR_Q06_PIDv2{})
	Types["OSR_Q06_PID_ORCv2"] = reflect.TypeOf(OSR_Q06_PID_ORCv2{})
	Types["OSR_Q06_PID_ORC_TQ1v2"] = reflect.TypeOf(OSR_Q06_PID_ORC_TQ1v2{})
	Types["OUL_R21v2"] = reflect.TypeOf(OUL_R21v2{})
	Types["OUL_R21_PIDv2"] = reflect.TypeOf(OUL_R21_PIDv2{})
	Types["OUL_R21_SACv2"] = reflect.TypeOf(OUL_R21_SACv2{})
	Types["OUL_R21_SAC_TQ1v2"] = reflect.TypeOf(OUL_R21_SAC_TQ1v2{})
	Types["OUL_R21_SAC_OBXv2"] = reflect.TypeOf(OUL_R21_SAC_OBXv2{})
	Types["OUL_R22v2"] = reflect.TypeOf(OUL_R22v2{})
	Types["OUL_R22_PIDv2"] = reflect.TypeOf(OUL_R22_PIDv2{})
	Types["OUL_R22_SPMv2"] = reflect.TypeOf(OUL_R22_SPMv2{})
	Types["OUL_R22_SPM_SACv2"] = reflect.TypeOf(OUL_R22_SPM_SACv2{})
	Types["OUL_R22_SPM_OBRv2"] = reflect.TypeOf(OUL_R22_SPM_OBRv2{})
	Types["OUL_R22_SPM_OBR_TQ1v2"] = reflect.TypeOf(OUL_R22_SPM_OBR_TQ1v2{})
	Types["OUL_R22_SPM_OBR_OBXv2"] = reflect.TypeOf(OUL_R22_SPM_OBR_OBXv2{})
	Types["OUL_R23v2"] = reflect.TypeOf(OUL_R23v2{})
	Types["OUL_R23_PIDv2"] = reflect.TypeOf(OUL_R23_PIDv2{})
	Types["OUL_R23_SPMv2"] = reflect.TypeOf(OUL_R23_SPMv2{})
	Types["OUL_R23_SPM_SACv2"] = reflect.TypeOf(OUL_R23_SPM_SACv2{})
	Types["OUL_R23_SPM_SAC_OBRv2"] = reflect.TypeOf(OUL_R23_SPM_SAC_OBRv2{})
	Types["OUL_R23_SPM_SAC_OBR_TQ1v2"] = reflect.TypeOf(OUL_R23_SPM_SAC_OBR_TQ1v2{})
	Types["OUL_R23_SPM_SAC_OBR_OBXv2"] = reflect.TypeOf(OUL_R23_SPM_SAC_OBR_OBXv2{})
	Types["OUL_R24v2"] = reflect.TypeOf(OUL_R24v2{})
	Types["OUL_R24_PIDv2"] = reflect.TypeOf(OUL_R24_PIDv2{})
	Types["OUL_R24_OBRv2"] = reflect.TypeOf(OUL_R24_OBRv2{})
	Types["OUL_R24_OBR_TQ1v2"] = reflect.TypeOf(OUL_R24_OBR_TQ1v2{})
	Types["OUL_R24_OBR_SPMv2"] = reflect.TypeOf(OUL_R24_OBR_SPMv2{})
	Types["OUL_R24_OBR_SPM_SACv2"] = reflect.TypeOf(OUL_R24_OBR_SPM_SACv2{})
	Types["OUL_R24_OBR_OBXv2"] = reflect.TypeOf(OUL_R24_OBR_OBXv2{})
	Types["PEX_P07v2"] = reflect.TypeOf(PEX_P07v2{})
	Types["PEX_P07_PESv2"] = reflect.TypeOf(PEX_P07_PESv2{})
	Types["PEX_P07_PES_PEOv2"] = reflect.TypeOf(PEX_P07_PES_PEOv2{})
	Types["PEX_P07_PES_PEO_PCRv2"] = reflect.TypeOf(PEX_P07_PES_PEO_PCRv2{})
	Types["PEX_P07_PES_PEO_PCR_TQ1v2"] = reflect.TypeOf(PEX_P07_PES_PEO_PCR_TQ1v2{})
	Types["PEX_P07_PES_PEO_PCR_RXAv2"] = reflect.TypeOf(PEX_P07_PES_PEO_PCR_RXAv2{})
	Types["PEX_P07_PES_PEO_PCR_NK1v2"] = reflect.TypeOf(PEX_P07_PES_PEO_PCR_NK1v2{})
	Types["PEX_P07_PES_PEO_PCR_NK1_TQ1v2"] = reflect.TypeOf(PEX_P07_PES_PEO_PCR_NK1_TQ1v2{})
	Types["PEX_P07_PES_PEO_PCR_NK1_RXAv2"] = reflect.TypeOf(PEX_P07_PES_PEO_PCR_NK1_RXAv2{})
	Types["PEX_P07_PES_PEO_PCR_CSRv2"] = reflect.TypeOf(PEX_P07_PES_PEO_PCR_CSRv2{})
	Types["PGL_PC6v2"] = reflect.TypeOf(PGL_PC6v2{})
	Types["PGL_PC6_GOLv2"] = reflect.TypeOf(PGL_PC6_GOLv2{})
	Types["PGL_PC6_GOL_ROLv2"] = reflect.TypeOf(PGL_PC6_GOL_ROLv2{})
	Types["PGL_PC6_GOL_PTHv2"] = reflect.TypeOf(PGL_PC6_GOL_PTHv2{})
	Types["PGL_PC6_GOL_OBXv2"] = reflect.TypeOf(PGL_PC6_GOL_OBXv2{})
	Types["PGL_PC6_GOL_PRBv2"] = reflect.TypeOf(PGL_PC6_GOL_PRBv2{})
	Types["PGL_PC6_GOL_PRB_ROLv2"] = reflect.TypeOf(PGL_PC6_GOL_PRB_ROLv2{})
	Types["PGL_PC6_GOL_PRB_OBXv2"] = reflect.TypeOf(PGL_PC6_GOL_PRB_OBXv2{})
	Types["PGL_PC6_GOL_ORCv2"] = reflect.TypeOf(PGL_PC6_GOL_ORCv2{})
	Types["PGL_PC6_GOL_ORC_OBXv2"] = reflect.TypeOf(PGL_PC6_GOL_ORC_OBXv2{})
	Types["PIN_I07v2"] = reflect.TypeOf(PIN_I07v2{})
	Types["PIN_I07_PRDv2"] = reflect.TypeOf(PIN_I07_PRDv2{})
	Types["PIN_I07_IN1v2"] = reflect.TypeOf(PIN_I07_IN1v2{})
	Types["PMU_B01v2"] = reflect.TypeOf(PMU_B01v2{})
	Types["PMU_B03v2"] = reflect.TypeOf(PMU_B03v2{})
	Types["PMU_B04v2"] = reflect.TypeOf(PMU_B04v2{})
	Types["PMU_B07v2"] = reflect.TypeOf(PMU_B07v2{})
	Types["PMU_B07_CERv2"] = reflect.TypeOf(PMU_B07_CERv2{})
	Types["PMU_B08v2"] = reflect.TypeOf(PMU_B08v2{})
	Types["PPG_PCGv2"] = reflect.TypeOf(PPG_PCGv2{})
	Types["PPG_PCG_PTHv2"] = reflect.TypeOf(PPG_PCG_PTHv2{})
	Types["PPG_PCG_PTH_ROLv2"] = reflect.TypeOf(PPG_PCG_PTH_ROLv2{})
	Types["PPG_PCG_PTH_GOLv2"] = reflect.TypeOf(PPG_PCG_PTH_GOLv2{})
	Types["PPG_PCG_PTH_GOL_ROLv2"] = reflect.TypeOf(PPG_PCG_PTH_GOL_ROLv2{})
	Types["PPG_PCG_PTH_GOL_OBXv2"] = reflect.TypeOf(PPG_PCG_PTH_GOL_OBXv2{})
	Types["PPG_PCG_PTH_GOL_PRBv2"] = reflect.TypeOf(PPG_PCG_PTH_GOL_PRBv2{})
	Types["PPG_PCG_PTH_GOL_PRB_ROLv2"] = reflect.TypeOf(PPG_PCG_PTH_GOL_PRB_ROLv2{})
	Types["PPG_PCG_PTH_GOL_PRB_OBXv2"] = reflect.TypeOf(PPG_PCG_PTH_GOL_PRB_OBXv2{})
	Types["PPG_PCG_PTH_GOL_ORCv2"] = reflect.TypeOf(PPG_PCG_PTH_GOL_ORCv2{})
	Types["PPG_PCG_PTH_GOL_ORC_OBXv2"] = reflect.TypeOf(PPG_PCG_PTH_GOL_ORC_OBXv2{})
	Types["PPP_PCBv2"] = reflect.TypeOf(PPP_PCBv2{})
	Types["PPP_PCB_PTHv2"] = reflect.TypeOf(PPP_PCB_PTHv2{})
	Types["PPP_PCB_PTH_ROLv2"] = reflect.TypeOf(PPP_PCB_PTH_ROLv2{})
	Types["PPP_PCB_PTH_PRBv2"] = reflect.TypeOf(PPP_PCB_PTH_PRBv2{})
	Types["PPP_PCB_PTH_PRB_ROLv2"] = reflect.TypeOf(PPP_PCB_PTH_PRB_ROLv2{})
	Types["PPP_PCB_PTH_PRB_OBXv2"] = reflect.TypeOf(PPP_PCB_PTH_PRB_OBXv2{})
	Types["PPP_PCB_PTH_PRB_GOLv2"] = reflect.TypeOf(PPP_PCB_PTH_PRB_GOLv2{})
	Types["PPP_PCB_PTH_PRB_GOL_ROLv2"] = reflect.TypeOf(PPP_PCB_PTH_PRB_GOL_ROLv2{})
	Types["PPP_PCB_PTH_PRB_GOL_OBXv2"] = reflect.TypeOf(PPP_PCB_PTH_PRB_GOL_OBXv2{})
	Types["PPP_PCB_PTH_PRB_ORCv2"] = reflect.TypeOf(PPP_PCB_PTH_PRB_ORCv2{})
	Types["PPP_PCB_PTH_PRB_ORC_OBXv2"] = reflect.TypeOf(PPP_PCB_PTH_PRB_ORC_OBXv2{})
	Types["PPR_PC1v2"] = reflect.TypeOf(PPR_PC1v2{})
	Types["PPR_PC1_PRBv2"] = reflect.TypeOf(PPR_PC1_PRBv2{})
	Types["PPR_PC1_PRB_ROLv2"] = reflect.TypeOf(PPR_PC1_PRB_ROLv2{})
	Types["PPR_PC1_PRB_PTHv2"] = reflect.TypeOf(PPR_PC1_PRB_PTHv2{})
	Types["PPR_PC1_PRB_OBXv2"] = reflect.TypeOf(PPR_PC1_PRB_OBXv2{})
	Types["PPR_PC1_PRB_GOLv2"] = reflect.TypeOf(PPR_PC1_PRB_GOLv2{})
	Types["PPR_PC1_PRB_GOL_ROLv2"] = reflect.TypeOf(PPR_PC1_PRB_GOL_ROLv2{})
	Types["PPR_PC1_PRB_GOL_OBXv2"] = reflect.TypeOf(PPR_PC1_PRB_GOL_OBXv2{})
	Types["PPR_PC1_PRB_ORCv2"] = reflect.TypeOf(PPR_PC1_PRB_ORCv2{})
	Types["PPR_PC1_PRB_ORC_OBXv2"] = reflect.TypeOf(PPR_PC1_PRB_ORC_OBXv2{})
	Types["PPT_PCLv2"] = reflect.TypeOf(PPT_PCLv2{})
	Types["PPT_PCL_PIDv2"] = reflect.TypeOf(PPT_PCL_PIDv2{})
	Types["PPT_PCL_PID_PTHv2"] = reflect.TypeOf(PPT_PCL_PID_PTHv2{})
	Types["PPT_PCL_PID_PTH_ROLv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_ROLv2{})
	Types["PPT_PCL_PID_PTH_GOLv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_GOLv2{})
	Types["PPT_PCL_PID_PTH_GOL_ROLv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_GOL_ROLv2{})
	Types["PPT_PCL_PID_PTH_GOL_OBXv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_GOL_OBXv2{})
	Types["PPT_PCL_PID_PTH_GOL_PRBv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_GOL_PRBv2{})
	Types["PPT_PCL_PID_PTH_GOL_PRB_ROLv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_GOL_PRB_ROLv2{})
	Types["PPT_PCL_PID_PTH_GOL_PRB_OBXv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_GOL_PRB_OBXv2{})
	Types["PPT_PCL_PID_PTH_GOL_ORCv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_GOL_ORCv2{})
	Types["PPT_PCL_PID_PTH_GOL_ORC_OBXv2"] = reflect.TypeOf(PPT_PCL_PID_PTH_GOL_ORC_OBXv2{})
	Types["PPV_PCAv2"] = reflect.TypeOf(PPV_PCAv2{})
	Types["PPV_PCA_PIDv2"] = reflect.TypeOf(PPV_PCA_PIDv2{})
	Types["PPV_PCA_PID_GOLv2"] = reflect.TypeOf(PPV_PCA_PID_GOLv2{})
	Types["PPV_PCA_PID_GOL_ROLv2"] = reflect.TypeOf(PPV_PCA_PID_GOL_ROLv2{})
	Types["PPV_PCA_PID_GOL_PTHv2"] = reflect.TypeOf(PPV_PCA_PID_GOL_PTHv2{})
	Types["PPV_PCA_PID_GOL_OBXv2"] = reflect.TypeOf(PPV_PCA_PID_GOL_OBXv2{})
	Types["PPV_PCA_PID_GOL_PRBv2"] = reflect.TypeOf(PPV_PCA_PID_GOL_PRBv2{})
	Types["PPV_PCA_PID_GOL_PRB_ROLv2"] = reflect.TypeOf(PPV_PCA_PID_GOL_PRB_ROLv2{})
	Types["PPV_PCA_PID_GOL_PRB_OBXv2"] = reflect.TypeOf(PPV_PCA_PID_GOL_PRB_OBXv2{})
	Types["PPV_PCA_PID_GOL_ORCv2"] = reflect.TypeOf(PPV_PCA_PID_GOL_ORCv2{})
	Types["PPV_PCA_PID_GOL_ORC_OBXv2"] = reflect.TypeOf(PPV_PCA_PID_GOL_ORC_OBXv2{})
	Types["PRR_PC5v2"] = reflect.TypeOf(PRR_PC5v2{})
	Types["PRR_PC5_PIDv2"] = reflect.TypeOf(PRR_PC5_PIDv2{})
	Types["PRR_PC5_PID_PRBv2"] = reflect.TypeOf(PRR_PC5_PID_PRBv2{})
	Types["PRR_PC5_PID_PRB_ROLv2"] = reflect.TypeOf(PRR_PC5_PID_PRB_ROLv2{})
	Types["PRR_PC5_PID_PRB_PTHv2"] = reflect.TypeOf(PRR_PC5_PID_PRB_PTHv2{})
	Types["PRR_PC5_PID_PRB_OBXv2"] = reflect.TypeOf(PRR_PC5_PID_PRB_OBXv2{})
	Types["PRR_PC5_PID_PRB_GOLv2"] = reflect.TypeOf(PRR_PC5_PID_PRB_GOLv2{})
	Types["PRR_PC5_PID_PRB_GOL_ROLv2"] = reflect.TypeOf(PRR_PC5_PID_PRB_GOL_ROLv2{})
	Types["PRR_PC5_PID_PRB_GOL_OBXv2"] = reflect.TypeOf(PRR_PC5_PID_PRB_GOL_OBXv2{})
	Types["PRR_PC5_PID_PRB_ORCv2"] = reflect.TypeOf(PRR_PC5_PID_PRB_ORCv2{})
	Types["PRR_PC5_PID_PRB_ORC_OBXv2"] = reflect.TypeOf(PRR_PC5_PID_PRB_ORC_OBXv2{})
	Types["PTR_PCFv2"] = reflect.TypeOf(PTR_PCFv2{})
	Types["PTR_PCF_PIDv2"] = reflect.TypeOf(PTR_PCF_PIDv2{})
	Types["PTR_PCF_PID_PTHv2"] = reflect.TypeOf(PTR_PCF_PID_PTHv2{})
	Types["PTR_PCF_PID_PTH_ROLv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_ROLv2{})
	Types["PTR_PCF_PID_PTH_PRBv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_PRBv2{})
	Types["PTR_PCF_PID_PTH_PRB_ROLv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_PRB_ROLv2{})
	Types["PTR_PCF_PID_PTH_PRB_OBXv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_PRB_OBXv2{})
	Types["PTR_PCF_PID_PTH_PRB_GOLv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_PRB_GOLv2{})
	Types["PTR_PCF_PID_PTH_PRB_GOL_ROLv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_PRB_GOL_ROLv2{})
	Types["PTR_PCF_PID_PTH_PRB_GOL_OBXv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_PRB_GOL_OBXv2{})
	Types["PTR_PCF_PID_PTH_PRB_ORCv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_PRB_ORCv2{})
	Types["PTR_PCF_PID_PTH_PRB_ORC_OBXv2"] = reflect.TypeOf(PTR_PCF_PID_PTH_PRB_ORC_OBXv2{})
	Types["QBP_K13v2"] = reflect.TypeOf(QBP_K13v2{})
	Types["QBP_Q11v2"] = reflect.TypeOf(QBP_Q11v2{})
	Types["QBP_Q13v2"] = reflect.TypeOf(QBP_Q13v2{})
	Types["QBP_Q15v2"] = reflect.TypeOf(QBP_Q15v2{})
	Types["QBP_Q21v2"] = reflect.TypeOf(QBP_Q21v2{})
	Types["QBP_Qnnv2"] = reflect.TypeOf(QBP_Qnnv2{})
	Types["QBP_Z73v2"] = reflect.TypeOf(QBP_Z73v2{})
	Types["QCK_Q02v2"] = reflect.TypeOf(QCK_Q02v2{})
	Types["QCN_J01v2"] = reflect.TypeOf(QCN_J01v2{})
	Types["QRY_A19v2"] = reflect.TypeOf(QRY_A19v2{})
	Types["QRY_P04v2"] = reflect.TypeOf(QRY_P04v2{})
	Types["QRY_PC4v2"] = reflect.TypeOf(QRY_PC4v2{})
	Types["QRY_Q01v2"] = reflect.TypeOf(QRY_Q01v2{})
	Types["QRY_Q02v2"] = reflect.TypeOf(QRY_Q02v2{})
	Types["QRY_R02v2"] = reflect.TypeOf(QRY_R02v2{})
	Types["QRY_T12v2"] = reflect.TypeOf(QRY_T12v2{})
	Types["QSB_Q16v2"] = reflect.TypeOf(QSB_Q16v2{})
	Types["QVR_Q17v2"] = reflect.TypeOf(QVR_Q17v2{})
	Types["RAR_RARv2"] = reflect.TypeOf(RAR_RARv2{})
	Types["RAR_RAR_QRDv2"] = reflect.TypeOf(RAR_RAR_QRDv2{})
	Types["RAR_RAR_QRD_ORCv2"] = reflect.TypeOf(RAR_RAR_QRD_ORCv2{})
	Types["RAR_RAR_QRD_ORC_RXEv2"] = reflect.TypeOf(RAR_RAR_QRD_ORC_RXEv2{})
	Types["RAS_O01v2"] = reflect.TypeOf(RAS_O01v2{})
	Types["RAS_O01_PIDv2"] = reflect.TypeOf(RAS_O01_PIDv2{})
	Types["RAS_O01_ORCv2"] = reflect.TypeOf(RAS_O01_ORCv2{})
	Types["RAS_O01_ORC_RXOv2"] = reflect.TypeOf(RAS_O01_ORC_RXOv2{})
	Types["RAS_O01_ORC_RXO_RXCv2"] = reflect.TypeOf(RAS_O01_ORC_RXO_RXCv2{})
	Types["RAS_O01_ORC_RXEv2"] = reflect.TypeOf(RAS_O01_ORC_RXEv2{})
	Types["RAS_O01_ORC_OBXv2"] = reflect.TypeOf(RAS_O01_ORC_OBXv2{})
	Types["RAS_O17v2"] = reflect.TypeOf(RAS_O17v2{})
	Types["RAS_O17_PIDv2"] = reflect.TypeOf(RAS_O17_PIDv2{})
	Types["RAS_O17_ORCv2"] = reflect.TypeOf(RAS_O17_ORCv2{})
	Types["RAS_O17_ORC_TQ1v2"] = reflect.TypeOf(RAS_O17_ORC_TQ1v2{})
	Types["RAS_O17_ORC_RXCv2"] = reflect.TypeOf(RAS_O17_ORC_RXCv2{})
	Types["RAS_O17_ORC_RXEv2"] = reflect.TypeOf(RAS_O17_ORC_RXEv2{})
	Types["RAS_O17_ORC_RXE_TQ1v2"] = reflect.TypeOf(RAS_O17_ORC_RXE_TQ1v2{})
	Types["RAS_O17_ORC_RXAv2"] = reflect.TypeOf(RAS_O17_ORC_RXAv2{})
	Types["RAS_O17_ORC_RXA_OBXv2"] = reflect.TypeOf(RAS_O17_ORC_RXA_OBXv2{})
	Types["RCI_I05v2"] = reflect.TypeOf(RCI_I05v2{})
	Types["RCI_I05_PRDv2"] = reflect.TypeOf(RCI_I05_PRDv2{})
	Types["RCI_I05_OBRv2"] = reflect.TypeOf(RCI_I05_OBRv2{})
	Types["RCI_I05_OBR_OBXv2"] = reflect.TypeOf(RCI_I05_OBR_OBXv2{})
	Types["RCL_I06v2"] = reflect.TypeOf(RCL_I06v2{})
	Types["RCL_I06_PRDv2"] = reflect.TypeOf(RCL_I06_PRDv2{})
	Types["RDE_O01v2"] = reflect.TypeOf(RDE_O01v2{})
	Types["RDE_O01_PIDv2"] = reflect.TypeOf(RDE_O01_PIDv2{})
	Types["RDE_O01_PID_IN1v2"] = reflect.TypeOf(RDE_O01_PID_IN1v2{})
	Types["RDE_O01_ORCv2"] = reflect.TypeOf(RDE_O01_ORCv2{})
	Types["RDE_O01_ORC_RXOv2"] = reflect.TypeOf(RDE_O01_ORC_RXOv2{})
	Types["RDE_O01_ORC_RXO_RXCv2"] = reflect.TypeOf(RDE_O01_ORC_RXO_RXCv2{})
	Types["RDE_O01_ORC_OBXv2"] = reflect.TypeOf(RDE_O01_ORC_OBXv2{})
	Types["RDE_O11v2"] = reflect.TypeOf(RDE_O11v2{})
	Types["RDE_O11_PIDv2"] = reflect.TypeOf(RDE_O11_PIDv2{})
	Types["RDE_O11_PID_IN1v2"] = reflect.TypeOf(RDE_O11_PID_IN1v2{})
	Types["RDE_O11_ORCv2"] = reflect.TypeOf(RDE_O11_ORCv2{})
	Types["RDE_O11_ORC_TQ11v2"] = reflect.TypeOf(RDE_O11_ORC_TQ11v2{})
	Types["RDE_O11_ORC_RXOv2"] = reflect.TypeOf(RDE_O11_ORC_RXOv2{})
	Types["RDE_O11_ORC_RXO_RXCv2"] = reflect.TypeOf(RDE_O11_ORC_RXO_RXCv2{})
	Types["RDE_O11_ORC_TQ12v2"] = reflect.TypeOf(RDE_O11_ORC_TQ12v2{})
	Types["RDE_O11_ORC_OBXv2"] = reflect.TypeOf(RDE_O11_ORC_OBXv2{})
	Types["RDO_O01v2"] = reflect.TypeOf(RDO_O01v2{})
	Types["RDO_O01_PIDv2"] = reflect.TypeOf(RDO_O01_PIDv2{})
	Types["RDO_O01_PID_IN1v2"] = reflect.TypeOf(RDO_O01_PID_IN1v2{})
	Types["RDO_O01_ORCv2"] = reflect.TypeOf(RDO_O01_ORCv2{})
	Types["RDO_O01_ORC_RXCv2"] = reflect.TypeOf(RDO_O01_ORC_RXCv2{})
	Types["RDO_O01_ORC_OBXv2"] = reflect.TypeOf(RDO_O01_ORC_OBXv2{})
	Types["RDR_RDRv2"] = reflect.TypeOf(RDR_RDRv2{})
	Types["RDR_RDR_QRDv2"] = reflect.TypeOf(RDR_RDR_QRDv2{})
	Types["RDR_RDR_QRD_ORCv2"] = reflect.TypeOf(RDR_RDR_QRD_ORCv2{})
	Types["RDR_RDR_QRD_ORC_RXDv2"] = reflect.TypeOf(RDR_RDR_QRD_ORC_RXDv2{})
	Types["RDS_O01v2"] = reflect.TypeOf(RDS_O01v2{})
	Types["RDS_O01_PIDv2"] = reflect.TypeOf(RDS_O01_PIDv2{})
	Types["RDS_O01_ORCv2"] = reflect.TypeOf(RDS_O01_ORCv2{})
	Types["RDS_O01_ORC_RXOv2"] = reflect.TypeOf(RDS_O01_ORC_RXOv2{})
	Types["RDS_O01_ORC_RXO_RXCv2"] = reflect.TypeOf(RDS_O01_ORC_RXO_RXCv2{})
	Types["RDS_O01_ORC_RXEv2"] = reflect.TypeOf(RDS_O01_ORC_RXEv2{})
	Types["RDS_O01_ORC_OBXv2"] = reflect.TypeOf(RDS_O01_ORC_OBXv2{})
	Types["RDS_O13v2"] = reflect.TypeOf(RDS_O13v2{})
	Types["RDS_O13_PIDv2"] = reflect.TypeOf(RDS_O13_PIDv2{})
	Types["RDS_O13_ORCv2"] = reflect.TypeOf(RDS_O13_ORCv2{})
	Types["RDS_O13_ORC_TQ1v2"] = reflect.TypeOf(RDS_O13_ORC_TQ1v2{})
	Types["RDS_O13_ORC_RXOv2"] = reflect.TypeOf(RDS_O13_ORC_RXOv2{})
	Types["RDS_O13_ORC_RXO_RXCv2"] = reflect.TypeOf(RDS_O13_ORC_RXO_RXCv2{})
	Types["RDS_O13_ORC_RXEv2"] = reflect.TypeOf(RDS_O13_ORC_RXEv2{})
	Types["RDS_O13_ORC_RXE_TQ1v2"] = reflect.TypeOf(RDS_O13_ORC_RXE_TQ1v2{})
	Types["RDS_O13_ORC_OBXv2"] = reflect.TypeOf(RDS_O13_ORC_OBXv2{})
	Types["RDY_K15v2"] = reflect.TypeOf(RDY_K15v2{})
	Types["REF_I12v2"] = reflect.TypeOf(REF_I12v2{})
	Types["REF_I12_PRDv2"] = reflect.TypeOf(REF_I12_PRDv2{})
	Types["REF_I12_IN1v2"] = reflect.TypeOf(REF_I12_IN1v2{})
	Types["REF_I12_PR1v2"] = reflect.TypeOf(REF_I12_PR1v2{})
	Types["REF_I12_OBRv2"] = reflect.TypeOf(REF_I12_OBRv2{})
	Types["REF_I12_OBR_OBXv2"] = reflect.TypeOf(REF_I12_OBR_OBXv2{})
	Types["RER_RERv2"] = reflect.TypeOf(RER_RERv2{})
	Types["RER_RER_QRDv2"] = reflect.TypeOf(RER_RER_QRDv2{})
	Types["RER_RER_QRD_ORCv2"] = reflect.TypeOf(RER_RER_QRD_ORCv2{})
	Types["RGR_RGRv2"] = reflect.TypeOf(RGR_RGRv2{})
	Types["RGR_RGR_QRDv2"] = reflect.TypeOf(RGR_RGR_QRDv2{})
	Types["RGR_RGR_QRD_ORCv2"] = reflect.TypeOf(RGR_RGR_QRD_ORCv2{})
	Types["RGR_RGR_QRD_ORC_RXEv2"] = reflect.TypeOf(RGR_RGR_QRD_ORC_RXEv2{})
	Types["RGV_O01v2"] = reflect.TypeOf(RGV_O01v2{})
	Types["RGV_O01_PIDv2"] = reflect.TypeOf(RGV_O01_PIDv2{})
	Types["RGV_O01_ORCv2"] = reflect.TypeOf(RGV_O01_ORCv2{})
	Types["RGV_O01_ORC_RXCv2"] = reflect.TypeOf(RGV_O01_ORC_RXCv2{})
	Types["RGV_O01_ORC_RXEv2"] = reflect.TypeOf(RGV_O01_ORC_RXEv2{})
	Types["RGV_O01_ORC_RXGv2"] = reflect.TypeOf(RGV_O01_ORC_RXGv2{})
	Types["RGV_O01_ORC_RXG_OBXv2"] = reflect.TypeOf(RGV_O01_ORC_RXG_OBXv2{})
	Types["RGV_O15v2"] = reflect.TypeOf(RGV_O15v2{})
	Types["RGV_O15_PIDv2"] = reflect.TypeOf(RGV_O15_PIDv2{})
	Types["RGV_O15_ORCv2"] = reflect.TypeOf(RGV_O15_ORCv2{})
	Types["RGV_O15_ORC_TQ1v2"] = reflect.TypeOf(RGV_O15_ORC_TQ1v2{})
	Types["RGV_O15_ORC_RXCv2"] = reflect.TypeOf(RGV_O15_ORC_RXCv2{})
	Types["RGV_O15_ORC_RXEv2"] = reflect.TypeOf(RGV_O15_ORC_RXEv2{})
	Types["RGV_O15_ORC_RXE_TQ1v2"] = reflect.TypeOf(RGV_O15_ORC_RXE_TQ1v2{})
	Types["RGV_O15_ORC_RXGv2"] = reflect.TypeOf(RGV_O15_ORC_RXGv2{})
	Types["RGV_O15_ORC_RXG_TQ1v2"] = reflect.TypeOf(RGV_O15_ORC_RXG_TQ1v2{})
	Types["RGV_O15_ORC_RXG_OBXv2"] = reflect.TypeOf(RGV_O15_ORC_RXG_OBXv2{})
	Types["ROR_RORv2"] = reflect.TypeOf(ROR_RORv2{})
	Types["ROR_ROR_QRDv2"] = reflect.TypeOf(ROR_ROR_QRDv2{})
	Types["ROR_ROR_QRD_ORCv2"] = reflect.TypeOf(ROR_ROR_QRD_ORCv2{})
	Types["RPA_I08v2"] = reflect.TypeOf(RPA_I08v2{})
	Types["RPA_I08_PRDv2"] = reflect.TypeOf(RPA_I08_PRDv2{})
	Types["RPA_I08_IN1v2"] = reflect.TypeOf(RPA_I08_IN1v2{})
	Types["RPA_I08_PR1v2"] = reflect.TypeOf(RPA_I08_PR1v2{})
	Types["RPA_I08_OBRv2"] = reflect.TypeOf(RPA_I08_OBRv2{})
	Types["RPA_I08_OBR_OBXv2"] = reflect.TypeOf(RPA_I08_OBR_OBXv2{})
	Types["RPI_I01v2"] = reflect.TypeOf(RPI_I01v2{})
	Types["RPI_I01_PRDv2"] = reflect.TypeOf(RPI_I01_PRDv2{})
	Types["RPI_I01_IN1v2"] = reflect.TypeOf(RPI_I01_IN1v2{})
	Types["RPI_I04v2"] = reflect.TypeOf(RPI_I04v2{})
	Types["RPI_I04_PRDv2"] = reflect.TypeOf(RPI_I04_PRDv2{})
	Types["RPI_I04_IN1v2"] = reflect.TypeOf(RPI_I04_IN1v2{})
	Types["RPL_I02v2"] = reflect.TypeOf(RPL_I02v2{})
	Types["RPL_I02_PRDv2"] = reflect.TypeOf(RPL_I02_PRDv2{})
	Types["RPR_I03v2"] = reflect.TypeOf(RPR_I03v2{})
	Types["RPR_I03_PRDv2"] = reflect.TypeOf(RPR_I03_PRDv2{})
	Types["RQA_I08v2"] = reflect.TypeOf(RQA_I08v2{})
	Types["RQA_I08_PRDv2"] = reflect.TypeOf(RQA_I08_PRDv2{})
	Types["RQA_I08_IN1v2"] = reflect.TypeOf(RQA_I08_IN1v2{})
	Types["RQA_I08_PR1v2"] = reflect.TypeOf(RQA_I08_PR1v2{})
	Types["RQA_I08_OBRv2"] = reflect.TypeOf(RQA_I08_OBRv2{})
	Types["RQA_I08_OBR_OBXv2"] = reflect.TypeOf(RQA_I08_OBR_OBXv2{})
	Types["RQC_I05v2"] = reflect.TypeOf(RQC_I05v2{})
	Types["RQC_I05_PRDv2"] = reflect.TypeOf(RQC_I05_PRDv2{})
	Types["RQC_I06v2"] = reflect.TypeOf(RQC_I06v2{})
	Types["RQC_I06_PRDv2"] = reflect.TypeOf(RQC_I06_PRDv2{})
	Types["RQI_I01v2"] = reflect.TypeOf(RQI_I01v2{})
	Types["RQI_I01_PRDv2"] = reflect.TypeOf(RQI_I01_PRDv2{})
	Types["RQI_I01_IN1v2"] = reflect.TypeOf(RQI_I01_IN1v2{})
	Types["RQP_I04v2"] = reflect.TypeOf(RQP_I04v2{})
	Types["RQP_I04_PRDv2"] = reflect.TypeOf(RQP_I04_PRDv2{})
	Types["RQQ_Q01v2"] = reflect.TypeOf(RQQ_Q01v2{})
	Types["RQQ_Q09v2"] = reflect.TypeOf(RQQ_Q09v2{})
	Types["RRA_O02v2"] = reflect.TypeOf(RRA_O02v2{})
	Types["RRA_O02_PIDv2"] = reflect.TypeOf(RRA_O02_PIDv2{})
	Types["RRA_O02_PID_ORCv2"] = reflect.TypeOf(RRA_O02_PID_ORCv2{})
	Types["RRA_O18v2"] = reflect.TypeOf(RRA_O18v2{})
	Types["RRA_O18_PIDv2"] = reflect.TypeOf(RRA_O18_PIDv2{})
	Types["RRA_O18_PID_ORCv2"] = reflect.TypeOf(RRA_O18_PID_ORCv2{})
	Types["RRA_O18_PID_ORC_TQ1v2"] = reflect.TypeOf(RRA_O18_PID_ORC_TQ1v2{})
	Types["RRD_O02v2"] = reflect.TypeOf(RRD_O02v2{})
	Types["RRD_O02_PIDv2"] = reflect.TypeOf(RRD_O02_PIDv2{})
	Types["RRD_O02_PID_ORCv2"] = reflect.TypeOf(RRD_O02_PID_ORCv2{})
	Types["RRD_O14v2"] = reflect.TypeOf(RRD_O14v2{})
	Types["RRD_O14_PIDv2"] = reflect.TypeOf(RRD_O14_PIDv2{})
	Types["RRD_O14_PID_ORCv2"] = reflect.TypeOf(RRD_O14_PID_ORCv2{})
	Types["RRD_O14_PID_ORC_TQ1v2"] = reflect.TypeOf(RRD_O14_PID_ORC_TQ1v2{})
	Types["RRE_O02v2"] = reflect.TypeOf(RRE_O02v2{})
	Types["RRE_O02_PIDv2"] = reflect.TypeOf(RRE_O02_PIDv2{})
	Types["RRE_O02_PID_ORCv2"] = reflect.TypeOf(RRE_O02_PID_ORCv2{})
	Types["RRE_O12v2"] = reflect.TypeOf(RRE_O12v2{})
	Types["RRE_O12_PIDv2"] = reflect.TypeOf(RRE_O12_PIDv2{})
	Types["RRE_O12_PID_ORCv2"] = reflect.TypeOf(RRE_O12_PID_ORCv2{})
	Types["RRE_O12_PID_ORC_TQ11v2"] = reflect.TypeOf(RRE_O12_PID_ORC_TQ11v2{})
	Types["RRE_O12_PID_ORC_TQ12v2"] = reflect.TypeOf(RRE_O12_PID_ORC_TQ12v2{})
	Types["RRG_O02v2"] = reflect.TypeOf(RRG_O02v2{})
	Types["RRG_O02_PIDv2"] = reflect.TypeOf(RRG_O02_PIDv2{})
	Types["RRG_O02_PID_ORCv2"] = reflect.TypeOf(RRG_O02_PID_ORCv2{})
	Types["RRG_O16v2"] = reflect.TypeOf(RRG_O16v2{})
	Types["RRG_O16_PIDv2"] = reflect.TypeOf(RRG_O16_PIDv2{})
	Types["RRG_O16_PID_ORCv2"] = reflect.TypeOf(RRG_O16_PID_ORCv2{})
	Types["RRG_O16_PID_ORC_TQ11v2"] = reflect.TypeOf(RRG_O16_PID_ORC_TQ11v2{})
	Types["RRG_O16_PID_ORC_TQ12v2"] = reflect.TypeOf(RRG_O16_PID_ORC_TQ12v2{})
	Types["RRI_I12v2"] = reflect.TypeOf(RRI_I12v2{})
	Types["RRI_I12_PRDv2"] = reflect.TypeOf(RRI_I12_PRDv2{})
	Types["RRI_I12_PR1v2"] = reflect.TypeOf(RRI_I12_PR1v2{})
	Types["RRI_I12_OBRv2"] = reflect.TypeOf(RRI_I12_OBRv2{})
	Types["RRI_I12_OBR_OBXv2"] = reflect.TypeOf(RRI_I12_OBR_OBXv2{})
	Types["RRO_O02v2"] = reflect.TypeOf(RRO_O02v2{})
	Types["RRO_O02_PIDv2"] = reflect.TypeOf(RRO_O02_PIDv2{})
	Types["RRO_O02_PID_ORCv2"] = reflect.TypeOf(RRO_O02_PID_ORCv2{})
	Types["RSP_K11v2"] = reflect.TypeOf(RSP_K11v2{})
	Types["RSP_K13v2"] = reflect.TypeOf(RSP_K13v2{})
	Types["RSP_K15v2"] = reflect.TypeOf(RSP_K15v2{})
	Types["RSP_K21v2"] = reflect.TypeOf(RSP_K21v2{})
	Types["RSP_K22v2"] = reflect.TypeOf(RSP_K22v2{})
	Types["RSP_K22_PIDv2"] = reflect.TypeOf(RSP_K22_PIDv2{})
	Types["RSP_K23v2"] = reflect.TypeOf(RSP_K23v2{})
	Types["RSP_K24v2"] = reflect.TypeOf(RSP_K24v2{})
	Types["RSP_K25v2"] = reflect.TypeOf(RSP_K25v2{})
	Types["RSP_K25_STFv2"] = reflect.TypeOf(RSP_K25_STFv2{})
	Types["RSP_K31v2"] = reflect.TypeOf(RSP_K31v2{})
	Types["RSP_K31_PIDv2"] = reflect.TypeOf(RSP_K31_PIDv2{})
	Types["RSP_K31_PID_ORCv2"] = reflect.TypeOf(RSP_K31_PID_ORCv2{})
	Types["RSP_K31_PID_ORC_TQ1v2"] = reflect.TypeOf(RSP_K31_PID_ORC_TQ1v2{})
	Types["RSP_K31_PID_ORC_RXOv2"] = reflect.TypeOf(RSP_K31_PID_ORC_RXOv2{})
	Types["RSP_K31_PID_ORC_RXO_RXCv2"] = reflect.TypeOf(RSP_K31_PID_ORC_RXO_RXCv2{})
	Types["RSP_K31_PID_ORC_RXEv2"] = reflect.TypeOf(RSP_K31_PID_ORC_RXEv2{})
	Types["RSP_K31_PID_ORC_RXE_TQ1v2"] = reflect.TypeOf(RSP_K31_PID_ORC_RXE_TQ1v2{})
	Types["RSP_K31_PID_ORC_OBXv2"] = reflect.TypeOf(RSP_K31_PID_ORC_OBXv2{})
	Types["RSP_Q11v2"] = reflect.TypeOf(RSP_Q11v2{})
	Types["RSP_Q11_LDPv2"] = reflect.TypeOf(RSP_Q11_LDPv2{})
	Types["RSP_Z82v2"] = reflect.TypeOf(RSP_Z82v2{})
	Types["RSP_Z82_PIDv2"] = reflect.TypeOf(RSP_Z82_PIDv2{})
	Types["RSP_Z82_PID_ORCv2"] = reflect.TypeOf(RSP_Z82_PID_ORCv2{})
	Types["RSP_Z82_PID_ORC_TQ1v2"] = reflect.TypeOf(RSP_Z82_PID_ORC_TQ1v2{})
	Types["RSP_Z82_PID_ORC_RXOv2"] = reflect.TypeOf(RSP_Z82_PID_ORC_RXOv2{})
	Types["RSP_Z82_PID_ORC_RXO_RXCv2"] = reflect.TypeOf(RSP_Z82_PID_ORC_RXO_RXCv2{})
	Types["RSP_Z82_PID_ORC_RXEv2"] = reflect.TypeOf(RSP_Z82_PID_ORC_RXEv2{})
	Types["RSP_Z82_PID_ORC_RXE_TQ1v2"] = reflect.TypeOf(RSP_Z82_PID_ORC_RXE_TQ1v2{})
	Types["RSP_Z82_PID_ORC_OBXv2"] = reflect.TypeOf(RSP_Z82_PID_ORC_OBXv2{})
	Types["RSP_Z86v2"] = reflect.TypeOf(RSP_Z86v2{})
	Types["RSP_Z86_PIDv2"] = reflect.TypeOf(RSP_Z86_PIDv2{})
	Types["RSP_Z86_PID_ORCv2"] = reflect.TypeOf(RSP_Z86_PID_ORCv2{})
	Types["RSP_Z86_PID_ORC_TQ1v2"] = reflect.TypeOf(RSP_Z86_PID_ORC_TQ1v2{})
	Types["RSP_Z86_PID_ORC_RXEv2"] = reflect.TypeOf(RSP_Z86_PID_ORC_RXEv2{})
	Types["RSP_Z86_PID_ORC_RXE_TQ1v2"] = reflect.TypeOf(RSP_Z86_PID_ORC_RXE_TQ1v2{})
	Types["RSP_Z86_PID_ORC_RXDv2"] = reflect.TypeOf(RSP_Z86_PID_ORC_RXDv2{})
	Types["RSP_Z86_PID_ORC_RXGv2"] = reflect.TypeOf(RSP_Z86_PID_ORC_RXGv2{})
	Types["RSP_Z86_PID_ORC_RXAv2"] = reflect.TypeOf(RSP_Z86_PID_ORC_RXAv2{})
	Types["RSP_Z86_PID_ORC_OBXv2"] = reflect.TypeOf(RSP_Z86_PID_ORC_OBXv2{})
	Types["RSP_Z88v2"] = reflect.TypeOf(RSP_Z88v2{})
	Types["RSP_Z88_PIDv2"] = reflect.TypeOf(RSP_Z88_PIDv2{})
	Types["RSP_Z88_PID_ORCv2"] = reflect.TypeOf(RSP_Z88_PID_ORCv2{})
	Types["RSP_Z88_PID_ORC_TQ1v2"] = reflect.TypeOf(RSP_Z88_PID_ORC_TQ1v2{})
	Types["RSP_Z88_PID_ORC_RXOv2"] = reflect.TypeOf(RSP_Z88_PID_ORC_RXOv2{})
	Types["RSP_Z88_PID_ORC_RXO_RXCv2"] = reflect.TypeOf(RSP_Z88_PID_ORC_RXO_RXCv2{})
	Types["RSP_Z88_PID_ORC_RXEv2"] = reflect.TypeOf(RSP_Z88_PID_ORC_RXEv2{})
	Types["RSP_Z88_PID_ORC_RXE_TQ1v2"] = reflect.TypeOf(RSP_Z88_PID_ORC_RXE_TQ1v2{})
	Types["RSP_Z88_PID_ORC_OBXv2"] = reflect.TypeOf(RSP_Z88_PID_ORC_OBXv2{})
	Types["RSP_Z90v2"] = reflect.TypeOf(RSP_Z90v2{})
	Types["RSP_Z90_PIDv2"] = reflect.TypeOf(RSP_Z90_PIDv2{})
	Types["RSP_Z90_PID_ORCv2"] = reflect.TypeOf(RSP_Z90_PID_ORCv2{})
	Types["RSP_Z90_PID_ORC_TQ1v2"] = reflect.TypeOf(RSP_Z90_PID_ORC_TQ1v2{})
	Types["RSP_Z90_PID_ORC_OBXv2"] = reflect.TypeOf(RSP_Z90_PID_ORC_OBXv2{})
	Types["RSP_Z90_PID_SPMv2"] = reflect.TypeOf(RSP_Z90_PID_SPMv2{})
	Types["RTB_K13v2"] = reflect.TypeOf(RTB_K13v2{})
	Types["RTB_Knnv2"] = reflect.TypeOf(RTB_Knnv2{})
	Types["RTB_Q13v2"] = reflect.TypeOf(RTB_Q13v2{})
	Types["RTB_Z74v2"] = reflect.TypeOf(RTB_Z74v2{})
	Types["SIU_S12v2"] = reflect.TypeOf(SIU_S12v2{})
	Types["SIU_S12_PIDv2"] = reflect.TypeOf(SIU_S12_PIDv2{})
	Types["SIU_S12_RGSv2"] = reflect.TypeOf(SIU_S12_RGSv2{})
	Types["SIU_S12_RGS_AISv2"] = reflect.TypeOf(SIU_S12_RGS_AISv2{})
	Types["SIU_S12_RGS_AIGv2"] = reflect.TypeOf(SIU_S12_RGS_AIGv2{})
	Types["SIU_S12_RGS_AILv2"] = reflect.TypeOf(SIU_S12_RGS_AILv2{})
	Types["SIU_S12_RGS_AIPv2"] = reflect.TypeOf(SIU_S12_RGS_AIPv2{})
	Types["SPQ_Q01v2"] = reflect.TypeOf(SPQ_Q01v2{})
	Types["SPQ_Q08v2"] = reflect.TypeOf(SPQ_Q08v2{})
	Types["SQM_S25v2"] = reflect.TypeOf(SQM_S25v2{})
	Types["SQM_S25_RGSv2"] = reflect.TypeOf(SQM_S25_RGSv2{})
	Types["SQM_S25_RGS_AISv2"] = reflect.TypeOf(SQM_S25_RGS_AISv2{})
	Types["SQM_S25_RGS_AIGv2"] = reflect.TypeOf(SQM_S25_RGS_AIGv2{})
	Types["SQM_S25_RGS_AIPv2"] = reflect.TypeOf(SQM_S25_RGS_AIPv2{})
	Types["SQM_S25_RGS_AILv2"] = reflect.TypeOf(SQM_S25_RGS_AILv2{})
	Types["SQR_S25v2"] = reflect.TypeOf(SQR_S25v2{})
	Types["SQR_S25_SCHv2"] = reflect.TypeOf(SQR_S25_SCHv2{})
	Types["SQR_S25_SCH_RGSv2"] = reflect.TypeOf(SQR_S25_SCH_RGSv2{})
	Types["SQR_S25_SCH_RGS_AISv2"] = reflect.TypeOf(SQR_S25_SCH_RGS_AISv2{})
	Types["SQR_S25_SCH_RGS_AIGv2"] = reflect.TypeOf(SQR_S25_SCH_RGS_AIGv2{})
	Types["SQR_S25_SCH_RGS_AIPv2"] = reflect.TypeOf(SQR_S25_SCH_RGS_AIPv2{})
	Types["SQR_S25_SCH_RGS_AILv2"] = reflect.TypeOf(SQR_S25_SCH_RGS_AILv2{})
	Types["SRM_S01v2"] = reflect.TypeOf(SRM_S01v2{})
	Types["SRM_S01_PIDv2"] = reflect.TypeOf(SRM_S01_PIDv2{})
	Types["SRM_S01_RGSv2"] = reflect.TypeOf(SRM_S01_RGSv2{})
	Types["SRM_S01_RGS_AISv2"] = reflect.TypeOf(SRM_S01_RGS_AISv2{})
	Types["SRM_S01_RGS_AIGv2"] = reflect.TypeOf(SRM_S01_RGS_AIGv2{})
	Types["SRM_S01_RGS_AILv2"] = reflect.TypeOf(SRM_S01_RGS_AILv2{})
	Types["SRM_S01_RGS_AIPv2"] = reflect.TypeOf(SRM_S01_RGS_AIPv2{})
	Types["SRR_S01v2"] = reflect.TypeOf(SRR_S01v2{})
	Types["SRR_S01_PIDv2"] = reflect.TypeOf(SRR_S01_PIDv2{})
	Types["SRR_S01_RGSv2"] = reflect.TypeOf(SRR_S01_RGSv2{})
	Types["SRR_S01_RGS_AISv2"] = reflect.TypeOf(SRR_S01_RGS_AISv2{})
	Types["SRR_S01_RGS_AIGv2"] = reflect.TypeOf(SRR_S01_RGS_AIGv2{})
	Types["SRR_S01_RGS_AILv2"] = reflect.TypeOf(SRR_S01_RGS_AILv2{})
	Types["SRR_S01_RGS_AIPv2"] = reflect.TypeOf(SRR_S01_RGS_AIPv2{})
	Types["SSR_U04v2"] = reflect.TypeOf(SSR_U04v2{})
	Types["SSR_U04_SACv2"] = reflect.TypeOf(SSR_U04_SACv2{})
	Types["SSU_U03v2"] = reflect.TypeOf(SSU_U03v2{})
	Types["SSU_U03_SACv2"] = reflect.TypeOf(SSU_U03_SACv2{})
	Types["SSU_U03_SAC_SPMv2"] = reflect.TypeOf(SSU_U03_SAC_SPMv2{})
	Types["SUR_P09v2"] = reflect.TypeOf(SUR_P09v2{})
	Types["SUR_P09_FACv2"] = reflect.TypeOf(SUR_P09_FACv2{})
	Types["SUR_P09_FAC_PSH1v2"] = reflect.TypeOf(SUR_P09_FAC_PSH1v2{})
	Types["SUR_P09_FAC_FAC2v2"] = reflect.TypeOf(SUR_P09_FAC_FAC2v2{})
	Types["TBR_Q01v2"] = reflect.TypeOf(TBR_Q01v2{})
	Types["TBR_R08v2"] = reflect.TypeOf(TBR_R08v2{})
	Types["TCU_U10v2"] = reflect.TypeOf(TCU_U10v2{})
	Types["TCU_U10_TCCv2"] = reflect.TypeOf(TCU_U10_TCCv2{})
	Types["UDM_Q05v2"] = reflect.TypeOf(UDM_Q05v2{})
	Types["VQQ_Q01v2"] = reflect.TypeOf(VQQ_Q01v2{})
	Types["VQQ_Q07v2"] = reflect.TypeOf(VQQ_Q07v2{})
	Types["VXQ_V01v2"] = reflect.TypeOf(VXQ_V01v2{})
	Types["VXR_V03v2"] = reflect.TypeOf(VXR_V03v2{})
	Types["VXR_V03_IN1v2"] = reflect.TypeOf(VXR_V03_IN1v2{})
	Types["VXR_V03_ORCv2"] = reflect.TypeOf(VXR_V03_ORCv2{})
	Types["VXR_V03_ORC_TQ1v2"] = reflect.TypeOf(VXR_V03_ORC_TQ1v2{})
	Types["VXR_V03_ORC_OBXv2"] = reflect.TypeOf(VXR_V03_ORC_OBXv2{})
	Types["VXU_V04v2"] = reflect.TypeOf(VXU_V04v2{})
	Types["VXU_V04_IN1v2"] = reflect.TypeOf(VXU_V04_IN1v2{})
	Types["VXU_V04_ORCv2"] = reflect.TypeOf(VXU_V04_ORCv2{})
	Types["VXU_V04_ORC_TQ1v2"] = reflect.TypeOf(VXU_V04_ORC_TQ1v2{})
	Types["VXU_V04_ORC_OBXv2"] = reflect.TypeOf(VXU_V04_ORC_OBXv2{})
	Types["VXX_V02v2"] = reflect.TypeOf(VXX_V02v2{})
	Types["VXX_V02_PIDv2"] = reflect.TypeOf(VXX_V02_PIDv2{})
}

var FollowSets = map[string]StringSet{
	"ACK_N02v2.msa": StringSet{},
	"ACK_N02v2.msh": StringSet{
		"MSA": true,
	},
	"ACKv2.err": StringSet{
		"ERR": true,
	},
	"ACKv2.msa": StringSet{
		"ERR": true,
	},
	"ACKv2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"SFT": true,
	},
	"ACKv2.sft": StringSet{
		"ERR": true,
		"MSA": true,
		"SFT": true,
	},
	"ADR_A19_PID_IN1v2.in1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PID_IN1v2.in2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PID_IN1v2.in3": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PID_IN1v2.rol": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PID_PR1v2.pr1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PID_PR1v2.rol": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.acc": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.db1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.dg1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.drg": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.gt1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.pd1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.rol1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.rol2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.ub1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19_PIDv2.ub2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19v2.dsc": StringSet{},
	"ADR_A19v2.err": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19v2.msa": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"ERR": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"ERR": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19v2.qak": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"QRF": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19v2.qrd": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QRF": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19v2.qrf": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADR_A19v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"ERR": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01_IN1v2.rol": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01_PR1v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01_PR1v2.rol": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.acc": StringSet{
		"PDA": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.db1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.drg": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.pd1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.pda": StringSet{},
	"ADT_A01v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.rol1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.rol2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A01v2.ub1": StringSet{
		"PDA": true,
		"UB2": true,
	},
	"ADT_A01v2.ub2": StringSet{
		"PDA": true,
	},
	"ADT_A02v2.db1": StringSet{
		"DB1": true,
		"OBX": true,
		"PDA": true,
	},
	"ADT_A02v2.evn": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A02v2.msh": StringSet{
		"DB1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A02v2.obx": StringSet{
		"OBX": true,
		"PDA": true,
	},
	"ADT_A02v2.pd1": StringSet{
		"DB1": true,
		"OBX": true,
		"PDA": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A02v2.pda": StringSet{},
	"ADT_A02v2.pid": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A02v2.pv1": StringSet{
		"DB1": true,
		"OBX": true,
		"PDA": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A02v2.pv2": StringSet{
		"DB1": true,
		"OBX": true,
		"PDA": true,
		"ROL": true,
	},
	"ADT_A02v2.rol1": StringSet{
		"DB1": true,
		"OBX": true,
		"PDA": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A02v2.rol2": StringSet{
		"DB1": true,
		"OBX": true,
		"PDA": true,
		"ROL": true,
	},
	"ADT_A02v2.sft": StringSet{
		"DB1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A03_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
	},
	"ADT_A03_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
	},
	"ADT_A03_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
	},
	"ADT_A03_IN1v2.rol": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
	},
	"ADT_A03_PR1v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A03_PR1v2.rol": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A03v2.acc": StringSet{
		"PDA": true,
	},
	"ADT_A03v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A03v2.db1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A03v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A03v2.drg": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A03v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A03v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PDA": true,
		"ROL": true,
	},
	"ADT_A03v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A03v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A03v2.obx": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"ROL": true,
	},
	"ADT_A03v2.pd1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A03v2.pda": StringSet{},
	"ADT_A03v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A03v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A03v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A03v2.rol1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A03v2.rol2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PDA": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A03v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PDA": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A04_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A04v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A04v2.ub2": StringSet{},
	"ADT_A05_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05_IN1v2.rol": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05_PR1v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05_PR1v2.rol": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.db1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.drg": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.pd1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.rol1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.rol2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A05v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A05v2.ub2": StringSet{},
	"ADT_A06_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06_IN1v2.rol": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06_PR1v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06_PR1v2.rol": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.db1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.drg": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.mrg": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.pd1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.rol1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.rol2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A06v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A06v2.ub2": StringSet{},
	"ADT_A07_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.mrg": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MRG": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A07v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A07v2.ub2": StringSet{},
	"ADT_A08_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A08v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A08v2.ub2": StringSet{},
	"ADT_A09v2.db1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
	},
	"ADT_A09v2.dg1": StringSet{
		"DG1": true,
	},
	"ADT_A09v2.evn": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A09v2.msh": StringSet{
		"DB1": true,
		"DG1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A09v2.obx": StringSet{
		"DG1": true,
		"OBX": true,
	},
	"ADT_A09v2.pd1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A09v2.pid": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A09v2.pv1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PV2": true,
	},
	"ADT_A09v2.pv2": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
	},
	"ADT_A09v2.sft": StringSet{
		"DB1": true,
		"DG1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A10v2.dg1": StringSet{
		"DG1": true,
	},
	"ADT_A10v2.evn": StringSet{
		"DG1": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A10v2.msh": StringSet{
		"DG1": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A10v2.obx": StringSet{
		"DG1": true,
		"OBX": true,
	},
	"ADT_A10v2.pid": StringSet{
		"DG1": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A10v2.pv1": StringSet{
		"DG1": true,
		"OBX": true,
		"PV2": true,
	},
	"ADT_A10v2.pv2": StringSet{
		"DG1": true,
		"OBX": true,
	},
	"ADT_A11v2.dg1": StringSet{
		"DG1": true,
	},
	"ADT_A11v2.evn": StringSet{
		"DG1": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A11v2.msh": StringSet{
		"DG1": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A11v2.obx": StringSet{
		"DG1": true,
		"OBX": true,
	},
	"ADT_A11v2.pid": StringSet{
		"DG1": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A11v2.pv1": StringSet{
		"DG1": true,
		"OBX": true,
		"PV2": true,
	},
	"ADT_A11v2.pv2": StringSet{
		"DG1": true,
		"OBX": true,
	},
	"ADT_A12v2.db1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
	},
	"ADT_A12v2.dg1": StringSet{},
	"ADT_A12v2.evn": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A12v2.msh": StringSet{
		"DB1": true,
		"DG1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A12v2.obx": StringSet{
		"DG1": true,
		"OBX": true,
	},
	"ADT_A12v2.pd1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A12v2.pid": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A12v2.pv1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PV2": true,
	},
	"ADT_A12v2.pv2": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
	},
	"ADT_A12v2.sft": StringSet{
		"DB1": true,
		"DG1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A13_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A13v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A13v2.ub2": StringSet{},
	"ADT_A14_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A14v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A14v2.ub2": StringSet{},
	"ADT_A15v2.db1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
	},
	"ADT_A15v2.dg1": StringSet{
		"DG1": true,
	},
	"ADT_A15v2.evn": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A15v2.msh": StringSet{
		"DB1": true,
		"DG1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A15v2.obx": StringSet{
		"DG1": true,
		"OBX": true,
	},
	"ADT_A15v2.pd1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A15v2.pid": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A15v2.pv1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A15v2.pv2": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"ROL": true,
	},
	"ADT_A15v2.rol1": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A15v2.rol2": StringSet{
		"DB1": true,
		"DG1": true,
		"OBX": true,
		"ROL": true,
	},
	"ADT_A15v2.sft": StringSet{
		"DB1": true,
		"DG1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A16_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"ADT_A16_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"ADT_A16_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"ADT_A16_IN1v2.rol": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"ADT_A16_PR1v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16_PR1v2.rol": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16v2.acc": StringSet{},
	"ADT_A16v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16v2.db1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16v2.drg": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A16v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"ADT_A16v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A16v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A16v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16v2.pd1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A16v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A16v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A16v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16v2.rol1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A16v2.rol2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"ROL": true,
	},
	"ADT_A16v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A17v2.db11": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.db12": StringSet{
		"DB1": true,
		"OBX": true,
	},
	"ADT_A17v2.evn": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.msh": StringSet{
		"DB1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A17v2.obx1": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.obx2": StringSet{
		"OBX": true,
	},
	"ADT_A17v2.pd11": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.pd12": StringSet{
		"DB1": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.pid1": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.pid2": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.pv11": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.pv12": StringSet{
		"DB1": true,
		"OBX": true,
		"PV2": true,
	},
	"ADT_A17v2.pv21": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A17v2.pv22": StringSet{
		"DB1": true,
		"OBX": true,
	},
	"ADT_A17v2.sft": StringSet{
		"DB1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A18v2.evn": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A18v2.mrg": StringSet{
		"PV1": true,
	},
	"ADT_A18v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A18v2.pd1": StringSet{
		"MRG": true,
		"PV1": true,
	},
	"ADT_A18v2.pid": StringSet{
		"MRG": true,
		"PD1": true,
		"PV1": true,
	},
	"ADT_A18v2.pv1": StringSet{},
	"ADT_A18v2.sft": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A20v2.evn": StringSet{
		"NPU": true,
	},
	"ADT_A20v2.msh": StringSet{
		"EVN": true,
		"NPU": true,
		"SFT": true,
	},
	"ADT_A20v2.npu": StringSet{},
	"ADT_A20v2.sft": StringSet{
		"EVN": true,
		"NPU": true,
		"SFT": true,
	},
	"ADT_A21v2.db1": StringSet{
		"DB1": true,
		"OBX": true,
	},
	"ADT_A21v2.evn": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A21v2.msh": StringSet{
		"DB1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A21v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A21v2.pd1": StringSet{
		"DB1": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A21v2.pid": StringSet{
		"DB1": true,
		"OBX": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A21v2.pv1": StringSet{
		"DB1": true,
		"OBX": true,
		"PV2": true,
	},
	"ADT_A21v2.pv2": StringSet{
		"DB1": true,
		"OBX": true,
	},
	"ADT_A21v2.sft": StringSet{
		"DB1": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A22v2.evn": StringSet{
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A22v2.msh": StringSet{
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A22v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A22v2.pid": StringSet{
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A22v2.pv1": StringSet{
		"OBX": true,
		"PV2": true,
	},
	"ADT_A22v2.pv2": StringSet{
		"OBX": true,
	},
	"ADT_A23v2.evn": StringSet{
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A23v2.msh": StringSet{
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A23v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A23v2.pid": StringSet{
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A23v2.pv1": StringSet{
		"OBX": true,
		"PV2": true,
	},
	"ADT_A23v2.pv2": StringSet{
		"OBX": true,
	},
	"ADT_A24v2.db11": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A24v2.db12": StringSet{
		"DB1": true,
	},
	"ADT_A24v2.evn": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A24v2.msh": StringSet{
		"DB1": true,
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A24v2.pd11": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A24v2.pd12": StringSet{
		"DB1": true,
		"PV1": true,
	},
	"ADT_A24v2.pid1": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A24v2.pid2": StringSet{
		"DB1": true,
		"PD1": true,
		"PV1": true,
	},
	"ADT_A24v2.pv11": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A24v2.pv12": StringSet{
		"DB1": true,
	},
	"ADT_A24v2.sft": StringSet{
		"DB1": true,
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A25v2.evn": StringSet{
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A25v2.msh": StringSet{
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A25v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A25v2.pid": StringSet{
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A25v2.pv1": StringSet{
		"OBX": true,
		"PV2": true,
	},
	"ADT_A25v2.pv2": StringSet{
		"OBX": true,
	},
	"ADT_A26v2.evn": StringSet{
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A26v2.msh": StringSet{
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A26v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A26v2.pid": StringSet{
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A26v2.pv1": StringSet{
		"OBX": true,
		"PV2": true,
	},
	"ADT_A26v2.pv2": StringSet{
		"OBX": true,
	},
	"ADT_A27v2.evn": StringSet{
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A27v2.msh": StringSet{
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A27v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A27v2.pid": StringSet{
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A27v2.pv1": StringSet{
		"OBX": true,
		"PV2": true,
	},
	"ADT_A27v2.pv2": StringSet{
		"OBX": true,
	},
	"ADT_A28_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A28v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A28v2.ub2": StringSet{},
	"ADT_A29v2.evn": StringSet{
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A29v2.msh": StringSet{
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A29v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A29v2.pid": StringSet{
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A29v2.pv1": StringSet{
		"OBX": true,
		"PV2": true,
	},
	"ADT_A29v2.pv2": StringSet{
		"OBX": true,
	},
	"ADT_A30v2.evn": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A30v2.mrg": StringSet{},
	"ADT_A30v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"SFT": true,
	},
	"ADT_A30v2.pd1": StringSet{
		"MRG": true,
	},
	"ADT_A30v2.pid": StringSet{
		"MRG": true,
		"PD1": true,
	},
	"ADT_A30v2.sft": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"SFT": true,
	},
	"ADT_A31_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.acc": StringSet{
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.pr1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"OBX": true,
		"PR1": true,
		"UB1": true,
		"UB2": true,
	},
	"ADT_A31v2.ub1": StringSet{
		"UB2": true,
	},
	"ADT_A31v2.ub2": StringSet{},
	"ADT_A32v2.evn": StringSet{
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A32v2.msh": StringSet{
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A32v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A32v2.pid": StringSet{
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A32v2.pv1": StringSet{
		"OBX": true,
		"PV2": true,
	},
	"ADT_A32v2.pv2": StringSet{
		"OBX": true,
	},
	"ADT_A33v2.evn": StringSet{
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A33v2.msh": StringSet{
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A33v2.obx": StringSet{
		"OBX": true,
	},
	"ADT_A33v2.pid": StringSet{
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A33v2.pv1": StringSet{
		"OBX": true,
		"PV2": true,
	},
	"ADT_A33v2.pv2": StringSet{
		"OBX": true,
	},
	"ADT_A34v2.evn": StringSet{
		"MRG": true,
		"PID": true,
	},
	"ADT_A34v2.mrg": StringSet{},
	"ADT_A34v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PID": true,
	},
	"ADT_A34v2.pid": StringSet{
		"MRG": true,
	},
	"ADT_A35v2.evn": StringSet{
		"MRG": true,
		"PID": true,
	},
	"ADT_A35v2.mrg": StringSet{},
	"ADT_A35v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PID": true,
	},
	"ADT_A35v2.pid": StringSet{
		"MRG": true,
	},
	"ADT_A36v2.evn": StringSet{
		"MRG": true,
		"PID": true,
	},
	"ADT_A36v2.mrg": StringSet{},
	"ADT_A36v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PID": true,
	},
	"ADT_A36v2.pid": StringSet{
		"MRG": true,
	},
	"ADT_A37v2.db11": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A37v2.db12": StringSet{
		"DB1": true,
	},
	"ADT_A37v2.evn": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A37v2.msh": StringSet{
		"DB1": true,
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A37v2.pd11": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A37v2.pd12": StringSet{
		"DB1": true,
		"PV1": true,
	},
	"ADT_A37v2.pid1": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A37v2.pid2": StringSet{
		"DB1": true,
		"PD1": true,
		"PV1": true,
	},
	"ADT_A37v2.pv11": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A37v2.pv12": StringSet{
		"DB1": true,
	},
	"ADT_A37v2.sft": StringSet{
		"DB1": true,
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A38v2.db1": StringSet{
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"OBX": true,
	},
	"ADT_A38v2.dg1": StringSet{
		"DG1": true,
		"DRG": true,
	},
	"ADT_A38v2.drg": StringSet{},
	"ADT_A38v2.evn": StringSet{
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A38v2.msh": StringSet{
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A38v2.obx": StringSet{
		"DG1": true,
		"DRG": true,
		"OBX": true,
	},
	"ADT_A38v2.pd1": StringSet{
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A38v2.pid": StringSet{
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"OBX": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A38v2.pv1": StringSet{
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"OBX": true,
		"PV2": true,
	},
	"ADT_A38v2.pv2": StringSet{
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"OBX": true,
	},
	"ADT_A38v2.sft": StringSet{
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A39_PIDv2.mrg": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A39_PIDv2.pd1": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A39_PIDv2.pid": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A39_PIDv2.pv1": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A39v2.evn": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A39v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A39v2.sft": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A40_PIDv2.mrg": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A40_PIDv2.pd1": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A40_PIDv2.pid": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A40_PIDv2.pv1": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A40v2.evn": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A40v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A43_PIDv2.mrg": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A43_PIDv2.pd1": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A43_PIDv2.pid": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A43v2.evn": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A43v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"SFT": true,
	},
	"ADT_A43v2.sft": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"SFT": true,
	},
	"ADT_A44_PIDv2.mrg": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A44_PIDv2.pd1": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A44_PIDv2.pid": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A44v2.evn": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A44v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
	},
	"ADT_A45_MRGv2.mrg": StringSet{
		"MRG": true,
		"PV1": true,
	},
	"ADT_A45_MRGv2.pv1": StringSet{
		"MRG": true,
		"PV1": true,
	},
	"ADT_A45v2.evn": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A45v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A45v2.pd1": StringSet{
		"MRG": true,
		"PV1": true,
	},
	"ADT_A45v2.pid": StringSet{
		"MRG": true,
		"PD1": true,
		"PV1": true,
	},
	"ADT_A45v2.sft": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A50v2.evn": StringSet{
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"ADT_A50v2.mrg": StringSet{
		"PV1": true,
	},
	"ADT_A50v2.msh": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A50v2.pd1": StringSet{
		"MRG": true,
		"PV1": true,
	},
	"ADT_A50v2.pid": StringSet{
		"MRG": true,
		"PD1": true,
		"PV1": true,
	},
	"ADT_A50v2.pv1": StringSet{},
	"ADT_A50v2.sft": StringSet{
		"EVN": true,
		"MRG": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"ADT_A52v2.evn": StringSet{
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A52v2.msh": StringSet{
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A52v2.pd1": StringSet{
		"PV1": true,
		"PV2": true,
	},
	"ADT_A52v2.pid": StringSet{
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A52v2.pv1": StringSet{
		"PV2": true,
	},
	"ADT_A52v2.pv2": StringSet{},
	"ADT_A52v2.sft": StringSet{
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A54v2.evn": StringSet{
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A54v2.msh": StringSet{
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A54v2.pd1": StringSet{
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A54v2.pid": StringSet{
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A54v2.pv1": StringSet{
		"PV2": true,
		"ROL": true,
	},
	"ADT_A54v2.pv2": StringSet{
		"ROL": true,
	},
	"ADT_A54v2.rol1": StringSet{
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A54v2.rol2": StringSet{
		"ROL": true,
	},
	"ADT_A54v2.sft": StringSet{
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A60v2.evn": StringSet{
		"IAM": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A60v2.iam": StringSet{
		"IAM": true,
	},
	"ADT_A60v2.msh": StringSet{
		"EVN": true,
		"IAM": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A60v2.pid": StringSet{
		"IAM": true,
		"PV1": true,
		"PV2": true,
	},
	"ADT_A60v2.pv1": StringSet{
		"IAM": true,
		"PV2": true,
	},
	"ADT_A60v2.pv2": StringSet{
		"IAM": true,
	},
	"ADT_A60v2.sft": StringSet{
		"EVN": true,
		"IAM": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
	},
	"ADT_A61v2.evn": StringSet{
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A61v2.msh": StringSet{
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ADT_A61v2.pd1": StringSet{
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A61v2.pid": StringSet{
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
	},
	"ADT_A61v2.pv1": StringSet{
		"PV2": true,
		"ROL": true,
	},
	"ADT_A61v2.pv2": StringSet{},
	"ADT_A61v2.rol": StringSet{
		"PV2": true,
		"ROL": true,
	},
	"ADT_A61v2.sft": StringSet{
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
	},
	"ARD_A19_PID_IN1v2.in1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PID_IN1v2.in2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PID_IN1v2.in3": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PID_PR1v2.pr1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PID_PR1v2.rol": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.acc": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.db1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.dg1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.drg": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.gt1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.pd1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.ub1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19_PIDv2.ub2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19v2.dsc": StringSet{},
	"ARD_A19v2.err": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"QRF": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19v2.msa": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"ERR": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"QRF": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"ERR": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"QRF": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19v2.qrd": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"QRF": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"ARD_A19v2.qrf": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1_IN1v2.in1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1_IN1v2.in2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1_IN1v2.in3": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1_IN1v2.rol": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1_PR1v2.pr1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1_PR1v2.rol": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.acc": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.al1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.db1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.dg1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.drg": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.gt1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.obx": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.pv1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.pv2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.rol": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.ub1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01_PV1v2.ub2": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01v2.evn": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01v2.pd1": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01v2.rol": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P01v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P02_PIDv2.db1": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"BAR_P02_PIDv2.pd1": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"BAR_P02_PIDv2.pid": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"BAR_P02_PIDv2.pv1": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"BAR_P02v2.evn": StringSet{
		"DB1": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
	},
	"BAR_P02v2.msh": StringSet{
		"DB1": true,
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"BAR_P02v2.sft": StringSet{
		"DB1": true,
		"EVN": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"BAR_P05_PV1_IN1v2.in1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1_IN1v2.in2": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1_IN1v2.in3": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1_IN1v2.rol": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1_PR1v2.pr1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1_PR1v2.rol": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.abs": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.acc": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.al1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.blc": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.db1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.dg1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.drg": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.gt1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.nk1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.obx": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.pv1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.pv2": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.rmi": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.rol": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.ub1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05_PV1v2.ub2": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05v2.evn": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05v2.msh": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05v2.pd1": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05v2.pid": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05v2.rol": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P05v2.sft": StringSet{
		"ABS": true,
		"ACC": true,
		"AL1": true,
		"BLC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"RMI": true,
		"ROL": true,
		"SFT": true,
		"UB1": true,
		"UB2": true,
	},
	"BAR_P06_PIDv2.pid": StringSet{
		"PID": true,
		"PV1": true,
	},
	"BAR_P06_PIDv2.pv1": StringSet{
		"PID": true,
		"PV1": true,
	},
	"BAR_P06v2.evn": StringSet{
		"PID": true,
		"PV1": true,
	},
	"BAR_P06v2.msh": StringSet{
		"EVN": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"BAR_P06v2.sft": StringSet{
		"EVN": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"BAR_P10_PR1v2.gp2": StringSet{
		"GP2": true,
		"PR1": true,
	},
	"BAR_P10_PR1v2.pr1": StringSet{
		"GP2": true,
		"PR1": true,
	},
	"BAR_P10v2.dg1": StringSet{
		"DG1": true,
		"GP1": true,
		"GP2": true,
		"PR1": true,
	},
	"BAR_P10v2.evn": StringSet{
		"DG1": true,
		"GP1": true,
		"GP2": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
	},
	"BAR_P10v2.gp1": StringSet{
		"GP2": true,
		"PR1": true,
	},
	"BAR_P10v2.msh": StringSet{
		"DG1": true,
		"EVN": true,
		"GP1": true,
		"GP2": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"SFT": true,
	},
	"BAR_P10v2.pid": StringSet{
		"DG1": true,
		"GP1": true,
		"GP2": true,
		"PR1": true,
		"PV1": true,
	},
	"BAR_P10v2.pv1": StringSet{
		"DG1": true,
		"GP1": true,
		"GP2": true,
		"PR1": true,
	},
	"BAR_P10v2.sft": StringSet{
		"DG1": true,
		"EVN": true,
		"GP1": true,
		"GP2": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"SFT": true,
	},
	"BAR_P12_PR1v2.pr1": StringSet{
		"PR1": true,
		"ROL": true,
	},
	"BAR_P12_PR1v2.rol": StringSet{
		"PR1": true,
		"ROL": true,
	},
	"BAR_P12v2.dg1": StringSet{
		"DG1": true,
		"DRG": true,
		"PR1": true,
		"ROL": true,
	},
	"BAR_P12v2.drg": StringSet{
		"PR1": true,
		"ROL": true,
	},
	"BAR_P12v2.evn": StringSet{
		"DG1": true,
		"DRG": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"ROL": true,
	},
	"BAR_P12v2.msh": StringSet{
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"ROL": true,
		"SFT": true,
	},
	"BAR_P12v2.pid": StringSet{
		"DG1": true,
		"DRG": true,
		"PR1": true,
		"PV1": true,
		"ROL": true,
	},
	"BAR_P12v2.pv1": StringSet{
		"DG1": true,
		"DRG": true,
		"PR1": true,
		"ROL": true,
	},
	"BAR_P12v2.sft": StringSet{
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"ROL": true,
		"SFT": true,
	},
	"BPS_O29_ORC_BPXv2.bpx": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_ORC_BPXv2.nte": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_ORC_TQ1v2.tq1": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_ORC_TQ1v2.tq2": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_ORCv2.bpo": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_ORCv2.nte": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_ORCv2.orc": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_PIDv2.nte": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_PIDv2.pd1": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_PIDv2.pid": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_PIDv2.pv1": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29_PIDv2.pv2": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29v2.msh": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29v2.nte": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BPS_O29v2.sft": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30_ORC_TQ1v2.tq1": StringSet{
		"BPO": true,
		"BPX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30_ORC_TQ1v2.tq2": StringSet{
		"BPO": true,
		"BPX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30_ORCv2.bpo": StringSet{
		"BPO": true,
		"BPX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30_ORCv2.bpx": StringSet{
		"BPO": true,
		"BPX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30_ORCv2.orc": StringSet{
		"BPO": true,
		"BPX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30v2.err": StringSet{
		"BPO": true,
		"BPX": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30v2.msa": StringSet{
		"BPO": true,
		"BPX": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30v2.msh": StringSet{
		"BPO": true,
		"BPX": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30v2.nte": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30v2.pid": StringSet{
		"BPO": true,
		"BPX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRP_O30v2.sft": StringSet{
		"BPO": true,
		"BPX": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32_ORC_TQ1v2.tq1": StringSet{
		"BPO": true,
		"BTX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32_ORC_TQ1v2.tq2": StringSet{
		"BPO": true,
		"BTX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32_ORCv2.bpo": StringSet{
		"BPO": true,
		"BTX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32_ORCv2.btx": StringSet{
		"BPO": true,
		"BTX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32_ORCv2.orc": StringSet{
		"BPO": true,
		"BTX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32v2.err": StringSet{
		"BPO": true,
		"BTX": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32v2.msa": StringSet{
		"BPO": true,
		"BTX": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32v2.msh": StringSet{
		"BPO": true,
		"BTX": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32v2.nte": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32v2.pid": StringSet{
		"BPO": true,
		"BTX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BRT_O32v2.sft": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_ORC_BTXv2.btx": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_ORC_BTXv2.nte": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_ORC_TQ1v2.tq1": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_ORC_TQ1v2.tq2": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_ORCv2.bpo": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_ORCv2.nte": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_ORCv2.orc": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_PIDv2.nte": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_PIDv2.pd1": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_PIDv2.pid": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_PIDv2.pv1": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31_PIDv2.pv2": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31v2.msh": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31v2.nte": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"BTS_O31v2.sft": StringSet{
		"BPO": true,
		"BTX": true,
		"NTE": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CRM_C01_PIDv2.csp": StringSet{
		"CSP": true,
		"CSR": true,
		"PID": true,
		"PV1": true,
	},
	"CRM_C01_PIDv2.csr": StringSet{
		"CSP": true,
		"CSR": true,
		"PID": true,
		"PV1": true,
	},
	"CRM_C01_PIDv2.pid": StringSet{
		"CSP": true,
		"CSR": true,
		"PID": true,
		"PV1": true,
	},
	"CRM_C01_PIDv2.pv1": StringSet{
		"CSP": true,
		"CSR": true,
		"PID": true,
		"PV1": true,
	},
	"CRM_C01v2.msh": StringSet{
		"CSP": true,
		"CSR": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"CRM_C01v2.sft": StringSet{
		"CSP": true,
		"CSR": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
	},
	"CSU_C09_PID_CSP_CSS_OBR_TQ1v2.tq1": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSP_CSS_OBR_TQ1v2.tq2": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSP_CSS_OBRv2.obr": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSP_CSS_OBRv2.obx": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSP_CSS_OBRv2.orc": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSP_CSS_ORC_RXAv2.rxa": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSP_CSS_ORC_RXAv2.rxr": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSP_CSS_ORCv2.orc": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSP_CSSv2.css": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PID_CSPv2.csp": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PIDv2.csr": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PIDv2.nte": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PIDv2.pd1": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PIDv2.pid": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PIDv2.pv1": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09_PIDv2.pv2": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09v2.msh": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"CSU_C09v2.sft": StringSet{
		"CSP": true,
		"CSR": true,
		"CSS": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_OBR_OBXv2.nte": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_OBR_OBXv2.obx": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_OBR_TQ1v2.tq1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_OBR_TQ1v2.tq2": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_OBRv2.nte": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_OBRv2.obr": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_OBRv2.orc": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_PR1v2.pr1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1_PR1v2.rol": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1v2.ft1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_FT1v2.nte": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_IN1v2.in1": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"DFT_P03_IN1v2.in2": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"DFT_P03_IN1v2.in3": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"DFT_P03_IN1v2.rol": StringSet{
		"ACC": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"DFT_P03_OBR_OBXv2.nte": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_OBR_OBXv2.obx": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_OBR_TQ1v2.tq1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_OBR_TQ1v2.tq2": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_OBRv2.nte": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_OBRv2.obr": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03_OBRv2.orc": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.acc": StringSet{},
	"DFT_P03v2.db1": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"DFT_P03v2.drg": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"DFT_P03v2.evn": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.gt1": StringSet{
		"ACC": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"ROL": true,
	},
	"DFT_P03v2.msh": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.pd1": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.pid": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.pv1": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.pv2": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.rol1": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.rol2": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P03v2.sft": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_IN1v2.in1": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_IN1v2.in2": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_IN1v2.in3": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_IN1v2.rol": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_OBR_OBXv2.nte": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_OBR_OBXv2.obx": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_OBR_TQ1v2.tq1": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_OBR_TQ1v2.tq2": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_OBRv2.nte": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_OBRv2.obr": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_OBRv2.orc": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_PR1v2.pr1": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1_PR1v2.rol": StringSet{
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1v2.dg1": StringSet{
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1v2.drg": StringSet{
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1v2.ft1": StringSet{
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_FT1v2.gt1": StringSet{
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_IN1v2.in1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_IN1v2.in2": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_IN1v2.in3": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_IN1v2.rol": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_OBR_OBXv2.nte": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_OBR_OBXv2.obx": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_OBR_TQ1v2.tq1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_OBR_TQ1v2.tq2": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_OBRv2.nte": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_OBRv2.obr": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11_OBRv2.orc": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.acc": StringSet{
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.db1": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.dg1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.drg": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.evn": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.gt1": StringSet{
		"ACC": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.msh": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.pd1": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.pid": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.pv1": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.pv2": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.rol1": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.rol2": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PR1": true,
		"ROL": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DFT_P11v2.sft": StringSet{
		"ACC": true,
		"DB1": true,
		"DG1": true,
		"DRG": true,
		"EVN": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"DOC_T12_PIDv2.evn": StringSet{
		"DSC": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"TXA": true,
	},
	"DOC_T12_PIDv2.obx": StringSet{
		"DSC": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"TXA": true,
	},
	"DOC_T12_PIDv2.pid": StringSet{
		"DSC": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"TXA": true,
	},
	"DOC_T12_PIDv2.pv1": StringSet{
		"DSC": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"TXA": true,
	},
	"DOC_T12_PIDv2.txa": StringSet{
		"DSC": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"TXA": true,
	},
	"DOC_T12v2.dsc": StringSet{},
	"DOC_T12v2.err": StringSet{
		"DSC": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"QAK": true,
		"QRD": true,
		"TXA": true,
	},
	"DOC_T12v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"QAK": true,
		"QRD": true,
		"TXA": true,
	},
	"DOC_T12v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"EVN": true,
		"MSA": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"QAK": true,
		"QRD": true,
		"TXA": true,
	},
	"DOC_T12v2.qak": StringSet{
		"DSC": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"QRD": true,
		"TXA": true,
	},
	"DOC_T12v2.qrd": StringSet{
		"DSC": true,
		"EVN": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"TXA": true,
	},
	"DSR_P04v2.dsc": StringSet{},
	"DSR_P04v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"DSR_P04v2.err": StringSet{
		"DSC": true,
		"DSP": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_P04v2.msa": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_P04v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_P04v2.qrd": StringSet{
		"DSC": true,
		"DSP": true,
		"QRF": true,
	},
	"DSR_P04v2.qrf": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"DSR_Q01v2.dsc": StringSet{},
	"DSR_Q01v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"DSR_Q01v2.err": StringSet{
		"DSC": true,
		"DSP": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_Q01v2.msa": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_Q01v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"DSR_Q01v2.qak": StringSet{
		"DSC": true,
		"DSP": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_Q01v2.qrd": StringSet{
		"DSC": true,
		"DSP": true,
		"QRF": true,
	},
	"DSR_Q01v2.qrf": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"DSR_Q01v2.sft": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"DSR_Q03v2.dsc": StringSet{},
	"DSR_Q03v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"DSR_Q03v2.err": StringSet{
		"DSC": true,
		"DSP": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_Q03v2.msa": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_Q03v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"DSR_Q03v2.qak": StringSet{
		"DSC": true,
		"DSP": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_Q03v2.qrd": StringSet{
		"DSC": true,
		"DSP": true,
		"QRF": true,
	},
	"DSR_Q03v2.qrf": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"DSR_Q03v2.sft": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"DSR_R03v2.dsc": StringSet{},
	"DSR_R03v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"DSR_R03v2.msa": StringSet{
		"DSC": true,
		"DSP": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_R03v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"MSA": true,
		"QRD": true,
		"QRF": true,
	},
	"DSR_R03v2.qrd": StringSet{
		"DSC": true,
		"DSP": true,
		"QRF": true,
	},
	"DSR_R03v2.qrf": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"EAC_U07_ECDv2.cns": StringSet{
		"CNS": true,
		"ECD": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
	},
	"EAC_U07_ECDv2.ecd": StringSet{
		"CNS": true,
		"ECD": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
	},
	"EAC_U07_ECDv2.sac": StringSet{
		"CNS": true,
		"ECD": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
	},
	"EAC_U07_ECDv2.spm": StringSet{
		"CNS": true,
		"ECD": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
	},
	"EAC_U07_ECDv2.tq1": StringSet{
		"CNS": true,
		"ECD": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
	},
	"EAC_U07v2.equ": StringSet{
		"CNS": true,
		"ECD": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
	},
	"EAC_U07v2.msh": StringSet{
		"CNS": true,
		"ECD": true,
		"EQU": true,
		"ROL": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
	},
	"EAC_U07v2.rol": StringSet{},
	"EAC_U07v2.sft": StringSet{
		"CNS": true,
		"ECD": true,
		"EQU": true,
		"ROL": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
	},
	"EAN_U09_NDSv2.nds": StringSet{
		"NDS": true,
		"NTE": true,
		"ROL": true,
	},
	"EAN_U09_NDSv2.nte": StringSet{
		"NDS": true,
		"NTE": true,
		"ROL": true,
	},
	"EAN_U09v2.equ": StringSet{
		"NDS": true,
		"NTE": true,
		"ROL": true,
	},
	"EAN_U09v2.msh": StringSet{
		"EQU": true,
		"NDS": true,
		"NTE": true,
		"ROL": true,
		"SFT": true,
	},
	"EAN_U09v2.rol": StringSet{},
	"EAN_U09v2.sft": StringSet{
		"EQU": true,
		"NDS": true,
		"NTE": true,
		"ROL": true,
		"SFT": true,
	},
	"EAR_U08_ECDv2.ecd": StringSet{
		"ECD": true,
		"ECR": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"EAR_U08_ECDv2.ecr": StringSet{
		"ECD": true,
		"ECR": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"EAR_U08_ECDv2.sac": StringSet{
		"ECD": true,
		"ECR": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"EAR_U08_ECDv2.spm": StringSet{
		"ECD": true,
		"ECR": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"EAR_U08v2.equ": StringSet{
		"ECD": true,
		"ECR": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"EAR_U08v2.msh": StringSet{
		"ECD": true,
		"ECR": true,
		"EQU": true,
		"ROL": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
	},
	"EAR_U08v2.rol": StringSet{},
	"EAR_U08v2.sft": StringSet{
		"ECD": true,
		"ECR": true,
		"EQU": true,
		"ROL": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
	},
	"EDR_Q01v2.dsc": StringSet{},
	"EDR_Q01v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"EDR_Q01v2.err": StringSet{
		"DSC": true,
		"DSP": true,
		"QAK": true,
	},
	"EDR_Q01v2.msa": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"QAK": true,
	},
	"EDR_Q01v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
	},
	"EDR_Q01v2.qak": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"EDR_R07v2.dsc": StringSet{},
	"EDR_R07v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"EDR_R07v2.err": StringSet{
		"DSC": true,
		"DSP": true,
		"QAK": true,
	},
	"EDR_R07v2.msa": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"QAK": true,
	},
	"EDR_R07v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"SFT": true,
	},
	"EDR_R07v2.qak": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"EDR_R07v2.sft": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"SFT": true,
	},
	"EQQ_Q01v2.dsc": StringSet{},
	"EQQ_Q01v2.eql": StringSet{
		"DSC": true,
	},
	"EQQ_Q01v2.msh": StringSet{
		"DSC": true,
		"EQL": true,
	},
	"EQQ_Q04v2.dsc": StringSet{},
	"EQQ_Q04v2.eql": StringSet{
		"DSC": true,
	},
	"EQQ_Q04v2.msh": StringSet{
		"DSC": true,
		"EQL": true,
		"SFT": true,
	},
	"EQQ_Q04v2.sft": StringSet{
		"DSC": true,
		"EQL": true,
		"SFT": true,
	},
	"ERP_Q01v2.dsc": StringSet{},
	"ERP_Q01v2.erq": StringSet{
		"DSC": true,
	},
	"ERP_Q01v2.err": StringSet{
		"DSC": true,
		"ERQ": true,
		"QAK": true,
	},
	"ERP_Q01v2.msa": StringSet{
		"DSC": true,
		"ERQ": true,
		"ERR": true,
		"QAK": true,
	},
	"ERP_Q01v2.msh": StringSet{
		"DSC": true,
		"ERQ": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
	},
	"ERP_Q01v2.qak": StringSet{
		"DSC": true,
		"ERQ": true,
	},
	"ERP_R09v2.dsc": StringSet{},
	"ERP_R09v2.erq": StringSet{
		"DSC": true,
	},
	"ERP_R09v2.err": StringSet{
		"DSC": true,
		"ERQ": true,
		"QAK": true,
	},
	"ERP_R09v2.msa": StringSet{
		"DSC": true,
		"ERQ": true,
		"ERR": true,
		"QAK": true,
	},
	"ERP_R09v2.msh": StringSet{
		"DSC": true,
		"ERQ": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"SFT": true,
	},
	"ERP_R09v2.qak": StringSet{
		"DSC": true,
		"ERQ": true,
	},
	"ERP_R09v2.sft": StringSet{
		"DSC": true,
		"ERQ": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"SFT": true,
	},
	"ESR_U02v2.equ": StringSet{
		"ROL": true,
	},
	"ESR_U02v2.msh": StringSet{
		"EQU": true,
		"ROL": true,
		"SFT": true,
	},
	"ESR_U02v2.rol": StringSet{},
	"ESR_U02v2.sft": StringSet{
		"EQU": true,
		"ROL": true,
		"SFT": true,
	},
	"ESU_U01v2.equ": StringSet{
		"ISD": true,
		"ROL": true,
	},
	"ESU_U01v2.isd": StringSet{
		"ISD": true,
		"ROL": true,
	},
	"ESU_U01v2.msh": StringSet{
		"EQU": true,
		"ISD": true,
		"ROL": true,
		"SFT": true,
	},
	"ESU_U01v2.rol": StringSet{},
	"ESU_U01v2.sft": StringSet{
		"EQU": true,
		"ISD": true,
		"ROL": true,
		"SFT": true,
	},
	"INR_U06v2.equ": StringSet{
		"INV": true,
		"ROL": true,
	},
	"INR_U06v2.inv": StringSet{
		"INV": true,
		"ROL": true,
	},
	"INR_U06v2.msh": StringSet{
		"EQU": true,
		"INV": true,
		"ROL": true,
		"SFT": true,
	},
	"INR_U06v2.rol": StringSet{},
	"INR_U06v2.sft": StringSet{
		"EQU": true,
		"INV": true,
		"ROL": true,
		"SFT": true,
	},
	"INU_U05v2.equ": StringSet{
		"INV": true,
		"ROL": true,
	},
	"INU_U05v2.inv": StringSet{
		"INV": true,
		"ROL": true,
	},
	"INU_U05v2.msh": StringSet{
		"EQU": true,
		"INV": true,
		"ROL": true,
		"SFT": true,
	},
	"INU_U05v2.rol": StringSet{},
	"INU_U05v2.sft": StringSet{
		"EQU": true,
		"INV": true,
		"ROL": true,
		"SFT": true,
	},
	"LSU_U12v2.eqp": StringSet{
		"EQP": true,
		"ROL": true,
	},
	"LSU_U12v2.equ": StringSet{
		"EQP": true,
		"ROL": true,
	},
	"LSU_U12v2.msh": StringSet{
		"EQP": true,
		"EQU": true,
		"ROL": true,
		"SFT": true,
	},
	"LSU_U12v2.rol": StringSet{},
	"LSU_U12v2.sft": StringSet{
		"EQP": true,
		"EQU": true,
		"ROL": true,
		"SFT": true,
	},
	"MCF_Q02v2.msa": StringSet{},
	"MCF_Q02v2.msh": StringSet{
		"MSA": true,
	},
	"MDM_T01_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBR": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBR": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01_ORCv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01_ORCv2.obr": StringSet{
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01_ORCv2.orc": StringSet{
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01v2.evn": StringSet{
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01v2.msh": StringSet{
		"EVN": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01v2.pid": StringSet{
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PV1": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01v2.pv1": StringSet{
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01v2.sft": StringSet{
		"EVN": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T01v2.txa": StringSet{},
	"MDM_T02_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
	},
	"MDM_T02_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
	},
	"MDM_T02_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02_ORCv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02_ORCv2.obr": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02_ORCv2.orc": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02v2.evn": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02v2.msh": StringSet{
		"EVN": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02v2.pid": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02v2.pv1": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02v2.sft": StringSet{
		"EVN": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
		"TXA": true,
	},
	"MDM_T02v2.txa": StringSet{
		"NTE": true,
		"OBX": true,
	},
	"MFD_M01v2.mfa": StringSet{
		"MFA": true,
	},
	"MFD_M01v2.mfi": StringSet{
		"MFA": true,
	},
	"MFD_M01v2.msh": StringSet{
		"MFA": true,
		"MFI": true,
	},
	"MFD_M02v2.mfa": StringSet{
		"MFA": true,
	},
	"MFD_M02v2.mfi": StringSet{
		"MFA": true,
	},
	"MFD_M02v2.msh": StringSet{
		"MFA": true,
		"MFI": true,
	},
	"MFD_M03v2.mfa": StringSet{
		"MFA": true,
	},
	"MFD_M03v2.mfi": StringSet{
		"MFA": true,
	},
	"MFD_M03v2.msh": StringSet{
		"MFA": true,
		"MFI": true,
	},
	"MFK_M01v2.err": StringSet{
		"ERR": true,
		"MFA": true,
		"MFI": true,
	},
	"MFK_M01v2.mfa": StringSet{
		"MFA": true,
	},
	"MFK_M01v2.mfi": StringSet{
		"MFA": true,
	},
	"MFK_M01v2.msa": StringSet{
		"ERR": true,
		"MFA": true,
		"MFI": true,
	},
	"MFK_M01v2.msh": StringSet{
		"ERR": true,
		"MFA": true,
		"MFI": true,
		"MSA": true,
		"SFT": true,
	},
	"MFK_M01v2.sft": StringSet{
		"ERR": true,
		"MFA": true,
		"MFI": true,
		"MSA": true,
		"SFT": true,
	},
	"MFK_M02v2.mfa": StringSet{
		"MFA": true,
	},
	"MFK_M02v2.mfi": StringSet{
		"MFA": true,
	},
	"MFK_M02v2.msa": StringSet{
		"MFA": true,
		"MFI": true,
	},
	"MFK_M02v2.msh": StringSet{
		"MFA": true,
		"MFI": true,
		"MSA": true,
	},
	"MFK_M03v2.err": StringSet{
		"MFA": true,
		"MFI": true,
	},
	"MFK_M03v2.mfa": StringSet{
		"MFA": true,
	},
	"MFK_M03v2.mfi": StringSet{
		"MFA": true,
	},
	"MFK_M03v2.msa": StringSet{
		"ERR": true,
		"MFA": true,
		"MFI": true,
	},
	"MFK_M03v2.msh": StringSet{
		"ERR": true,
		"MFA": true,
		"MFI": true,
		"MSA": true,
	},
	"MFN_M01_MFEv2.mfe": StringSet{
		"MFE": true,
	},
	"MFN_M01v2.mfi": StringSet{
		"MFE": true,
	},
	"MFN_M01v2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M01v2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M02_MFEv2.aff": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02_MFEv2.cer": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02_MFEv2.edu": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02_MFEv2.lan": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02_MFEv2.mfe": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02_MFEv2.nte": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02_MFEv2.org": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02_MFEv2.pra": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02_MFEv2.stf": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02v2.mfi": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"MFN_M02v2.msh": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"MFI": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"SFT": true,
		"STF": true,
	},
	"MFN_M02v2.sft": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"MFE": true,
		"MFI": true,
		"NTE": true,
		"ORG": true,
		"PRA": true,
		"SFT": true,
		"STF": true,
	},
	"MFN_M03_MFEv2.mfe": StringSet{
		"MFE": true,
		"OM1": true,
	},
	"MFN_M03_MFEv2.om1": StringSet{
		"MFE": true,
		"OM1": true,
	},
	"MFN_M03v2.mfi": StringSet{
		"MFE": true,
		"OM1": true,
	},
	"MFN_M03v2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"SFT": true,
	},
	"MFN_M03v2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"SFT": true,
	},
	"MFN_M04_MFEv2.cdm": StringSet{
		"CDM": true,
		"MFE": true,
		"PRC": true,
	},
	"MFN_M04_MFEv2.mfe": StringSet{
		"CDM": true,
		"MFE": true,
		"PRC": true,
	},
	"MFN_M04_MFEv2.prc": StringSet{
		"CDM": true,
		"MFE": true,
		"PRC": true,
	},
	"MFN_M04v2.mfi": StringSet{
		"CDM": true,
		"MFE": true,
		"PRC": true,
	},
	"MFN_M04v2.msh": StringSet{
		"CDM": true,
		"MFE": true,
		"MFI": true,
		"PRC": true,
		"SFT": true,
	},
	"MFN_M04v2.sft": StringSet{
		"CDM": true,
		"MFE": true,
		"MFI": true,
		"PRC": true,
		"SFT": true,
	},
	"MFN_M05_MFE_LDPv2.lcc": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
	},
	"MFN_M05_MFE_LDPv2.lch": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
	},
	"MFN_M05_MFE_LDPv2.ldp": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
	},
	"MFN_M05_MFEv2.lch": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFN_M05_MFEv2.loc": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFN_M05_MFEv2.lrl": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFN_M05_MFEv2.mfe": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFN_M05v2.mfi": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFN_M05v2.msh": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M05v2.sft": StringSet{
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M06_MFE_CM1v2.cm1": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
	},
	"MFN_M06_MFE_CM1v2.cm2": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
	},
	"MFN_M06_MFEv2.cm0": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"MFE": true,
	},
	"MFN_M06_MFEv2.mfe": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"MFE": true,
	},
	"MFN_M06v2.mfi": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"MFE": true,
	},
	"MFN_M06v2.msh": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M06v2.sft": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M07_MFEv2.cm0": StringSet{
		"CM0": true,
		"CM2": true,
		"MFE": true,
	},
	"MFN_M07_MFEv2.cm2": StringSet{
		"CM0": true,
		"CM2": true,
		"MFE": true,
	},
	"MFN_M07_MFEv2.mfe": StringSet{
		"CM0": true,
		"CM2": true,
		"MFE": true,
	},
	"MFN_M07v2.mfi": StringSet{
		"CM0": true,
		"CM2": true,
		"MFE": true,
	},
	"MFN_M07v2.msh": StringSet{
		"CM0": true,
		"CM2": true,
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M07v2.sft": StringSet{
		"CM0": true,
		"CM2": true,
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M08_MFEv2.mfe": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M08_MFEv2.om1": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M08_MFEv2.om2": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M08_MFEv2.om3": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M08_MFEv2.om4": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M08v2.mfi": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M08v2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM2": true,
		"OM3": true,
		"OM4": true,
		"SFT": true,
	},
	"MFN_M08v2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM2": true,
		"OM3": true,
		"OM4": true,
		"SFT": true,
	},
	"MFN_M09_MFEv2.mfe": StringSet{
		"MFE": true,
		"OM1": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M09_MFEv2.om1": StringSet{
		"MFE": true,
		"OM1": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M09_MFEv2.om3": StringSet{
		"MFE": true,
		"OM1": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M09_MFEv2.om4": StringSet{
		"MFE": true,
		"OM1": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M09v2.mfi": StringSet{
		"MFE": true,
		"OM1": true,
		"OM3": true,
		"OM4": true,
	},
	"MFN_M09v2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM3": true,
		"OM4": true,
		"SFT": true,
	},
	"MFN_M09v2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM3": true,
		"OM4": true,
		"SFT": true,
	},
	"MFN_M10_MFEv2.mfe": StringSet{
		"MFE": true,
		"OM1": true,
		"OM4": true,
		"OM5": true,
	},
	"MFN_M10_MFEv2.om1": StringSet{
		"MFE": true,
		"OM1": true,
		"OM4": true,
		"OM5": true,
	},
	"MFN_M10_MFEv2.om4": StringSet{
		"MFE": true,
		"OM1": true,
		"OM4": true,
		"OM5": true,
	},
	"MFN_M10_MFEv2.om5": StringSet{
		"MFE": true,
		"OM1": true,
		"OM4": true,
		"OM5": true,
	},
	"MFN_M10v2.mfi": StringSet{
		"MFE": true,
		"OM1": true,
		"OM4": true,
		"OM5": true,
	},
	"MFN_M10v2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM4": true,
		"OM5": true,
		"SFT": true,
	},
	"MFN_M10v2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM4": true,
		"OM5": true,
		"SFT": true,
	},
	"MFN_M11_MFEv2.mfe": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM6": true,
	},
	"MFN_M11_MFEv2.om1": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM6": true,
	},
	"MFN_M11_MFEv2.om2": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM6": true,
	},
	"MFN_M11_MFEv2.om6": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM6": true,
	},
	"MFN_M11v2.mfi": StringSet{
		"MFE": true,
		"OM1": true,
		"OM2": true,
		"OM6": true,
	},
	"MFN_M11v2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM2": true,
		"OM6": true,
		"SFT": true,
	},
	"MFN_M11v2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM2": true,
		"OM6": true,
		"SFT": true,
	},
	"MFN_M12_MFEv2.mfe": StringSet{
		"MFE": true,
		"OM1": true,
		"OM7": true,
	},
	"MFN_M12_MFEv2.om1": StringSet{
		"MFE": true,
		"OM1": true,
		"OM7": true,
	},
	"MFN_M12_MFEv2.om7": StringSet{
		"MFE": true,
		"OM1": true,
		"OM7": true,
	},
	"MFN_M12v2.mfi": StringSet{
		"MFE": true,
		"OM1": true,
		"OM7": true,
	},
	"MFN_M12v2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM7": true,
		"SFT": true,
	},
	"MFN_M12v2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"OM1": true,
		"OM7": true,
		"SFT": true,
	},
	"MFN_M13v2.mfe": StringSet{
		"MFE": true,
	},
	"MFN_M13v2.mfi": StringSet{
		"MFE": true,
	},
	"MFN_M13v2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M13v2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M15_MFEv2.iim": StringSet{
		"IIM": true,
		"MFE": true,
	},
	"MFN_M15_MFEv2.mfe": StringSet{
		"IIM": true,
		"MFE": true,
	},
	"MFN_M15v2.mfi": StringSet{
		"IIM": true,
		"MFE": true,
	},
	"MFN_M15v2.msh": StringSet{
		"IIM": true,
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_M15v2.sft": StringSet{
		"IIM": true,
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_Znn_MFEv2.mfe": StringSet{
		"MFE": true,
	},
	"MFN_Znnv2.mfi": StringSet{
		"MFE": true,
	},
	"MFN_Znnv2.msh": StringSet{
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFN_Znnv2.sft": StringSet{
		"MFE": true,
		"MFI": true,
		"SFT": true,
	},
	"MFQ_M01v2.dsc": StringSet{},
	"MFQ_M01v2.msh": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFQ_M01v2.qrd": StringSet{
		"DSC": true,
		"QRF": true,
	},
	"MFQ_M01v2.qrf": StringSet{
		"DSC": true,
	},
	"MFQ_M01v2.sft": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFQ_M02v2.dsc": StringSet{},
	"MFQ_M02v2.msh": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
	},
	"MFQ_M02v2.qrd": StringSet{
		"DSC": true,
		"QRF": true,
	},
	"MFQ_M02v2.qrf": StringSet{
		"DSC": true,
	},
	"MFQ_M03v2.dsc": StringSet{},
	"MFQ_M03v2.msh": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
	},
	"MFQ_M03v2.qrd": StringSet{
		"DSC": true,
		"QRF": true,
	},
	"MFQ_M03v2.qrf": StringSet{
		"DSC": true,
	},
	"MFR_M01_MFEv2.mfe": StringSet{
		"DSC": true,
		"MFE": true,
	},
	"MFR_M01v2.dsc": StringSet{},
	"MFR_M01v2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M01v2.mfi": StringSet{
		"DSC": true,
		"MFE": true,
	},
	"MFR_M01v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M01v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M01v2.qak": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M01v2.qrd": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRF": true,
	},
	"MFR_M01v2.qrf": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
	},
	"MFR_M01v2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M02_MFEv2.mfe": StringSet{
		"DSC": true,
		"MFE": true,
	},
	"MFR_M02v2.dsc": StringSet{},
	"MFR_M02v2.err": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M02v2.mfi": StringSet{
		"DSC": true,
		"MFE": true,
	},
	"MFR_M02v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M02v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M02v2.qrd": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRF": true,
	},
	"MFR_M02v2.qrf": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
	},
	"MFR_M03_MFEv2.mfe": StringSet{
		"DSC": true,
		"MFE": true,
	},
	"MFR_M03v2.dsc": StringSet{},
	"MFR_M03v2.err": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M03v2.mfi": StringSet{
		"DSC": true,
		"MFE": true,
	},
	"MFR_M03v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M03v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M03v2.qrd": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRF": true,
	},
	"MFR_M03v2.qrf": StringSet{
		"DSC": true,
		"MFE": true,
		"MFI": true,
	},
	"MFR_M04_MFEv2.cdm": StringSet{
		"CDM": true,
		"DSC": true,
		"MFE": true,
		"PRC": true,
	},
	"MFR_M04_MFEv2.mfe": StringSet{
		"CDM": true,
		"DSC": true,
		"MFE": true,
		"PRC": true,
	},
	"MFR_M04_MFEv2.prc": StringSet{
		"CDM": true,
		"DSC": true,
		"MFE": true,
		"PRC": true,
	},
	"MFR_M04v2.dsc": StringSet{},
	"MFR_M04v2.err": StringSet{
		"CDM": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"PRC": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M04v2.mfi": StringSet{
		"CDM": true,
		"DSC": true,
		"MFE": true,
		"PRC": true,
	},
	"MFR_M04v2.msa": StringSet{
		"CDM": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"PRC": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M04v2.msh": StringSet{
		"CDM": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"PRC": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M04v2.qak": StringSet{
		"CDM": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"PRC": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M04v2.qrd": StringSet{
		"CDM": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"PRC": true,
		"QRF": true,
	},
	"MFR_M04v2.qrf": StringSet{
		"CDM": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"PRC": true,
	},
	"MFR_M04v2.sft": StringSet{
		"CDM": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"PRC": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M05_MFEv2.lcc": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFR_M05_MFEv2.lch1": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFR_M05_MFEv2.lch2": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFR_M05_MFEv2.ldp": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFR_M05_MFEv2.loc": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFR_M05_MFEv2.lrl": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFR_M05_MFEv2.mfe": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFR_M05v2.dsc": StringSet{},
	"MFR_M05v2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M05v2.mfi": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"MFR_M05v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M05v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M05v2.qak": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M05v2.qrd": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
		"QRF": true,
	},
	"MFR_M05v2.qrf": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
	},
	"MFR_M05v2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M06_MFEv2.cm0": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M06_MFEv2.cm1": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M06_MFEv2.cm2": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M06_MFEv2.mfe": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M06v2.dsc": StringSet{},
	"MFR_M06v2.err": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M06v2.mfi": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M06v2.msa": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M06v2.msh": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M06v2.qak": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M06v2.qrd": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRF": true,
	},
	"MFR_M06v2.qrf": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
	},
	"MFR_M06v2.sft": StringSet{
		"CM0": true,
		"CM1": true,
		"CM2": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M07_MFEv2.cm0": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M07_MFEv2.cm2": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M07_MFEv2.mfe": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M07v2.dsc": StringSet{},
	"MFR_M07v2.err": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M07v2.mfi": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
	},
	"MFR_M07v2.msa": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M07v2.msh": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"MFR_M07v2.qak": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRD": true,
		"QRF": true,
	},
	"MFR_M07v2.qrd": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
		"QRF": true,
	},
	"MFR_M07v2.qrf": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"MFE": true,
		"MFI": true,
	},
	"MFR_M07v2.sft": StringSet{
		"CM0": true,
		"CM2": true,
		"DSC": true,
		"ERR": true,
		"MFE": true,
		"MFI": true,
		"MSA": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"NMD_N01_NCK_NSCv2.nsc": StringSet{
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N01_NCK_NSCv2.nte": StringSet{
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N01_NCK_NSTv2.nst": StringSet{
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N01_NCK_NSTv2.nte": StringSet{
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N01_NCKv2.nck": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N01_NCKv2.nte": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N01v2.msh": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N02_NCK_NSCv2.nsc": StringSet{
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N02_NCK_NSCv2.nte": StringSet{
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N02_NCK_NSTv2.nst": StringSet{
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N02_NCK_NSTv2.nte": StringSet{
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N02_NCKv2.nck": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N02_NCKv2.nte": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMD_N02v2.msh": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"SFT": true,
	},
	"NMD_N02v2.sft": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"SFT": true,
	},
	"NMQ_N01_NCKv2.nck": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
	},
	"NMQ_N01_NCKv2.nsc": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
	},
	"NMQ_N01_NCKv2.nst": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
	},
	"NMQ_N01v2.msh": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"NMQ_N01v2.qrd": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"QRF": true,
	},
	"NMQ_N01v2.qrf": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
	},
	"NMQ_N01v2.sft": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"NMQ_N02_NCKv2.nck": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
	},
	"NMQ_N02_NCKv2.nsc": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
	},
	"NMQ_N02_NCKv2.nst": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
	},
	"NMQ_N02v2.msh": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"QRD": true,
		"QRF": true,
	},
	"NMQ_N02v2.qrd": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"QRF": true,
	},
	"NMQ_N02v2.qrf": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
	},
	"NMR_N01_NCKv2.nck": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N01_NCKv2.nsc": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N01_NCKv2.nst": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N01_NCKv2.nte1": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N01_NCKv2.nte2": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N01_NCKv2.nte3": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N01v2.err": StringSet{
		"ERR": true,
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"QRD": true,
	},
	"NMR_N01v2.msa": StringSet{
		"ERR": true,
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"QRD": true,
	},
	"NMR_N01v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"QRD": true,
		"SFT": true,
	},
	"NMR_N01v2.qrd": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N01v2.sft": StringSet{
		"ERR": true,
		"MSA": true,
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"QRD": true,
		"SFT": true,
	},
	"NMR_N02_NCKv2.nck": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N02_NCKv2.nsc": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N02_NCKv2.nst": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N02_NCKv2.nte1": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N02_NCKv2.nte2": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N02_NCKv2.nte3": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"NMR_N02v2.err": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"QRD": true,
	},
	"NMR_N02v2.msa": StringSet{
		"ERR": true,
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"QRD": true,
	},
	"NMR_N02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
		"QRD": true,
	},
	"NMR_N02v2.qrd": StringSet{
		"NCK": true,
		"NSC": true,
		"NST": true,
		"NTE": true,
	},
	"OMB_O27_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORC_TQ1v2.tq1": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORC_TQ1v2.tq2": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORCv2.blg": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORCv2.bpo": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORCv2.dg1": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORCv2.ft1": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORCv2.nte": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORCv2.orc": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_ORCv2.spm": StringSet{
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMB_O27v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"BPO": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O01_ORC1_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_ORC1_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_ORC1v2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_ORC1v2.ods": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_ORC1v2.orc": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_ORC2v2.nte": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_ORC2v2.odt": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_ORC2v2.orc": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_PIDv2.gt1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
	},
	"OMD_O01_PIDv2.pd1": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
	},
	"OMD_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"OMD_O01_PIDv2.pv1": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV2": true,
	},
	"OMD_O01_PIDv2.pv2": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"OMD_O01v2.msh": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"OMD_O01v2.nte": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"OMD_O03_ORC1_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC1_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC1_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC1_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC1v2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC1v2.ods": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC1v2.orc": StringSet{
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC2_TQ1v2.tq1": StringSet{
		"NTE": true,
		"ODT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC2_TQ1v2.tq2": StringSet{
		"NTE": true,
		"ODT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC2v2.nte": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC2v2.odt": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_ORC2v2.orc": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PIDv2.al1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PIDv2.gt1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PIDv2.nte": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PIDv2.pd1": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PIDv2.pid": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PIDv2.pv1": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03_PIDv2.pv2": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03v2.msh": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03v2.nte": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMD_O03v2.sft": StringSet{
		"AL1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_OBXv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_OBXv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PID_OBR_OBXv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PID_OBR_OBXv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PID_OBR_TQ1v2.tq1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PID_OBR_TQ1v2.tq2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PID_OBRv2.ctd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PID_OBRv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PID_OBRv2.obr": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PID_OBRv2.orc": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_SPM_SACv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_SPM_SACv2.sac": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_SPMv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_SPMv2.spm": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_TQ1v2.tq1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORC_TQ1v2.tq2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORCv2.blg": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORCv2.ctd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORCv2.cti": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORCv2.dg1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORCv2.ft1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORCv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORCv2.obr": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_ORCv2.orc": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PIDv2.nk1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMG_O19v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORC_OBXv2.nte": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORC_OBXv2.obx": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORC_TQ1v2.tq1": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORC_TQ1v2.tq2": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORCv2.ctd": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORCv2.dg1": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORCv2.ipc": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORCv2.nte": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORCv2.obr": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_ORCv2.orc": StringSet{
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PIDv2.al1": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PIDv2.gt1": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PIDv2.nte": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PIDv2.pd1": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PIDv2.pid": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PIDv2.pv1": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23_PIDv2.pv2": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23v2.msh": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23v2.nte": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMI_O23v2.sft": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_OBXv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_OBXv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_OBXv2.tcd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PID_OBR_OBXv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PID_OBR_OBXv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PID_OBR_TQ1v2.tq1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PID_OBR_TQ1v2.tq2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PID_OBRv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PID_OBRv2.obr": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PID_OBRv2.orc": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_SPM_SACv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_SPM_SACv2.sac": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_SPMv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_SPMv2.spm": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_TQ1v2.tq1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORC_TQ1v2.tq2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.blg": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.ctd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.cti": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.dg1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.ft1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.obr": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.orc": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_ORCv2.tcd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PIDv2.nk1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O21v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PIDv2.nk1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_OBXv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_OBXv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_OBXv2.tcd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PID_OBR_OBXv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PID_OBR_OBXv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PID_OBR_TQ1v2.tq1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PID_OBR_TQ1v2.tq2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PID_OBRv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PID_OBRv2.obr": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PID_OBRv2.orc": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_TQ1v2.tq1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORC_TQ1v2.tq2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORCv2.blg": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORCv2.cti": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORCv2.dg1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORCv2.ft1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORCv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORCv2.obr": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORCv2.orc": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPM_ORCv2.tcd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPMv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPMv2.sac": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33_SPMv2.spm": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O33v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PIDv2.nk1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_OBXv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_OBXv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_OBXv2.tcd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PID_OBR_OBXv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2.tq1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PID_OBR_TQ1v2.tq2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PID_OBRv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PID_OBRv2.obr": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PID_OBRv2.orc": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_TQ1v2.tq1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORC_TQ1v2.tq2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORCv2.blg": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORCv2.cti": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORCv2.dg1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORCv2.ft1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORCv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORCv2.obr": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORCv2.orc": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SAC_ORCv2.tcd": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPM_SACv2.sac": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPMv2.obx": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35_SPMv2.spm": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OML_O35v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O01_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_ORCv2.blg": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_ORCv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_ORCv2.orc": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_ORCv2.rq1": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_ORCv2.rqd": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O01v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
	},
	"OMN_O07_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_ORC_TQ1v2.tq1": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_ORC_TQ1v2.tq2": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_ORCv2.blg": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_ORCv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_ORCv2.orc": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_ORCv2.rq1": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_ORCv2.rqd": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMN_O07v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORC_RXCv2.nte": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORC_RXCv2.rxc": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORC_TQ1v2.tq1": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORC_TQ1v2.tq2": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORCv2.blg": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORCv2.ft1": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORCv2.nte": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORCv2.orc": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORCv2.rxo": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_ORCv2.rxr": StringSet{
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMP_O09v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O01_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQD": true,
	},
	"OMS_O01_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQD": true,
	},
	"OMS_O01_ORCv2.blg": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_ORCv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_ORCv2.orc": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_ORCv2.rqd": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQD": true,
	},
	"OMS_O01_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQD": true,
	},
	"OMS_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RQD": true,
	},
	"OMS_O01_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RQD": true,
	},
	"OMS_O01_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQD": true,
	},
	"OMS_O01v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQD": true,
	},
	"OMS_O01v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQD": true,
	},
	"OMS_O05_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_ORC_TQ1v2.tq1": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_ORC_TQ1v2.tq2": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_ORCv2.blg": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_ORCv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_ORCv2.orc": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_ORCv2.rq1": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_ORCv2.rqd": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OMS_O05v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28_ORC_TQ1v2.tq1": StringSet{
		"BPO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28_ORC_TQ1v2.tq2": StringSet{
		"BPO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28_ORCv2.bpo": StringSet{
		"BPO": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28_ORCv2.orc": StringSet{
		"BPO": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28v2.err": StringSet{
		"BPO": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28v2.msa": StringSet{
		"BPO": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28v2.msh": StringSet{
		"BPO": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28v2.nte": StringSet{
		"BPO": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28v2.pid": StringSet{
		"BPO": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORB_O28v2.sft": StringSet{
		"BPO": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O02_PID_ORC1v2.nte": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"ORD_O02_PID_ORC1v2.ods": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"ORD_O02_PID_ORC1v2.orc": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"ORD_O02_PID_ORC2v2.nte": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
	},
	"ORD_O02_PID_ORC2v2.odt": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
	},
	"ORD_O02_PID_ORC2v2.orc": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
	},
	"ORD_O02_PIDv2.nte": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"ORD_O02_PIDv2.pid": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
	},
	"ORD_O02v2.err": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
	},
	"ORD_O02v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
	},
	"ORD_O02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
	},
	"ORD_O02v2.nte": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
	},
	"ORD_O04_PID_ORC1_TQ1v2.tq1": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC1_TQ1v2.tq2": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC1v2.nte": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC1v2.ods": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC1v2.orc": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC2_TQ1v2.tq1": StringSet{
		"NTE": true,
		"ODT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC2_TQ1v2.tq2": StringSet{
		"NTE": true,
		"ODT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC2v2.nte": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC2v2.odt": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PID_ORC2v2.orc": StringSet{
		"NTE": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PIDv2.nte": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04_PIDv2.pid": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04v2.nte": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORD_O04v2.sft": StringSet{
		"NTE": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBR_OBXv2.nte": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBR_OBXv2.obx": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBR_TQ1v2.tq1": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBR_TQ1v2.tq2": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBRv2.ctd": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBRv2.cti": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBRv2.nte": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBRv2.obr": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PID_OBRv2.orc": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PIDv2.nte": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04_PIDv2.pid": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04v2.dsc": StringSet{},
	"ORF_R04v2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
	},
	"ORF_R04v2.msa": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04v2.msh": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04v2.qak": StringSet{
		"DSC": true,
	},
	"ORF_R04v2.qrd": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"QAK": true,
		"QRF": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04v2.qrf": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"QAK": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORF_R04v2.sft": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"QAK": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PID_ORC_SPMv2.sac": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PID_ORC_SPMv2.spm": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PID_ORC_TQ1v2.tq1": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PID_ORC_TQ1v2.tq2": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PID_ORCv2.cti": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PID_ORCv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PID_ORCv2.obr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PID_ORCv2.orc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PIDv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20_PIDv2.pid": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20v2.err": StringSet{
		"CTI": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20v2.msa": StringSet{
		"CTI": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20v2.msh": StringSet{
		"CTI": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20v2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORG_O20v2.sft": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24_PID_ORC_TQ1v2.tq1": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24_PID_ORC_TQ1v2.tq2": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24_PID_ORCv2.ipc": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24_PID_ORCv2.nte": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24_PID_ORCv2.obr": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24_PID_ORCv2.orc": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24_PIDv2.nte": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24_PIDv2.pid": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24v2.err": StringSet{
		"ERR": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24v2.msa": StringSet{
		"ERR": true,
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24v2.msh": StringSet{
		"ERR": true,
		"IPC": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24v2.nte": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORI_O24v2.sft": StringSet{
		"IPC": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22_ORC_SPMv2.sac": StringSet{
		"OBR": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22_ORC_SPMv2.spm": StringSet{
		"OBR": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22_ORC_TQ1v2.tq1": StringSet{
		"OBR": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22_ORC_TQ1v2.tq2": StringSet{
		"OBR": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22_ORCv2.obr": StringSet{
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22_ORCv2.orc": StringSet{
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22v2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22v2.pid": StringSet{
		"OBR": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O22v2.sft": StringSet{
		"NTE": true,
		"OBR": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPM_ORC_SPMv2.sac": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPM_ORC_SPMv2.spm": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPM_ORC_TQ1v2.tq1": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPM_ORC_TQ1v2.tq2": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPM_ORCv2.obr": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPM_ORCv2.orc": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPMv2.obx": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPMv2.sac": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34_SPMv2.spm": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34v2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34v2.pid": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O34v2.sft": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36_SPM_SAC_ORC_TQ1v2.tq1": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36_SPM_SAC_ORC_TQ1v2.tq2": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36_SPM_SAC_ORCv2.obr": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36_SPM_SAC_ORCv2.orc": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36_SPM_SACv2.sac": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36_SPMv2.obx": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36_SPMv2.spm": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36v2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36v2.pid": StringSet{
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORL_O36v2.sft": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORM_O01_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.blg": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.ctd": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.cti": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.dg1": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.ft1": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.nte": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.obr": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.ods": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.odt": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.orc": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.rq1": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.rqd": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_ORCv2.rxo": StringSet{
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORM_O01v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTD": true,
		"CTI": true,
		"DG1": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORN_O02_PID_ORCv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02_PID_ORCv2.orc": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02_PID_ORCv2.rq1": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02_PID_ORCv2.rqd": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02v2.err": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O02v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
	},
	"ORN_O08_PID_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08_PID_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08_PID_ORCv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08_PID_ORCv2.orc": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08_PID_ORCv2.rq1": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08_PID_ORCv2.rqd": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORN_O08v2.sft": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PID_ORC_RXCv2.nte": StringSet{
		"NTE": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PID_ORC_RXCv2.rxc": StringSet{
		"NTE": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PID_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PID_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PID_ORCv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PID_ORCv2.orc": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PID_ORCv2.rxo": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PID_ORCv2.rxr": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORP_O10v2.sft": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORR_O02_PID_ORCv2.cti": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PID_ORCv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PID_ORCv2.obr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PID_ORCv2.ods": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PID_ORCv2.odt": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PID_ORCv2.orc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PID_ORCv2.rq1": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PID_ORCv2.rqd": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PID_ORCv2.rxo": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PIDv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02_PIDv2.pid": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02v2.err": StringSet{
		"CTI": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02v2.msa": StringSet{
		"CTI": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02v2.msh": StringSet{
		"CTI": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORR_O02v2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
	},
	"ORS_O02_PID_ORCv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RQD": true,
	},
	"ORS_O02_PID_ORCv2.orc": StringSet{
		"NTE": true,
		"ORC": true,
		"RQD": true,
	},
	"ORS_O02_PID_ORCv2.rqd": StringSet{
		"NTE": true,
		"ORC": true,
		"RQD": true,
	},
	"ORS_O02_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RQD": true,
	},
	"ORS_O02_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RQD": true,
	},
	"ORS_O02v2.err": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQD": true,
	},
	"ORS_O02v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQD": true,
	},
	"ORS_O02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQD": true,
	},
	"ORS_O02v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQD": true,
	},
	"ORS_O06_PID_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06_PID_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06_PID_ORCv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06_PID_ORCv2.orc": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06_PID_ORCv2.rq1": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06_PID_ORCv2.rqd": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORS_O06v2.sft": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBR_OBXv2.nte": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBR_OBXv2.obx": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBR_SPMv2.obx": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBR_SPMv2.spm": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBR_TQ1v2.tq1": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBR_TQ1v2.tq2": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBRv2.ctd": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBRv2.cti": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBRv2.ft1": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBRv2.nte": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBRv2.obr": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PID_OBRv2.orc": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PIDv2.nk1": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PIDv2.nte": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PIDv2.pd1": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PIDv2.pid": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PIDv2.pv1": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01_PIDv2.pv2": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01v2.dsc": StringSet{},
	"ORU_R01v2.msh": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R01v2.sft": StringSet{
		"CTD": true,
		"CTI": true,
		"DSC": true,
		"FT1": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R03_PID_OBR_OBXv2.nte": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
	},
	"ORU_R03_PID_OBR_OBXv2.obx": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
	},
	"ORU_R03_PID_OBRv2.nte": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
	},
	"ORU_R03_PID_OBRv2.obr": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
	},
	"ORU_R03_PID_OBRv2.orc": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
	},
	"ORU_R03_PIDv2.nte": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
	},
	"ORU_R03_PIDv2.pid": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
	},
	"ORU_R03_PIDv2.pv1": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
	},
	"ORU_R03v2.dsc": StringSet{},
	"ORU_R03v2.msh": StringSet{
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
	},
	"ORU_R30_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
	},
	"ORU_R30_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
	},
	"ORU_R30_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.msh": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.obr": StringSet{
		"NTE": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.orc": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.pd1": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.pid": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.pv1": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.pv2": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R30v2.sft": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ORU_R32_PID_OBR_OBXv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PID_OBR_OBXv2.obx": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PID_OBRv2.cti": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PID_OBRv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PID_OBRv2.obr": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PID_OBRv2.orc": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PIDv2.nk1": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PIDv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PIDv2.pd1": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PIDv2.pid": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PIDv2.pv1": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32_PIDv2.pv2": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"ORU_R32v2.dsc": StringSet{},
	"ORU_R32v2.msh": StringSet{
		"CTI": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
	},
	"OSQ_Q06v2.dsc": StringSet{},
	"OSQ_Q06v2.msh": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"OSQ_Q06v2.qrd": StringSet{
		"DSC": true,
		"QRF": true,
	},
	"OSQ_Q06v2.qrf": StringSet{
		"DSC": true,
	},
	"OSQ_Q06v2.sft": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"OSR_Q06_PID_ORC_TQ1v2.tq1": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORC_TQ1v2.tq2": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.cti": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.obr": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.ods": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.odt": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.orc": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.rq1": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.rqd": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PID_ORCv2.rxo": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PIDv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06_PIDv2.pid": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06v2.dsc": StringSet{},
	"OSR_Q06v2.err": StringSet{
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06v2.msa": StringSet{
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06v2.msh": StringSet{
		"CTI": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06v2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06v2.qrd": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06v2.qrf": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OSR_Q06v2.sft": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"ODS": true,
		"ODT": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RQ1": true,
		"RQD": true,
		"RXO": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_PIDv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_PIDv2.pd1": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_PIDv2.pid": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SAC_OBXv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SAC_OBXv2.obx": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SAC_OBXv2.sid": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SAC_OBXv2.tcd": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SAC_TQ1v2.tq1": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SAC_TQ1v2.tq2": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SACv2.cti": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SACv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SACv2.obr": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SACv2.orc": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SACv2.sac": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21_SACv2.sid": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21v2.dsc": StringSet{},
	"OUL_R21v2.msh": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21v2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21v2.pv1": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21v2.pv2": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R21v2.sft": StringSet{
		"CTI": true,
		"DSC": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_PIDv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_PIDv2.pd1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_PIDv2.pid": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBR_OBXv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBR_OBXv2.obx": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBR_OBXv2.sid": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBR_OBXv2.tcd": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBR_TQ1v2.tq1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBR_TQ1v2.tq2": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBRv2.cti": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBRv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBRv2.obr": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_OBRv2.orc": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_SACv2.inv": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPM_SACv2.sac": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPMv2.obx": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22_SPMv2.spm": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22v2.dsc": StringSet{},
	"OUL_R22v2.msh": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22v2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22v2.pv1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22v2.pv2": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R22v2.sft": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_PIDv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_PIDv2.pd1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_PIDv2.pid": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBR_OBXv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBR_OBXv2.obx": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBR_OBXv2.sid": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBR_OBXv2.tcd": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBR_TQ1v2.tq1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBR_TQ1v2.tq2": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBRv2.cti": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBRv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBRv2.obr": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SAC_OBRv2.orc": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SACv2.inv": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPM_SACv2.sac": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPMv2.obx": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23_SPMv2.spm": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23v2.dsc": StringSet{},
	"OUL_R23v2.msh": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23v2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23v2.pv1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23v2.pv2": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R23v2.sft": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_OBXv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_OBXv2.obx": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_OBXv2.sid": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_OBXv2.tcd": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_SPM_SACv2.inv": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_SPM_SACv2.sac": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_SPMv2.obx": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_SPMv2.spm": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_TQ1v2.tq1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBR_TQ1v2.tq2": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBRv2.cti": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBRv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBRv2.obr": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_OBRv2.orc": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_PIDv2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_PIDv2.pd1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24_PIDv2.pid": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24v2.dsc": StringSet{},
	"OUL_R24v2.msh": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24v2.nte": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24v2.pv1": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24v2.pv2": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"SAC": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"OUL_R24v2.sft": StringSet{
		"CTI": true,
		"DSC": true,
		"INV": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SAC": true,
		"SFT": true,
		"SID": true,
		"SPM": true,
		"TCD": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_CSRv2.csp": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_CSRv2.csr": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1_RXAv2.rxa": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1_RXAv2.rxr": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1_TQ1v2.tq1": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1_TQ1v2.tq2": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1v2.nk1": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1v2.obx": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1v2.prb": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1v2.rxe": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_NK1v2.rxr": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_RXAv2.rxa": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_RXAv2.rxr": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_TQ1v2.tq1": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCR_TQ1v2.tq2": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCRv2.nte": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCRv2.obx": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCRv2.pcr": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCRv2.prb": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCRv2.rxe": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEO_PCRv2.rxr": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PES_PEOv2.peo": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07_PESv2.pes": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PES": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07v2.evn": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PD1": true,
		"PEO": true,
		"PES": true,
		"PID": true,
		"PRB": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07v2.msh": StringSet{
		"CSP": true,
		"CSR": true,
		"EVN": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PD1": true,
		"PEO": true,
		"PES": true,
		"PID": true,
		"PRB": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07v2.nte": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PES": true,
		"PRB": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07v2.pd1": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PES": true,
		"PRB": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07v2.pid": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PD1": true,
		"PEO": true,
		"PES": true,
		"PRB": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07v2.pv1": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PES": true,
		"PRB": true,
		"PV2": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07v2.pv2": StringSet{
		"CSP": true,
		"CSR": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PEO": true,
		"PES": true,
		"PRB": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PEX_P07v2.sft": StringSet{
		"CSP": true,
		"CSR": true,
		"EVN": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"PCR": true,
		"PD1": true,
		"PEO": true,
		"PES": true,
		"PID": true,
		"PRB": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"PGL_PC6_GOL_OBXv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_OBXv2.obx": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ORC_OBXv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ORC_OBXv2.obx": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ORC_OBXv2.var_": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ORCv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ORCv2.obr": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ORCv2.orc": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ORCv2.var_": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PRB_OBXv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PRB_OBXv2.obx": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PRB_ROLv2.rol": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PRB_ROLv2.var_": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PRBv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PRBv2.prb": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PRBv2.var_": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PTHv2.pth": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_PTHv2.var_": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ROLv2.rol": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOL_ROLv2.var_": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOLv2.gol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOLv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6_GOLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6v2.msh": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PGL_PC6v2.pid": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6v2.pv1": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6v2.pv2": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PGL_PC6v2.sft": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PIN_I07_IN1v2.in1": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"PIN_I07_IN1v2.in2": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"PIN_I07_IN1v2.in3": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"PIN_I07_PRDv2.ctd": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"PIN_I07_PRDv2.prd": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"PIN_I07v2.gt1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"PIN_I07v2.msh": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"PIN_I07v2.nk1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
	},
	"PIN_I07v2.nte": StringSet{
		"NTE": true,
	},
	"PIN_I07v2.pid": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
	},
	"PMU_B01v2.aff": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
	},
	"PMU_B01v2.cer": StringSet{
		"CER": true,
	},
	"PMU_B01v2.edu": StringSet{
		"CER": true,
		"EDU": true,
	},
	"PMU_B01v2.evn": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"PMU_B01v2.lan": StringSet{
		"CER": true,
		"EDU": true,
		"LAN": true,
	},
	"PMU_B01v2.msh": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"EVN": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B01v2.org": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
	},
	"PMU_B01v2.pra": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
	},
	"PMU_B01v2.sft": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"EVN": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B01v2.stf": StringSet{
		"AFF": true,
		"CER": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
	},
	"PMU_B03v2.evn": StringSet{
		"STF": true,
	},
	"PMU_B03v2.msh": StringSet{
		"EVN": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B03v2.sft": StringSet{
		"EVN": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B03v2.stf": StringSet{},
	"PMU_B04v2.evn": StringSet{
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"PMU_B04v2.msh": StringSet{
		"EVN": true,
		"ORG": true,
		"PRA": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B04v2.org": StringSet{
		"ORG": true,
	},
	"PMU_B04v2.pra": StringSet{
		"ORG": true,
		"PRA": true,
	},
	"PMU_B04v2.sft": StringSet{
		"EVN": true,
		"ORG": true,
		"PRA": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B04v2.stf": StringSet{
		"ORG": true,
		"PRA": true,
	},
	"PMU_B07_CERv2.cer": StringSet{
		"CER": true,
		"ROL": true,
	},
	"PMU_B07_CERv2.rol": StringSet{
		"CER": true,
		"ROL": true,
	},
	"PMU_B07v2.evn": StringSet{
		"CER": true,
		"PRA": true,
		"ROL": true,
		"STF": true,
	},
	"PMU_B07v2.msh": StringSet{
		"CER": true,
		"EVN": true,
		"PRA": true,
		"ROL": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B07v2.pra": StringSet{
		"CER": true,
		"ROL": true,
	},
	"PMU_B07v2.sft": StringSet{
		"CER": true,
		"EVN": true,
		"PRA": true,
		"ROL": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B07v2.stf": StringSet{
		"CER": true,
		"PRA": true,
		"ROL": true,
	},
	"PMU_B08v2.cer": StringSet{
		"CER": true,
	},
	"PMU_B08v2.evn": StringSet{
		"CER": true,
		"PRA": true,
		"STF": true,
	},
	"PMU_B08v2.msh": StringSet{
		"CER": true,
		"EVN": true,
		"PRA": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B08v2.pra": StringSet{
		"CER": true,
	},
	"PMU_B08v2.sft": StringSet{
		"CER": true,
		"EVN": true,
		"PRA": true,
		"SFT": true,
		"STF": true,
	},
	"PMU_B08v2.stf": StringSet{
		"CER": true,
		"PRA": true,
	},
	"PPG_PCG_PTH_GOL_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ORC_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ORC_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ORC_OBXv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ORCv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ORCv2.obr": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ORCv2.orc": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ORCv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_PRB_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_PRB_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_PRB_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_PRB_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_PRBv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_PRBv2.prb": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_PRBv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOL_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOLv2.gol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOLv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_GOLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTH_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTHv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTHv2.pth": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCG_PTHv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCGv2.msh": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPG_PCGv2.pid": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCGv2.pv1": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCGv2.pv2": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPG_PCGv2.sft": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_GOL_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_GOL_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_GOL_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_GOL_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_GOLv2.gol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_GOLv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_GOLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ORC_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ORC_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ORC_OBXv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ORCv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ORCv2.obr": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ORCv2.orc": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ORCv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRB_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRBv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRBv2.prb": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_PRBv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTH_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTHv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTHv2.pth": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCB_PTHv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCBv2.msh": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPP_PCBv2.pid": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCBv2.pv1": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCBv2.pv2": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPP_PCBv2.sft": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_GOL_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_GOL_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_GOL_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_GOL_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_GOLv2.gol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_GOLv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_GOLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ORC_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ORC_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ORC_OBXv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ORCv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ORCv2.obr": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ORCv2.orc": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ORCv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_PTHv2.pth": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_PTHv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRB_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRBv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRBv2.prb": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1_PRBv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1v2.msh": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPR_PC1v2.pid": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1v2.pv1": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1v2.pv2": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"ROL": true,
		"VAR": true,
	},
	"PPR_PC1v2.sft": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ORC_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ORC_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ORC_OBXv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ORCv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ORCv2.obr": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ORCv2.orc": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ORCv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_PRB_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_PRB_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_PRB_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_PRB_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_PRBv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_PRBv2.prb": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_PRBv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOL_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOLv2.gol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOLv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_GOLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTH_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTHv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTHv2.pth": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PID_PTHv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PIDv2.pid": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PIDv2.pv1": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCL_PIDv2.pv2": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCLv2.err": StringSet{
		"ERR": true,
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCLv2.msa": StringSet{
		"ERR": true,
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCLv2.msh": StringSet{
		"ERR": true,
		"GOL": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPT_PCLv2.qak": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCLv2.qrd": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPT_PCLv2.sft": StringSet{
		"ERR": true,
		"GOL": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ORC_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ORC_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ORC_OBXv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ORCv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ORCv2.obr": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ORCv2.orc": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ORCv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PRB_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PRB_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PRB_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PRB_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PRBv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PRBv2.prb": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PRBv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PTHv2.pth": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_PTHv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOL_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOLv2.gol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOLv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PID_GOLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PIDv2.pid": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PIDv2.pv1": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCA_PIDv2.pv2": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCAv2.err": StringSet{
		"ERR": true,
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCAv2.msa": StringSet{
		"ERR": true,
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCAv2.msh": StringSet{
		"ERR": true,
		"GOL": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PPV_PCAv2.qak": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCAv2.qrd": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PPV_PCAv2.sft": StringSet{
		"ERR": true,
		"GOL": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_GOL_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_GOL_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_GOL_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_GOL_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_GOLv2.gol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_GOLv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_GOLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ORC_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ORC_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ORC_OBXv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ORCv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ORCv2.obr": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ORCv2.orc": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ORCv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_PTHv2.pth": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_PTHv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRB_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRBv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRBv2.prb": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PID_PRBv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PIDv2.pid": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PIDv2.pv1": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5_PIDv2.pv2": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5v2.err": StringSet{
		"ERR": true,
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5v2.msa": StringSet{
		"ERR": true,
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5v2.msh": StringSet{
		"ERR": true,
		"GOL": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PRR_PC5v2.qak": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5v2.qrd": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PRR_PC5v2.sft": StringSet{
		"ERR": true,
		"GOL": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_GOL_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_GOL_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_GOL_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_GOL_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_GOLv2.gol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_GOLv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_GOLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ORC_OBXv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ORC_OBXv2.obx": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ORC_OBXv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ORCv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ORCv2.obr": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ORCv2.orc": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ORCv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRB_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRBv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRBv2.prb": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_PRBv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_ROLv2.rol": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTH_ROLv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTHv2.nte": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTHv2.pth": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PID_PTHv2.var_": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PIDv2.pid": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PIDv2.pv1": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCF_PIDv2.pv2": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCFv2.err": StringSet{
		"ERR": true,
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCFv2.msa": StringSet{
		"ERR": true,
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCFv2.msh": StringSet{
		"ERR": true,
		"GOL": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"PTR_PCFv2.qak": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCFv2.qrd": StringSet{
		"GOL": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"ROL": true,
		"VAR": true,
	},
	"PTR_PCFv2.sft": StringSet{
		"ERR": true,
		"GOL": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PRB": true,
		"PTH": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QRD": true,
		"ROL": true,
		"SFT": true,
		"VAR": true,
	},
	"QBP_K13v2.dsc": StringSet{},
	"QBP_K13v2.err": StringSet{
		"DSC": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"QBP_K13v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"QBP_K13v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"QBP_K13v2.qak": StringSet{
		"DSC": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"QBP_K13v2.qpd": StringSet{
		"DSC": true,
		"RDF": true,
		"RDT": true,
	},
	"QBP_K13v2.rdf": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"QBP_K13v2.rdt": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"QBP_Q11v2.dsc": StringSet{},
	"QBP_Q11v2.msh": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QBP_Q11v2.qpd": StringSet{
		"DSC": true,
		"RCP": true,
	},
	"QBP_Q11v2.rcp": StringSet{
		"DSC": true,
	},
	"QBP_Q11v2.sft": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QBP_Q13v2.dsc": StringSet{},
	"QBP_Q13v2.msh": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"RDF": true,
		"SFT": true,
	},
	"QBP_Q13v2.qpd": StringSet{
		"DSC": true,
		"RCP": true,
		"RDF": true,
	},
	"QBP_Q13v2.rcp": StringSet{
		"DSC": true,
	},
	"QBP_Q13v2.rdf": StringSet{
		"DSC": true,
		"RCP": true,
	},
	"QBP_Q13v2.sft": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"RDF": true,
		"SFT": true,
	},
	"QBP_Q15v2.dsc": StringSet{},
	"QBP_Q15v2.msh": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QBP_Q15v2.qpd": StringSet{
		"DSC": true,
		"RCP": true,
	},
	"QBP_Q15v2.rcp": StringSet{
		"DSC": true,
	},
	"QBP_Q15v2.sft": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QBP_Q21v2.dsc": StringSet{},
	"QBP_Q21v2.msh": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QBP_Q21v2.qpd": StringSet{
		"DSC": true,
		"RCP": true,
	},
	"QBP_Q21v2.rcp": StringSet{
		"DSC": true,
	},
	"QBP_Q21v2.sft": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QBP_Qnnv2.dsc": StringSet{},
	"QBP_Qnnv2.msh": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"RDF": true,
		"SFT": true,
	},
	"QBP_Qnnv2.qpd": StringSet{
		"DSC": true,
		"RCP": true,
		"RDF": true,
	},
	"QBP_Qnnv2.rcp": StringSet{
		"DSC": true,
	},
	"QBP_Qnnv2.rdf": StringSet{
		"DSC": true,
		"RCP": true,
	},
	"QBP_Qnnv2.sft": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"RDF": true,
		"SFT": true,
	},
	"QBP_Z73v2.msh": StringSet{
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QBP_Z73v2.qpd": StringSet{
		"RCP": true,
	},
	"QBP_Z73v2.rcp": StringSet{},
	"QBP_Z73v2.sft": StringSet{
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QCK_Q02v2.err": StringSet{
		"QAK": true,
	},
	"QCK_Q02v2.msa": StringSet{
		"ERR": true,
		"QAK": true,
	},
	"QCK_Q02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"SFT": true,
	},
	"QCK_Q02v2.qak": StringSet{},
	"QCK_Q02v2.sft": StringSet{
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"SFT": true,
	},
	"QCN_J01v2.msh": StringSet{
		"QID": true,
		"SFT": true,
	},
	"QCN_J01v2.qid": StringSet{},
	"QCN_J01v2.sft": StringSet{
		"QID": true,
		"SFT": true,
	},
	"QRY_A19v2.msh": StringSet{
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_A19v2.qrd": StringSet{
		"QRF": true,
	},
	"QRY_A19v2.qrf": StringSet{},
	"QRY_A19v2.sft": StringSet{
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_P04v2.dsc": StringSet{},
	"QRY_P04v2.msh": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
	},
	"QRY_P04v2.qrd": StringSet{
		"DSC": true,
		"QRF": true,
	},
	"QRY_P04v2.qrf": StringSet{
		"DSC": true,
	},
	"QRY_PC4v2.msh": StringSet{
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_PC4v2.qrd": StringSet{
		"QRF": true,
	},
	"QRY_PC4v2.qrf": StringSet{},
	"QRY_PC4v2.sft": StringSet{
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_Q01v2.dsc": StringSet{},
	"QRY_Q01v2.msh": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_Q01v2.qrd": StringSet{
		"DSC": true,
		"QRF": true,
	},
	"QRY_Q01v2.qrf": StringSet{
		"DSC": true,
	},
	"QRY_Q01v2.sft": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_Q02v2.dsc": StringSet{},
	"QRY_Q02v2.msh": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_Q02v2.qrd": StringSet{
		"DSC": true,
		"QRF": true,
	},
	"QRY_Q02v2.qrf": StringSet{
		"DSC": true,
	},
	"QRY_Q02v2.sft": StringSet{
		"DSC": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_R02v2.msh": StringSet{
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_R02v2.qrd": StringSet{
		"QRF": true,
	},
	"QRY_R02v2.qrf": StringSet{},
	"QRY_R02v2.sft": StringSet{
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"QRY_T12v2.msh": StringSet{
		"QRD": true,
		"QRF": true,
	},
	"QRY_T12v2.qrd": StringSet{
		"QRF": true,
	},
	"QRY_T12v2.qrf": StringSet{},
	"QSB_Q16v2.dsc": StringSet{},
	"QSB_Q16v2.msh": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QSB_Q16v2.qpd": StringSet{
		"DSC": true,
		"RCP": true,
	},
	"QSB_Q16v2.rcp": StringSet{
		"DSC": true,
	},
	"QSB_Q16v2.sft": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QVR_Q17v2.dsc": StringSet{},
	"QVR_Q17v2.msh": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"QVR_Q17v2.qpd": StringSet{
		"DSC": true,
		"RCP": true,
	},
	"QVR_Q17v2.rcp": StringSet{
		"DSC": true,
	},
	"QVR_Q17v2.sft": StringSet{
		"DSC": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
	},
	"RAR_RAR_QRD_ORC_RXEv2.rxc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRD_ORC_RXEv2.rxe": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRD_ORC_RXEv2.rxr": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRD_ORCv2.orc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRD_ORCv2.rxa": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRD_ORCv2.rxr": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRDv2.nte": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRDv2.pid": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRDv2.qrd": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RAR_QRDv2.qrf": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RAR_RARv2.dsc": StringSet{},
	"RAR_RARv2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RAR_RARv2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RAR_RARv2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RAR_RARv2.sft": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RAS_O01_ORC_OBXv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_OBXv2.obx": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_RXEv2.rxc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_RXEv2.rxe": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_RXEv2.rxr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_RXO_RXCv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_RXO_RXCv2.rxc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_RXOv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_RXOv2.rxo": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORC_RXOv2.rxr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORCv2.cti": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORCv2.orc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORCv2.rxa": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_ORCv2.rxr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_PIDv2.pd1": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_PIDv2.pv1": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01_PIDv2.pv2": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01v2.msh": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O01v2.nte": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RAS_O17_ORC_RXA_OBXv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXA_OBXv2.obx": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXAv2.rxa": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXAv2.rxr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXCv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXCv2.rxc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXE_TQ1v2.tq1": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXE_TQ1v2.tq2": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXEv2.rxc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXEv2.rxe": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_RXEv2.rxr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_TQ1v2.tq1": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORC_TQ1v2.tq2": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORCv2.cti": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORCv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORCv2.orc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORCv2.rxo": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_ORCv2.rxr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_PIDv2.al1": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_PIDv2.nte": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_PIDv2.pd1": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_PIDv2.pid": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_PIDv2.pv1": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17_PIDv2.pv2": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17v2.msh": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17v2.nte": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RAS_O17v2.sft": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RCI_I05_OBR_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
	},
	"RCI_I05_OBR_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
	},
	"RCI_I05_OBRv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
	},
	"RCI_I05_OBRv2.obr": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
	},
	"RCI_I05_PRDv2.ctd": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PRD": true,
	},
	"RCI_I05_PRDv2.prd": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PRD": true,
	},
	"RCI_I05v2.al1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
	},
	"RCI_I05v2.dg1": StringSet{
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
	},
	"RCI_I05v2.drg": StringSet{
		"AL1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
	},
	"RCI_I05v2.msa": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
	},
	"RCI_I05v2.msh": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"RCI_I05v2.nte": StringSet{
		"NTE": true,
	},
	"RCI_I05v2.pid": StringSet{
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
	},
	"RCI_I05v2.qrd": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PRD": true,
		"QRF": true,
	},
	"RCI_I05v2.qrf": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PRD": true,
	},
	"RCI_I05v2.sft": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"RCL_I06_PRDv2.ctd": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RCL_I06_PRDv2.prd": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RCL_I06v2.al1": StringSet{
		"AL1": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
	},
	"RCL_I06v2.dg1": StringSet{
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
	},
	"RCL_I06v2.drg": StringSet{
		"AL1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
	},
	"RCL_I06v2.dsc": StringSet{},
	"RCL_I06v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"RCL_I06v2.msa": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
	},
	"RCL_I06v2.msh": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"MSA": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"RCL_I06v2.nte": StringSet{
		"DSC": true,
		"DSP": true,
		"NTE": true,
	},
	"RCL_I06v2.pid": StringSet{
		"AL1": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
	},
	"RCL_I06v2.qrd": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRF": true,
	},
	"RCL_I06v2.qrf": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RCL_I06v2.sft": StringSet{
		"AL1": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"DSC": true,
		"DSP": true,
		"MSA": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"RDE_O01_ORC_OBXv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORC_OBXv2.obx": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORC_RXO_RXCv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORC_RXO_RXCv2.rxc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORC_RXOv2.nte": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORC_RXOv2.rxo": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORC_RXOv2.rxr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORCv2.cti": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORCv2.orc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORCv2.rxc": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORCv2.rxe": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_ORCv2.rxr": StringSet{
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PIDv2.gt1": StringSet{
		"AL1": true,
		"CTI": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PIDv2.pd1": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PIDv2.pv1": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01_PIDv2.pv2": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01v2.msh": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O01v2.nte": StringSet{
		"AL1": true,
		"CTI": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDE_O11_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_RXO_RXCv2.nte": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_RXO_RXCv2.rxc": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_RXOv2.nte": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_RXOv2.rxo": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_RXOv2.rxr": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_TQ11v2.tq1": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_TQ11v2.tq2": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_TQ12v2.tq1": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORC_TQ12v2.tq2": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORCv2.blg": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORCv2.cti": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORCv2.ft1": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORCv2.nte": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORCv2.orc": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORCv2.rxc": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORCv2.rxe": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_ORCv2.rxr": StringSet{
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDE_O11v2.sft": StringSet{
		"AL1": true,
		"BLG": true,
		"CTI": true,
		"FT1": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDO_O01_ORC_OBXv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_ORC_OBXv2.obx": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_ORC_RXCv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_ORC_RXCv2.rxc": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_ORCv2.blg": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_ORCv2.nte": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_ORCv2.orc": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_ORCv2.rxo": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_ORCv2.rxr": StringSet{
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PID_IN1v2.in1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PID_IN1v2.in2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PID_IN1v2.in3": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PIDv2.gt1": StringSet{
		"AL1": true,
		"BLG": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PIDv2.pd1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PIDv2.pv1": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01_PIDv2.pv2": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01v2.msh": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDO_O01v2.nte": StringSet{
		"AL1": true,
		"BLG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RDR_RDR_QRD_ORC_RXDv2.rxc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRD_ORC_RXDv2.rxd": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRD_ORC_RXDv2.rxr": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRD_ORCv2.orc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRD_ORCv2.rxc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRD_ORCv2.rxe": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRD_ORCv2.rxr": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRDv2.nte": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRDv2.pid": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRDv2.qrd": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDR_QRDv2.qrf": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
	},
	"RDR_RDRv2.dsc": StringSet{},
	"RDR_RDRv2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RDR_RDRv2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RDR_RDRv2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RDR_RDRv2.sft": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RDS_O01_ORC_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_RXEv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_RXEv2.rxe": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_RXEv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_RXO_RXCv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_RXO_RXCv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_RXOv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_RXOv2.rxo": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORC_RXOv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORCv2.orc": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORCv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORCv2.rxd": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_ORCv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_PIDv2.pd1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_PIDv2.pv1": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01_PIDv2.pv2": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01v2.msh": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O01v2.nte": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
	},
	"RDS_O13_ORC_OBXv2.nte": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_OBXv2.obx": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXE_TQ1v2.tq1": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXE_TQ1v2.tq2": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXEv2.nte": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXEv2.rxc": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXEv2.rxe": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXEv2.rxr": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXO_RXCv2.nte": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXO_RXCv2.rxc": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXOv2.nte": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXOv2.rxo": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_RXOv2.rxr": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_TQ1v2.tq1": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORC_TQ1v2.tq2": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORCv2.ft1": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORCv2.nte": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORCv2.orc": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORCv2.rxc": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORCv2.rxd": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_ORCv2.rxr": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_PIDv2.al1": StringSet{
		"AL1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_PIDv2.nte": StringSet{
		"AL1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_PIDv2.pd1": StringSet{
		"AL1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_PIDv2.pid": StringSet{
		"AL1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_PIDv2.pv1": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13_PIDv2.pv2": StringSet{
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13v2.msh": StringSet{
		"AL1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13v2.nte": StringSet{
		"AL1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDS_O13v2.sft": StringSet{
		"AL1": true,
		"FT1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RDY_K15v2.dsc": StringSet{},
	"RDY_K15v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"RDY_K15v2.err": StringSet{
		"DSC": true,
		"DSP": true,
		"QAK": true,
		"QPD": true,
	},
	"RDY_K15v2.msa": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
	},
	"RDY_K15v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"SFT": true,
	},
	"RDY_K15v2.qak": StringSet{
		"DSC": true,
		"DSP": true,
		"QPD": true,
	},
	"RDY_K15v2.qpd": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"RDY_K15v2.sft": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"SFT": true,
	},
	"REF_I12_IN1v2.in1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_IN1v2.in2": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_IN1v2.in3": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_OBR_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_OBR_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_OBRv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_OBRv2.obr": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_PR1v2.aut": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_PR1v2.ctd": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_PR1v2.pr1": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_PRDv2.ctd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12_PRDv2.prd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.acc": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.al1": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.aut": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.ctd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.dg1": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.drg": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.gt1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
		"SFT": true,
	},
	"REF_I12v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.nte": StringSet{
		"NTE": true,
	},
	"REF_I12v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.pv1": StringSet{
		"NTE": true,
		"PV2": true,
	},
	"REF_I12v2.pv2": StringSet{
		"NTE": true,
	},
	"REF_I12v2.rf1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"REF_I12v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
		"SFT": true,
	},
	"RER_RER_QRD_ORCv2.orc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RER_RER_QRD_ORCv2.rxc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RER_RER_QRD_ORCv2.rxe": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RER_RER_QRD_ORCv2.rxr": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RER_RER_QRDv2.nte": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RER_RER_QRDv2.pid": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RER_RER_QRDv2.qrd": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RER_RER_QRDv2.qrf": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RER_RERv2.dsc": StringSet{},
	"RER_RERv2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RER_RERv2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RER_RERv2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RER_RERv2.sft": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
	},
	"RGR_RGR_QRD_ORC_RXEv2.rxc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRD_ORC_RXEv2.rxe": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRD_ORC_RXEv2.rxr": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRD_ORCv2.orc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRD_ORCv2.rxc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRD_ORCv2.rxg": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRD_ORCv2.rxr": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRDv2.nte": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRDv2.pid": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRDv2.qrd": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGR_QRDv2.qrf": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
	},
	"RGR_RGRv2.dsc": StringSet{},
	"RGR_RGRv2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
		"SFT": true,
	},
	"RGR_RGRv2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
		"SFT": true,
	},
	"RGR_RGRv2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
		"SFT": true,
	},
	"RGR_RGRv2.sft": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXR": true,
		"SFT": true,
	},
	"RGV_O01_ORC_RXCv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXCv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXEv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXEv2.rxe": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXEv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXG_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXG_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXGv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXGv2.rxg": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORC_RXGv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORCv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORCv2.orc": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORCv2.rxo": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_ORCv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_PIDv2.al1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_PIDv2.nte": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_PIDv2.pid": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_PIDv2.pv1": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01_PIDv2.pv2": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01v2.msh": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O01v2.nte": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
	},
	"RGV_O15_ORC_RXCv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXCv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXE_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXE_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXEv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXEv2.rxe": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXEv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXG_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXG_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXG_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXG_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXGv2.rxc": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXGv2.rxg": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_RXGv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBX": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORCv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORCv2.orc": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORCv2.rxo": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_ORCv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_PIDv2.al1": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_PIDv2.nte": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_PIDv2.pid": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_PIDv2.pv1": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15_PIDv2.pv2": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15v2.msh": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15v2.nte": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RGV_O15v2.sft": StringSet{
		"AL1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"ROR_ROR_QRD_ORCv2.orc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"ROR_ROR_QRD_ORCv2.rxc": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"ROR_ROR_QRD_ORCv2.rxo": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"ROR_ROR_QRD_ORCv2.rxr": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"ROR_ROR_QRDv2.nte": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"ROR_ROR_QRDv2.pid": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"ROR_ROR_QRDv2.qrd": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"ROR_ROR_QRDv2.qrf": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"ROR_RORv2.dsc": StringSet{},
	"ROR_RORv2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
	},
	"ROR_RORv2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
	},
	"ROR_RORv2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
	},
	"ROR_RORv2.sft": StringSet{
		"DSC": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
	},
	"RPA_I08_IN1v2.in1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_IN1v2.in2": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_IN1v2.in3": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_OBR_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_OBR_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_OBRv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_OBRv2.obr": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_PR1v2.aut": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_PR1v2.ctd": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_PR1v2.pr1": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_PRDv2.ctd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08_PRDv2.prd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.acc": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.al1": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.aut": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.ctd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.dg1": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.drg": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.gt1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.msa": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
	},
	"RPA_I08v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
		"SFT": true,
	},
	"RPA_I08v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.nte": StringSet{
		"NTE": true,
	},
	"RPA_I08v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.pv1": StringSet{
		"NTE": true,
		"PV2": true,
	},
	"RPA_I08v2.pv2": StringSet{
		"NTE": true,
	},
	"RPA_I08v2.rf1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RPA_I08v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
		"SFT": true,
	},
	"RPI_I01_IN1v2.in1": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RPI_I01_IN1v2.in2": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RPI_I01_IN1v2.in3": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RPI_I01_PRDv2.ctd": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPI_I01_PRDv2.prd": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPI_I01v2.gt1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RPI_I01v2.msa": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPI_I01v2.msh": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RPI_I01v2.nk1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
	},
	"RPI_I01v2.nte": StringSet{
		"NTE": true,
	},
	"RPI_I01v2.pid": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
	},
	"RPI_I01v2.sft": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RPI_I04_IN1v2.in1": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RPI_I04_IN1v2.in2": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RPI_I04_IN1v2.in3": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RPI_I04_PRDv2.ctd": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPI_I04_PRDv2.prd": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPI_I04v2.gt1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RPI_I04v2.msa": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPI_I04v2.msh": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RPI_I04v2.nk1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
	},
	"RPI_I04v2.nte": StringSet{
		"NTE": true,
	},
	"RPI_I04v2.pid": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
	},
	"RPI_I04v2.sft": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RPL_I02_PRDv2.ctd": StringSet{
		"CTD": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
		"PRD": true,
	},
	"RPL_I02_PRDv2.prd": StringSet{
		"CTD": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
		"PRD": true,
	},
	"RPL_I02v2.dsc": StringSet{},
	"RPL_I02v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"RPL_I02v2.msa": StringSet{
		"CTD": true,
		"DSC": true,
		"DSP": true,
		"NTE": true,
		"PRD": true,
	},
	"RPL_I02v2.msh": StringSet{
		"CTD": true,
		"DSC": true,
		"DSP": true,
		"MSA": true,
		"NTE": true,
		"PRD": true,
		"SFT": true,
	},
	"RPL_I02v2.nte": StringSet{
		"DSC": true,
		"DSP": true,
		"NTE": true,
	},
	"RPL_I02v2.sft": StringSet{
		"CTD": true,
		"DSC": true,
		"DSP": true,
		"MSA": true,
		"NTE": true,
		"PRD": true,
		"SFT": true,
	},
	"RPR_I03_PRDv2.ctd": StringSet{
		"CTD": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPR_I03_PRDv2.prd": StringSet{
		"CTD": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPR_I03v2.msa": StringSet{
		"CTD": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RPR_I03v2.msh": StringSet{
		"CTD": true,
		"MSA": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RPR_I03v2.nte": StringSet{
		"NTE": true,
	},
	"RPR_I03v2.pid": StringSet{
		"NTE": true,
		"PID": true,
	},
	"RPR_I03v2.sft": StringSet{
		"CTD": true,
		"MSA": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RQA_I08_IN1v2.in1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_IN1v2.in2": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_IN1v2.in3": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_OBR_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_OBR_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_OBRv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_OBRv2.obr": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_PR1v2.aut": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_PR1v2.ctd": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_PR1v2.pr1": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_PRDv2.ctd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08_PRDv2.prd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.acc": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.al1": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.aut": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.ctd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.dg1": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.drg": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.gt1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
		"SFT": true,
	},
	"RQA_I08v2.nk1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.nte": StringSet{
		"NTE": true,
	},
	"RQA_I08v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.pv1": StringSet{
		"NTE": true,
		"PV2": true,
	},
	"RQA_I08v2.pv2": StringSet{
		"NTE": true,
	},
	"RQA_I08v2.rf1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RQA_I08v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
		"SFT": true,
	},
	"RQC_I05_PRDv2.ctd": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQC_I05_PRDv2.prd": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQC_I05v2.gt1": StringSet{
		"GT1": true,
		"NTE": true,
	},
	"RQC_I05v2.msh": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"RQC_I05v2.nk1": StringSet{
		"GT1": true,
		"NK1": true,
		"NTE": true,
	},
	"RQC_I05v2.nte": StringSet{
		"NTE": true,
	},
	"RQC_I05v2.pid": StringSet{
		"GT1": true,
		"NK1": true,
		"NTE": true,
	},
	"RQC_I05v2.qrd": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRF": true,
	},
	"RQC_I05v2.qrf": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQC_I05v2.sft": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"RQC_I06_PRDv2.ctd": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQC_I06_PRDv2.prd": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQC_I06v2.gt1": StringSet{
		"NTE": true,
	},
	"RQC_I06v2.msh": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRD": true,
		"QRF": true,
	},
	"RQC_I06v2.nk1": StringSet{
		"GT1": true,
		"NK1": true,
		"NTE": true,
	},
	"RQC_I06v2.nte": StringSet{
		"NTE": true,
	},
	"RQC_I06v2.pid": StringSet{
		"GT1": true,
		"NK1": true,
		"NTE": true,
	},
	"RQC_I06v2.qrd": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"QRF": true,
	},
	"RQC_I06v2.qrf": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQI_I01_IN1v2.in1": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RQI_I01_IN1v2.in2": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RQI_I01_IN1v2.in3": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RQI_I01_PRDv2.ctd": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQI_I01_PRDv2.prd": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQI_I01v2.gt1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
	},
	"RQI_I01v2.msh": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RQI_I01v2.nk1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
	},
	"RQI_I01v2.nte": StringSet{
		"NTE": true,
	},
	"RQI_I01v2.pid": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
	},
	"RQI_I01v2.sft": StringSet{
		"CTD": true,
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RQP_I04_PRDv2.ctd": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQP_I04_PRDv2.prd": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
	},
	"RQP_I04v2.gt1": StringSet{
		"GT1": true,
		"NTE": true,
	},
	"RQP_I04v2.msh": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RQP_I04v2.nk1": StringSet{
		"GT1": true,
		"NK1": true,
		"NTE": true,
	},
	"RQP_I04v2.nte": StringSet{
		"NTE": true,
	},
	"RQP_I04v2.pid": StringSet{
		"GT1": true,
		"NK1": true,
		"NTE": true,
	},
	"RQP_I04v2.sft": StringSet{
		"CTD": true,
		"GT1": true,
		"NK1": true,
		"NTE": true,
		"PID": true,
		"PRD": true,
		"SFT": true,
	},
	"RQQ_Q01v2.dsc": StringSet{},
	"RQQ_Q01v2.erq": StringSet{
		"DSC": true,
	},
	"RQQ_Q01v2.msh": StringSet{
		"DSC": true,
		"ERQ": true,
	},
	"RQQ_Q09v2.dsc": StringSet{},
	"RQQ_Q09v2.erq": StringSet{
		"DSC": true,
	},
	"RQQ_Q09v2.msh": StringSet{
		"DSC": true,
		"ERQ": true,
		"SFT": true,
	},
	"RQQ_Q09v2.sft": StringSet{
		"DSC": true,
		"ERQ": true,
		"SFT": true,
	},
	"RRA_O02_PID_ORCv2.orc": StringSet{
		"ORC": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O02_PID_ORCv2.rxa": StringSet{
		"ORC": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O02_PID_ORCv2.rxr": StringSet{
		"ORC": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O02_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O02_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O02v2.err": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O02v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O02v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
	},
	"RRA_O18_PID_ORC_TQ1v2.tq1": StringSet{
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18_PID_ORC_TQ1v2.tq2": StringSet{
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18_PID_ORCv2.orc": StringSet{
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18_PID_ORCv2.rxa": StringSet{
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18_PID_ORCv2.rxr": StringSet{
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRA_O18v2.sft": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O02_PID_ORCv2.orc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02_PID_ORCv2.rxc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02_PID_ORCv2.rxd": StringSet{
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02_PID_ORCv2.rxr": StringSet{
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02v2.err": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O02v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
	},
	"RRD_O14_PID_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14_PID_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14_PID_ORCv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14_PID_ORCv2.orc": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14_PID_ORCv2.rxc": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14_PID_ORCv2.rxd": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14_PID_ORCv2.rxr": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRD_O14v2.sft": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXD": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O02_PID_ORCv2.orc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02_PID_ORCv2.rxc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02_PID_ORCv2.rxe": StringSet{
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02_PID_ORCv2.rxr": StringSet{
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02v2.err": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O02v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
	},
	"RRE_O12_PID_ORC_TQ11v2.tq1": StringSet{
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PID_ORC_TQ11v2.tq2": StringSet{
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PID_ORC_TQ12v2.tq1": StringSet{
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PID_ORC_TQ12v2.tq2": StringSet{
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PID_ORCv2.orc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PID_ORCv2.rxc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PID_ORCv2.rxe": StringSet{
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PID_ORCv2.rxr": StringSet{
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRE_O12v2.sft": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXE": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O02_PID_ORCv2.orc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02_PID_ORCv2.rxc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02_PID_ORCv2.rxg": StringSet{
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02_PID_ORCv2.rxr": StringSet{
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02v2.err": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O02v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
	},
	"RRG_O16_PID_ORC_TQ11v2.tq1": StringSet{
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PID_ORC_TQ11v2.tq2": StringSet{
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PID_ORC_TQ12v2.tq1": StringSet{
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PID_ORC_TQ12v2.tq2": StringSet{
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PID_ORCv2.orc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PID_ORCv2.rxc": StringSet{
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PID_ORCv2.rxg": StringSet{
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PID_ORCv2.rxr": StringSet{
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16v2.err": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRG_O16v2.sft": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXG": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RRI_I12_OBR_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12_OBR_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12_OBRv2.nte": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12_OBRv2.obr": StringSet{
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12_PR1v2.aut": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12_PR1v2.ctd": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12_PR1v2.pr1": StringSet{
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12_PRDv2.ctd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12_PRDv2.prd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.acc": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.al1": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.aut": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.ctd": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.dg1": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.drg": StringSet{
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.msa": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
	},
	"RRI_I12v2.msh": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
		"SFT": true,
	},
	"RRI_I12v2.nte": StringSet{
		"NTE": true,
	},
	"RRI_I12v2.pid": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PR1": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.pv1": StringSet{
		"NTE": true,
		"PV2": true,
	},
	"RRI_I12v2.pv2": StringSet{
		"NTE": true,
	},
	"RRI_I12v2.rf1": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
	},
	"RRI_I12v2.sft": StringSet{
		"ACC": true,
		"AL1": true,
		"AUT": true,
		"CTD": true,
		"DG1": true,
		"DRG": true,
		"MSA": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"PID": true,
		"PR1": true,
		"PRD": true,
		"PV1": true,
		"PV2": true,
		"RF1": true,
		"SFT": true,
	},
	"RRO_O02_PID_ORCv2.nte1": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02_PID_ORCv2.nte2": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02_PID_ORCv2.orc": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02_PID_ORCv2.rxc": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02_PID_ORCv2.rxo": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02_PID_ORCv2.rxr": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02_PIDv2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02_PIDv2.pid": StringSet{
		"NTE": true,
		"ORC": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02v2.err": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02v2.msa": StringSet{
		"ERR": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02v2.msh": StringSet{
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RRO_O02v2.nte": StringSet{
		"NTE": true,
		"ORC": true,
		"PID": true,
		"RXC": true,
		"RXO": true,
		"RXR": true,
	},
	"RSP_K11v2.dsc": StringSet{},
	"RSP_K11v2.err": StringSet{
		"DSC": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K11v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K11v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"RSP_K11v2.qak": StringSet{
		"DSC": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K11v2.qpd": StringSet{
		"DSC": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K11v2.rdf": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RSP_K11v2.rdt": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RSP_K11v2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"RSP_K13v2.dsc": StringSet{},
	"RSP_K13v2.err": StringSet{
		"DSC": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K13v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K13v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K13v2.qak": StringSet{
		"DSC": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K13v2.qpd": StringSet{
		"DSC": true,
		"RDF": true,
		"RDT": true,
	},
	"RSP_K13v2.rdf": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RSP_K13v2.rdt": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RSP_K15v2.dsc": StringSet{},
	"RSP_K15v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"RSP_K15v2.err": StringSet{
		"DSC": true,
		"DSP": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_K15v2.msa": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_K15v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_K15v2.qak": StringSet{
		"DSC": true,
		"DSP": true,
		"QPD": true,
	},
	"RSP_K15v2.qpd": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"RSP_K21v2.dsc": StringSet{},
	"RSP_K21v2.err": StringSet{
		"DSC": true,
		"NK1": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"QRI": true,
	},
	"RSP_K21v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"NK1": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"QRI": true,
	},
	"RSP_K21v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NK1": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"QRI": true,
		"SFT": true,
	},
	"RSP_K21v2.nk1": StringSet{
		"DSC": true,
		"NK1": true,
		"QRI": true,
	},
	"RSP_K21v2.pd1": StringSet{
		"DSC": true,
		"NK1": true,
		"QRI": true,
	},
	"RSP_K21v2.pid": StringSet{
		"DSC": true,
		"NK1": true,
		"PD1": true,
		"QRI": true,
	},
	"RSP_K21v2.qak": StringSet{
		"DSC": true,
		"NK1": true,
		"PD1": true,
		"PID": true,
		"QPD": true,
		"QRI": true,
	},
	"RSP_K21v2.qpd": StringSet{
		"DSC": true,
		"NK1": true,
		"PD1": true,
		"PID": true,
		"QRI": true,
	},
	"RSP_K21v2.qri": StringSet{
		"DSC": true,
	},
	"RSP_K21v2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NK1": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"QRI": true,
		"SFT": true,
	},
	"RSP_K22_PIDv2.pd1": StringSet{
		"DSC": true,
		"PD1": true,
		"PID": true,
		"QRI": true,
	},
	"RSP_K22_PIDv2.pid": StringSet{
		"DSC": true,
		"PD1": true,
		"PID": true,
		"QRI": true,
	},
	"RSP_K22_PIDv2.qri": StringSet{
		"DSC": true,
		"PD1": true,
		"PID": true,
		"QRI": true,
	},
	"RSP_K22v2.dsc": StringSet{},
	"RSP_K22v2.err": StringSet{
		"DSC": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"QRI": true,
	},
	"RSP_K22v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"QRI": true,
	},
	"RSP_K22v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"QRI": true,
	},
	"RSP_K22v2.qak": StringSet{
		"DSC": true,
		"PD1": true,
		"PID": true,
		"QPD": true,
		"QRI": true,
	},
	"RSP_K22v2.qpd": StringSet{
		"DSC": true,
		"PD1": true,
		"PID": true,
		"QRI": true,
	},
	"RSP_K23v2.dsc": StringSet{},
	"RSP_K23v2.err": StringSet{
		"DSC": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_K23v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_K23v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"SFT": true,
	},
	"RSP_K23v2.pid": StringSet{
		"DSC": true,
	},
	"RSP_K23v2.qak": StringSet{
		"DSC": true,
		"PID": true,
		"QPD": true,
	},
	"RSP_K23v2.qpd": StringSet{
		"DSC": true,
		"PID": true,
	},
	"RSP_K23v2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"SFT": true,
	},
	"RSP_K24v2.dsc": StringSet{},
	"RSP_K24v2.err": StringSet{
		"DSC": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_K24v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_K24v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_K24v2.pid": StringSet{
		"DSC": true,
	},
	"RSP_K24v2.qak": StringSet{
		"DSC": true,
		"PID": true,
		"QPD": true,
	},
	"RSP_K24v2.qpd": StringSet{
		"DSC": true,
		"PID": true,
	},
	"RSP_K25_STFv2.aff": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"RSP_K25_STFv2.cer": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"RSP_K25_STFv2.edu": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"RSP_K25_STFv2.lan": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"RSP_K25_STFv2.org": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"RSP_K25_STFv2.pra": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"RSP_K25_STFv2.stf": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"RSP_K25v2.dsc": StringSet{},
	"RSP_K25v2.err": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"ERR": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"STF": true,
	},
	"RSP_K25v2.msa": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"ERR": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"STF": true,
	},
	"RSP_K25v2.msh": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"ERR": true,
		"LAN": true,
		"MSA": true,
		"ORG": true,
		"PRA": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
		"STF": true,
	},
	"RSP_K25v2.qak": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"QPD": true,
		"RCP": true,
		"STF": true,
	},
	"RSP_K25v2.qpd": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"RCP": true,
		"STF": true,
	},
	"RSP_K25v2.rcp": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"LAN": true,
		"ORG": true,
		"PRA": true,
		"STF": true,
	},
	"RSP_K25v2.sft": StringSet{
		"AFF": true,
		"CER": true,
		"DSC": true,
		"EDU": true,
		"ERR": true,
		"LAN": true,
		"MSA": true,
		"ORG": true,
		"PRA": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
		"STF": true,
	},
	"RSP_K31_PID_ORC_OBXv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_OBXv2.obx": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXE_TQ1v2.tq1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXE_TQ1v2.tq2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXEv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXEv2.rxe": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXEv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXO_RXCv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXO_RXCv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXOv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXOv2.rxo": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_RXOv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_TQ1v2.tq1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORC_TQ1v2.tq2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORCv2.orc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORCv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORCv2.rxd": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PID_ORCv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PIDv2.al1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PIDv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PIDv2.pd1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PIDv2.pid": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PIDv2.pv1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31_PIDv2.pv2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31v2.dsc": StringSet{},
	"RSP_K31v2.err": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31v2.msa": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31v2.msh": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31v2.qak": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31v2.qpd": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31v2.rcp": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_K31v2.sft": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Q11_LDPv2.lcc": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
	},
	"RSP_Q11_LDPv2.lch": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
	},
	"RSP_Q11_LDPv2.ldp": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
	},
	"RSP_Q11v2.dsc": StringSet{},
	"RSP_Q11v2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_Q11v2.lch": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LRL": true,
	},
	"RSP_Q11v2.loc": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LRL": true,
	},
	"RSP_Q11v2.lrl": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LRL": true,
	},
	"RSP_Q11v2.mfe": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
	},
	"RSP_Q11v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"QAK": true,
		"QPD": true,
	},
	"RSP_Q11v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"SFT": true,
	},
	"RSP_Q11v2.qak": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"QPD": true,
	},
	"RSP_Q11v2.qpd": StringSet{
		"DSC": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
	},
	"RSP_Q11v2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"LCC": true,
		"LCH": true,
		"LDP": true,
		"LOC": true,
		"LRL": true,
		"MFE": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"SFT": true,
	},
	"RSP_Z82_PID_ORC_OBXv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_OBXv2.obx": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXE_TQ1v2.tq1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXE_TQ1v2.tq2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXEv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXEv2.rxe": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXEv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXO_RXCv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXO_RXCv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXOv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXOv2.rxo": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_RXOv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_TQ1v2.tq1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORC_TQ1v2.tq2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORCv2.orc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORCv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORCv2.rxd": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PID_ORCv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PIDv2.al1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PIDv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PIDv2.pd1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PIDv2.pid": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PIDv2.pv1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82_PIDv2.pv2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82v2.dsc": StringSet{},
	"RSP_Z82v2.err": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82v2.msa": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82v2.msh": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82v2.qak": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82v2.qpd": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82v2.rcp": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z82v2.sft": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_OBXv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_OBXv2.obx": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXAv2.rxa": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXAv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXAv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXDv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXDv2.rxd": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXDv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXE_TQ1v2.tq1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXE_TQ1v2.tq2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXEv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXEv2.rxe": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXEv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXGv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXGv2.rxg": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_RXGv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_TQ1v2.tq1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORC_TQ1v2.tq2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORCv2.orc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORCv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORCv2.rxo": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PID_ORCv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PIDv2.al1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PIDv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PIDv2.pd1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86_PIDv2.pid": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86v2.dsc": StringSet{},
	"RSP_Z86v2.err": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86v2.msa": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86v2.msh": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86v2.qak": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"QPD": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86v2.qpd": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z86v2.sft": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"QAK": true,
		"QPD": true,
		"RXA": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXG": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_OBXv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_OBXv2.obx": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXE_TQ1v2.tq1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXE_TQ1v2.tq2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXEv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXEv2.rxe": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXEv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXO_RXCv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXO_RXCv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXOv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXOv2.rxo": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_RXOv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_TQ1v2.tq1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORC_TQ1v2.tq2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORCv2.orc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORCv2.rxc": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORCv2.rxd": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PID_ORCv2.rxr": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PIDv2.al1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PIDv2.nte": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PIDv2.pd1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PIDv2.pid": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PIDv2.pv1": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88_PIDv2.pv2": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88v2.dsc": StringSet{},
	"RSP_Z88v2.err": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88v2.msa": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88v2.msh": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88v2.qak": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88v2.qpd": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88v2.rcp": StringSet{
		"AL1": true,
		"DSC": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z88v2.sft": StringSet{
		"AL1": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"RXC": true,
		"RXD": true,
		"RXE": true,
		"RXO": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_ORC_OBXv2.nte": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_ORC_OBXv2.obx": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_ORC_TQ1v2.tq1": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_ORC_TQ1v2.tq2": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_ORCv2.ctd": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_ORCv2.nte": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_ORCv2.obr": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_ORCv2.orc": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_SPMv2.obx": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PID_SPMv2.spm": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PIDv2.nk1": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PIDv2.nte": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PIDv2.pd1": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PIDv2.pid": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PIDv2.pv1": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90_PIDv2.pv2": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90v2.dsc": StringSet{},
	"RSP_Z90v2.err": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90v2.msa": StringSet{
		"CTD": true,
		"DSC": true,
		"ERR": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90v2.msh": StringSet{
		"CTD": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90v2.qak": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QPD": true,
		"RCP": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90v2.qpd": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RCP": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90v2.rcp": StringSet{
		"CTD": true,
		"DSC": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RSP_Z90v2.sft": StringSet{
		"CTD": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"OBR": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"QPD": true,
		"RCP": true,
		"SFT": true,
		"SPM": true,
		"TQ1": true,
		"TQ2": true,
	},
	"RTB_K13v2.dsc": StringSet{},
	"RTB_K13v2.err": StringSet{
		"DSC": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_K13v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_K13v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"RTB_K13v2.qak": StringSet{
		"DSC": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_K13v2.qpd": StringSet{
		"DSC": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_K13v2.rdf": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RTB_K13v2.rdt": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RTB_K13v2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"RTB_Knnv2.dsc": StringSet{},
	"RTB_Knnv2.err": StringSet{
		"DSC": true,
		"QAK": true,
		"QPD": true,
	},
	"RTB_Knnv2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
	},
	"RTB_Knnv2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"SFT": true,
	},
	"RTB_Knnv2.qak": StringSet{
		"DSC": true,
		"QPD": true,
	},
	"RTB_Knnv2.qpd": StringSet{
		"DSC": true,
	},
	"RTB_Knnv2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"SFT": true,
	},
	"RTB_Q13v2.dsc": StringSet{},
	"RTB_Q13v2.err": StringSet{
		"DSC": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_Q13v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_Q13v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_Q13v2.qak": StringSet{
		"DSC": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_Q13v2.qpd": StringSet{
		"DSC": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_Q13v2.rdf": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RTB_Q13v2.rdt": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RTB_Z74v2.dsc": StringSet{},
	"RTB_Z74v2.err": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"RTB_Z74v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"RTB_Z74v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"RTB_Z74v2.qak": StringSet{
		"DSC": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_Z74v2.qpd": StringSet{
		"DSC": true,
		"RDF": true,
		"RDT": true,
	},
	"RTB_Z74v2.rdf": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RTB_Z74v2.rdt": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"RTB_Z74v2.sft": StringSet{
		"DSC": true,
		"QAK": true,
		"QPD": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"SIU_S12_PIDv2.dg1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SIU_S12_PIDv2.obx": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SIU_S12_PIDv2.pd1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SIU_S12_PIDv2.pid": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SIU_S12_PIDv2.pv1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SIU_S12_PIDv2.pv2": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SIU_S12_RGS_AIGv2.aig": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SIU_S12_RGS_AIGv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SIU_S12_RGS_AILv2.ail": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SIU_S12_RGS_AILv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SIU_S12_RGS_AIPv2.aip": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SIU_S12_RGS_AIPv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SIU_S12_RGS_AISv2.ais": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SIU_S12_RGS_AISv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SIU_S12_RGSv2.rgs": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
		"RGS": true,
	},
	"SIU_S12v2.msh": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SIU_S12v2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SIU_S12v2.sch": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SIU_S12v2.tq1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SPQ_Q01v2.dsc": StringSet{},
	"SPQ_Q01v2.msh": StringSet{
		"DSC": true,
		"RDF": true,
		"SPR": true,
	},
	"SPQ_Q01v2.rdf": StringSet{
		"DSC": true,
	},
	"SPQ_Q01v2.spr": StringSet{
		"DSC": true,
		"RDF": true,
	},
	"SPQ_Q08v2.dsc": StringSet{},
	"SPQ_Q08v2.msh": StringSet{
		"DSC": true,
		"RDF": true,
		"SFT": true,
		"SPR": true,
	},
	"SPQ_Q08v2.rdf": StringSet{
		"DSC": true,
	},
	"SPQ_Q08v2.sft": StringSet{
		"DSC": true,
		"RDF": true,
		"SFT": true,
		"SPR": true,
	},
	"SPQ_Q08v2.spr": StringSet{
		"DSC": true,
		"RDF": true,
	},
	"SQM_S25_RGS_AIGv2.aig": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
	},
	"SQM_S25_RGS_AIGv2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
	},
	"SQM_S25_RGS_AILv2.ail": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
	},
	"SQM_S25_RGS_AILv2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
	},
	"SQM_S25_RGS_AIPv2.aip": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
	},
	"SQM_S25_RGS_AIPv2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
	},
	"SQM_S25_RGS_AISv2.ais": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
	},
	"SQM_S25_RGS_AISv2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
	},
	"SQM_S25_RGSv2.rgs": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
		"RGS": true,
	},
	"SQM_S25v2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
		"PID": true,
		"RGS": true,
	},
	"SQM_S25v2.arq": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
		"PID": true,
		"RGS": true,
	},
	"SQM_S25v2.dsc": StringSet{},
	"SQM_S25v2.msh": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"ARQ": true,
		"DSC": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"RGS": true,
	},
	"SQM_S25v2.pid": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DSC": true,
		"RGS": true,
	},
	"SQM_S25v2.qrd": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"ARQ": true,
		"DSC": true,
		"PID": true,
		"QRF": true,
		"RGS": true,
	},
	"SQM_S25v2.qrf": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"ARQ": true,
		"DSC": true,
		"PID": true,
		"RGS": true,
	},
	"SQR_S25_SCH_RGS_AIGv2.aig": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCH_RGS_AIGv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCH_RGS_AILv2.ail": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCH_RGS_AILv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCH_RGS_AIPv2.aip": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCH_RGS_AIPv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCH_RGS_AISv2.ais": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCH_RGS_AISv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCH_RGSv2.rgs": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SQR_S25_SCHv2.dg1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25_SCHv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25_SCHv2.pid": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25_SCHv2.pv1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25_SCHv2.pv2": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25_SCHv2.sch": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25_SCHv2.tq1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25v2.dsc": StringSet{},
	"SQR_S25v2.err": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25v2.msa": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"ERR": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25v2.msh": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QAK": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SQR_S25v2.qak": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"DSC": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SRM_S01_PIDv2.dg1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRM_S01_PIDv2.obx": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRM_S01_PIDv2.pid": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRM_S01_PIDv2.pv1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRM_S01_PIDv2.pv2": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRM_S01_RGS_AIGv2.aig": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AIGv2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AIGv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AILv2.ail": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AILv2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AILv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AIPv2.aip": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AIPv2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AIPv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AISv2.ais": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AISv2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGS_AISv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
	},
	"SRM_S01_RGSv2.rgs": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"NTE": true,
		"RGS": true,
	},
	"SRM_S01v2.apr": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRM_S01v2.arq": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRM_S01v2.msh": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"ARQ": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRM_S01v2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"APR": true,
		"DG1": true,
		"NTE": true,
		"OBX": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRR_S01_PIDv2.dg1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRR_S01_PIDv2.pid": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRR_S01_PIDv2.pv1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRR_S01_PIDv2.pv2": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRR_S01_RGS_AIGv2.aig": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SRR_S01_RGS_AIGv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SRR_S01_RGS_AILv2.ail": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SRR_S01_RGS_AILv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SRR_S01_RGS_AIPv2.aip": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SRR_S01_RGS_AIPv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SRR_S01_RGS_AISv2.ais": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SRR_S01_RGS_AISv2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
	},
	"SRR_S01_RGSv2.rgs": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"NTE": true,
		"RGS": true,
	},
	"SRR_S01v2.err": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"ERR": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SRR_S01v2.msa": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"ERR": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SRR_S01v2.msh": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"ERR": true,
		"MSA": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"SCH": true,
		"TQ1": true,
	},
	"SRR_S01v2.nte": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
	},
	"SRR_S01v2.sch": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SRR_S01v2.tq1": StringSet{
		"AIG": true,
		"AIL": true,
		"AIP": true,
		"AIS": true,
		"DG1": true,
		"NTE": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RGS": true,
		"TQ1": true,
	},
	"SSR_U04_SACv2.sac": StringSet{
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"SSR_U04_SACv2.spm": StringSet{
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"SSR_U04v2.equ": StringSet{
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"SSR_U04v2.msh": StringSet{
		"EQU": true,
		"ROL": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
	},
	"SSR_U04v2.rol": StringSet{},
	"SSR_U04v2.sft": StringSet{
		"EQU": true,
		"ROL": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
	},
	"SSU_U03_SAC_SPMv2.obx": StringSet{
		"OBX": true,
		"ROL": true,
		"SPM": true,
	},
	"SSU_U03_SAC_SPMv2.spm": StringSet{
		"OBX": true,
		"ROL": true,
		"SPM": true,
	},
	"SSU_U03_SACv2.obx": StringSet{
		"OBX": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"SSU_U03_SACv2.sac": StringSet{
		"OBX": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"SSU_U03v2.equ": StringSet{
		"OBX": true,
		"ROL": true,
		"SAC": true,
		"SPM": true,
	},
	"SSU_U03v2.msh": StringSet{
		"EQU": true,
		"OBX": true,
		"ROL": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
	},
	"SSU_U03v2.rol": StringSet{},
	"SSU_U03v2.sft": StringSet{
		"EQU": true,
		"OBX": true,
		"ROL": true,
		"SAC": true,
		"SFT": true,
		"SPM": true,
	},
	"SUR_P09_FAC_FAC2v2.fac": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"SUR_P09_FAC_FAC2v2.nte": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"SUR_P09_FAC_FAC2v2.pdc": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"SUR_P09_FAC_PSH1v2.pdc": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"SUR_P09_FAC_PSH1v2.psh": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"SUR_P09_FACv2.ed": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"SUR_P09_FACv2.fac1": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"SUR_P09_FACv2.psh2": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"SUR_P09v2.msh": StringSet{
		"":    true,
		"FAC": true,
		"NTE": true,
		"PDC": true,
		"PSH": true,
	},
	"TBR_Q01v2.dsc": StringSet{},
	"TBR_Q01v2.err": StringSet{
		"DSC": true,
		"QAK": true,
		"RDF": true,
		"RDT": true,
	},
	"TBR_Q01v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"RDF": true,
		"RDT": true,
	},
	"TBR_Q01v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"RDF": true,
		"RDT": true,
	},
	"TBR_Q01v2.qak": StringSet{
		"DSC": true,
		"RDF": true,
		"RDT": true,
	},
	"TBR_Q01v2.rdf": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"TBR_Q01v2.rdt": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"TBR_R08v2.dsc": StringSet{},
	"TBR_R08v2.err": StringSet{
		"DSC": true,
		"QAK": true,
		"RDF": true,
		"RDT": true,
	},
	"TBR_R08v2.msa": StringSet{
		"DSC": true,
		"ERR": true,
		"QAK": true,
		"RDF": true,
		"RDT": true,
	},
	"TBR_R08v2.msh": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"TBR_R08v2.qak": StringSet{
		"DSC": true,
		"RDF": true,
		"RDT": true,
	},
	"TBR_R08v2.rdf": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"TBR_R08v2.rdt": StringSet{
		"DSC": true,
		"RDT": true,
	},
	"TBR_R08v2.sft": StringSet{
		"DSC": true,
		"ERR": true,
		"MSA": true,
		"QAK": true,
		"RDF": true,
		"RDT": true,
		"SFT": true,
	},
	"TCU_U10_TCCv2.spm": StringSet{
		"ROL": true,
		"SPM": true,
		"TCC": true,
	},
	"TCU_U10_TCCv2.tcc": StringSet{
		"ROL": true,
		"SPM": true,
		"TCC": true,
	},
	"TCU_U10v2.equ": StringSet{
		"ROL": true,
		"SPM": true,
		"TCC": true,
	},
	"TCU_U10v2.msh": StringSet{
		"EQU": true,
		"ROL": true,
		"SFT": true,
		"SPM": true,
		"TCC": true,
	},
	"TCU_U10v2.rol": StringSet{},
	"TCU_U10v2.sft": StringSet{
		"EQU": true,
		"ROL": true,
		"SFT": true,
		"SPM": true,
		"TCC": true,
	},
	"UDM_Q05v2.dsc": StringSet{},
	"UDM_Q05v2.dsp": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"UDM_Q05v2.msh": StringSet{
		"DSC": true,
		"DSP": true,
		"SFT": true,
		"URD": true,
		"URS": true,
	},
	"UDM_Q05v2.sft": StringSet{
		"DSC": true,
		"DSP": true,
		"SFT": true,
		"URD": true,
		"URS": true,
	},
	"UDM_Q05v2.urd": StringSet{
		"DSC": true,
		"DSP": true,
		"URS": true,
	},
	"UDM_Q05v2.urs": StringSet{
		"DSC": true,
		"DSP": true,
	},
	"VQQ_Q01v2.dsc": StringSet{},
	"VQQ_Q01v2.msh": StringSet{
		"DSC": true,
		"RDF": true,
		"VTQ": true,
	},
	"VQQ_Q01v2.rdf": StringSet{
		"DSC": true,
	},
	"VQQ_Q01v2.vtq": StringSet{
		"DSC": true,
		"RDF": true,
	},
	"VQQ_Q07v2.dsc": StringSet{},
	"VQQ_Q07v2.msh": StringSet{
		"DSC": true,
		"RDF": true,
		"SFT": true,
		"VTQ": true,
	},
	"VQQ_Q07v2.rdf": StringSet{
		"DSC": true,
	},
	"VQQ_Q07v2.sft": StringSet{
		"DSC": true,
		"RDF": true,
		"SFT": true,
		"VTQ": true,
	},
	"VQQ_Q07v2.vtq": StringSet{
		"DSC": true,
		"RDF": true,
	},
	"VXQ_V01v2.msh": StringSet{
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"VXQ_V01v2.qrd": StringSet{
		"QRF": true,
	},
	"VXQ_V01v2.qrf": StringSet{},
	"VXQ_V01v2.sft": StringSet{
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"VXR_V03_IN1v2.in1": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_IN1v2.in2": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_IN1v2.in3": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_ORC_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_ORC_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_ORCv2.orc": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_ORCv2.rxa": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03_ORCv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.gt1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.msa": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.msh": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"MSA": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.nk1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.pd1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.pid": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.pv1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.pv2": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.qrd": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QRF": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.qrf": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXR_V03v2.sft": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"QRD": true,
		"QRF": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_IN1v2.in1": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_IN1v2.in2": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_IN1v2.in3": StringSet{
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_ORC_OBXv2.nte": StringSet{
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_ORC_OBXv2.obx": StringSet{
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_ORC_TQ1v2.tq1": StringSet{
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_ORC_TQ1v2.tq2": StringSet{
		"NTE": true,
		"OBX": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_ORCv2.orc": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_ORCv2.rxa": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04_ORCv2.rxr": StringSet{
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04v2.gt1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04v2.msh": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04v2.nk1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04v2.pd1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04v2.pid": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04v2.pv1": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04v2.pv2": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"RXA": true,
		"RXR": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXU_V04v2.sft": StringSet{
		"GT1": true,
		"IN1": true,
		"IN2": true,
		"IN3": true,
		"NK1": true,
		"NTE": true,
		"OBX": true,
		"ORC": true,
		"PD1": true,
		"PID": true,
		"PV1": true,
		"PV2": true,
		"RXA": true,
		"RXR": true,
		"SFT": true,
		"TQ1": true,
		"TQ2": true,
	},
	"VXX_V02_PIDv2.nk1": StringSet{
		"NK1": true,
		"PID": true,
	},
	"VXX_V02_PIDv2.pid": StringSet{
		"NK1": true,
		"PID": true,
	},
	"VXX_V02v2.msa": StringSet{
		"NK1": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"VXX_V02v2.msh": StringSet{
		"MSA": true,
		"NK1": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
	"VXX_V02v2.qrd": StringSet{
		"NK1": true,
		"PID": true,
		"QRF": true,
	},
	"VXX_V02v2.qrf": StringSet{
		"NK1": true,
		"PID": true,
	},
	"VXX_V02v2.sft": StringSet{
		"NK1": true,
		"PID": true,
		"QRD": true,
		"QRF": true,
		"SFT": true,
	},
}

